{"tests":[{"err_mask":"","code":"\"0.0\"+0 ? 1 : 0","out":"0","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"\"0.0\" ? 1 : 0","err_mask":""},{"err_mask":"","code":"0.0 ? 1 : 0","out":"0","err":"","out_mask":"Ã¿"},{"code":"\"0e0\"+\"0e0\" ? 1 : 0","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"code":"\"0e0\" ? 1 : 0","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿","err":"","out":"0","code":"0e0 ? 1 : 0","err_mask":""},{"err_mask":"","code":"0xffff == 0b1111111111111111","out":"1","err":"","out_mask":"Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"1"},{"err_mask":"","code":"\"1\"","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal division by zero at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"1/0","err_mask":""},{"err_mask":"","code":"1.0 == 3.0/2.999999999999999999999999999999999999999999999","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"1.0 == 3.0/3.0","out":"1","err":"","out_mask":"Ã¿"},{"code":"[20+4]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[24]","err":""},{"err":"","out":"OK","out_mask":"Ã¿Ã¿","err_mask":"","code":"BEGIN { package v5::Please; $INC{'v5/Please.pm'} = 1; sub import { print q[OK] } }; use v5::Please;"},{"out_mask":"","err":"","out":"","code":"BEGIN { package v5::Please; $INC{'v5/Please.pm'} = 1; sub import { q[OK] } }; use v5::Please;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{foo => 2}","code":"{foo => 1, foo => 2}","err_mask":""},{"code":"($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9))","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"out_mask":"Ã¿Ã¿Ã¿","out":"NaN","err":"","code":"($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9)); $nan","err_mask":""},{"err_mask":"","code":"($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9)); use List::Util qw/max/; max(1.0, $nan)","err":"","out":"NaN","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9)); use List::Util qw/max/; max($nan, 1.0)","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"30","out_mask":"Ã¿Ã¿","err_mask":"","code":"length \"America/Argentina/Buenos_Aires\""},{"err":"","out":"47","out_mask":"Ã¿Ã¿","err_mask":"","code":"length qq{{\"customer_id\":114631,\"survey_id\":485,\"ttl\":10}};"},{"code":"length \"\\t->alloc called: 12345678 12345678 12345 12345\"","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"46"},{"err_mask":"","code":"my $a = [0]; sub foo {my $b = shift; return \\$b->[0]}; foo $a","out":"\\0","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"my $a = [0]; sub foo {my $b = shift; return \\$b->[0]}; ${foo $a} = 1; $a","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my @a = qw/a 1 b 2 c 3/; ${@a}->{a};","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}->\"\n","code":"my @a = qw/a 1 b 2 c 3/; {@A}->{a}","err_mask":""},{"err_mask":"","code":"my @a = qw/a 1 b 2 c 3/; {+@A}->{a}","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}->\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @a = qw/a 1 b 2 c 3/; ${+@A}{a}","err_mask":"","out_mask":"","err":"","out":""},{"code":"my @a = qw/a 1 b 2 c 3/; my $h = {@a}; $h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{b => 2,c => 3,a => 1}","err":""},{"err_mask":"","code":"my @a = qw/a 1 b 2 c 3/; my $h = {@A}; $h","out":"{}","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"my $b = []; $a = \\$b;  $$a = []; $a = $$a; $a = []; $b","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"err":"","out":"Just another Perl hacker\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my($this)=qw(viogel$pviT$vilxsre$xwyN); my(@arr)=split(//,$this);  foreach(reverse(@arr)){ print(chr(ord($_)-(1<<2))); } print \"\\n\";"},{"err":"","out":"Â","out_mask":"Ã¿Ã¿","err_mask":"","code":"\"\\N{NEL}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã°ÂÂÂ©","code":"\"\\N{PILE OF POO}\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã¢ÂÂ","err":"","code":"\"\\N{SNOWMAN}\"","err_mask":""},{"err":"","out":"pi","out_mask":"Ã¿Ã¿","err_mask":"","code":"pi"},{"out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"","code":"print \"foo\" if (+{});","err_mask":""},{"code":"print \"foo\" if (keys %{+{}});","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"code":"print qÍ¾This is a test;;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"Ã\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"[\"\\\\\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[quotemeta \"\\n\"]"},{"err_mask":"","code":"quotemeta \"\\n\"","out":"\\\n","err":"","out_mask":"Ã¿Ã¿"},{"out":"[\"\\\\\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[quotemeta \"\\n\" =~ s/\\\\\\n/\\n/gr]"},{"err":"","out":"00001101","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%08b\", 015  # dick"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0xffff","err":"","code":"sprintf('0x%x', 0b1111111111111111)","err_mask":""},{"err_mask":"","code":"sprintf \"%8b\", 015","err":"","out":"    1101","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD)}; my $foo = \"boo\"; __PACKAGE__->$foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$VAR1 = [\n          'main'\n        ];\n$VAR2 = 'main::boo';\n","err":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD}; my $foo = \"boo\"; __PACKAGE__->$foo"},{"err_mask":"","code":"sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD)}; my $foo = \"\"; __PACKAGE__->\"\"","out":"ERROR: syntax error at (eval 1) line 1, near \"->\"\"\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD)}; my $foo = \"\"; __PACKAGE__->(\"foo\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$VAR1 = [\n          'foo'\n        ];\n$VAR2 = 'main::main';\n"},{"err_mask":"","code":"sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD)}; my $foo = \"\"; __PACKAGE__->$foo","err":"","out":"$VAR1 = [\n          'main'\n        ];\n$VAR2 = 'main::';\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub AUTOLOAD {Dumper@_}; my $foo = \"boo\"; __PACKAGE__->$foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$VAR1 = 'main';\n","err":""},{"out":"$VAR1 = 'main';\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD {Dumper@_}; my $foo = \"\"; __PACKAGE__->$foo"},{"err_mask":"","code":"use CGI;","out":"ERROR: Can't locate CGI.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use experimental 'signature';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't enable unknown feature signature at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use experimental 'signatures';","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hola hoops hola hoops ","err":"","code":"use experimental 'signatures'; sub foo($bar) {print $bar, $bar}; foo(\"hola hoops \");","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: object is not of type Cpanel::JSON::XS at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use JSON::MaybeXS; JSON->decode(q/{\"foo\": undefined, \"bar\": null}/)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: malformed JSON string, neither tag, array, object, number, string or atom, at character offset 8 (before \"undefined, \"bar\": nu...\") at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use JSON::MaybeXS; JSON->new()->decode(q/{\"foo\": undefined, \"bar\": null}/)","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"use strict; my @foo; my $x = $foo[1];"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my @x; $x['bar'] = 1; [@x]","err":"Argument \"bar\" isn't numeric in array element at (eval 1) line 1, <STDIN> line 1.\n","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Unrecognized character \\x{37e}; marked by <-- HERE after e utf8; *\"<-- HERE near column 103 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; *\"Í¾\" = {\"Hello World\"};"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x{1f62b}; marked by <-- HERE after utf8; my $<-- HERE near column 105 at (eval 1) line 1, <STDIN> line 1.\n","code":"use utf8; my $ð«=\"hi\";","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"Ã\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","code":"use utf8; print qÍ¾This is a test;;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x{37e}; marked by <-- HERE after se utf8; *<-- HERE near column 102 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use utf8; *Í¾ = sub {\"Hello World\"};","err_mask":""},{"out":"ERROR: Illegal declaration of anonymous subroutine at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; sub Í¾ {\"Hello World\"};"},{"err":"","out":"ÃÂ¢ÃÂÃÂ-ÃÂ1 2ÃÂÃÂ³ ÃÂ¢ÃÂÃÂÃÂÃÂ and it was really strange","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"â-\\x{0305}1 2Â³ âÏ and it was really strange\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ÃÂ¢ÃÂÃÂ-ÃÂ1ÃÂ 2ÃÂÃÂ³ ÃÂ¢ÃÂÃÂÃÂÃÂ and it was really strange","code":"\"â-\\x{0305}1\\x{0305} 2Â³ âÏ and it was really strange\"","err_mask":""},{"err_mask":"","code":"\"â-\\x{035E}1 2Â³ âÏ and it was really strange\"","err":"","out":"ÃÂ¢ÃÂÃÂ-ÃÂ1 2ÃÂÃÂ³ ÃÂ¢ÃÂÃÂÃÂÃÂ and it was really strange","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"â-\\x035E1 2Â³ âÏ and it was really strange\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã¢ÂÂ-\u00035E1 2ÃÂ³ Ã¢ÂÂÃÂ and it was really strange","err":""},{"err_mask":"","code":"\"â-\\x{203E}1 2Â³ âÏ and it was really strange\"","err":"","out":"ÃÂ¢ÃÂÃÂ-Ã¢ÂÂ¾1 2ÃÂÃÂ³ ÃÂ¢ÃÂÃÂÃÂÃÂ and it was really strange","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ÃÂ¢ÃÂÃÂÃ¢ÂÂÃÂ1ÃÂ 2ÃÂÃÂ³ ÃÂ¢ÃÂÃÂÃÂÃÂ and it was really strange","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"â\\x{2212}\\x{0305}1\\x{0305} 2Â³ âÏ and it was really strange\""},{"err_mask":"","code":"\"\\x85\"","out":"Â","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"18446744073709551615","code":"~-~()","err_mask":""},{"err_mask":"","code":" [ \"(\" =~ /[(]/ ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":" [ \"]\" =~ /[\\]]/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"err_mask":"","code":"- - _","out":"+_","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿","out":"+","err":"","code":"- '-'","err_mask":""},{"err_mask":"","code":"-(''.{})","err":"","out":"-HASH(0x505fb88)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"code":"-{}","err_mask":"","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err":"","out":"-83852168"},{"code":";;","err_mask":"","out_mask":"","err":"","out":""},{"code":":)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"; :\"\n","err":""},{"code":"?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"; ?\"\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"; ?\"\n","err":"","code":"?^?","err_mask":""},{"err_mask":"","code":"/^+/","out":"1","err":"","out_mask":"Ã¿"},{"code":"/[^]]/","err_mask":"","out_mask":"","out":"","err":""},{"out":"ERROR: Unmatched [ in regex; marked by <-- HERE in m/[ <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"/[/"},{"out_mask":"Ã¿","err":"","out":"1","code":"/${#}/","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"; /$#/\"\n","err":"","code":"/$#/","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"; /$#/\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"/$#//"},{"err":"","out":"ERROR: Quantifier follows nothing in regex; marked by <-- HERE in m/* <-- HERE */ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"/**/"},{"err":"","out":"ERROR: Unimplemented at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"..."},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"^\\/\\/","err":"","code":"'^\\/\\/'","err_mask":""},{"code":"'=' =~ /=/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"","err":"","out":"","code":"''","err_mask":""},{"code":"''.[]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","out":"ARRAY(0x3c31b88)","err":""},{"out_mask":"Ã¿","err":"","out":"d","code":"'@' ^ '$'","err_mask":""},{"out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\""},{"err_mask":"","code":"\"'\" =~ /'/","out":"1","err":"","out_mask":"Ã¿"},{"code":"\"\" . \\ \"\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","out":"SCALAR(0x373cb80)","err":""},{"err":"","out":"SCALAR(0x4a39378)SCALAR(0x3d64938)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\" . \\ \"\" . \\ \"\""},{"code":"\"\" . \\\\ \"\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","out":"REF(0x3971b88)","err":""},{"err":"","out":"ERROR: Undefined subroutine &main:: called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\"->()"},{"err_mask":"","code":"\"[\" =~ /[[]/","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"","out":"","err":"","code":"\"$_\"","err_mask":""},{"code":"\"$( $)\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"65534 65534 65534 65534"},{"err_mask":"","code":"\"${}\"","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"${}\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"\\\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"[","err":"","out_mask":"Ã¿","err_mask":"","code":"\"\\[\""},{"err_mask":"","code":"\"â\"","err":"","out":"Ã¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã£ÂÂ»Ã£ÂÂ","err":"","code":"\"ã»ã\"","err_mask":""},{"code":"();","err_mask":"","out_mask":"","err":"","out":""},{"code":"[~~( )]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]"},{"err_mask":"","code":"[ !() ]","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ @_ ]","err":"","out":"[\"[ \\@_ ]\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ $| ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after tures/; [ <-- HERE near column 93 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"[ â´ ]","err_mask":""},{"err_mask":"","code":"['","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"['']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"code":"[\"\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[]","err_mask":""},{"err_mask":"","code":"[] == []","out":"","err":"","out_mask":""},{"err":"","out":"-1","out_mask":"Ã¿Ã¿","err_mask":"","code":"[]->$#*"},{"err_mask":"","code":"[{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',]","out":"[\"HASH(0x447db88)\",\"HASH(0x4164a08)\",\"HASH(0x44b0228)\",\"HASH(0x41c9ba0)\",\"HASH(0x3ef9638)\",\"HASH(0x3f8b848)\",\"HASH(0x41caea0)\",\"HASH(0x441ef70)\",\"HASH(0x38d5130)\",\"HASH(0x3dbd4a0)\",\"HASH(0x4661c58)\",\"HASH(0x3e71cc8)\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"[\\@_]\"]","code":"[@_]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,0,1,0]","code":"[$|--, $|--, $|--, $|--]","err_mask":""},{"out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[$_]"},{"err_mask":"","code":"[$,, $;]","err":"","out":"[undef,\"\\34\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\34\"]","err":"","code":"[$;]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\" \"]","err":"","code":"[$\"]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":"","code":"[$[]","err_mask":""},{"err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[$@]"},{"err_mask":"","code":"[++$|, ++$|, --$|, --$|]","err":"","out":"[1,1,1,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,1]","code":"[++$|, ++$|]","err_mask":""},{"code":"[++$|; ++$|]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"$|]\"\n"},{"err_mask":"","code":"{;} + {}","err":"","out":"{}","out_mask":"Ã¿Ã¿"},{"code":"{} {}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} {\"\n"},{"code":"{} + {}","err_mask":"","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","out":"134268304","err":""},{"err_mask":"","code":"@_","err":"","out":"1","out_mask":"Ã¿"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"@{ [] } // []"},{"out_mask":"Ã¿","out":"0","err":"","code":"@{[]}=()","err_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"@#"},{"out_mask":"","out":"","err":"","code":"@#{ [] }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"$","err_mask":""},{"out_mask":"Ã¿","out":"\u001c","err":"","code":"$^_^$;;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$_ = '","err_mask":""},{"code":"$;","err_mask":"","out_mask":"Ã¿","err":"","out":"\u001c"},{"err":"","out":"Too many open files","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$!"},{"code":"$!->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::Too many open files called at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"$?"},{"out_mask":"Ã¿","out":" ","err":"","code":"$\"","err_mask":""},{"code":"$\";","err_mask":"","out_mask":"Ã¿","out":" ","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$[++","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"$@"},{"err_mask":"","code":"$$","err":"","out":"16781","out_mask":"Ã¿Ã¿Ã¿Ã¿\u0000"},{"err_mask":"","code":"$#","err":"","out":"","out_mask":""},{"code":"$%","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"err_mask":"","code":"*_","err":"","out":"*main::_","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"*main::","err":"","code":"*{\"\"}","err_mask":""},{"err_mask":"","code":"*{}","out":"ERROR: syntax error at (eval 1) line 1, near \"*{\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\\[]->[[]]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Out of memory!\n"},{"code":"\\{}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"\\{}"},{"out":"[\"\\\\\\@_\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\\@_"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"\\@.","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\undef","err":"","code":"\\$_","err_mask":""},{"err_mask":"","code":"â","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after natures/; <-- HERE near column 91 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"~0","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"18446744073709551615"},{"code":"!0","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"","out":"","err":"","code":"!!0","err_mask":""},{"out_mask":"Ã¿","err":"","out":"\u0000","code":"\"\\0\"","err_mask":""},{"code":"[~~\"0\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]"},{"err_mask":"","code":"[~0]","err":"","out":"['18446744073709551615']","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ !!0 ]"},{"err":"","out":"[\"HASH(0x475cb88)\",71580168]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err_mask":"","code":"[ \"\".{}, 0+{} ]"},{"err_mask":"","code":"[ \"\"{}, 0+{} ]","out":"ERROR: syntax error at (eval 1) line 1, near \"\"\"{\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ 0 + 'â´' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[24,\"Too many open files\"]","err":"","code":"[ 0 + $!, \"$!\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"[!!\"0\"]","err_mask":""},{"out":"[0,1,2,3,4,5,6,7,8,9]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"['0' .. ':']"},{"err_mask":"","code":"[\"\\0\"]","err":"","out":"[\"\\0\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000Ã¿\u0000","out":"77720456","err":"","code":"[] + 0","err_mask":""},{"code":"[]+0","err_mask":"","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err":"","out":"79985544"},{"err_mask":"","code":"$0","err":"","out":"/home/ryan/bots/perlbuut/lib/eval.pl","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = '0'; $_++; $_","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$_[0]","code":"$_[0]","err_mask":""},{"err_mask":"","code":"\\0","out":"\\0","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"0!","out":"ERROR: syntax error at (eval 1) line 1, near \"0!\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"0+[]","err_mask":"","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","out":"61393800","err":""},{"out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","out":"83499912","err":"","code":"0+{}","err_mask":""},{"code":"!!'0.0'","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"\"\" . \\ 0 . \\ 0","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"SCALAR(0x4203b40)SCALAR(0x3e9b2c8)"},{"out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ (!!0) + 0 ]"},{"code":"[(0 ** 0)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"out_mask":"","err":"","out":"","code":"$0->[0]","err_mask":""},{"out_mask":"Ã¿","out":"0","err":"","code":"0 ^ 0","err_mask":""},{"code":"0 == 0","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err":"","out":"","out_mask":"","err_mask":"","code":"0->[0]"},{"code":"0/0","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Illegal division by zero at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"0**0","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xC2; marked by <-- HERE after ures/; 0+ <-- HERE near column 94 at (eval 1) line 1, <STDIN> line 1.\n","code":"0+ Â½","err_mask":""},{"err_mask":"","code":"0+'Â½'","err":"","out":"0","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"001","err":"","code":"$_ = '000'; $_++; $_","err_mask":""},{"out_mask":"Ã¿","err":"","out":"0","code":"&{0 == &{0 == 0}} * 0","err_mask":""},{"err_mask":"","code":"\"000000\" && \"foo\";","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0.0002\"]","err":"","code":"[ 0.00_02 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":"","code":"[\"0.00_02\" + 0]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"00:02:02:05:6D:4C","err":"","code":"'000202056D4C' =~ s/..\\K\\B/:/gr","err_mask":""},{"code":"0+!! 0==1","err_mask":"","out_mask":"","out":"","err":""},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"(001234 ^ 01234) =~ /(^\\0*)/; length $1"},{"out_mask":"Ã¿","out":"0","err":"","code":"0+!!(0==1) # what I probably meant","err_mask":""},{"err_mask":"","code":"'008' == 8","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"['18446744073709551615',\"18,446,744,073,709,551,615\"]","err":"","code":"[ ~0, ~0 =~ s/(?=(\\d{3})+$)/,/gr ]","err_mask":""},{"out":"true","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"00\" ? \"true\" : \"false\";"},{"code":"$_ = \"\\0\\0\"; vec($_, 7, 1)=1; [unpack \"s>\", $_]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[-32768]"},{"err_mask":"","code":"[ 0 & 0xFF, 0 >> 8 & 0xFF ]","err":"","out":"[0,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1.84467440737096e+19","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"~0 + 1"},{"err_mask":"","code":"\"0\" | \"1\"","err":"","out":"1","out_mask":"Ã¿"},{"code":"[0,1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1]"},{"err_mask":"","code":"$_ = '0.1'; $_++; $_","err":"","out":"1.1","out_mask":"Ã¿Ã¿Ã¿"},{"code":"0/1","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"err_mask":"","code":"~0 + 1 > ~0","err":"","out":"","out_mask":""},{"code":"[0?1:0,0e0?1:0]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,0]","err":""},{"err":"","out":"[0,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[0?1:0,0E0?1:0]"},{"err_mask":"","code":"[0, '1'] ~~ [0, 1]","err":"","out":"1","out_mask":"Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"\"010\" ~~ [ 10 ]"},{"err":"","out":"[\"0.3\",\"n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 0.1 + 0.2, ((0.1 + 0.2) == 0.3) ? 'y' : 'n' ] #weird"},{"out_mask":"Ã¿","err":"","out":"6","code":"((\"010\"+2)/(010+2))*5","err_mask":""},{"err_mask":"","code":"0.1 + 0.2 - 0.3","err":"","out":"5.55111512312578e-17","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"~0 + 1 == ~0 ? 64 : 32","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"64"},{"code":"0 + \"1+1\"","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"[ \"01101000 01100101 01101100 01110000\" =~ /\\d+/g ]; ### ZoffixWeb, why does it return an array when \\d+ isn't in a capture group?","err":"","out":"[\"01101000\",\"01100101\",\"01101100\",\"01110000\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"\"011112233\" =~ /^0[0-9]*\\s*\\z/"},{"err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"01.23"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"greater or equal","code":"01.23 >= 2.34 ? \"greater or equal\" : \"nope\"","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"\"0123456\" ~~ 123_456","err_mask":""},{"err_mask":"","code":"'01234567891b' =~ s/(..)(?!$)/$1:/gr","out":"01:23:45:67:89:1b","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'01234567891b' =~ s/..\\K\\B/:/gr","err":"","out":"01:23:45:67:89:1b","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ \"-0123456789abcdefghi\" =~ /[[:xdigit:]]/g ]","err":"","out":"[0,1,2,3,4,5,6,7,8,9,\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = \"\\0\\1\\2\"; s/([\\x00-\\x1f])/\"\\x{2400}\" | $1/eg; $_","err":"","out":"Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = \"\\0\\1\\2\"; s/([\\x00-\\x1f])/\"\\x{2400}\" | $1/eg; \\$_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\\"\\x{2400}\\x{2401}\\x{2402}\""},{"code":"\"0\" | \"1.5\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"1.5"},{"code":"[ 0 .. 15 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]","err":""},{"err":"","out":"[\"1.5\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"0\" | \"1.5\"]"},{"out_mask":"Ã¿","err":"","out":"0","code":"(0)*150","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"1023","code":"01777","err_mask":""},{"out":"ERROR: Unrecognized character \\xC2; marked by <-- HERE after tures/; [ <-- HERE near column 93 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ Â¡!0, Â¡!1 ] # this might not \"work\", for example"},{"err_mask":"","code":"~0 + 2","err":"","out":"1.84467440737096e+19","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"2","err":"","code":"$#{[0..2]}","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"~0 * 2 > ~0"},{"code":"02/03/04","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.166666666666667"},{"out":"[5,10,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[@{[0 .. 20]}[5,10,3]]"},{"err":"","out":"[17,15,13,11,9,\"Illegal octal digit '9' at (eval 1) line 1, at end of line\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 021, 017, 015, 013, 011, eval \"09\" || $@ ]"},{"out_mask":"Ã¿Ã¿","err":"","out":"21","code":"025","err_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"0 % -3"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[194,173]","code":"[ 0302, 0255 ]","err_mask":""},{"err_mask":"","code":"031","err":"","out":"25","out_mask":"Ã¿Ã¿"},{"code":"[0320, 0230]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[208,152]"},{"out_mask":"Ã¿","err":"","out":"\u001c","code":"\"\\034\"","err_mask":""},{"out":"255","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"0377"},{"code":"'03' lt '7'","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"[0 .. 4]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1,2,3,4]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[42]","err":"","code":"[ 0 || 42 ]","err_mask":""},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"0 // 42"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"292","code":"0444","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.45","code":"0.45","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"0.5\",\"05\",\"05\"]","code":"[ 0.5, 0 .5, 0 . 5 ]","err_mask":""},{"err_mask":"","code":"[ 0.5, 0. 5, 0 .5, 0 . 5 ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"0. 5\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[0.6 + 0.04, 0.64 + 0.04, 0.68 + 0.04]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0.64\",\"0.68\",\"0.72\"]","err":""},{"code":"0734","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"476"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"!! \"0/8\""},{"code":"0+'    9'","err_mask":"","out_mask":"Ã¿","out":"9","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.99999999999929","code":"0.99999999999929","err_mask":""},{"code":"0.9999999999999","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.9999999999999"},{"code":"0.99999999999999","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.99999999999999","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.99999999999999","code":"0.9999999999999901","err_mask":""},{"code":"0.9999999999999901 > 0.99999999999999","err_mask":"","out_mask":"","out":"","err":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"0.9999999999999902 > 0.99999999999999"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"0.9999999999999919 > 0.9999999999999918"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.999999999999992562","err":"","code":"$_ = \"0.9999999999999926\"; sprintf '%.*f', length, $_","err_mask":""},{"err":"","out":"0.999999999999992784","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"0.9999999999999927\"; sprintf '%.*f', length, $_"},{"code":"[ 0.999999999999999 == 1, 0.9999999999999999 == 1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",1]"},{"err":"","out":"402","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"0b1_10010010"},{"code":"0b111 >> 1","err_mask":"","out_mask":"Ã¿","out":"3","err":""},{"err_mask":"","code":"0b11111","out":"31","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[31,25]","code":"[ 0b11111, oct(\"31\") ]","err_mask":""},{"code":"0bPortalMeme","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"0bPortalMeme\n\"\n","err":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"\"0 but true\" + 1"},{"code":"'0 but true' ? 'true' : 'false'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"true"},{"err_mask":"","code":"'0BZMNDSFZNQOBNDOFGSN1SFZ!' =~ tr/\\\"-;N-ZA-M/A-Z a-z/r","err":"","out":"Only perl can parse Perl!","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"'0BZMNDSFZNQOBNDOFGSN1SFZ!' =~ tr/\\\"-;N-ZA-M/A-Z a-z/r;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Only perl can parse Perl!","err":""},{"err_mask":"","code":"0E0 eq 0","err":"","out":"1","out_mask":"Ã¿"},{"out":"true","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'0e0' ? 'true' : 'false'"},{"err_mask":"","code":"\"0e0\" ? \"true\" : \"false\"","err":"","out":"true","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"0e0 ? 'true' :'false'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"false","err":""},{"code":"0e0 ? \"true\" : \"false\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"false"},{"err_mask":"","code":"'0' && 'foo'","err":"","out":"0","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"0","code":"0 if 1","err_mask":""},{"err_mask":"","code":"0=~m{}=~y///d","out":"0","err":"","out_mask":"Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"0o734\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"0o734"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"{]\"\nUnmatched right curly bracket at (eval 1) line 1, at end of line\nUnmatched right curly bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","err":"","code":"0;qq{@{sub{]]}}}}}","err_mask":""},{"out":"[\"T\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"\\0\" ? \"T\" : \"F\"]"},{"err_mask":"","code":"[ 0?'t':'f', 00?'t':'f' ]","out":"[\"f\",\"f\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ 0 == true ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"false","code":"0 ? 'true' : 'false'","err_mask":""},{"err_mask":"","code":"[ (0 == true) ? \"true\" : \"false ];","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ (0 == true) ? \"true\" : \"false\" ];","out":"[\"true\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"\"0\" == undef","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"\",\"\"]","err":"","code":"[ !!0, !!\"\", !!undef ]","err_mask":""},{"err_mask":"","code":"$_[ ~0 ] = undef","err":"","out":"","out_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"0 == undef","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,1,1,1]","code":"[ !0, !'', !undef, !'0' ]","err_mask":""},{"err_mask":"","code":"'<0x000D>' =~ s/<0x(....)>/\"\\N{U+$1}\"/er","out":"ERROR: Invalid hexadecimal number in \\N{U+...} at (eval 1) line 1, within string\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"\r","err":"","code":"\"<0x000D>\" =~ s/<(0x[[:xdigit:]]{4})>/chr hex $1/ger","err_mask":""},{"out":"4","err":"","out_mask":"Ã¿","err_mask":"","code":"\"<0x0034>\" =~ s/<(0x[[:xdigit:]]{4})>/chr hex $1/ger"},{"err_mask":"","code":"0x00FF","out":"255","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"0x011b;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"283"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"0x03 & 0x07f"},{"out_mask":"","err":"","out":"","code":"0x0x0x0","err_mask":""},{"code":"\"0x10\" + 0","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"out":"[1114112,1114112]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[0x110000, 2**20 + 2**16]"},{"out":"123","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"0x1.23"},{"code":"0x123abc","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1194684"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.13671875","err":"","code":"0x1.23p0","err_mask":""},{"err_mask":"","code":"0x1252","out":"4690","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"0x173","err":"","out":"371","out_mask":"Ã¿Ã¿Ã¿"},{"code":"[0x173, unpack(\"n\", \"\\x01\\x73\"), unpack(\"v\", \"\\x73\\x01\")]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[371,371,371]"},{"err_mask":"","code":"[0x18, 0x12]","out":"[24,18]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"26","err":"","code":"0x1a","err_mask":""},{"code":"0x1p-10","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.0009765625","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Invalid hexadecimal number in \\N{U+...} at (eval 1) line 1, within string\n","code":"'<0x2004>' =~ s/<0x(....)>/\"\\N{U+$1}\"/er","err_mask":""},{"err_mask":"","code":"0x33 & 0x7f","out":"51","err":"","out_mask":"Ã¿Ã¿"},{"err":"","out":"945","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"0x3b1"},{"out_mask":"Ã¿","out":"4","err":"","code":"0x4","err_mask":""},{"err_mask":"","code":"0x4000","out":"16384","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0x4000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"0x4000\""},{"err_mask":"","code":"0x41","err":"","out":"65","out_mask":"Ã¿Ã¿"},{"code":"0x4x0","err_mask":"","out_mask":"","err":"","out":""},{"code":"0x61 & 0x31","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"33"},{"out":"[29184,7471104]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[0x7200, 0x720000]"},{"out_mask":"Ã¿Ã¿","out":"64","err":"","code":"0xC0 & 0x7f","err_mask":""},{"err_mask":"","code":"[0xc3, 0xa8]","out":"[195,168]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"0xcfedde","err":"","out":"13626846","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"13626846","code":"0xCFEDDE","err_mask":""},{"err_mask":"","code":"0xDFEDDE","out":"14675422","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"255","err":"","code":"0xFF","err_mask":""},{"err_mask":"","code":"0xFF & 0x07F","out":"127","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"0xffff**3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"281462092005375","err":""},{"err_mask":"","code":"0 xor 0","out":"","err":"","out_mask":""},{"code":"[ [0 xor 0], [1 xor 0], [0 xor 1], [1 xor 1] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"\"],[1],[1],[\"\"]]","err":""},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ 0 xor 0, 1 xor 0, 0 xor 1, 1 xor 1 ]"},{"code":"0 xor 1","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"0xpink_mist\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"0xpink_mist"},{"code":"!0=~y///d","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"err_mask":"","code":"1","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"18446744073709551614","err":"","code":"~1","err_mask":""},{"err_mask":"","code":"/(?(1)/","out":"ERROR: Switch (?(condition)... not terminated in regex; marked by <-- HERE in m/(?(1) <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"SCALAR(0x31f0b40)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'' . \\1"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"\"1\""},{"code":"[] != -1","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"$ = 1; ++$","out":"ERROR: syntax error at (eval 1) line 1, near \"$ = 1\"\nsyntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$[ = 1"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"1;"},{"code":"1++","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in postincrement (++) at (eval 1) line 1, near \"1++\"\n","err":""},{"code":"10","err_mask":"","out_mask":"Ã¿Ã¿","out":"10","err":""},{"out":"18446744073709551614","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"-1%~0"},{"code":"'1' ^ '0'","err_mask":"","out_mask":"Ã¿","err":"","out":"\u0001"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Illegal division by zero at (eval 1) line 1, <STDIN> line 1.\n","code":"1/0","err_mask":""},{"err_mask":"","code":"[ '1' + 0 ^ '0' ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"100.","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"100","err":""},{"code":"100/0.0000003","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"333333333.333333","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1000000000","code":"100 * 10000000","err_mask":""},{"code":"100./ 100./5","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"0.2"},{"code":"100. / 4","err_mask":"","out_mask":"Ã¿Ã¿","out":"25","err":""},{"out":"3.16227766016838","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"10 ** 0.5"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"[ \"100.5\" =~ /([-+]?\\d+)(\\.\\d+)?\\s*(g|mg)/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[100,\".5\",\"g\"]","err":"","code":"[ \"100.5 g\" =~ /([-+]?\\d+)(\\.\\d+)?\\s*(g|mg)/ ]","err_mask":""},{"err_mask":"","code":"\"100.5 g\" =~ /([-+]?\\d+)(\\.\\d+)?\\s*(g|mg)/; [$1, $2, $3]","out":"[100,\".5\",\"g\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ !1, !0, !1+0]","out":"[\"\",1,0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ \"1.0\" != 1.0, \"1.0\" ne 1.0 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",1]","err":""},{"code":"10.123","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"10.123","err":""},{"code":"101.97.114","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"ear"},{"err_mask":"","code":"102.0.114.0.111.0.109","err":"","out":"f\u0000r\u0000o\u0000m","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"1.0/2 + 1/4 + 1/8 + 2/16","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"1024 >> 6","err_mask":"","out_mask":"Ã¿Ã¿","out":"16","err":""},{"out_mask":"Ã¿","out":"1","err":"","code":"1.0 == 3.0/2.9999999999999999999999999999999999","err_mask":""},{"out_mask":"Ã¿","err":"","out":"5","code":"(1 == 0) + 5","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.42857142857143","code":"10/7","err_mask":""},{"code":"1 - 0.99999999999903","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"9.70001856614999e-13"},{"code":"10e30","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1e+31"},{"code":"10^length q|*******|","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"13"},{"code":"$. = 10; my ($what_you_think, $what_it_is) = ($.++,$.); [ $what_you_think, $what_it_is ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[10,11]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"NaN","code":"1/(0*nan/nan)","err_mask":""},{"err_mask":"","code":"'10%s' % 2","out":"0","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"'10%s' % 3","err_mask":""},{"err":"","out":"11","out_mask":"Ã¿Ã¿","err_mask":"","code":"$. = 10; scalar($.++,$.)"},{"err_mask":"","code":"$. = 10; [ [ $.++, scalar(10..15) ], [ $.++, scalar(10..15) ], [ $.++, scalar(10..15) ], [ $.++, scalar(10..15) ], [ $.++, scalar(10..15) ], [ $.++, scalar(10..15) ] ];","out":"[[10,\"\"],[11,\"\"],[12,\"\"],[13,\"\"],[14,\"\"],[15,\"\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$. = 10; [ [ scalar(10..15), $.++ ], [ scalar(10..15), $.++ ], [ scalar(10..15), $.++ ], [ scalar(10..15), $.++ ], [ scalar(10..15), $.++ ], [ scalar(10..15), $.++ ] ]","err":"","out":"[[1,10],[\"\",11],[\"\",12],[\"\",13],[\"\",14],[\"\",15]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"10 11 12 13 14 15 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$. = 10; while (10..15) { print \"$. \"; $.++ }"},{"err_mask":"","code":"$. = 10; while (10..20) { print \"$. \"; $.++ }","err":"","out":"10 11 12 13 14 15 16 17 18 19 20 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"9223372036854775807","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"-1 >> 1"},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ 1 == \"1\" ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1.1\"]","err":"","code":"[1.1]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$1$1\n\"\n","code":"$1$1","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"1 ~~ '1'","err_mask":""},{"out_mask":"Ã¿","out":"2","err":"","code":"1+1","err_mask":""},{"err_mask":"","code":"1+'1'","err":"","out":"2","out_mask":"Ã¿"},{"err_mask":"","code":"[ (!!1) . '', (!!1) + 0 ]","out":"[1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[() = (1..10)]","err_mask":""},{"out":"[1,2,3,4,5,6,7,8,9,10]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[1 .. 10]"},{"code":"1/11","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.0909090909090909","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,1,1,0]","code":"[ 1 | 1, 1 | 0, 0 | 1, 0 | 0 ]","err_mask":""},{"code":"\"111\" >> 1","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"55"},{"err":"","out":"[[5,1,1],[4,2,1],[4,1,2],[3,3,1],[3,2,2],[3,1,3],[2,4,1],[2,3,2],[2,2,3],[2,1,4],[1,5,1],[1,4,2],[1,3,3],[1,2,4],[1,1,5]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"1111111 =~ /^(1{1,10})(1{1,10})(1{1,10})$(?{ push @comb, [$1, $2, $3] })(?!)/; [map [map length, @$_], @comb]"},{"out_mask":"Ã¿Ã¿","out":"27","err":"","code":"\"111\" >> 2","err_mask":""},{"out":"[1,1,1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ (1,1,(),((1,2),,,,,,,3)) ]"},{"err_mask":"","code":"11/13","out":"0.846153846153846","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0.733333333333333","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"11/15;"},{"code":"\"111\" << 8","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"28416","err":""},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"\"111\" >> 8"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[2,4,6]","err":"","code":"[ 1 << 1, 2 << 1, 3 << 1 ]","err_mask":""},{"code":"\"1122\" =~ s/\\d\\d(\\d\\d)??//r #let's try","err_mask":"","out_mask":"Ã¿Ã¿","out":"22","err":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"\"1122\" =~ s/\\d\\d(\\d\\d)?//r #no, it's greedy, Iota"},{"err_mask":"","code":"$[ = -1; (1, 2, 3)[-2]","out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"127","code":"-1 & 127 # piko` - at a guess you're just getting this, and perldoc -f system covers it","err_mask":""},{"err":"","out":"dogs","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ 1+1 => 2, cats => 'dogs' }"},{"err_mask":"","code":"+{ 1+1 => 2, cats => 'dogs' }","out":"{cats => \"dogs\",2 => 2}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"1/1.3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.769230769230769","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"1.14","err":"","code":"1.139999999999999","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"16384","code":"1 << 14","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"'11' lt '7'"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[-1 .. -2]","err_mask":""},{"err_mask":"","code":"[1,,,,,,2,,,,,,,]","out":"[1,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"1 + 2","err_mask":"","out_mask":"Ã¿","out":"3","err":""},{"err_mask":"","code":"1+2","err":"","out":"3","out_mask":"Ã¿"},{"err":"","out":"{1 => [21]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ 1 => [21] }"},{"code":"1/2 + 1/4 + 1/8 + 2/16","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"1./2 + 1/4 + 1/8 + 2/16","out":"1","err":"","out_mask":"Ã¿"},{"out":"match","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'12' =~ /1\\B2/ ? 'match' : 'nope'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[-1,0,1]","err":"","code":"[1<=>2, 2<=>2, 3<=>2]","err_mask":""},{"err":"","out":"[1,22,333,4]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"1.22.333.4\" =~ /\\d+/g ]"},{"code":"~~1.23","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":".1 + .2 - .3","out":"5.55111512312578e-17","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"5.55111512312578e-17","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":".1+.2-.3"},{"code":"(.1 + .2 == .3)","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"(1, 2, 3)"},{"out_mask":"Ã¿","err":"","out":"1","code":"(1+2==3)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"[ ,\"\n","code":"[ , 1 , 2 , 3 ]","err_mask":""},{"err":"","out":"[\\1,\\2,\\3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \\(1, 2, 3) ]"},{"code":"[ 1.2.3 . \"\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\1\\2\\3\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"123","code":"\"123\" & 0x00FF;","err_mask":""},{"code":"[ %{[ 1, 2, 3 ]}[ 1,2 ] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,2,3]"},{"err_mask":"","code":"123 == '123abc  '","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"(1,2,3)[1.5]","out":"2","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"1.2.3.19\"]","code":"[ \"1.2.3.192/26\" =~ /((?:\\d{1,3}\\.){3}\\d{1,3})(?!\\/)/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unmatched ) in regex; marked by <-- HERE in m/((?:\\d{1,3}\\.){3}\\d{1,3})(?!/)) <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","code":"[ \"1.2.3.192/26\" =~ /((?:\\d{1,3}\\.){3}\\d{1,3})(?!\\/))/ ]","err_mask":""},{"err_mask":"","code":"[ \"1.2.3.192/26\" =~ ((?:\\d{1,3}\\.){3}\\d{1,3})(?!\\/) ]","err":"","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"1 2\"\n","code":"\"@{[1 2 3 4]}\"","err_mask":""},{"code":"\"@{[1, 2, 3, 4]}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1 2 3 4","err":""},{"out":"34","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"'12341234' =~ /.*(3.*)/; $1"},{"code":"\"123.45670000000\" + 0","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"123.4567","err":""},{"err_mask":"","code":"\"123.45670000000\"\" + 0","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"\" 1234567 \" =~ / [0-9]{7} /;","err_mask":""},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"1234567\"; /.{5,}/; [$1]"},{"err_mask":"","code":"$_ = \"1234567\"; /(.){5,}/; [$1]","out":"[7]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"$_ = \"1234567\"; /(.{5,})/; [$1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1234567]"},{"out_mask":"","out":"","err":"","code":"\" 12345678 \" =~ / [0-9]{7} /;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"123,456,789,012,","code":"123456789012 =~ s/(\\d\\d\\d)/$1,/gr","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[123,456,789,0]","err":"","code":"[ '1234567890' =~ /.{1,3}/g ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"123,456,789,0","code":"1234567890 =~ s/(\\d\\d\\d)/$1,/gr","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Nested quantifiers in regex; marked by <-- HERE in m/(\\d+{ <-- HERE 4})/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"[ \"12345678\" =~ m/(\\d+{4})/g ]","err_mask":""},{"code":"[ \"1234 5678\" =~ m/(\\d+)/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1234,5678]"},{"err_mask":"","code":"[ \"12345678\" =~ m/(\\d+)/g ]","err":"","out":"[12345678]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"123,456,7","err":"","code":"$_=\"1234567\"; s/(\\d\\d\\d)/$1,/g; $_","err_mask":""},{"err":"","out":"[1,2,3,4,5,6]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[(1,2), (3,4), (5,6)] # Not what you think it will be, petrutrimbitas"},{"err":"","out":"214365","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"123456\" =~ s/../reverse $&/ger"},{"code":"$_ = \"123.456str789; $_++; $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"$_ = \"123.456str789\"; $_++; $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"124.456","err":""},{"err_mask":"","code":"\"1/2/3/4/5\" =~ s{^.*/(?=[^/])}{}","err":"","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"001.2345","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"1.2345 =~ /^([^.])(\\..*)?/ && sprintf( q{%03d}, $1 ). ( $2 // q{} ); ### leobut"},{"err_mask":"","code":"\"1/2/3/4/5/\" =~ s{^.*/(?=[^/]$)}{}r","out":"1/2/3/4/5/","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"1/2/3/4/5\" =~ s{^.*/(?=[^/])}{}r","out":"5","err":"","out_mask":"Ã¿"},{"code":"\"1/2/3/4/5\" =~ s{^.*/(?=[^/]$)}{}r","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"out":"1234","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"1234abc\"+0"},{"code":"'+1234' =~ m/^+/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"'+1234' =~ s/^+//","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"+1234","code":"'+1234' =~ s/^+//r","err_mask":""},{"out":"[\"1234x\",123]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"1234x 123y\" =~ /\\d*(?:[02468]\\D|[13579])/g ]"},{"code":"[\"1234x 123y\" =~ m{((?>\\d+)(?(?{$1 % 2 == 0}).))}g]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"1234x\",\"123y\"]"},{"code":"[\"1234x 123y\" =~ m{((?>(\\d+))(?(?{$2 % 2 == 0}).))}g]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1234x\",1234,123,123]","err":""},{"err_mask":"","code":"12351","out":"12351","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ \"123 5 12 7 \" =~ /(\\d+)\\s*/g ] # or just numbers?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[123,5,12,7]","err":""},{"code":"[ \"123 5 12 7 \" =~ m/(?<num>\\d+)(?<space>\\s*)/g ]; \\%+","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"{}"},{"out":"{space => \" \",num => 7}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"123 5 12 7 \" =~ m/(?<num>\\d+)(?<space>\\s*)/g ]; +{ %+ } # scope, I think?"},{"code":"\"123abc\" + 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"124","err":""},{"code":"$_ = \"123AG3GCAT422TG3\"; [/([:alpha:]+)/]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"code":"$_ = \"123AG3GCAT422TG3\"; [/([[:alpha:]]+)/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"AG\"]"},{"err_mask":"","code":"$_ = \"123AG3GCAT422TG3\"; [/([[:alpha:]]+)/g]","out":"[\"AG\",\"GCAT\",\"TG\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = \"123AG3GCAT422TG3\"; [split /([[:alpha:]]+)/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[123,\"AG\",3,\"GCAT\",422,\"TG\",3]","err":""},{"code":"[ \"[123]a test\\n[345] second\\nthird\\n[456]more\\n\" =~ /(^\\[.*?(?=^\\[|$))/gsm ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"[123]a test\",\"[345] second\",\"[456]more\"]"},{"err":"","out":"[\"[123]a test\\n\",\"[345] second\\nthird\\n\",\"[456]more\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"[123]a test\\n[345] second\\nthird\\n[456]more\\n\" =~ /(^\\[.*?(?=^\\[|\\z))/gsm ]"},{"err_mask":"","code":"1.2.3 eq \"1.2.3\"","err":"","out":"","out_mask":""},{"code":"'123' eq lc('123')","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"\"123\" eq uc \"123\";","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"128","code":"\"123 HAI STRINGS ARE COOL\" + 5","err_mask":""},{"out_mask":"","err":"","out":"","code":"\"1.2.3\" lt \"1.10.0\"","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"1.2.3 lt 1.10.0"},{"err_mask":"","code":"$_ = '1_2_3'; m/(\\w*_)/; push @arr, $1; m/(\\w*?_)/; push @arr, $1; \\@arr","err":"","out":"[\"1_2_\",\"1_\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n","err":"","code":"$_=123;print eval'$_++.$/,'x10","err_mask":""},{"code":"\"123\" =~ s/2//gr","err_mask":"","out_mask":"Ã¿Ã¿","out":"13","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3]","code":"$_ = '1 2 3'; [ split ];","err_mask":""},{"code":"$_ = \"123str456\"; $_++; $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"124","err":""},{"code":"*{123} = sub { \"D:\" }; &123","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"D:"},{"out_mask":"Ã¿Ã¿","err":"","out":"D:","code":"*{123} = sub { \"D:\" }; 123->()","err_mask":""},{"err_mask":"","code":"*{123} = sub { \"D:\" }; \\&123->()  # guessing this is also wrong","out":"ERROR: Undefined subroutine &main::D: called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"*{123} = sub { \"D:\" }; (bless {})->123","out":"ERROR: syntax error at (eval 1) line 1, near \"->123\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"5676","err":"","code":"12*473","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"some text","code":"\"125 some text\" =~ s/^[1-9][0-9]* //r","err_mask":""},{"code":"[ 127.0.0.1 . \"\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\177\\0\\0\\1\"]"},{"err":"","out":"[127.0.0.1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 127.0.0.1 ]"},{"code":"128.129.130","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ÂÂÂ","err":""},{"out_mask":"Ã¿","out":"0","err":"","code":"(\"12 bananas buys you 0.1 ruby\" =~ /\\d+/g)[1]","err_mask":""},{"err_mask":"","code":"(\"12 bananas buys you 1 ruby\" =~ /\\d+/g)[1]","err":"","out":"1","out_mask":"Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"'?=12' =~ /^\\?(?:=(\\d+))?/"},{"err_mask":"","code":"$. = 12; my $x = 10..20; [ $x ]; ### I've read the link but think I'm misunderstanding something. $. appears to be within that range but it still returns false.","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[12,13,14]","err":"","code":"[ \"12\\n13\\n14\" =~ /(\\d+)/g ]","err_mask":""},{"err":"","out":"12","out_mask":"Ã¿Ã¿","err_mask":"","code":"@; = (1, 2); print @;;"},{"err":"","out":"[1,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 1, 2 ] # these brackets?"},{"code":"\"@{[ 1+3 ]}\"","err_mask":"","out_mask":"Ã¿","out":"4","err":""},{"out":"4","err":"","out_mask":"Ã¿","err_mask":"","code":"\"${\\( 1+3 )}\""},{"err_mask":"","code":"\"1\" & \"3\"","err":"","out":"1","out_mask":"Ã¿"},{"out":"-2","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"1 % -3"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"0.91","err":"","code":"1.3 * 0.7","err_mask":""},{"code":"[ \"1:30\" =~ /(?:(\\d*):)?(\\d+)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,30]"},{"err_mask":"","code":"[((1 << 3) - 1), 1+2+4]","out":"[7,7]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"4294967296","err":"","code":"1<<32","err_mask":""},{"err_mask":"","code":"134.95 * 100","out":"13495","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"1,2,3,5,6,7,8,9\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[  '1-3,5,6-9' =~ s/(\\d+)-(\\d+)/join ',', $1..$2/ger ]"},{"err":"","out":"","out_mask":"","err_mask":"","code":"\".1.3.6.1.2.1.43.11.1.1.6.1.1\" =~ m/\\.(?!5|4|12)$/"},{"code":"1.3e12 / 300e6","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"4333.33333333333","err":""},{"out":"[13,\"month\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"13month\" =~ /(\\d+)(\\w+)/ ]"},{"code":"[1..4]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3,4]","err":""},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"@_ = (1..4); $#_"},{"code":"[((1 << 4) - 1), 1+2+4+8]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[15,15]"},{"err_mask":"","code":"1414364400 - 1414274400","err":"","out":"90000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"'1.43531264539073e-11' * 10","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.43531264539073e-10","err":""},{"code":"1 < 4 < 6","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"4 <\"\n"},{"err_mask":"","code":"14/88","err":"","out":"0.159090909090909","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"1.4e8","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"140000000","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"no","code":"(14 gt 7) ? 'yes' : 'no' # maxstr just uses gt instead of >, this seems completely wrong for what you're asking","err_mask":""},{"code":"1/5","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"0.2"},{"code":"\"150\" |. \"105\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"|.\"\n","err":""},{"err_mask":"","code":"[150 | 105, 150 |. 105]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"|.\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"1","err":"","code":"\"- 15:03:48,619  -\" =~ /- (\\d{2}:\\d{2}:\\d{2},\\d{3}).{3,}/","err_mask":""},{"out_mask":"","out":"","err":"","code":"\"- 15:03:48,619  \" =~ /- (\\d{2}:\\d{2}:\\d{2},\\d{3}).{3,}/","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"\"- 15:03:48,619  -\" =~ /- (\\d{2}:\\d{2}:\\d{2},\\d{3}).{4,}/"},{"err_mask":"","code":"\"- 15:03:48,619  -\\n\\r\" =~ /- (\\d{2}:\\d{2}:\\d{2},\\d{3}).{4,}/","err":"","out":"","out_mask":""},{"err_mask":"","code":"155.0 / 3.0","out":"51.6666666666667","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"'15.8' == '15.80'"},{"err_mask":"","code":"'15.8' == undef","out":"","err":"","out_mask":""},{"err_mask":"","code":"1.5e308","err":"","out":"1.5e+308","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"5","code":"@_ = (1 .. 5); $single = @_; $single","err_mask":""},{"code":"16 | 0","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"16"},{"err_mask":"","code":"16 & 0","err":"","out":"0","out_mask":"Ã¿"},{"err_mask":"","code":"16 | 16","err":"","out":"16","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"16 & 16","out":"16","err":"","out_mask":"Ã¿Ã¿"},{"code":"(1 << 63) - 1 + (1 << 63)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"18446744073709551615"},{"err_mask":"","code":"163.163.163","err":"","out":"Â£Â£Â£","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"16384","code":"((16385 >> 12) <<12)","err_mask":""},{"code":"1.79e308","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.79e+308","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"256","err":"","code":"1 << 8","err_mask":""},{"err":"","out":"[\"3152.3642732049\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 180000000 / 57100  ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.84467440737096e+19","err":"","code":"18446744073709551615 + 1","err_mask":""},{"code":"18446744073709551616  - 18446744073709551000","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"code":"[ 1890 & 8,  1890 & 32 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,32]","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"Inf","err":"","code":"1.8e308","err_mask":""},{"code":"1.8e308-1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"Inf"},{"err_mask":"","code":"[1 << 90, 2**90]","out":"[0,\"1.23794003928538e+27\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"\\x{c0}\\x{a8}\\0\\0\",\"192.168.0.0\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 192.168.0.0 . '', '192.168.0.0' ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[192.168.0.0,\"192.168.0.0\"]","code":"[ 192.168.0.0, '192.168.0.0' ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1990 1992 1993 2010\"]","err":"","code":"[ '1990-1992-1993-2010' =~ tr/-/ /r ]","err_mask":""},{"err_mask":"","code":"19.99*100","err":"","out":"1999","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"1^9999","out":"9998","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0.9999929999755","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"1999979/1999993"},{"err_mask":"","code":"1**9999 # perl's spelling of \"^\"","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"-+- \"1abc\""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"-+-+-+-+-+- \"1abc\""},{"code":"$[ = 1; (\"A\", \"B\", \"C\")[0]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿","err":"","out":"1","code":"'1e0' == 1","err_mask":""},{"code":"1e02.34","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"10034","err":""},{"code":"$_ = '1e1'; $_++; $_","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"11"},{"err":"","out":"10000000000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"1e10"},{"err":"","out":"Inf","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"1e1000"},{"out":"Inf","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"1e999"},{"err":"","out":"Inf","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"1e9999"},{"code":"[ 1 eq '1.0', 1 == '1.0' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",1]"},{"out":"[1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 1 eq 1.0, 1 == 1.0 ]"},{"code":"1 eq 2 != 3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"2 !=\"\n"},{"err_mask":"","code":"$1 = eval {a:}","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"1","err":"","code":"(\"1foo\"=~/(\\d+)/)[0]","err_mask":""},{"err_mask":"","code":"1 for @array;","out":"","err":"","out_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"1 if scalar \\%hash"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"$1\\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$1\\l$2"},{"code":"$[ = -1; my @foo = qw/x y z/; [ $foo[-1] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"[ 1=>'one' ];","err":"","out":"[1,\"one\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[1,\"foo\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[(1 or 0 and \"foo\"), ((1 or 0) and \"foo\")]"},{"code":"1p-10","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"1p\"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$ = 1\"\nsyntax error at (eval 1) line 1, at EOF\n","code":"$ = 1; print $++;","err_mask":""},{"err_mask":"","code":"1+print 4","err":"","out":"4","out_mask":"Ã¿"},{"code":"$! = 1; printf \"SvPV is %s but SvIV is %d\\n\", $!, $!","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"SvPV is Operation not permitted but SvIV is 1\n","err":""},{"err_mask":"","code":"1 =~ /^([^.])(\\..*)?/ && sprintf( q{%03d}, $1 ). ( $2 // q{} ); ### leobut","err":"","out":"001","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"1=>undef","out":"","err":"","out_mask":""},{"out_mask":"","out":"","err":"","code":"1,undef","err_mask":""},{"err_mask":"","code":"[ -1 - ~unpack 'N', join '', map chr, '192.168.254.43' =~ /\\d+/g ]","err":"","out":"[\"-1.84467440704773e+19\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1111","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"1x4"},{"out":"25","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"2014-1989"},{"out_mask":"Ã¿Ã¿","err":"","out":"17","code":"2014-1997","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"2015-02-19","err":"","code":"$_ = \"2015021900:00:00\"; /^(....)(..)(..)/; \"$1-$2-$3\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"2015021900:\"\n","err":"","code":"$_ = 2015021900:00:00; /^(....)(..)(..)/; \"$1-$2-$3\"","err_mask":""},{"code":"['2.0' == 2 ? \"Y\" : \"N\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Y\"]","err":""},{"code":"[20 + 4]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[24]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[24]","code":"[20+4]","err_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"2048 & 0x00FF"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"\"Â²\" =~ /[â°-â¹]/"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"  20:       ee110f10     11101110000100010000111100010000         mrc     15, 0, r0, cr1, cr0, {0}","err":"","code":"\"  20:       ee110f10      mrc     15, 0, r0, cr1, cr0, {0}\" =~ s/^\\s+[0-9a-f]+:\\s+([0-9a-f]+)\\K/sprintf \"     %b   \", hex $1/er #netz something like this then?","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.26765060022823e+30","code":"2**100","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.70141183460469e+38","code":"2**127;","err_mask":""},{"code":"2**1270;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"Inf"},{"out_mask":"Ã¿","err":"","out":"1","code":"\"Ù¢\" =~ /[Ù¡-Ù£]/a","err_mask":""},{"out":"[4,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 2 << 1, 4 >> 1 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"17179869184","err":"","code":"2**17 * 2**17","err_mask":""},{"code":"-2 % 1e6","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"999998"},{"err_mask":"","code":"2 + 2","out":"4","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"4","code":"2+2","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[12]","err":"","code":"[2**2*3]","err_mask":""},{"out_mask":"Ã¿","err":"","out":"4","code":"*2 = 2.5; 2 + 2","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::2.5 called at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"*2 = 2.5; 2 + &2","err_mask":""},{"out":"this way","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\22\\a\\6\\21A\\5SK\" ^ 'foobar22'"},{"code":"[2.3 ^ 0, 2 . 3 ^ 0]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[2,23]"},{"err":"","out":"7","out_mask":"Ã¿","err_mask":"","code":"2 * 3 + 1"},{"code":"2**31","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2147483648"},{"code":"[ 23 ** 11, 2 ** 32 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"['952809757913927',\"4294967296\"]","err":""},{"out_mask":"Ã¿Ã¿","out":"34","err":"","code":"2^32","err_mask":""},{"code":"2**32","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"4294967296"},{"code":"(2**32)/1000/60/60/24/365","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.136192519533232"},{"code":"2**32 / 3600 / 24 / 365","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"136.192519533232","err":""},{"out":"[\"2.3\",23]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 2.3, 2 . 3 ]  # different"},{"err_mask":"","code":"23 % 24","err":"","out":"23","out_mask":"Ã¿Ã¿"},{"err":"","out":"49710.2696296296","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"(2**32)/60/60/24"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"4,294,967,296","code":"2**32 =~ s/\\B(?=(\\d\\d\\d)+$)/,/gr","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"8589934592","err":"","code":"2**33","err_mask":""},{"code":"235 ^ 255","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"20"},{"out":"","err":"","out_mask":"","err_mask":"","code":"235 xor 255"},{"err_mask":"","code":"240*(10**9)/(2**30)","out":"223.517417907715","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"240*10^9/2^30","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"2426","err":""},{"err_mask":"","code":"24 % 24","out":"0","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"2**5","err":"","out":"32","out_mask":"Ã¿Ã¿"},{"err":"","out":"1.12589990684262e+15","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"2**50  # really ?"},{"out_mask":"Ã¿","out":"1","err":"","code":"25 % 24","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"127","err":"","code":"255 & 0x7f","err_mask":""},{"out":"1305","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"25 | 6 ** 4"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"[ 256 >> 8 ]","err_mask":""},{"err_mask":"","code":"25**7","out":"6103515625","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"25 or 6 ** 4","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"25"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.0722222222222222","code":"260 / 3600","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"4.61168601842739e+18","err":"","code":"2**62","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.84467440737096e+19","code":"(2**63 - 1) + 2**63","err_mask":""},{"code":"2**64","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.84467440737096e+19","err":""},{"code":"2**64 - 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.84467440737096e+19","err":""},{"out_mask":"Ã¿","out":"1","err":"","code":"265 % 2","err_mask":""},{"out":"1420 litres of beer tonight","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"2*710 . ' litres of beer tonight'"},{"err_mask":"","code":"2733.754 % 60.0; ### Why exactly is it that this yields 33 instead of 33.754 ?","err":"","out":"33","out_mask":"Ã¿Ã¿"},{"code":"2**(7*8)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"7.20575940379279e+16","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"NaN","code":"2790**2753 % 3233","err_mask":""},{"err_mask":"","code":"2**8","err":"","out":"256","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"2**88","err":"","out":"3.09485009821345e+26","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0.192446666666667","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"28867 / 150000"},{"err_mask":"","code":"(2903000/2903000)*100","err":"","out":"100","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1819142","err":"","code":"29822 * length q|/gnu/store/d8fwypp5cnzjpc7kycmj4nj0gwn7k6lq-perl-xml-sax-0.99|","err_mask":""},{"code":"2 =~ /\\A(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])\\z/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"$! = 2; die \"$!\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: No such file or directory at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541]","err":"","code":"[2,grep{(1x$_)!~/^(..+)\\1+$/}3..541]","err_mask":""},{"out_mask":"Ã¿","out":"2","err":"","code":"$_ = 2; grep { $_ } qw(1 3 5); $_","err_mask":""},{"code":"(2 or 3)","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"err_mask":"","code":"*2 = sub {2.5}; 2 + &2","err":"","out":"4.5","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ok\"]","code":"*{\"2\"} = sub { 'ok' }; [ main->${\\2} ]","err_mask":""},{"code":"*{\"2\"} = sub { 'ok' }; [ main->2 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"->2\"\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"$two ]\"\n","err":"","code":"*{\"2\"} = sub { 'ok' }; [ my $two = 2; main->$two ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ok\"]","err":"","code":"*{\"2\"} = sub { 'ok' }; my $two = 2; [ main->$two ]","err_mask":""},{"code":"2 =~ /\\w/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"2x4","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"2222"},{"out_mask":"Ã¿","out":"3","err":"","code":"3","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"30000","code":"3_000_000 / 100  # this many seconds","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"450000000","err":"","code":"30_000 * 30_000 / 2","err_mask":""},{"code":"300 x $60","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"\"\\303\\203\\302\\241r j\\303\\203\\302\\272 s\\303\\203\\302\\272r?\\n\"","out":"ÃÂÃÂ¡r jÃÂÃÂº sÃÂÃÂºr?\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"30","code":"-30 % 60","err_mask":""},{"err":"","out":"153500","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"307 * 500"},{"err":"","out":"[\"\",30]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \":30\" =~ /(?:(\\d*):)?(\\d+)/ ]"},{"code":"[ 30 =~ /(?:(\\d*):)?(\\d+)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,30]"},{"code":"3 ** 12   # Actually :)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"531441","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1594323","err":"","code":"3 ** 13","err_mask":""},{"code":"\"31323334\" =~ s/.(.)/$1/gr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"1234","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","err":"","code":"\"31323334\" =~ s/(..)/chr hex $1/g","err_mask":""},{"err_mask":"","code":"\"31323334\" =~ s/(..)/chr hex $1/gr","out":"chr hex 31chr hex 32chr hex 33chr hex 34","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1234","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"31323334\" =~ s/(..)/chr hex $1/gre"},{"code":"3.141592653589793238462643383279502884","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"3.14159265358979"},{"out_mask":"Ã¿Ã¿Ã¿","out":"1.5","err":"","code":"3 / 2","err_mask":""},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"3 // 2"},{"out_mask":"Ã¿","out":"1","err":"","code":"\"321\" =~ /\\d+/","err_mask":""},{"err_mask":"","code":"3/2 > 7/5","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":"","code":"[ 3 ^ 3 ]","err_mask":""},{"code":"$_ = '\"33.62\" \"114.72\" \"Blythe\"'; s/(\\S+)\\s(\\S+)\\s(.+$)/$3 $1 $2/; $_ # seems happy enough, did you try it?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\"Blythe\" \"33.62\" \"114.72\""},{"err_mask":"","code":"337 * 1051","out":"354187","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"yes","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"(3 == 3) ? \"yes\" : \"no\";"},{"err_mask":"","code":"\"@{[ 3 + 4 ]}\"","err":"","out":"7","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.47178237208077","code":"3.4/2.31012414912481924812904128490128412","err_mask":""},{"err_mask":"","code":"$_ = \"\\345\\207\\272\\350\\262\\250\\346\\230\\216\\347\\264\\260\"; utf8::decode $_; [$_]","out":"[\"\\x{51fa}\\x{8ca8}\\x{660e}\\x{7d30}\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[4,5,6,7,8,9]","code":"@3 = 4..9; \\@3  # other global stuff :)","err_mask":""},{"err_mask":"","code":" 3 â 5;","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after tures/; 3 <-- HERE near column 93 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"3:5","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"3:\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"8","err":"","code":"3+5","err_mask":""},{"code":"350*24*365.25*100/(1024*1024) # about 300TB, why do you ask?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"292.596817016602"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"35.68","code":"3568 / 100","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"15","code":"360/24","err_mask":""},{"code":"'Ù£' =~ /./a","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"'Ù£' =~ /\\d/a","err":"","out":"","out_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"'Ù£' =~ /\\D/a"},{"err":"","out":"[1,1,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'Ù£' =~ /\\d/a, 'Ù£' =~ /./a, \"Ù¢\" =~ /[Ù¡-Ù£]/a, 'Ù£' =~ /\\D/a ]"},{"out":"3/(x+2)+(-1/2)/(x-3)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"(3/(x+2)+(-1/2)/(x-3))dx \" =~ s/^\\(((?:[^()]|\\((?1)\\))*)\\)dx\\s*$/$1/r"},{"out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/^\\(( <-- HERE (?:[^()]|\\((?1)\\))*\\)dx\\s*$/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"(3/(x+2)+(-1/2)/(x-3))dx \" =~ s/^\\(((?:[^()]|\\((?1)\\))*\\)dx\\s*$/$1/r"},{"out":"ERROR: Undefined subroutine &main::404 called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"404->()"},{"err_mask":"","code":"$_ = '4 1 4 2 3'; @a=(); $a[abs $1-$']+=1 while / (\\d+)(?= )/g; (!defined shift @a) && @a == $_ - 1 && $_ - 1 == grep($_ == 1, @a) ? 'jolly' : 'Not jolly'","out":"jolly","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"jolly","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" $_ = '4 1 4 2 3'; @deltas = 1; $deltas[abs $1 - $2] += 1 while / (\\d+)(?= (\\d+))/g;  grep($_ != 1, @deltas) ? 'Not jolly' : 'jolly'"},{"out_mask":"Ã¿Ã¿","out":"42","err":"","code":"42","err_mask":""},{"code":"[ ~42 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"['18446744073709551573']","err":""},{"err":"","out":"[42]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"\" || 42 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]","code":"[ \"\" // 42 ]","err_mask":""},{"out":"[\"ARRAY(0x5025b88)\",\"ARRAY(0x5025b88)\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = []; $_->[42] = $_; [ ''.$_, ''.$_->[42] ]"},{"out":"42","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"('42 bottles of beer' =~ /(\\d+)/)[0]"},{"code":"[ !!42, !!\"foo\", !!{baz=>quux} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,1,1]","err":""},{"code":"$_ = 42; [ \\$_, \\$main::_, \\$main::main::_ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\42,$VAR1->[0],$VAR1->[0]]"},{"out":"[42,42,42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 42; [ map ${$_}, \\$_, \\$main::_, \\$main::main::_ ]"},{"err_mask":"","code":"$_ = 42; print map { $_ } qw(a b c); print \"; $_\"","out":"abc; 42","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"446,744,073,709,551,615\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ '446744073709551615' =~ s/\\B(?=(\\d{3})+$)/,/gr ]  # fix"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\",446,744,073,709,551,615\"]","err":"","code":"[ '446744073709551615' =~ s/(?=(\\d{3})+$)/,/gr ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1080000000","err":"","code":"45_000_000 * 24","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"-10","code":"(45/50-1)*100","err_mask":""},{"err_mask":"","code":"(4,5,6)[-2..-1]","err":"","out":"6","out_mask":"Ã¿"},{"err_mask":"","code":"[(4,5,6)[-2..-1]]","out":"[5,6]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"47 % 24","out":"23","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[ 4 .. 9 ]","out":"[4,5,6,7,8,9]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"4 .. 9","err_mask":""},{"err":"","out":"33","out_mask":"Ã¿Ã¿","err_mask":"","code":"49 & 97"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[4,5,6,7,8,9]","err":"","code":"\"4-9\" =~ /-/ and [eval '$`..$\\'']","err_mask":""},{"code":"\"4-9\" =~ /-/ and [ split /,/, `perl -e'print join \",\", $\\` .. $'\\'` ]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"4,5,6,7,8,9","err":"","code":"$_ = \"4-9\"; s/(\\d+)-/$1,@{[$1+1]}-/ until /(?<=,)(\\d+)-\\1/; s//$1/; $_","err_mask":""},{"err_mask":"","code":"$_ = \"4-9\"; s/(\\d+)-/$1,@{[$1+1]}-/ until /(?<=,)(\\d+)-\\1/; s//$1/; [ /(\\d+)/g ]  # better","out":"[4,5,6,7,8,9]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[4,5,6,7,8,9]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"4-9\"; s/-/../; [ eval ]"},{"code":"4[$array]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"4[\"\n","err":""},{"err_mask":"","code":"4*atan2(1,1)","err":"","out":"3.14159265358979","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$! = 4; die \"$!\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Interrupted system call at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"$_[4] = ['foo']; $_->[4] = 'bar'; [ @{$_[4]} ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"bar\"]","err":"","code":"$_[4] = ['foo']; $_->[4] = 'bar'; [ @$_[4] ];","err_mask":""},{"code":"$_ = '4x4x4'; y(4)(5); $_ # still potential for confusion though","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"5x5x5","err":""},{"out":"[\"0.5\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ .5]"},{"out":"[5]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ 5. ]"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[5 .. 0]","err_mask":""},{"err_mask":"","code":"[ \"5\" & \"000000\" ]","out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"*5000 = \\5;","out":"*main::5000","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\\*5000 = \\5;","out":"ERROR: Can't modify reference to ref-to-glob cast in scalar assignment at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't modify reference to ref-to-glob cast in scalar assignment at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\\*5000 = 5;"},{"out":"5","err":"","out_mask":"Ã¿","err_mask":"","code":"*5000 = \\5; $5000"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"*main::5000","err":"","code":"*5000 = \\5; *5000","err_mask":""},{"out_mask":"Ã¿","err":"","out":"5","code":"*5000 = sub {5}; 5 & & 5000","err_mask":""},{"err_mask":"","code":"*5000 = sub {\"Hello World\"}; 10 &5000","err":"","out":"8","out_mask":"Ã¿"},{"code":"*5000 = sub {\"Hello World\"}; \\*5000->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\\"Hello World\""},{"err_mask":"","code":"*5000 = sub {\"Hello World\"}; &5000","out":"Hello World","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"*5000 = sub {\"Hello World\"}; 5000->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hello World","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"5000(\"\n","code":"*5000 = sub {\"Hello World\"}; 5000()","err_mask":""},{"code":"*5000 = sub {\"Hello World\"}; \"Hello\" + &5000","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"83.3333333333333\"]","err":"","code":"[ 5/0.06 ]","err_mask":""},{"code":"5.013_006 # mauke typo I think","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"5.013006","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[105]","err":"","code":"[5 + 100]","err_mask":""},{"err_mask":"","code":"[ 5 .. 12 ]","out":"[5,6,7,8,9,10,11,12]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[5.14.0]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[5.14.0]","err":""},{"err":"","out":"\u0005\u000e\u0000","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"5.14.0"},{"code":"$â = 5; $â = 2; $â + $â","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x9C; marked by <-- HERE after tures/; $Ã¢<-- HERE near column 93 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"[ \"5\" & \"3\" ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"5<=>3","err_mask":""},{"out":"1.66666666666667","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"5/3"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"5 5\"\n","err":"","code":"[ 5 5 ]","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"25","code":"5*5","err_mask":""},{"out":"10","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"5+5"},{"err_mask":"","code":"5 == 5.0","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"[ 5 . 5, 5. 5, 5 .5, 5.5 ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"5. 5\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"5 + 5\" =~ s/(.+)/ $1 /eer;","err_mask":"","out_mask":"Ã¿Ã¿","out":"10","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"10","code":"\"5 + 5\" =~ s/.*/$&/eer;","err_mask":""},{"err_mask":"","code":"\"5 5\" =~ s/(.)\\s(.)/$1 + $2/er;","out":"10","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"10","err":"","code":"\"5 5\" =~ s/(.)\\s(.)/print $1 + $2/er;","err_mask":""},{"err":"","out":"[11]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[5+6]"},{"out":"11","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"5+6"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.714285714285714","code":"5/7","err_mask":""},{"code":"[ 57100 / 180000000 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"0.000317222222222222\"]"},{"out_mask":"Ã¿Ã¿","err":"","out":"99","code":"57+42  # perlbot is the most accessible calculator","err_mask":""},{"err_mask":"","code":"[ 5.'a' ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"5.'a'\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$! = 5; say $!","out":"Input/output error\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"14776336","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"62 ** 4"},{"code":"64.64.64.5000000000.64.64.64","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"@@@Ã¾ÂÂªÂÂÂÂ@@@"},{"code":"64.65.68.70","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"@ADF"},{"err_mask":"","code":"65280 & 127","out":"0","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"255","err":"","code":"65280 >> 8","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"65536 >> 16","err_mask":""},{"err_mask":"","code":"65536 >> 8","err":"","out":"256","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[65.66.67]","err":"","code":"[ 65.66.67 ]","err_mask":""},{"code":"[65.66.67]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[65.66.67]","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"67","code":"6_5,6_6,6_7","err_mask":""},{"err_mask":"","code":"6_5.6_6.6_7","out":"ABC","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"65.66.67","err":"","out":"ABC","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"~~667","err":"","out":"667","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"6.6e-16 == 6.6 * 10 ** -16"},{"err":"","out":"4260 militres of beer tonight","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"6*710 . ' militres of beer tonight'"},{"code":"6 * 99.90","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"599.4","err":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"6 * 99.90 > 599.40"},{"code":"\"6C5775272327642A382A453C327D3A31\" =~ s/(..)/chr hex $1/gre","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"lWu'#'d*8*E<2}:1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","code":"\"6d73616e64626f78\" =~ s/([0-9a-f]{2})/chr hex $1/eg","err_mask":""},{"code":"70 / 4.4","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"15.9090909090909"},{"err":"","out":"86400","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"7200 * 12"},{"out":"103","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"7 + 32 + 64"},{"out_mask":"Ã¿Ã¿","err":"","out":"50","code":" 7 + 7 / 7 + 7 * 7 - 7","err_mask":""},{"code":" 7 + 7 / 7 + 7 x 7 - 7","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"7777778","err":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$78_char_wide_text\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$78_char_wide_text"},{"code":"[ 7 <=> \"cats\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"err":"","out":"","out_mask":"","err_mask":"","code":"7 < 'D'"},{"out":"1158940.39735099","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":".7E9 / 604"},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 7 <=> 'nan' ]"},{"err":"","out":"81","out_mask":"Ã¿Ã¿","err_mask":"","code":"8181 / 101"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.818181818181818","err":"","code":"8181/9999","err_mask":""},{"err_mask":"","code":"8192 / 1024","out":"8","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"8 >> 2","out":"2","err":"","out_mask":"Ã¿"},{"out":"1234321","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"(86274 ^ 87381) ** 2"},{"out_mask":"Ã¿Ã¿","err":"","out":"no","code":"\"\\8\" eq \"\\9\" ? \"yes\" : \"no\"","err_mask":""},{"err":"","out":"*main::9001","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"*9001 = \\5;"},{"err_mask":"","code":"9/11","err":"","out":"0.818181818181818","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"777","code":"953-176","err_mask":""},{"out_mask":"Ã¿","out":"a","err":"","code":"97 =~ s/(\\d+)/chr $1/er","err_mask":""},{"err":"","out":"a","out_mask":"Ã¿","err_mask":"","code":"97 =~ s/(\\d+)/${\\chr $1}/r"},{"err_mask":"","code":"99.97.102.233","err":"","out":"cafÃ©","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"9999 / 101","out":"99","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[9,1]]","err":"","code":"$. = 9; [ [ $.++, scalar(10..15) ], ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{a => 1}","code":"{a=>1}","err_mask":""},{"err":"","out":"[undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,1,2,3,4,5]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@a=(1,2,3,4,5); [@a[-20..-1]]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,undef,[1,2,3,4,5]]","code":"@a=[1,2,3,4,5]; [@a[-20..-1]]","err_mask":""},{"err_mask":"","code":"[ { a => 123 }, { b => 456 } ];","out":"[{a => 123},{b => 456}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"a123b\" =~ s/(\\d+)/$1*100/er","out":"a12300b","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"2","err":"","code":"@a = (1, 2, 3); print $#a;","err_mask":""},{"err_mask":"","code":"$_ = \"a1 2b 3 c 44\"; [/(\\d+)/g]","err":"","out":"[1,2,3,44]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"1","err":"","code":"@a = (1, 2, 'foo'); grep { $_ eq 'foo' } @a[1..$#a]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$a = {1..4}; [keys $a]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{1 => 2,2 => 3},{4 => 5,3 => 4}]","err":"","code":"@a=1..4; [{map{$_=>$_+1}@a[0..@a/2-1]},{map{$_=>$_+1}@a[@a/2..$#a]}]","err_mask":""},{"code":"@a = (1,5,2,4,3); @b = (5,3,1,4,2); (() = delete @{ { map {$_,1} @a } }{ @b }) == @b","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"@a = (1,5,2,4,6); @b = (5,3,1,4,2); (() = delete @{ { map {$_,1} @a } }{ @b }) == @a","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"different","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@a = (1,5,2,4,6); @b = (5,3,1,4,2); \"@{[sort @a]}\" eq \"@{[sort @b]}\" ? same : different"},{"code":"@a = (1,5,2,4,6); @b = (5,6,1,4,2); \"@{[sort @a]}\" eq \"@{[sort @b]}\" ? same : different","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"same"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"@a = (1,5,2,4); @b = (5,3,1,4,2); (() = delete @{ { map {$_,1} @a } }{ @b }) == @b"},{"code":"{ a => 1, a => 2 }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{a => 2}"},{"err":"","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$a=1; $b=1; LABL: while($a--) {try {die if $b--} catch {redo LABL;}; print \"hello world\"};"},{"code":"$a = 1; $b = 3; ($a/$b)*$b","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"@a = (1) x 1024*1024*30; $#a"},{"code":"@a = (1) x 1024*1024*5","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"@a = 2; [ @a == 2 ]","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"$a->[2]->{bar} eq 'baz'; $a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,undef,{}]","err":""},{"err":"","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, near \"s/\\D+//,\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'a 42 b' =~ s/\\D+//, 'a 42 b' =~ s/\\D+//g ]"},{"out":"[\"42 b\",42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'a 42 b' =~ s/\\D+//r, 'a 42 b' =~ s/\\D+//gr ]"},{"err":"","out":"[[4,5,6],[4,5],[4],[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@a=(4,5,6); [ map [@a[0..@a-$_]], 1..@a+1 ]"},{"code":"%a=(a=>1); $s=\"a\"; $s=~s/.+/$a{\\1}/eg; print $s;","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"\"<a<a></a>></a>\" =~ /<a(.*)>(.*)<\\/a>/","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"","err":"","out":"","code":"\"<a<a></a>></a>\" !~ /<a(.*)>(.*)<\\/a>/","err_mask":""},{"err_mask":"","code":"\"aaaaaaaanother thing\" =~ m/^(a+)/ and $+[1]","err":"","out":"8","out_mask":"Ã¿"},{"out":"[\"AAAAA\",\"BBBB\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'AAAAABBBB' =~ /((.)\\2*)(.*)/ ; [ $1, $3 ]"},{"code":"'aaaabbbbbccccddddd' =~ tr/abc//sr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abcddddd","err":""},{"err":"","out":"a b c abcadaba","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"aaa b ccccc abcadaba\" =~ tr/abc/abc/sr"},{"err_mask":"","code":"$_ = 'aaa'; my $a = 5; ++$_ for $a; [ $_, $a ];","out":"[\"aaa\",6]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"aaa\",6]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'aaa'; my $a = 5; {local *_ = \\$a; ++$_}; [ $_, $a ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"aaa\",5]","err":"","code":"$_ = 'aaa'; my $a = 5; {local $_ = $a; ++$_}; [ $_, $a ]; # note that this, which uses 'local $_', acts differently","err_mask":""},{"out":"[\"aa\",\"bbaa\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"aabbaa\" =~ /(aab??)(b+aa)/ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"aab\",\"baa\"]","err":"","code":"[ \"aabbaa\" =~ /(aab?)(b+aa)/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","err":"","code":"\"aabbcc\" =~ s/(\\w)\\1/ $& /g;","err_mask":""},{"out":"[\"c\",\"c\",\"c\",\"c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@a = (); 'abcccccdefghi' =~ / (c) (?:(\\1)(?{push @a, $1})){4} /x; \\@a # backrefs :)"},{"err_mask":"","code":"@a = (); 'abcdefghi' =~ / c (?:(.)(?{push @a, $1})){4} /x; \\@a","err":"","out":"[\"d\",\"e\",\"f\",\"g\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"d\",\"e\",\"f\",\"g\"]","code":"@a = (); 'abcdefghi' =~ / c (?:(.)(?{push @a, $1})){4} (?!) /x; \\@a","err_mask":""},{"out":"[\"a\",\"b\",\"c\",\"d\",\"b\",\"c\",\"d\",\"e\",\"c\",\"d\",\"e\",\"f\",\"d\",\"e\",\"f\",\"g\",\"e\",\"f\",\"g\",\"h\",\"f\",\"g\",\"h\",\"i\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@a = (); 'abcdefghi' =~ / (?:(.)(?{push @a, $1})){4} (?= $ ) /x; \\@a"},{"out":"[\"f\",\"g\",\"h\",\"i\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@a = (); 'abcdefghi' =~ / (?:(.)(?{push @a, $1})){4} $ /x; \\@a"},{"code":"$_=\"aabcdef\"; print if /^a([abcd]+)ef$/ and $1 !~ /([abcd]).*\\1/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"aabcdef","err":""},{"err_mask":"","code":"$a=\"a.b.com\";print \"yes\" if $a=~/^a.com$/","err":"","out":"","out_mask":""},{"err_mask":"","code":"$a = 'a'; my $b = \\$a; for $$b (0..5) { print $a }","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"012345","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$a = 'a'; my $b = \\*a; for $$b (0..5) { print $a }"},{"out":"asd1312321\nasd1212\nasd121212\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$a=\"asd1312321asd1212asd121212\"; print $_,\"\\n\" for $a=~/(asd\\d+)/g;"},{"code":"[ @a=['asd qwe', 'qqq '];   /(\\w+)\\s+(\\w+?)/ , print \"$1 - $2\" for ( @a )   ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \")   ]\"\n","err":""},{"code":"[ 'a' ^ 'A' ] # secret - the difference between upper and lower case is a space","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\" \"]"},{"out":"aA","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"\"AA\" =~ s/(.)(.)/\\l$1$2/r"},{"out":"[\"\\3\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'a' ^ 'b' ]"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"; b\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"+{ a; b}"},{"code":"\"ab12312532\" =~ /.*3.*/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out":"+ab1c","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"-+- \"ab1c\""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]","code":"[ \"a{b\" =~ /a{/ ]","err_mask":""},{"out":"01","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"(\"AB\" ^ \"A4\") =~ tr/\\0\\1-\\377/01/r"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ab\",\"a5\",\"5b\",55]","err":"","code":"[ \"a\" . \"b\", \"a\" . 5, 5 . \"b\", 5 . 5 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ab\"]","err":"","code":"[ 'ababab' =~ /(ab)*/ ]","err_mask":""},{"code":"[ 'ababab' =~ /(ab)/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ab\",\"ab\",\"ab\"]","err":""},{"err_mask":"","code":"[ \"ab\" =~ /(a)x|b/ ]","err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"'ab' & 'b'","err_mask":"","out_mask":"Ã¿","out":"`","err":""},{"err":"","out":"``","out_mask":"Ã¿Ã¿","err_mask":"","code":"'ab' & 'ba'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"abba\",\"ba\"]","err":"","code":"[\"abba\" =~ /(ab(ba))/]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"abba\",\"ba\"]","err":"","code":"\"abba\" =~ /(ab(ba))/; [$1, $2]","err_mask":""},{"err_mask":"","code":"\"ABBBBBBBABBA\" =~ s/(B+)/length $1 < 3 ? 'C' x length $1 : $1/ger","err":"","out":"ABBBBBBBACCA","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'aBBBc' =~ s/[^a-z]//gr","err":"","out":"ac","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"$_ = 'Abbott &&& Costello'; s/\\s\\K\\W+(?=\\s)/and/; $_ # should work here though","out":"Abbott and Costello","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ 'Abbott &&& Costello' =~ s/(\\s*)&&&(\\s*)/$1and$2/gr ]","err":"","out":"[\"Abbott and Costello\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"abc\"]","err":"","code":"[~~\"abc\"]","err_mask":""},{"err_mask":"","code":"['ABC']","out":"[\"ABC\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"A: B: C: ;"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"\"ABC\" & 0x00FF;"},{"err":"","out":"ab","out_mask":"Ã¿Ã¿","err_mask":"","code":"\"abc\" =~ \"(..)\"; $1"},{"code":"{ abc => 123 }->JSON::encode_json","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"encode_json\" on unblessed reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"[ \"abc123___\" =~ /\\w+/g ]","out":"[\"abc123___\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ \"abc 30 def\" =~ /abc (\\d+) def/  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[30]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"No match\"]","err":"","code":"[ \"abc 30 def\" =~ /abc (\\d) def/ || \"No match\" ]","err_mask":""},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"abc 30 def\" =~ /abc (\\d+) def/ || \"No match\" ]"},{"err":"","out":"[\"abc,446,744,073,709,551,615\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'abc446744073709551615' =~ s/\\B(?=(\\d{3})+$)/,/gr ]"},{"err_mask":"","code":"[ 'abc446744073709551615' =~ s/(?<=\\d)(?=(\\d{3})+$)/,/gr ]","err":"","out":"[\"abc446,744,073,709,551,615\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"7","err":"","code":"@abc = (5,6,7,8); $c = @abc[1,2]","err_mask":""},{"err_mask":"","code":"\"abc\" =~ /a/","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"\"abca9\" =~ /(.)(.)(.)${3}9/","err":"","out":"1","out_mask":"Ã¿"},{"out":"[\"aa\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'abc' =~ /(a+)/; 'abc' =~ /(d+)/; [ 'bbaaccddee' =~ // ]"},{"err_mask":"","code":"$_ = 'abcabcabc'; s/b(??{ ++$idx == 2 ? '' : 'no match' })/c/; $_ # except you'd never actually write code like this of course","err":"","out":"abcaccabc","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"CAT\",\"CATbca\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"abcabca\" =~ s/a.*a/CAT/r, \"abcabca\" =~ s/a.*?a/CAT/r ] # greedy vs not greedy"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"A\",\"B\",\"C\",\"D\"]","err":"","code":"[ (\"A\",\"B\"),(\"C\",\"D\") ]","err_mask":""},{"err_mask":"","code":"[ 'abcd' & '1111' ]","err":"","out":"[\"! ! \"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ \"abcd123efg567h8i\" =~ /([a-z]+|[0-9]+)/g ];","err":"","out":"[\"abcd\",123,\"efg\",567,\"h\",8,\"i\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[[abcd]][[ABCD]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"abcd12ABCD\"; print \"[[$_]]\" for  /(abcd|ABCD)/g"},{"err_mask":"","code":"[ \"abcd\" =~ /^ab/ ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"$_=\"abcdaef\"; print /^(a[abcd]+ef)$/ and $1 !~ /([abcd]).*\\1/ ? \"Yes\" : \"no\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abcdaef","err":""},{"err":"","out":"ERROR: Unmatched ) in regex; marked by <-- HERE in m/^(a[abcd]+)ef) <-- HERE $/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_=\"abcdaef\"; print if /^(a[abcd]+)ef)$/ and $1 !~ /([abcd]).*\\1/"},{"code":"$_=\"abcdaef\"; print if /^a([abcd]+)ef$/ and $1 !~ /([abcd]).*\\1/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abcdaef","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"abcdaef","code":"$_=\"abcdaef\"; print if /^a([abcd]+)ef$/ and $1 !~ /([abcd]).*\\1(??{print $1})/","err_mask":""},{"code":"$_=\"abcdaef\"; print if /^(a[abcd]+ef)$/ and $1 !~ /([abcd]).*\\1/; print \"done\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"done","err":""},{"out":"abcda","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_=abcda; print if /^([abcd]{1})+$/ or print \"hmm\""},{"err_mask":"","code":"[ 'abcdcdcd' =~ /(ab)(cd)*/ ]","out":"[\"ab\",\"cd\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\"]","err":"","code":"[ \"abcdef\" =~ /^(?!.*([abcd]).*\\1)a.*ef\\z/s ]","err_mask":""},{"err_mask":"","code":"$_ = \"abcdef\"; [ /abc(?=def)/ ? $& : 'fail' ]","out":"[\"abc\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"abc def\" =~ /(?<first> \\w+ )/x; [ $+{first} ]","err":"","out":"[\"abc\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"! ! ! ! ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'abcdefgh' & '11111111'"},{"err_mask":"","code":"[ 'abcdefgh' =~ /(ab)(..)*/ ]","out":"[\"ab\",\"gh\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ABCD\",\"BCDE\",\"CDEF\",\"DEFG\",\"EFGH\",\"FGHA\",\"GHAB\",\"HABC\",\"ABCD\"]","err":"","code":"[ \"ABCDEFGHABCD\" =~ /(?=(....))/g ]","err_mask":""},{"out":"abcdefghi","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"abcdefghi"},{"err_mask":"","code":"'abcdefghi' =~ / (?{@a=()}) (?:(.)(?{push @a, $1})){4} (?= $ ) /x; \\@a","out":"[\"f\",\"g\",\"h\",\"i\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"abc,\\N,def,ghi,\\N,jkl","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" \"abc,,def,ghi,,jkl\" =~ s/(?<=,)(?=,)/\\\\N/gr"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","code":"\"abcdefg\" =~ s/ef//; [ $-[0], length $` ]","err_mask":""},{"out":"[\"[a=b]\",\"[c=d]\",\"[e=f]\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"[a=b][c=d][e=f]\"; my @matches = /(\\[[^=]*=[^]]\\])/g; [ @matches ]"},{"err_mask":"","code":"$_ = \"[a=b][c=d][e=f]\"; my @matches = split /(\\[[^\\]]*\\])/; [ @matches ]","err":"","out":"[\"\",\"[a=b]\",\"\",\"[c=d]\",\"\",\"[e=f]\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = \"[a=b][c=d][e=f]\"; my @matches = split /\\[[^\\]]*\\]/; [ @matches ]","out":"[]","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[ 'abcdef' =~ s/cd/XY/r ];","out":"[\"abXYef\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"abc\",\"bcd\",\"cde\"]","code":"['abcde' =~ /(?=(...))/g]","err_mask":""},{"code":"$_= /a b c d/; @vars = (split)[2,3]; \\@vars","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"err_mask":"","code":"\"abc\" =~ /(?<gold>bc)/; $1","err":"","out":"bc","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"B\"]","err":"","code":"'aBc' =~ m{([^a-z])}; [ $1 ]","err_mask":""},{"err":"","out":"[\"a b c\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"a b c\\n\", split]"},{"err_mask":"","code":"@abc = qw(a b c); [ @abc => @abc ]","out":"[\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"@abc = qw(a b c); [ \\@abc => \\@abc ]","out":"[[\"a\",\"b\",\"c\"],$VAR1->[0]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'abc' =~ s/a//;","err":"","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":" a bc","err":"","code":"$_=\"abc\"; s/a/ a /; $_","err_mask":""},{"err_mask":"","code":"'abc' =~ s/a//r;","out":"bc","err":"","out_mask":"Ã¿Ã¿"},{"out":"[\" a\",\" b\",\" c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \" a b c \" =~ /\\s+\\S+/g ]"},{"err_mask":"","code":"[ \" a b c \" =~ /\\s*\\S+/g ]  # to keep first non-space","err":"","out":"[\" a\",\" b\",\" c\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abc,\\N,\"this is ,\\N, a ,\\N, string column\",ghi,\\N,jkl","err":"","code":" 'abc,,\"this is ,, a ,, string column\",ghi,,jkl' =~ s/(?<=,)(?=,)/\\\\N/gr","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"MiescoMiesco","err":"","code":"($a, $b) = [ print(\"Miesco\"), print(\"Miesco\") ]","err_mask":""},{"code":"($a, $b) = [ print(\"Miesco\"), print(\"Miesco\") ]; print(\"$a\"), print(\"$b\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","out":"MiescoMiescoARRAY(0x3ab3b88)","err":""},{"code":"'Abra Kadabra'->import; say 'Magic'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Magic\n","err":""},{"out":"b","err":"","out_mask":"Ã¿","err_mask":"","code":"'a-b' =~ s/[a\\- ]//gr"},{"code":"' a b ' =~ /\\s\\B\\s/","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿","out":"ab","err":"","code":"'[a][b]' =~ s/[][]//gr","err_mask":""},{"code":"\"a()[]{}<>b\" =~ s/[][(){}<>]//gr","err_mask":"","out_mask":"Ã¿Ã¿","out":"ab","err":""},{"code":"'a-b' =~ s/[- ]//r","err_mask":"","out_mask":"Ã¿Ã¿","out":"ab","err":""},{"err_mask":"","code":"'a-b' =~ s/[\\- ]//r","err":"","out":"ab","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[-1]","err":"","code":"['A' cmp 'a']","err_mask":""},{"code":"'a.com' =~ #(\\w+\\.)com$#","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n"},{"err_mask":"","code":"\"a.com\" =~ /(?:\\w+\\.)+com$/","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"","err":"","out":"","code":"'a' .. 'd'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\",\"d\"]","code":"['a' .. 'd']","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"add 5\"\n","code":"add 5; sub add { $_[0]+1 }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"args would be printed here","err":"","code":"$_ = '$addmodnav'; if(/^\\$addmod/i) { if(/^\\$addmod(?: )/i) { print \"some other stuff\" } else { print \"args would be printed here\" } }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\u0000\u0000eth0\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err":"","code":"$addr = PF_PACKET; $iface = \"eth0\"; $socket = pack(\"Sa14\", $addr, $iface);","err_mask":""},{"err_mask":"","code":"`adduser modulus`","err":"","out":"","out_mask":""},{"code":"['Ã¦' =~ /([[:alpha:]])/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\303\"]","err":""},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"['Ã¦' =~ /([[:alpha:]])/a]"},{"err_mask":"","code":"$_ = \"Ã¦Ã¸Ã¥\"; s/(.)/sprintf('\\\\u%04x', ord $1)/ger","err":"","out":"\\u00c3\\u00a6\\u00c3\\u00b8\\u00c3\\u00a5","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Substitution replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n","code":"$_ = \"Ã¦Ã¸Ã¥\"; s/(.)sprintf('\\\\u%04x', ord $1)/ger","err_mask":""},{"out_mask":"","out":"","err":"","code":"\"a\" eq \"b\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"[ \"a\" eq \"b\" ]","err_mask":""},{"out_mask":"Ã¿","out":"5","err":"","code":"@_ = ('a' .. 'e'); $single = @_; $single","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"@a = (foo => 1, bar => 2); print %{a}","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"@a = (foo => 1, bar => 2); print ${{@a}}{\"a\"}","err_mask":""},{"err_mask":"","code":"@a = {foo => 1, bar => 2}; print ${$a}{\"foo\"}","out":"1","err":"","out_mask":"Ã¿"},{"code":"$a=\"foo bar\"; *$a = sub {\"baz\"}; \"foo bar\"->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"baz"},{"code":"[ \"a hash\" cmp \"an array\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[-1]"},{"err":"","out":"[\"o\",\"l\",\"lo\",\"l\",\"ll\",\"llo\",\"e\",\"el\",\"ell\",\"ello\",\"H\",\"He\",\"Hel\",\"Hell\",\"Hello\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@a = (); \"Hello\" =~ /.+(??{unshift@a,$&})/; \\@a"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"o\",\"lo\",\"llo\",\"ello\",\"Hello\"]","code":"@a = (); \"Hello\" =~ /.+$(??{unshift@a,$&})/; \\@a","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify glob in substitution (s///) at (eval 1) line 1, at EOF\n","err":"","code":" <a href=\"http://www.yahoo.com/something.php?else=AoilkOoiud.FUoiu239834&ipadd=4.2.2.2&uri=a8s98loielulius_souej.\" min=\"s987ojeouyslkje\"> =~ s/(<.*(src|href)=\"[_%&:\\/\\?=,\\.a-z0-9-]+)[\\?|#|&]ip(ad(d(r(ess?)?)?)?)?=([1-2]?[0-9]{1,2}\\.[1-2]?[0-9]{1,2}\\.[1-2]?[0-9]{1,2}\\.[1-2]?[0-9]{1,2})([_%#&=\\/\\.a-z0-9-]*\".*>)/$1$8/isg","err_mask":""},{"err":"","out":"it works","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$a = \"it works\"; print \"${chr 97}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,4,5,6,7,8]","err":"","code":"$all = [[1,2],[4,5,6],[7,8]]; push @one, @$_ for @$all; \\@one","err_mask":""},{"out_mask":"Ã¿","out":"a","err":"","code":"@_ = \"a\"; { local @_ = \"b\"; } \"@_\"","err_mask":""},{"err_mask":"","code":"'_' =~ /[:alpha:]/","out":"","err":"","out_mask":""},{"out":"1,01,2,","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$alpha{1}='1'; $alpha{'01'}='01'; $alpha{2}='2'; map { print \"$alpha{$_},\"; } sort { $a <=> $b || $alpha{$b} cmp $alpha{$a} } keys %alpha"},{"code":"$alpha{1}='1'; $alpha{01}='01'; $alpha{2}='2'; map { print \"$alpha{$_},\"; } sort { $a <=> $b || $alpha{$b} cmp $alpha{$a} } keys %alpha","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"01,2,"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"01,1,2,","code":"$alpha{a}='1'; $alpha{b}='01'; $alpha{c}='2'; map { print \"$alpha{$_},\"; } sort { $a <=> $b || $alpha{$a} cmp $alpha{$b} } keys %alpha","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2,1,01,","code":"$alpha{a}='1'; $alpha{b}='01'; $alpha{c}='2'; map { print \"$alpha{$_},\"; } sort { $a <=> $b || $alpha{$b} cmp $alpha{$a} } keys %alpha","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2,1,01,","code":"$alpha{a}='1'; $alpha{b}='01'; $alpha{c}='2'; map { print \"$alpha{$_},\"; } sort { $b <=> $a || $alpha{$b} cmp $alpha{$a} } keys %alpha","err_mask":""},{"err_mask":"","code":"$alpha{a}='1'; $alpha{b}='01'; $alpha{c}='2'; map { print \"$alpha{$_},\"; } sort { $b cmp $a || $alpha{$b} <=> $alpha{$a} } keys %alpha","out":"2,01,1,","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"Also this: \\N{PILE OF POO}\"","err":"","out":"Also this: Ã°ÂÂÂ©","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't use an undefined value as a symbol reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"*{$::{Altreus}}{SCALAR}"},{"out":"Altrsus","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"Altreus\" =~ s/^.*\\Ke/s/sr"},{"out":"","err":"","out_mask":"","err_mask":"","code":"a..'m'"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"'a' =~ m\\a\\"},{"err_mask":"","code":"a..'m',N..Z","err":"","out":"","out_mask":""},{"out_mask":"","out":"","err":"","code":"a..m=>N..Z","err_mask":""},{"out":"[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ a..'m',N..Z ] # list context"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"; and\"\n","err":"","code":"and evaldev: or so.","err_mask":""},{"code":"[ ............. and in regex i have ranges []...do i parse out the [] in the regex?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"[ ...\"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"a\"]","err":"","code":"[ 'a' =~ /((.))/ ] # ningu how about this?","err_mask":""},{"err":"","out":"1. [An introduction to Firmware Analysis](#an introduction to firmware analysis)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'### An introduction to Firmware Analysis' =~ s/### (.*)/1. [$1](#\\L$1)/gr"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Ano\",\"the\",\"r h\",\"app\",\"y d\",\"ay\"]","err":"","code":"[ \"Another happy day\" =~ m/(.\\K..?)/gc ]","err_mask":""},{"code":"@answer = (); ' foo= bar1,bar2,bar3  ' =~ / +foo= +.*?(\\b\\w+\\d+)(?{push @answer, $1})(*FAIL)/; \\@answer","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"bar1\",\"bar2\",\"bar3\"]"},{"err_mask":"","code":"\"A\\N{U+0327}\"","out":"AÃÂ§","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"any\" via package \"1\" (perhaps you forgot to load \"1\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"any {1} 1","err_mask":""},{"out":"ERROR: Can't call method \"any\" without a package or object reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"any {$_ eq 'a'}, 'b', 'c'"},{"err_mask":"","code":"\"any string\" =~ /alias:any string/","out":"","err":"","out_mask":""},{"err_mask":"","code":"$a=\"one\"; $a = $b || undef; print $a;","out":"1","err":"","out_mask":"Ã¿"},{"code":"$_=\"ÃÃ¶\"; [ s/[^Ã¤]/x/gir ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\303x\\303x\"]"},{"code":"'a' =~ /\\P{In_Latin1}/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"$a=[]; print !!@$a;","err":"","out":"1","out_mask":"Ã¿"},{"code":"$a=[]; print !!$a","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"$a=[]; print !!${@a}","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out":"ERROR: Not a SCALAR reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$a=[]; print !!${$a}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$@a\n\"\n","code":"$a=[]; print !!$@a","err_mask":""},{"err_mask":"","code":"$a = []; push $a, 1; $a  # right?","err":"","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"a quine!: \"a quine!: @_\"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"a quine!: @_\""},{"err_mask":"","code":"@a = qw(1 2 3); [ map { $_ == shift @a } @a ]","out":"[1,1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"@a = qw( 1 one 2 two ); print \"$_: $a[ $_ ] \" for keys @a;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0: 1 1: one 2: 2 3: two "},{"err_mask":"","code":"%a = qw ( 1 one 2 two ); print \"$_: $a{$_}, \" for keys %a","err":"","out":"1: one, 2: two, ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"%a = qw ( 1 one 2 two ); print \"$_: $a{$_}, \" for keys %s","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿","out":"12","err":"","code":"%a = qw ( 1 one 2 two ); print keys %a","err_mask":""},{"err":"","out":"2/8","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"%a = qw ( 1 one 2 two ); print scalar %a"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"%a = qw ( 1 one 2 two ); print scalar keys %a"},{"out":"3 elems: <a><b><c>","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@A = qw<a b c>; sprintf \"%d elems: \" . (\"<%s>\") x @A, scalar(@A), @A;"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"@a = (qw/foo bar baz/); @b = map {/bar/} @a; grep !defined, @b;"},{"code":"@a = (qw/foo bar baz/); @b = map {/bar/} @a; print Dumper(\\@b);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$VAR1 = [\n          1\n        ];\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]","code":"@a = (qw/foo bar baz/); [map {/bar/} @a]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"qw/foo bar baz); [map {/bar\"\nUnmatched right curly bracket at (eval 1) line 1, at end of line\nUnmatched right square bracket at (eval 1) line 1, at end of line\n","code":"@a = (qw/foo bar baz); [map {/bar/} @a]","err_mask":""},{"code":"@a = (qw/foo bar baz/); [map {scalar /bar/} @a]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",1,\"\"]"},{"code":"@a = qw(f o o); undef @a; push @a, qw( b a r );","err_mask":"","out_mask":"Ã¿","out":"3","err":""},{"out":"????","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$a=[qw/john paul george ringo/]; $str=join(', ', '?' x scalar @$a);"},{"code":"$a=[qw/john paul george ringo/]; $str=join(', ', ('?' x scalar @$a));","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"????"},{"err_mask":"","code":"@a = qw(N 123); sub f { &CORE::pack }; f(@a)","err":"","out":"\u0000\u0000\u0000{","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"@a = qw(N 123); sub f { &CORE::pack(@_) }; f(@a)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"\u0000\u0000\u0000{"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"<>; \\@ARGV"},{"err_mask":"","code":"@ARGV","err":"","out":"0","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"-1","code":"$#ARGV","err_mask":""},{"code":"*ARGV = [1]; print for <>;","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"@ar = (); [ map { $_->{a} } @ar ]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"code":"$ar = []; [ map { $_->{a} } @$ar ]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"err":"","out":"arn","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"arn"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Total:  arr","err":"","code":"@arr = ( 1, 2, 3, 4, 5 ); if ( $#arr == 4 ){ print \"Total: $# arr\" };","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"@arr = ( 1, 2, 3, 4, 5 ); if (!@arr) { print \"array was empty\"; }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"@arr = ( '1','2','3','4' ); print @arr >>;","err_mask":""},{"code":"@arr = 1; [exists $arr[-1], exists $arr[-2]]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,\"\"]"},{"code":"@arr1 = qw/ a b c /; @arr2 = @arr1;      ++$#arr1;     [ 'Arr1:', @arr1, 'Arr2:', @arr2 ] # modulus^ it seems you don't really understand that @arr1 *actually gets changed* when you do that ...","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Arr1:\",\"a\",\"b\",\"c\",undef,\"Arr2:\",\"a\",\"b\",\"c\"]"},{"err_mask":"","code":"@arr1 = qw/ a b c /; @arr2 = @arr1;      ++$#arr1;       print '@arr1: ' . join(","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"@arr1 = qw/bob alan/; @arr2 = (50, 100); @foo{@arr2} = @arr1; $foo{50}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"bob","err":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"@array/1"},{"out":"[\"?,?,?,?,?,?,?,?,?,?\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@array = 1..10; [ join ',', map '?', @array ]  # so would this"},{"code":"@array = 1..10; [ join ',', ('?') x @array ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"?,?,?,?,?,?,?,?,?,?\"]","err":""},{"code":"@array = (1,2,3); [ \\(@array) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\1,\\2,\\3]"},{"out_mask":"","out":"","err":"","code":"@array = (1,2,3); return join(',', @accounts);","err_mask":""},{"err_mask":"","code":"@array=(1..5); $array[10]","err":"","out":"","out_mask":""},{"out":"[1,2,4,8,16,32,64,128]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@array = 1; for (@array) {$_ <= 100 and push @array, $_ * 2} \\@array  # hehehe  (never do this :)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"k:1 v:one, k:one v:, k:2 v:two, k:two v:, ","code":"@array = ( 1=>\"one\", 2=>\"two\"); %hash = @array; map { print \"k:$_ v:$hash{$_}, \" } @array;","err_mask":""},{"code":"@array = ( 1=>\"one\", 2=>\"two\"); %hash = @array; map { print \"k:$_ v:$hash{$_}\" } @array;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"k:1 v:onek:one v:k:2 v:twok:two v:","err":""},{"err_mask":"","code":"@array = ( 1=>\"one\", 2=>\"two\"); %hash = @array; map { print \"k:$_ v:$hash{$_}, \" } keys @array;","out":"k:0 v:, k:1 v:one, k:2 v:two, k:3 v:, ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"@array = ( 1=>\"one\", 2=>\"two\"); %hash = @array; map { print \"k:$_ v:$hash{$_}, \" } keys @hash;"},{"code":"@array = ( 1=>\"one\", 2=>\"two\"); %hash = @array; map { print \"k:$_ v:$hash{$_}, \" } keys %hash;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"k:1 v:one, k:2 v:two, ","err":""},{"out":"-1","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"$#array = -2"},{"err":"","out":"[45,67,98]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@array = (45,34,67,98); @array = grep $_ != 34, @array; \\@array"},{"err_mask":"","code":"@array = (45,34,67,98); @index{@array} = 0 .. $#array; splice @array, $index{34}, 1; \\ @array","out":"[45,67,98]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[45,67,98]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@array = (45,34,67,98); splice @array, $_, 1 for grep $array[$_] == 34, reverse 0 .. $#array; \\@array"},{"code":"@array = ( 'a' .. 'c' ); printf \"Array:\" . ('%1$d - %s' x @array), 1, @array","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Array:1 - 11 - a1 - b"},{"code":"@array = a..j;  [ @array[-@array .. -2] ]  # entire array except for last element (without modifying array)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"]","err":""},{"out":"55555","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@array = (('a')x55555); scalar @array"},{"code":"@array = (('a')x55); scalar @array","err_mask":"","out_mask":"Ã¿Ã¿","out":"55","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"a\",\"a\",\"a\",\"a\"]","code":"@array = (('a')x5); \\@array","err_mask":""},{"code":"@array = (('a')x(5x10)); scalar @array","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Out of memory!\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,0,2,4,6,8,10,12,14,16,18,20,0,3,6,9,12,15,18,21,24,27,30,0,4,8,12,16,20,24,28,32,36,40,0,5,10,15,20,25,30,35,40,45,50,0,6,12,18,24,30,36,42,48,54,60,0,7,14,21,28,35,42,49,56,63,70,0,8,16,24,32,40,48,56,64,72,80,0,9,18,27,36,45,54,63,72,81,90,0,10,20,30,40,50,60,70,80,90,100]","err":"","code":"@array = map { $_ % 11 * int $_ / 11 } 0..120; \\@array","err_mask":""},{"err_mask":"","code":"@array = qw(1 2 3); print \"match\" if(any{ $_ eq '4'} @array);","out":"ERROR: Can't call method \"any\" without a package or object reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"@array = qw(1 2 3); say \"match\" if(any{ $_ eq '4'} @array);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"any\" without a package or object reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"any\" without a package or object reference at (eval 1) line 1, <STDIN> line 1.\n","code":"@array = qw(1,2,3); say \"match\" if(any{ $_ eq '4'} @array);","err_mask":""},{"code":"@array = qw/a b c d e f/; splice @array, -1, 0, 'x'; \\@array  # voila","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\",\"d\",\"e\",\"x\",\"f\"]","err":""},{"out":"[\"a\",\"b\",\"c\",\"d\",\"x\",\"e\",\"f\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@array = qw/a b c d e f/; splice @array, -2, 0, 'x'; \\@array"},{"err_mask":"","code":"@array = qw/a b c d e f/; splice @array, -2, 0, 'x'; \\@array  # voila","err":"","out":"[\"a\",\"b\",\"c\",\"d\",\"x\",\"e\",\"f\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"@array = qw/a b c d e f/; splice @array, scalar(@array), 0, 'x'; \\@array  # voila","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"x\"]"},{"err":"","out":"[\"shouty\",\"shout\",\"shout\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@array = qw(SHOUTY SHOUT SHOUT); $_ = lc for @array; \\@array"},{"code":"@array = qw//; splice @array, -2, 0, 'x'; \\@array","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of non-creatable array value attempted, subscript -2 at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"","out":"b","code":"$arrayref = [\"a\",\"b\"];  \"$arrayref->[1]\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"smut","err":"","code":"$arrayref = [ { foo => bar, baz => m00 }, { lol => lulz, schweinerei => smut } ]; $arrayref->[1]{schweinerei}","err_mask":""},{"code":"$arrayref=[qw/a b c/]; scalar @{$arrayref}[1,2,3]","err_mask":"","out_mask":"","out":"","err":""},{"out":"ERROR: Can't find string terminator \"/\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$arrayref=[qw/a b c]; scalar @{$arrayref}[1,2,3]"},{"code":"@arr='a'--'z';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify constant item in postdecrement (--) at (eval 1) line 1, near \"'a'--\"\nsyntax error at (eval 1) line 1, near \"--'z'\"\n"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"@arr = (foo => 1, bar => 2); { %{a} }"},{"code":"@arr = (); if (!@arr) { print \"array was empty\"; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"array was empty","err":""},{"err":"","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$arr = []; push $arr, 1; $arr"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"this :3 a |0 c |0  |","code":"@arr=qw/a b c/; $b = 3; printf \"this :\".(\"%d %s |\" x @arr), $b, @arr;","err_mask":""},{"err_mask":"","code":"@arr=qw/a b c/; @bong = (1..@arr); printf \"this :\".(\"%d %s |\" x @arr), @bong, @arr;","out":"this :1 2 |3 a |0 c |","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"@arr=qw/a b c/; $bong = 3; printf \"this :\".(\"%d %s |\" x @arr), $bong, @arr;","err":"","out":"this :3 a |0 c |0  |","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0: 'a', 1: 'b', 2: 'c', ","err":"","code":"@arr=qw/a b c/; sprintf \"%d: '%s', \" x @arr, %arr[0 .. $#arr]","err_mask":""},{"out":"3 a |3 b |3 c |","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@arr=qw/a b c/; $x = 3; printf '%.0s' . ('%1$d %s |' x @arr), $x, @arr;"},{"code":"@arr=qw/a b c/; $x = 3; printf '%1$d %s' x @arr, $x, @arr;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"3 33 a3 b"},{"code":"@arr = qw(one two three); sub f{print@{$_[0]}}f*{arr}{ref[]};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"onetwothree"},{"code":"@arr = qw(one two three); sub f{print@{$_[0]}}f*{arr}{ref[]}; <-- *{arr}{ref[]}? o_O","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unterminated <> operator at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"","out":"","err":"","code":"@arr = undef; if (!@arr) { print \"array was empty\"; }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"","code":"@ar = (undef); [ map { $_->{a} } @ar ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"","code":"$ar = [undef]; [ map { $_->{a} } @$ar ]","err_mask":""},{"err_mask":"","code":"[ 'a' =~ s/(.)/('$1','$1')/re ]","err":"","out":"[\"\\$1\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'a' =~ s/(.)/($1,$1)/re ]"},{"err":"","out":"[\"aa\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'a' =~ s/(.)/($1) x 2/re ]"},{"code":"'A' =~ s/(A)/lcfirst $1/re","err_mask":"","out_mask":"Ã¿","out":"a","err":""},{"code":"$_=\"Ã\"; [ s/Ã¤/x/ir ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\303\\204\"]","err":""},{"err":"","out":"[\"asd1312321\",\"asd1212\",\"asd121212\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"asd1312321asd1212asd121212\" =~/(asd\\d+)/g ]"},{"err_mask":"","code":"~\"asdf\"","err":"","out":"ÂÂÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"$asdf = []; 0 + !!@$blah"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"f\"]","code":"\"asdf\" =~ /(.)+/; [ $1 ]","err_mask":""},{"code":"$asdf=[1,2]; !!@$asdf;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"$asdf=[]; !!@$asdf;","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿","err":"","out":"1","code":"\"asd.fg.foo.asd.fg\" =~ /(.*)\\.([^.]*)\\.\\1/","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"$asdf=[]; print !!@$asdf;","err_mask":""},{"out_mask":"Ã¿","out":"2","err":"","code":"\"        asdf    \" =~ /^([\\t ]+)/; my $indents = () = $1 =~ /(\\t| {4})/g","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"\"        asdf    \" =~ /^([\\t ]+)/; my $indents = () = $1 =~ /(\\t| {8})/g"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"\"        asdf    \" =~ /^([\\t\\s]+)/; my $indents = () = $1 =~ /(\\t|\\s{4})/g"},{"out_mask":"Ã¿","out":"0","err":"","code":"\"        asdf    \" =~ /^[\\t\\s]+/; my $indents = () = $1 =~ /(\\t|\\s{4})/g","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"yes","err":"","code":"(\"asdfX\" ^ \"asdfY\") =~ /^\\0*[^\\0]\\z/ ? 'yes' : 'no'","err_mask":""},{"code":"(\"asdfYt\" ^ \"asdfY\") =~ /^\\0*[^\\0]\\z/ ? 'yes' : 'no'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"yes"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"[ \"asd   qwe\" =~ /(\\w+)\\s(\\w+?)/ ]"},{"code":"[ \"asd   qwe\" =~ /(\\w+)\\s+(\\w+?)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"asd\",\"q\"]","err":""},{"err_mask":"","code":"\"a\" =~ s/(.)/\\l$1/r","out":"a","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"\"A\" =~ s/(.)/\\l$1/r","err":"","out":"a","out_mask":"Ã¿"},{"out":"214365","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@a = split //, 123456; join '', @a[map $_^1, 0..$#a]"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"\"a string literal\" ~~ [\"a string literal\"]"},{"out_mask":"","out":"","err":"","code":"[ \"a string literal\" ] ~~ \"a string literal\"","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"[\"a string literal\"] ~~ [\"a string literal\", \"another string literal\"]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"foo","code":"{ a => sub { print 'foo' } }->{a}()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Usage: POSIX::atan(x) at (eval 1) line 1, <STDIN> line 1.\n","code":"atan(0, -1)","err_mask":""},{"code":"atan2(0, -1)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"3.14159265358979"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"\u0000\u0013\u0000\u0000","err":"","code":"'atcg' ^ 'agcg'","err_mask":""},{"code":"\"Ã\\u{0086}ther\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ÃÂ{0086}ther","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ÃÂ0086ther","err":"","code":"\"Ã\\u0086ther\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate print.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$a=[]; use print !!$a","err_mask":""},{"err_mask":"","code":"(\"a\" x 20) =~ /a*b/;","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ (\"a\" x 20) =~ /(a*b)/ ];","err_mask":""},{"out":"[\"aaaaaaaaaaaaaaaaaaaab\",\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ (\"a\" x 20 . \"b\") =~ /((a*?)*b)/ ];"},{"err":"","out":"[\"aaaaaaaaaaaaaaaaaaaab\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ (\"a\" x 20 . \"b\") =~ /((a*)*b)/ ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"aaaaaaaaaaaaaaaaaaaab\",\"a\"]","code":"[ (\"a\" x 20 . \"b\") =~ /((a+?)*b)/ ];","err_mask":""},{"err":"","out":"[\"aaaaaaaaaaaaaaaaaaaab\",\"aaaaaaaaaaaaaaaaaaaa\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ (\"a\" x 20 . \"b\") =~ /((a+)*b)/ ];"},{"err_mask":"","code":"[ (\"a\" x 20 . \"b\") =~ /(a*?b)/ ];","err":"","out":"[\"aaaaaaaaaaaaaaaaaaaab\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"'a' x 3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"aaa"},{"code":"[('a'++)x3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in postincrement (++) at (eval 1) line 1, near \"'a'++\"\n","err":""},{"err_mask":"","code":"[ (\"a\" x 30) =~ /((a|a?)+)/ ];","err":"","out":"[\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"['a' x 4]","err":"","out":"[\"aaaa\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[('a') x 4]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"a\",\"a\",\"a\"]"},{"code":"('a,'x45) =~ s/(.*?,){10}\\K/\\n/gr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"a,a,a,a,a,a,a,a,a,a,\na,a,a,a,a,a,a,a,a,a,\na,a,a,a,a,a,a,a,a,a,\na,a,a,a,a,a,a,a,a,a,\na,a,a,a,a,","err":""},{"err_mask":"","code":"[ 'a' x 'b' ]","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"yes\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'axcom' =~ /a.com/ ? 'yes' : 'no' ]"},{"err_mask":"","code":"[\"a\" xor \"a\"]","err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"A-Z\" =~ /A-Z/ ? 'true' : 'false'","out":"true","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"_[a-z]+_(bd\\d+_[a-z0-9]{7}_\\d{6}_\\d{4}(AM|PM)_PST).tar.gz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'_[a-z]+_(bd\\d+_[a-z0-9]{7}_\\d{6}_\\d{4}(AM|PM)_PST).tar.gz'"},{"err_mask":"","code":"\"\\\\\\\\\\\\\\\\$backup_server\\\\\\\\$host\"","err":"","out":"\\\\\\\\\\\\","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"\\\\\\\\\\\\\\\\backup_server\\\\\\\\host\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\\\\\\\backup_server\\\\host","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,1]","code":"\"banana\" =~ /(a)/; [ @- ]","err_mask":""},{"err_mask":"","code":"\"banana\" =~ /(a)/; \\@-","err":"","out":"[22]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[20]","err":"","code":"\"banana\" =~ /a/; \\@-","err_mask":""},{"err_mask":"","code":"[ \"banana\" =~ ?a? ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"=~ ?\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"ba\",\"na\",\"na\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"banana\" =~ /.a/g ]"},{"err_mask":"","code":"() = 'banana' =~ /(?=ana)/g","err":"","out":"2","out_mask":"Ã¿"},{"err":"","out":"foo1bar1baz","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"banana\" =~ /apple/; join //, qw(foo bar baz)"},{"err_mask":"","code":"\"banana\" =~ /b(a)/; [ @- ]","out":"[0,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[0,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"banana\" =~ /(b|a|n)/g; [@-]"},{"code":"('banana' ^ 'batman') =~ s/(.)/chr(ord \"0\" + !ord $1)/ger","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"110000","err":""},{"code":"('banana' ^ 'batman') =~ s/(.)/chr(ord \"0\" + ord $1)/ger","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"002111","err":""},{"out":"110000","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"('banana' ^ 'batma') =~ s/(.)/chr(ord \"0\" + !ord $1)/ger"},{"code":"$_ = \"banana\"; $from =~ /$_/i; [$from, $_]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,\"banana\"]"},{"err":"","out":"[undef,\"banana\",1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"banana\"; $from =~ /$_/i; [$from, $_, scalar /$_/i]"},{"err":"","out":"bananas","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"bananas"},{"err_mask":"","code":"\"banana\" =~ s/a/o/gr","err":"","out":"bonono","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = \"banana\"; [ s/(ba)/bo/ ]","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"out":"62616e616e61","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"banana\"; s/./sprintf '%2x', ord $&/ge; $_"},{"out":"\\x0\\x0\\x0\\x0\\x0\\x0","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"banana\" =~ s/(.)/sprintf \"\\\\x%x\", $1/gers"},{"err_mask":"","code":"\"banana\" =~ s/(.)/sprintf \"\\\\x%x\", ord $1/gers","err":"","out":"\\x62\\x61\\x6e\\x61\\x6e\\x61","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"110000","code":"('banan' ^ 'batman') =~ s/(.)/chr(ord \"0\" + !ord $1)/ger","err_mask":""},{"code":"\"banannas\" =~ /anna/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"-(-bar)","out":"+bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"'bar'"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"'bar'+0"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[3,2,\"ar\"]","err":"","code":"$_ = \"barbb\"; my $count = 0 + s/b//g; [ $count, length($_), $_ ]","err_mask":""},{"err_mask":"","code":"[ $_ = \"barbb\") =~ s/b//g ]","out":"ERROR: syntax error at (eval 1) line 1, near \"\"barbb\") \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = \" bar\"; /(foo)? (bar); [$1, $2]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"[undef,\"bar\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \" bar\"; /(foo)? (bar)/; [$1, $2]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"+bar","code":"-(-'bar') # lul wat?","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"false","err":"","code":"\"B\" =~ /A-Z/ ? 'true' : 'false'","err_mask":""},{"code":"\"bead^corn\" =~ /d^/","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"beans [and rice--> ] <--","code":"'beans [and rice]' =~ s/[]]/--> ] <--/r","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"beans cornbread","err":"","code":"\"beans\" . ' ' . \"cornbread\"","err_mask":""},{"code":"BEGIN(<>)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(<>\"\n"},{"err":"","out":"","out_mask":"","err_mask":"","code":"BEGIN { *CORE::GLOBAL::defined = sub { 42 }; } defined"},{"err_mask":"","code":"BEGIN { *CORE::GLOBAL::ref = sub { 42 }; }  ref 42","out":"42","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"BEGIN { *CORE::GLOBAL::ref = sub { \"er, wait\" }; }  ref 42","err":"","out":"er, wait","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":" BEGIN { *foo = sub (&) { shift->(\"wibble\") } } foo { [ @_ ] }","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&)\"\nBEGIN not safe after errors--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":" BEGIN { *foo = sub (&) { shift->(\"wibble\") } foo { [ @_ ] }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&)\"\nBEGIN not safe after errors--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"[\"asdf\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN { $^H = 0 }; open $fh, \">\", \\$str; $fh->say('asdf'); [ $str ]"},{"err_mask":"","code":"BEGIN { $^H = 0 }; open $fh, \">\", \\$str; say {$fh} 'asdf'; [ $str ]","err":"","out":"[\"asdf\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"BEGIN { $^H = 0 }; open $fh, \">\", \\$str; say $fh 'asdf'; [ $str ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"asdf\\n\"]"},{"err_mask":"","code":"BEGIN { $^H = 0 }; open $fh, \">\", \\$str; say {$fh} 'main'; [ $str ]","out":"[\"main\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"say 42\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN { $^H = 0 }; say 42;"},{"out":"ERROR: Can't call method \"say\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN { $^H = 0 }; say {$fh} 'main';"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Constant(q): Call to &{$^H{q}} did not return a defined value at (eval 1) line 1, near \"defined 'foo'\"\n","code":"BEGIN { $^H{q} = sub {}; $^H |= 0x8000; } defined 'foo'","err_mask":""},{"code":"BEGIN { *keyys = \\&CORE::keys; } my %foo = 1 .. 10; [ keyys %foo ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[7,9,5,1,3]","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"yes","code":"BEGIN { *main::defined = sub { !1 } } defined(\"womble\") ? \"yes\" : \"no\"","err_mask":""},{"err_mask":"","code":"BEGIN{ my $p = \\__PACKAGE__; &Internals::SvREADONLY($p, 0); $$p = 'foo'; } [ caller(0) ]","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"BEGIN{ my $p = \\__PACKAGE__; &Internals::SvREADONLY($p, 0); $$p = 'foo'; } [ __PACKAGE__ ]","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"BEGIN { no strict 'refs'; *$_ = sub () :lvalue { state $x; $x } for qw/foo bar baz/; } foo = 1; bar = 2; baz = 3; [ foo, bar, baz ] # works for whatever","err":"","out":"ERROR: Missing $ on loop variable at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"surprise!\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN { overload::constant integer => sub { state $x = 5; $x++ }; } my $foo = \"5\"; unless ($foo == 5) { say 1 } elsif ($foo == 5) { say 2 } else { say \"surprise!\" }"},{"code":"BEGIN { package X; *::defined = \\&::defined; } sub defined { 42 } defined","err_mask":"","out_mask":"","err":"","out":""},{"code":"BEGIN { $SIG{__DIE__} = sub { say 42; exit  };  }  a bc","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"42\nERROR: Can't locate object method \"a\" via package \"bc\" (perhaps you forgot to load \"bc\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"BEGIN { $SIG{__DIE__} = sub { say 42; return  };  }  a bc","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,1,\\1,0,\"\",\\\"\",0,\"\",$VAR1->[5],1,1,$VAR1->[2]]","err":"","code":"BEGIN { $::{true} = \\!!1; $::{false} = \\!!0 }; [ map { 0+$_, ''.$_, \\$_ } true, false, !!0, !!1 ];","err_mask":""},{"code":"BEGIN{$^W=1}join+($x)x101","err_mask":"","out_mask":"","out":"","err":""},{"code":"BEGIN { $::{wtf} = \\\"hi\"; } \"wtf\"->();","err_mask":"","out_mask":"Ã¿Ã¿","out":"hi","err":""},{"code":"BEGIN { $::{wtf} = \\\"hi\"; } wtf()","err_mask":"","out_mask":"Ã¿Ã¿","out":"hi","err":""},{"out":"ERROR: Too many arguments for main::wtf at (eval 1) line 1, near \"\"bleh\" )\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN { $::{wtf} = \\\"hi\"; } wtf( \"bleh\" )"},{"err":"","out":"[\"big endian: 114\",\"little endian: 1912602624\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"big endian: \" . 0x0000_0072, \"little endian: \" . 0x7200_0000 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"big fan of Barney, Frederick, and Barney.","code":"\"big fan of Fred, Frederick, and Wilma.\" =~ s/\\b(Fred|Wilma)\\b/Barney/gr","err_mask":""},{"err_mask":"","code":"() = bike .. care","err":"","out":"12351","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"`/bin/ls`","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Too many open files","err":"","code":"`/bin/ls`; $!","err_mask":""},{"code":"binmode select; print chr 8305","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¢ÂÂ±"},{"err_mask":"","code":"binmode STDOUT; a^\"â¹\"^b","err":"","out":"á¹","out_mask":"Ã¿Ã¿Ã¿"},{"code":"binmode STDOUT; \"â¡\"^b^u^u","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ï¿½ï¿½ï¿½","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"â­Câ® â­aâ® â­Mâ®!â­eâ®yâ­Lâ®Lâ­ â®lâ­câ®Iâ­Aâ®sâ­sâ® â­Eâ®Sâ­ â®iâ­ â® ","code":"binmode STDOUT; $_ = \"CaMeL cAsE   iS sIlLy!  \"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err_mask":""},{"err":"","out":"â­Câ®?â­aâ® â­Mâ®!â­eâ®yâ­Lâ®Lâ­ â®lâ­câ®Iâ­Aâ®sâ­sâ® â­Eâ®Sâ­ â®iâ­ â® ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT; $_ = \"CaMeL cAsE   iS sIlLy! ?\"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;"},{"err_mask":"","code":"binmode STDOUT; $_ = \"CaMeL cAsE   iS sIlLy! \"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err":"","out":"â­Câ® â­aâ®!â­Mâ®yâ­eâ®Lâ­Lâ®lâ­ â®Iâ­câ®sâ­Aâ® â­sâ®Sâ­Eâ®iâ­ â® ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"binmode STDOUT; $_ = \"CaMeL cAsE  iS sIlLy! \"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","out":"â­Câ® â­aâ®!â­Mâ®yâ­eâ®Lâ­Lâ®lâ­ â®Iâ­câ®sâ­Aâ® â­sâ®Sâ­Eâ®iâ­ â® ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"â­Câ® â­aâ®!â­Mâ®yâ­eâ®Lâ­Lâ®lâ­ â®Iâ­câ®sâ­Aâ® â­sâ®Sâ­Eâ®i","err":"","code":"binmode STDOUT; $_ = \"CaMeL cAsE iS sIlLy! \"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"â­Câ®!â­aâ®yâ­Mâ®Lâ­eâ®lâ­Lâ®Iâ­ â®sâ­câ® â­Aâ®Sâ­sâ®iâ­Eâ® ","err":"","code":"binmode STDOUT; $_ = \"CaMeL cAsE iS sIlLy!\"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err_mask":""},{"out":"ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT; Encode::decode(\"utf-8\", \"\\x99\\x99\\x99\\x99\\x99\\x99\")"},{"code":"binmode STDOUT; $_ = \"Just another Perl/BIDI Hacker,\"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"â­Jâ®,â­uâ®râ­sâ®eâ­tâ®kâ­ â®câ­aâ®aâ­nâ®Hâ­oâ® â­tâ®Iâ­hâ®Dâ­eâ®Iâ­râ®Bâ­ â®/â­Pâ®lâ­eâ®r","err":""},{"err":"","out":"Xï¿½ï¿½ï¿½ï¿½o|}ï¿½vsï¿½ï¿½c|wq}rsï¿½voqysï¿½:","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\xff00-\\xff5f]r;"},{"err":"","out":"â","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT; \"\\N{SPARKLE}\";"},{"out":"ð©","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT; print \"\\x{1f4a9}\""},{"code":"binmode STDOUT, ':raw'; print grep { /\\d/ } map { chr } 0x1..0xe50 # for pink_mist's irssi","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0123456789Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹ßßßßßßßßßßà¥¦à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à§¦à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à©¦à©§à©¨à©©à©ªà©«à©¬à©­à©®à©¯à«¦à«§à«¨à«©à«ªà««à«¬à«­à«®à«¯à­¦à­§à­¨à­©à­ªà­«à­¬à­­à­®à­¯à¯¦à¯§à¯¨à¯©à¯ªà¯«à¯¬à¯­à¯®à¯¯à±¦à±§à±¨à±©à±ªà±«à±¬à±­à±®à±¯à³¦à³§à³¨à³©à³ªà³«à³¬à³­à³®à³¯àµ¦àµ§àµ¨àµ©àµªàµ«àµ¬àµ­àµ®àµ¯à·¦à·§à·¨à·©à·ªà·«à·¬à·­à·®à·¯à¹","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ð§ð¨ð©ðªð«ð¬ð­ð®ð¯ð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ð¶ð·ð¸ð¹ðºð»ð¼ð½ð¾ð¿ððððððððððð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ððððððððððððððððððððððððððððððð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ð£ ð£¡ð£¢ð££ð£¤ð£¥ð£¦ð£§ð£¨ð£©ð© ð©¡ð©¢ð©£ð©¤ð©¥ð©¦ð©§ð©¨ð©©ð­ð­ð­ð­ð­ð­ð­ð­ð­ð­ððððððððððððððððððð ð¡ð¢ð£ð¤ð¥ð¦ð§ð¨ð©ðªð«ð¬ð­ð®ð¯ð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ðºð»ð¼ð½ð¾ð¿","code":"binmode STDOUT, ':raw'; print grep { /\\d/ } map { chr } 0x11067..0x10ffff # how about these fonts ;)","err_mask":""},{"err_mask":"","code":"binmode STDOUT, ':raw'; print grep { /\\d/ } map { chr } 1..0x10ffff","err":"","out":"0123456789Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹ßßßßßßßßßßà¥¦à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à§¦à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à©¦à©§à©¨à©©à©ªà©«à©¬à©­à©®à©¯à«¦à«§à«¨à«©à«ªà««à«¬à«­à«®à«¯à­¦à­§à­¨à­©à­ªà­«à­¬à­­à­®à­¯à¯¦à¯§à¯¨à¯©à¯ªà¯«à¯¬à¯­à¯®à¯¯à±¦à±§à±¨à±©à±ªà±«à±¬à±­à±®à±¯à³¦à³§à³¨à³©à³ªà³«à³¬à³­à³®à³¯àµ¦àµ§àµ¨àµ©àµªàµ«àµ¬àµ­àµ®àµ¯à·¦à·§à·¨à·©à·ªà·«à·¬à·­à·®à·¯à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à»à»à»à»à»à»à»à»à»à»à¼ à¼¡à¼¢à¼£à¼¤à¼¥à¼¦à¼§à¼¨à¼©ááááááááááááááááááááá á¡á¢á£á¤á¥á¦á§á¨á©á á á á á á á á á á á¥á¥á¥á¥á¥á¥á¥á¥á¥á¥á§á§á§á§á§á§á§á§á§á§áªáªáªáªáªáªáªáªáªáªáªáªáªáªáªáªáªáªáªáªá­á­á­á­á­á­á­á­á­á­á®°á®±á®²á®³á®´á®µá®¶á®·á®¸á®¹á±á±á±á±á±á±á±á±á±á±á±á±á±á±á±á±á±á±á±á±ê ê¡ê¢ê£ê¤ê¥ê¦ê§ê¨ê©ê£ê£ê£ê£ê£ê£ê£ê£ê£ê£ê¤ê¤ê¤ê¤ê¤ê¤ê¤ê¤ê¤ê¤ê§ê§ê§ê§ê§ê§ê§ê§ê§ê§ê§°ê§±ê§²ê§³ê§´ê§µê§¶ê§·ê§¸ê§¹ê©ê©ê©ê©ê©ê©ê©ê©ê©ê©ê¯°ê¯±ê¯²ê¯³ê¯´ê¯µê¯¶ê¯·ê¯¸ê¯¹ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ð ð¡ð¢ð£ð¤ð¥ð¦ð§ð¨ð©ð¦ð§ð¨ð©ðªð«ð¬ð­ð®ð¯ð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ð¶ð·ð¸ð¹ðºð»ð¼ð½ð¾ð¿ððððððððððð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ððððððððððððððððððððððððððððððð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ð£ ð£¡ð£¢ð££ð£¤ð£¥ð£¦ð£§ð£¨ð£©ð© ð©¡ð©¢ð©£ð©¤ð©¥ð©¦ð©§ð©¨ð©©ð­ð­ð­ð­ð­ð­ð­ð­ð­ð­ððððððððððððððððððð ð¡ð¢ð£ð¤ð¥ð¦ð§ð¨ð©ðªð«ð¬ð­ð®ð¯ð°ð±ð²ð³ð´ðµð¶ð·ð¸ð¹ðºð»ð¼ð½ð¾ð¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$bla = (12, 13); $bla","err_mask":"","out_mask":"Ã¿Ã¿","out":"13","err":""},{"err":"","out":"[12,undef,undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"($bla = ($bli, $blu)) = (12, 13, 14); [$bla, $bli, $blu]"},{"code":"'blah blah '\\'' blah blah '\\'' blah blah'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bablah1","code":"'blah' . print \"a\" . 'blah' . print \"b\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hah\"]","code":"[ \"blah\" =~ s/bl/h/r ]","err_mask":""},{"err_mask":"","code":"$blah = { x=>1 }; $z => { y=>$blah->{x} }; $blah->{x} = \"hello\"; $z->{y}","err":"","out":"","out_mask":""},{"out":"no match","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"blalapi0\" =~ /^lapi0$/ ? \"match\" : \"no match\""},{"err":"","out":"ERROR: Can't locate object method \"bloop\" via package \"bleep\" (perhaps you forgot to load \"bleep\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"bleep\"->bloop"},{"err_mask":"","code":"[ \"blehAAtingtongtangTTthe cat\" =~ m/(AA.{1,23}TT)/ ]","err":"","out":"[\"AAtingtongtangTT\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$bleh = sub { print $_[0]; }; $bleh->(\"two\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"two"},{"out_mask":"Ã¿","out":"1","err":"","code":"$bleh = sub { print \"$_\" }; $bleh->(\"one\");","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"$bleh = sub { print \"$_\" }; $bleh->(\"two\");","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"two","code":"$bleh = sub { print shift }; $bleh->(\"two\");","err_mask":""},{"code":"bless {}, \"\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bless( {}, 'main' )"},{"err_mask":"","code":"\"\" . bless {}, \"0\"","out":"0=HASH(0x429ab88)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"bless [], \"\\0\" # or something","out":"bless( [], '' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"\" . bless {}, \"ARRAY\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err":"","out":"ARRAY=HASH(0x455eb88)"},{"code":"bless \\do { my $nou = undef }, \"trolol\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"bless( do{\\(my $o = undef)}, 'trolol' )","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"bless( {}, 'ÃÃºÃ­Ã¾Ã¯Â¾Â­Ã' )","err":"","code":"bless {}, pack(\"ll\",0xFEEDFACE,0xDEADBEEF)","err_mask":""},{"err_mask":"","code":"'' . bless {}, 'Some::Class'","err":"","out":"Some::Class=HASH(0x4367b88)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"bless \\undef, \"trolol\"","err_mask":""},{"code":"bless you","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't bless non-reference value at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"bless \\'you', 'Altreus'","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"bless([], \"your::face\")->import(42);","err":"","out":"","out_mask":""},{"err_mask":"","code":"Blubb->new","out":"ERROR: Can't locate object method \"new\" via package \"Blubb\" (perhaps you forgot to load \"Blubb\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"bold test end bold\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"bold test end bold","err":""},{"out":" \u0002*bold*\u0002 \u001f_underline_\u001f /italics/ normal ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\" \u0002*bold*\u0002 \u001f_underline_\u001f /italics/ normal \""},{"code":"'bool' gt '_Bool'","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"o\"]","err":"","code":"[ 'boooo' =~ /\\w*(.)\\1\\w*/g ]","err_mask":""},{"err":"","out":"btw, you can do the same kind of thing with trigger.pl","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"btw, you can do the same kind of thing with trigger.pl\""},{"err":"","out":"","out_mask":"","err_mask":"","code":"\"but not this\" =~ m/^(a+)/ and $+[1]"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"but where do i put the test?"},{"err_mask":"","code":"buu","out":"buu","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"\"b\"x10e10","out":"","err":"Out of memory!\npanic: fold_constants JMPENV_PUSH returned 2, <STDIN> line 1.\n","out_mask":""},{"err":"","out":"^C","out_mask":"Ã¿Ã¿","err_mask":"","code":"\"\\^C\""},{"err_mask":"","code":"$^C","err":"","out":"0","out_mask":"Ã¿"},{"err":"","out":"[\" foo (bar [baz] quux [blop]) \"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$c = 0; [ ' foo (bar (baz) quux (blop)) ' =~ s/[()]/$& eq '(' ? $c++ ? '[' : $& : --$c ? ']' : $&/ger ]"},{"err_mask":"","code":"$c = 1; while(my $e = glob \"{foo,bar}\") {print $c++, \") \", $e, \"    \"}","out":"1) foo    2) bar    ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"main::perl_code","code":"(caller(1))[3]","err_mask":""},{"code":"$(caller(1))[3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"$(caller\"\n","err":""},{"out_mask":"","err":"","out":"","code":"${(caller(1))}[3]","err_mask":""},{"code":"\"\"->can(\"foo\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"can\" without a package or object reference at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"","out":"","err":"","code":"'.canvas_container' =~ /\\b\\.canvas/","err_mask":""},{"err_mask":"","code":"($capt) = 'hello world' =~ /(hello)/","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"","out":"","err":"","code":"($capt) = 'hello world' =~ /(hello)/; $cap","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hello","code":"($capt) = 'hello world' =~ /(hello)/; $capt","err_mask":""},{"code":"[ \"cat 10\" =~ /(?:cat|dog)\\s(\\d+)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[10]","err":""},{"out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"cat 10\" =~ /(?:cat)|(?:dog)\\s(\\d+)/ ]"},{"code":"[ 'catdog' =~ /(?=(\\w{2}))./sg ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ca\",\"at\",\"td\",\"do\",\"og\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ca\",\"td\",\"og\"]","err":"","code":"[ 'catdog' =~ /(\\w\\K\\w)/g ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"cats","err":"","code":"cats","err_mask":""},{"code":"~'cats'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ÂÂÂÂ"},{"out_mask":"","err":"","out":"","code":"\"@cats\"","err_mask":""},{"err_mask":"","code":"[ \"\" || \"cats\" ]","err":"","out":"[\"cats\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"cats","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"+\"cats\""},{"out_mask":"Ã¿","err":"","out":"1","code":"\"cats and dogs say hello world\" =~ /hello world/","err_mask":""},{"err_mask":"","code":"$cats = \"cats\"; $cats =~ s{$cats}'$dogs'r","err":"","out":"$dogs","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$cats = \"meow\"; printf '\"many cats %s\"', $cats","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\"many cats meow\""},{"err_mask":"","code":"$cats = \"meow\"; [qq(\"many cats $cats\")]","out":"[\"\\\"many cats meow\\\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$cats = \"meow\"; [ sprintf '\"many cats %s\"', $cats ]","err":"","out":"[\"\\\"many cats meow\\\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"cats\" =~ m pcatsp","err":"","out":"1","out_mask":"Ã¿"},{"code":"\"cats\" =~ s'cats'$dogs'r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$dogs"},{"err":"","out":"CATS","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'cats' =~ s/(.)/\\U$1/gr"},{"code":"\"cats\"->${ \\sub {$_[0]} }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"cats","err":""},{"out_mask":"Ã¿","out":"2","err":"","code":"() = \"C++\" =~ /\\b/g","err_mask":""},{"err":"","out":"[\"\\3\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"\\cC\" ]"},{"code":"\"c\" == \"d\"","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿","out":"1","err":"","code":"\"\\cD\" eq \"\\x04\"","err_mask":""},{"code":"ceil(log(~0)/log(2))","err_mask":"","out_mask":"Ã¿Ã¿","out":"64","err":""},{"err_mask":"","code":"char 0x3b","out":"ERROR: syntax error at (eval 1) line 1, near \"char 0x3b\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"char 0x7b","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"char 0x7b\"\n"},{"err_mask":"","code":"char(2**16)","err":"","out":"ERROR: Undefined subroutine &main::char called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \")\t\t\t\t\t        [\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"char(2*16)\t\t\t\t\t        [13:56]"},{"code":"char('a')^char('A')","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::char called at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"@charmap = qw/Botje!!!/; @charmap->[qw/Botje/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an array as a reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@charmap = undef; \\@charmap"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ARABIC-INDIC DIGIT SIX","err":"","code":"charnames::viacode(0x666)","err_mask":""},{"err":"","out":"LATIN SMALL LETTER SHARP S","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"charnames::viacode(0xdf)"},{"err_mask":"","code":"[chomp($_=\"\")]","out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"chr 0b01000001","err_mask":"","out_mask":"Ã¿","out":"A","err":""},{"out":"[\"\\377\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ chr 0b1111_1111 ]"},{"code":"chr 0x064b","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"ÃÂ"},{"err":"","out":"ÃÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"chr 0x064e"},{"err_mask":"","code":"[chr 0x11b, \\x{11b}]","out":"ERROR: syntax error at (eval 1) line 1, near \"11b\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"chr 0x1F5FE","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã°ÂÂÂ¾"},{"err_mask":"","code":"chr(0x30)","err":"","out":"0","out_mask":"Ã¿"},{"out_mask":"Ã¿","out":";","err":"","code":"chr 0x3b","err_mask":""},{"out":"q","err":"","out_mask":"Ã¿","err_mask":"","code":"chr 0x71"},{"code":"chr 0x7b","err_mask":"","out_mask":"Ã¿","err":"","out":"{"},{"out":"Ã¢","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"chr 0xe2"},{"err_mask":"","code":"chr 0xe9","out":"Ã©","err":"","out_mask":"Ã¿Ã¿"},{"code":"chr 0xfb06","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¯Â¬Â"},{"err":"","out":"Â«","out_mask":"Ã¿Ã¿","err_mask":"","code":"chr(171)"},{"out_mask":"Ã¿","err":"","out":"1","code":"chr(173) =~ /\\N{SOFT HYPHEN}/;","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"chr(173) =~ /\\N{U+AD}/;","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"chr(173) =~ /\\xad/;","err_mask":""},{"err_mask":"","code":"chr(173) =~ /\\xAD/;","err":"","out":"1","out_mask":"Ã¿"},{"err":"","out":"Ã°ÂÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"chr(2 << 15)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \")\t\t\t\t\t        [\"\n","code":"chr(2**16)\t\t\t\t\t        [13:56]","err_mask":""},{"code":"chr 232","err_mask":"","out_mask":"Ã¿Ã¿","out":"Ã¨","err":""},{"err_mask":"","code":"${\\chr 24}","err":"","out":"\u0018","out_mask":"Ã¿"},{"out_mask":"Ã¿","out":"\u0018","err":"","code":"chr 24","err_mask":""},{"err_mask":"","code":"chr 33","out":"!","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"chr 34","err":"","out":"\"","out_mask":"Ã¿"},{"err_mask":"","code":"chr 39","out":"'","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]","code":"[chr(48) .. chr(48)]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1,2,3,4,5,6,7,8,9]","code":"[chr(48) .. chr(58)]","err_mask":""},{"code":"[chr 49, chr 10]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,\"\\n\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã¾ÂÂªÂÂÂÂ","err":"","code":"chr 5000000000","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"3L","code":"chr(51) . chr(76)","err_mask":""},{"err":"","out":"[\"<\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[chr(60) .. chr(88)]"},{"out_mask":"Ã¿","out":"A","err":"","code":"chr 65","err_mask":""},{"err":"","out":"[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[chr(65) .. chr(100)]"},{"out":"[\"A\",\"d\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[chr(65), chr(100)]"},{"err_mask":"","code":"[chr(65] .. chr(100)]","out":"ERROR: syntax error at (eval 1) line 1, near \"65]\"\nUnmatched right square bracket at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã¢ÂÂ°","err":"","code":"chr 8304","err_mask":""},{"err_mask":"","code":"\\chr 8305","out":"\\\"\\x{2071}\"","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"chr 8305","out":"Ã¢ÂÂ±","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"chr 86;","err_mask":"","out_mask":"Ã¿","err":"","out":"V"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã¢ÂÂ±","err":"","code":"chr 9585.5","err_mask":""},{"err":"","out":"\u0000","out_mask":"Ã¿","err_mask":"","code":"chr('a')^chr('A')"},{"err_mask":"","code":"[chr(hex \"3c\"), \"\\x3c\"]","out":"[\"<\",\"<\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"c","out_mask":"Ã¿","err_mask":"","code":"chr(ord('a') + 2)"},{"err_mask":"","code":"close(STDIN); close(STDOUT); close(STDERR); print \"I have no mouth and I must scream\"","out":"","err":"","out_mask":""},{"code":"{ Clubs => [ { Url => 'foo.com' } ] }->{Clubs}[0]{Url}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo.com","err":""},{"out_mask":"","out":"","err":"","code":"<code>","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"code; also pleval deparse rbeval jseval pyeval phpeval k20eval luaeval jeval.","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"code","code":"<code here>","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"blue","code":"$color = 'green'; $ref = \\$color; $$ref = 'blue'; $color","err_mask":""},{"code":"@color = qw(blue white red); print $color[$#color];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"red","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"red","code":"@color = qw(blue white red); print $color[eval($#color)];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"things\" via package \"properly\" (perhaps you forgot to load \"properly\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"command of perlbot, that's useful to perlbot to display things properly","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in postdecrement (--) at (eval 1) line 1, near \"COMMAND --\"\nsyntax error at (eval 1) line 1, near \"--password\n\"\n","err":"","code":"COMMAND --password","err_mask":""},{"out_mask":"","err":"","out":"","code":"\"COMPRESSION_GZIP\" eq \"COMPRESS_GZIP\" # let's ask perl","err_mask":""},{"err":"","out":"[\"Computer\",\"Computer\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"  Computer  \"; [ s/^ +| +$| Computer //gr, s/ Computer |^ +| +$//gr ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"s/Computer//gr ]\"\n","code":"$_ = \"C omputer\"; [ s/ |Computer//gr; s/ //gr =~ s/Computer//gr ]","err_mask":""},{"code":"$Config{osname}","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"CONST","code":"*CONST = sub { 'haha' }; CONST","err_mask":""},{"out":"haha","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"*CONST = sub { 'haha' }; CONST()"},{"code":"copy(\"$alt\", \"$neu\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::copy called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"CORE::dump()","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"/home/ryan/workspace/perlblead-ci/runeval.sh: line 5: 25041 Aborted                 /home/ryan/perl5/perlbrew/perls/perlbot-intest/bin/perl /home/ryan/bots/perlbuut/lib/eval.pl\n"},{"err_mask":"","code":"[CORE::fc 'â¬']","out":"[\"\\342\\202\\254\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"&CORE::for () CORE::for ();","err_mask":""},{"err_mask":"","code":"\\&CORE::hex->(\"0x24\")","err":"","out":"ERROR: Undefined subroutine &main::0 called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\\&CORE::lc","out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"lol","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"(\\&CORE::lc)->('lol')"},{"err_mask":"","code":"(\\&CORE::lc)->(undef)","out":"","err":"","out_mask":""},{"code":"&CORE::open()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not enough arguments for open at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"ERROR: Undefined subroutine &CORE::print called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"(\\&CORE::print)->('a')"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &CORE::print called at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"\\&CORE::print->(\"foo\")","err_mask":""},{"code":"(\\&CORE::print)->('lol')","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &CORE::print called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"CORE::prototoype(\\&CORE::die)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: CORE::prototoype is not a keyword at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"","out":"@","code":"CORE::prototype(\\&CORE::die)","err_mask":""},{"err_mask":"","code":"CORE::prototype(\\&CORE::prototype)","err":"","out":"_","out_mask":"Ã¿"},{"err_mask":"","code":"\\(&CORE::ref)->([])","err":"","out":"ERROR: Undefined subroutine &main:: called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main:: called at (eval 1) line 1, <STDIN> line 1.\n","code":"\\&CORE::ref->([])","err_mask":""},{"code":"CORE::say \"hi\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"hi\n"},{"code":"(\\&CORE::say)->(\"/layout save\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &CORE::say called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"CORE::stat('file')"},{"out":"ERROR: &CORE::system cannot be called directly at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"&CORE::system(\"ls &\") # aw, no symmetry for me :("},{"err":"","out":"ERROR: Can't locate object method \"echo\" via package \"0\" (perhaps you forgot to load \"0\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$count = 0; do { echo $count; $count++ } while ($count le 3);"},{"code":"$count = 0; do { print $count; $count++ } while ($count le 3);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"0123","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"12351","err":"","code":"$count = () = bike..care","err_mask":""},{"code":"++$count{$_} for split //, 'abcaba'; \\ %count","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{b => 2,c => 1,a => 3}","err":""},{"err_mask":"","code":"[ counts=>{},_keys=>() ]","out":"[\"counts\",{},\"_keys\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"'CryptoX' != 'CryptX' # orly","err_mask":"","out_mask":"","err":"","out":""},{"out":"bless( {qv => 1,original => \"v5.24.0\",version => [5,24,0]}, 'version' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"${ \"\\cV\" }"},{"code":"${ \"\\cV\" } . ''","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"v5.24.0"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"TeSt! teSt","code":"$c=v0;'test! Test'=~s/[a-z]/$&^($c^=$\")/gire","err_mask":""},{"err":"","out":"TeSt! TeSt","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$c=v0;'test! Test'=~s/[a-z]/($c^=$\")^lc$&/gire"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"X!xX!x!X!","err":"","code":"$c=v0;'x!xx!x!x!'=~s/[a-z]/$&^($c^=$\")/gire","err_mask":""},{"err_mask":"","code":"['*.c' =~ /\\*\\.\\w/]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"$_ = 'd850e684e6de'; [join ':', unpack('(A2)*')]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"d8:50:e6:84:e6:de\"]"},{"err_mask":"","code":"'d850e684e6de' =~ s/..\\K\\B/:/gr","out":"d8:50:e6:84:e6:de","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"\"daleks\" lt \"perl\" # but of course perl would say that"},{"code":"[ 'data 234 foo 456 bar' =~ /(\\d+).*bar$/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[234]","err":""},{"out":"[234]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'data 234 foo 456 bar' =~ /(\\d+)(?=.*bar$)/ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[234]","code":"[ 'data 234 foo 456 bar' =~ /(\\d+)(?:.*bar$)/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"$data]\"\n","err":"","code":"@data = '25 25.175 jitter'; [split(/\\s+/, $data];","err_mask":""},{"out":"ERROR: Can't locate object method \"quick_select\" via package \"database\" (perhaps you forgot to load \"database\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"database->quick_select($Table, \\%Params, \\%Options)"},{"out":"[\"02/14/2014\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'data-date=\"02/14/2014\"' =~ m!data-date=\"(\\d\\d/\\d\\d/\\d\\d\\d\\d)\"!; [ $1 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$VAR1 = {'b' => 2,'a' => {'two' => 2}};","err":"","code":"$Data::Dumper::Indent = 0; $h = {'a' => {'one' => 1}, \"b\" => 2}; $i = {'a' => {'two' => 2}}; $j = {%$h, %$i}; print Dumper($j);","err_mask":""},{"out_mask":"","err":"Can't handle 'IO' type at /home/ryan/bots/perlbuut/lib/eval.pl line 309.\n","out":"","code":"$Data::Dumper::Useperl = 1; open my $fh , '>', \\my $str; [ *$fh{IO} ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"@data = (\"foo\"); $data[0]{label} = $data[0]; [@data]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"/data/install/smt/repo/$RCE/SLES11-SP3-Updates/sle-11-x86_64","code":"\"/data/install/smt/repo/\\$RCE/SLES11-SP3-Updates/sle-11-x86_64\"","err_mask":""},{"out":"qr/(?#)/","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"Data::Munge::list2re \"\""},{"err_mask":"","code":"Data::Munge::list2re ();","err":"","out":"qr/(?!)/","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"qr/\\-\\-|\\=\\=|\\:|\\=/","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"Data::Munge::list2re qw(= == : --)"},{"out":"0.096","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"Data::Munge->VERSION"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"[`date`]"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"$_=\"date\"; exec $_;"},{"out":"15","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"DateTime::Duration->new( minutes => 3, seconds => 15 )->in_units('seconds')"},{"code":"DateTime->noew","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"noew\" via package \"DateTime\" at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"DateTime::TimeZone->is_valid_name(\"America/New_York\");","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"code":"\"D:/AU\\ Files\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"D:/AU Files","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Value missing at 1:5\n","out":"Value missing at 1:5\n","code":"debugmsg(\"Value missing at %d:%d\\n\", 1, 5);   sub debugmsg { my $msg = sprintf(shift, @_); warn $msg; print $msg; }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"debugmsg(\"Value missing at %d:%d\\n\", 1, 5);   sub debugmsg { my $msg = sprintf(@_); warn $msg; print $msg; } #since perlbot doesn't have $dbug opened, I removed it ... let's see what happens!","err":"3 at (eval 1) line 1, <STDIN> line 1.\n","out":"3","out_mask":"Ã¿"},{"out":"ERROR: Undefined subroutine &main::dec called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"dec('008') == 8"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sub { \"DUMMY\" }","code":"\\&decode_json","err_mask":""},{"code":"decode_json","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"decode_json"},{"code":"decode_utf8(\"s\\x{c3}\\x{bc}\\x{c3}\\x{9f}e\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"sÃ¼Ãe","err":""},{"code":"[ defined ${bless \\do { my $nou = undef }, \"trolol\"} ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"[defined chomp($_=\"\")]","err_mask":""},{"err_mask":"","code":"defined fork","out":"","err":"","out_mask":""},{"err_mask":"","code":"defined($INC[-1]) ? \"yay\" : \"nay\"","out":"nay","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ defined ${\\undef} ]"},{"code":"delete *C::foo{CODE}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: delete argument is not a HASH or ARRAY element or slice at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"delete $undef->{foo}; print defined, ref for $foo","err":"","out":"","out_mask":""},{"out":"1HASH","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"delete $undef->{foo}; print defined, ref for $undef"},{"code":"delete $undef->{key}; $undef","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"{}"},{"err":"","out":"","out_mask":"","err_mask":"","code":"deparse: $::{true}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,undef,1,2,3]","err":"","code":"$deploys = [1..3]; [ @{$deploys}[-5 .. -1] ];","err_mask":""},{"out":"[1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$deploys = [1..3]; [ grep $_, @{$deploys}[-3 .. -1] ];"},{"err_mask":"","code":"$deploys = [1..3]; [ grep $_, @{$deploys}[-5 .. -1] ];","out":"ERROR: Modification of non-creatable array value attempted, subscript -5 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of non-creatable array value attempted, subscript -5 at (eval 1) line 1, <STDIN> line 1.\n","code":"$deploys = [1..3]; push @foo, $_ for @{$deploys}[-5 .. -1]; [ @foo ]","err_mask":""},{"err_mask":"","code":"DESTROY <>","out":"ERROR: Illegal declaration of subroutine DESTROY at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"die();"},{"err_mask":"","code":"?: die 'Denied.';","out":"ERROR: syntax error at (eval 1) line 1, near \"; ?\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"()?(): die 'Denied.';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Denied. at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"[ \"died with signal \" . (256 & 127), 256 & 128 ? 'core dumped' : '' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"died with signal 0\",\"\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: failed at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"die \"failed\"","err_mask":""},{"err_mask":"","code":"die \"foo\" . \"\\n\"","out":"ERROR: foo\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"die or do"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: SCALAR(0x2f6b2c8)","code":"die \\\"ref here\";","err_mask":""},{"err_mask":"","code":"Digest::MD5::md5_hex \"\"","out":"d41d8cd98f00b204e9800998ecf8427e","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$dirname = \"/usr/share/local/\"; $arg = '$dirname/'","err":"","out":"$dirname/","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"<div id=\\\"search-results\\\" ... >\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"<div id=\"search-results\" ... >"},{"err":"","out":"CaT\u0000","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'DoÃ'; s[(doÃ)][ $1 ^ lc $1 ^ 'cat' ]ier;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\"Doe\",\"John 'Johnny'\",\"T\",...","err":"","code":"$_ = '\"Doe\",\"John \"Johnny\"\",\"T\",...'; s/(?<=[^,])\"(?!,)/'/gr","err_mask":""},{"err_mask":"","code":"$_ = 'Dog'; s[(dog)][ $1 ^ lc $1 ^ 'cat' ]er;","err":"","out":"Dog","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"Cat","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'Dog'; s[(dog)][ $1 ^ lc $1 ^ 'cat' ]ier;"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[3]","code":"[ do { if(0) { 2 } else { 3 } } ]","err_mask":""},{"code":"[do { if (1) {} }]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"err":"","out":"[2]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ do { if(1) { 2 } else { 3 } } ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"doing it for cpan","code":"\"doing it for fun\" =~ s/fu/cpa/r","err_mask":""},{"err_mask":"","code":"{ do { last } while 1 }","out":"","err":"","out_mask":""},{"code":"do { last } while 1","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"[do { my $asdf = 9; if ($asdf==9) {} }]","out":"[]","err":"","out_mask":"Ã¿Ã¿"},{"code":"do { my $line = $_; chomp $line; say $line } for \"asdf\",\"asdf\\n\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"asdf\nasdf\n"},{"out_mask":"","out":"","err":"","code":"do { next }","err_mask":""},{"code":"do {} or die","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"do or die","out":"ERROR: syntax error at (eval 1) line 1, near \"do or\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"do { print q{foo}; } while 0;","err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify do block in preincrement (++) at (eval 1) line 1, at EOF\n","code":"++do{ state $N }","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"do { ++state $N }","err_mask":""},{"code":"do { state $N++ }","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"do { $x = 1; $x +=2; } if 1; $x"},{"code":"\"Dr doctor\" =~ s/(Dr).+/$1/r;","err_mask":"","out_mask":"Ã¿Ã¿","out":"Dr","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"drink_coffee() if $!{ ENOCAFFIENE };"},{"err_mask":"","code":"Dumper(undef); use Data::Dumper","out":"$VAR1 = undef;\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"Dumper; use Data::Dumper","err":"","out":"","out_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"Dumper(); use Data::Dumper"},{"code":"Dumper([]); use Data::Dumper","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$VAR1 = [];\n","err":""},{"out_mask":"","err":"","out":"","code":"-e","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"-e","err":"","code":"-'e'","err_mask":""},{"err_mask":"","code":"-\"e\"","out":"-e","err":"","out_mask":"Ã¿Ã¿"},{"code":"$_ = \"Ã©\"; $_++; $_","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"$_ = 'e8b748680748'; [ s/..\\K\\B/:/gr ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"e8:b7:48:68:07:48\"]","err":""},{"err":"","out":"[0,\"a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ each @{[ qw( a b c d e ) ]} ]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]","code":"[ $!{EAGAIN} ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":"","code":"[$!{EAGAIN}]","err_mask":""},{"err":"","out":"ERROR: Unrecognized character \\xC3; marked by <-- HERE after pha:]]/, '<-- HERE near column 116 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"['Ã¨\" =~ /[[:alpha:]]/, 'Ã¨' =~ /[[:alpha:&&"},{"code":"earlier","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"earlier"},{"err_mask":"","code":"$e = \"...brow,n\"; $e =~ s/^\\W*(\\w+).*/$1/; [ $e ]","out":"[\"brow\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"brow\"]","code":"$e = \"...brow,n\"; $e =~ s/^\\W*(\\w+).*/\\1/; [ $e ]","err_mask":""},{"code":"$e = \"...brow,n\"; $e =~ s/^\\W*(\\w+)\\W*$/\\1/; [ $e ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"...brow,n\"]","err":""},{"code":"echo true","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"echo\" via package \"true\" (perhaps you forgot to load \"true\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"`echo uuoo`","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\",\"d\",\" e\"]","err":"","code":"$e = ' e'; @x = (qw(a b c d), $e); \\@x;   # quitte","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\",\"d\",\"e\"]","err":"","code":"$e = 'e'; @x = (qw(a b c d), $e); \\@x;   # quitte","err_mask":""},{"out":"[\"a\",\"b\",\"c\",\"d\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$e = 'e'; @x = qw(a b c d), $e; \\@x;   # quitte"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"No such file or directory","code":"-e \"foo\"; $!","err_mask":""},{"out":"[0,1,2,3,4,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@elems = (0..5);  my $ref =  \\@elems; $ref;"},{"err_mask":"","code":"EmptyPkg->can(\"can\")","err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"EmptyPkg->can(\"DOES\")"},{"err_mask":"","code":"EmptyPkg->can(\"import\")","out":"","err":"","out_mask":""},{"code":"EmptyPkg->can(\"isa\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sub { \"DUMMY\" }"},{"code":"Encode::decode_utf8(join \"\", map chr, qw(195 188 195 159))","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¼Ã"},{"out":"Ã¯Â¿Â½Ã¯Â¿Â½Ã¯Â¿Â½Ã¯Â¿Â½Ã¯Â¿Â½Ã¯Â¿Â½","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"Encode::decode(\"utf-8\", \"\\x99\\x99\\x99\\x99\\x99\\x99\")"},{"err":"","out":"ÃÂÃÂÃÂÃÂ¡r jÃÂÃÂÃÂÃÂº sÃÂÃÂÃÂÃÂºr?","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"encode 'UTF-8', 'ÃÂ¡r jÃÂº sÃÂºr?'"},{"err":"","out":"[\"\\342\\231\\245\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[encode_utf8(\"\\x{2665}\")] # works too, depening inthe output you want"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"END { ... }","out":"","err":"Unimplemented at (eval 1) line 1, <STDIN> line 1.\nEND failed--call queue aborted, <STDIN> line 1.\n","out_mask":""},{"err":"2- at (eval 1) line 1, <STDIN> line 1.\nEND failed--call queue aborted, <STDIN> line 1.\n","out":"3-1-","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"END { print \"1-\" } END { die \"2-\" } END { print \"3-\" } # b100s"},{"out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\nyes","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"END {print \"yes\" } cvx{{Wr"},{"err":"","out":"-1","out_mask":"Ã¿Ã¿","err_mask":"","code":"EOF # are you a thing?"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"[ \"EOL\\r\\n\" =~ m/L$/,  \"EOL\\r\\n\" =~ m/L$/m ]","err_mask":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \", =~\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"EOL\\r\\n\" =~ m/L$/,  \"EOL\\r\\n\", =~ m/L$/m ]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"[ \"EOL\\r\\n\" =~ m/L\\R\\z/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Episode s0105.mkv","code":"\"Episode 1x4.mkv\" =~ s{(\\d+)x(\\d+)}{ sprintf \"s%02d%02d\", $1, $2 + 1 }ger","err_mask":""},{"err_mask":"","code":"\"Episode 1x4.mkv\" =~ s{(\\d+)x(\\d+)}{ sprintf \"s%02d%02d\", $1, $2 }ger","err":"","out":"Episode s0104.mkv","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"$_ = 'episode9'; s/episode(\\d)/sprintf \"e(%d)\", $1 - 1/e","err_mask":""},{"err":"","out":"e(8)","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'episode9'; s/episode(\\d)/sprintf \"e(%d)\", $1 - 1/e; $_"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"equal","code":"\"equal\" if \"aaaa\" == \"bbbb\"","err_mask":""},{"err_mask":"","code":"\"equal\" if \"aaaa\" eq \"bbbb\"","out":"","err":"","out_mask":""},{"err_mask":"","code":"'' eq undef","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"Errno::ENOENT","err":"","out":"2","out_mask":"Ã¿"},{"err_mask":"","code":"[ eval \"0.00_02\" ]","err":"","out":"[\"0.0002\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"eval '0;qq{@{sub{]]}}}}}'","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"[ eval '0x10', eval '10' ]","out":"[16,10]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[eval \"0x\" . ('f' x 16), unpack(\"q\", '\\xff' x 8)] # hmm","out":"['18446744073709551615','7378717377743452252']","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"eval {1}; [ $@ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]"},{"code":"eval \"12w6d17h19m58s\" =~ s/(\\d+)(\\w)/'+' . $1 * {qw(w 604800 d 86400 h 3600 m 60 s 1)}->{$2}/ger","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"7838398","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3,5,6,7,8,9]","err":"","code":"[ eval '1-3,5,6-9' =~ s/-/../gr ]","err_mask":""},{"code":"eval{5 / 0} // 1","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"eval \"\\\\\\\\\\\\\\\\backup_server\\\\\\\\host\"","err":"","out":"","out_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"eval \"\\$       \\b     leonerd = 42\";"},{"err_mask":"","code":"eval \"\\$       \\b     leonerd = 42\"; $@","out":"Unrecognized character \\x08; marked by <-- HERE after $       <-- HERE near column 9 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"eval { die 0; } say \"Died\" if $@;","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} say\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Died 0 at (eval 1) line 1, <STDIN> line 1.\n\n","err":"","code":"eval { die 0; }; say \"Died $@\" if $@;","err_mask":""},{"err_mask":"","code":"eval { die 0; }; say \"Died\" if $@;","err":"","out":"Died\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"eval { die JSON::false; }; say \"Died $@\" if $@;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bless( do{\\(my $o = 0)}, 'JSON::PP::Boolean' )"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"there you are at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"eval { die 'there you are' }; $@ # easily tested","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} [\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"eval { die undef } [ $@ ]"},{"err_mask":"","code":"eval { die undef }; [ $@ ]","out":"[\"Died at (eval 1) line 1, <STDIN> line 1.\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"3628800","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"eval join '*', 1..10"},{"err_mask":"","code":"eval(join '*', 1..30) / 1000 / 3600 / 24 / 365  # after heat death of universe ?","err":"","out":"8.41111300774325e+21","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"eval: $l = \"abc\"; $r = \"ABC\"; $l =~ s/./$&.substr($r,$-[0],1)/rge","err":"","out":"aAbBcC","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"eval \"#line 0 /dev/null\\n}\"; $@","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Unmatched right curly bracket at /dev/null line 0, at end of line\nsyntax error at /dev/null line 0, near \"#line 0 /dev/null\n}\"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Unmatched right curly bracket at /dev/null line 1, at end of line\nsyntax error at /dev/null line 1, near \"#line 1 /dev/null\n}\"\n","err":"","code":"eval \"#line 1 /dev/null\\n}\"; $@","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Unmatched right curly bracket at (eval 1) line 2, at end of line\nsyntax error at (eval 1) line 2, near \"#line -42 /dev/null\n}\"\n","err":"","code":"eval \"#line -42 /dev/null\\n}\"; $@","err_mask":""},{"code":"eval \"\\$       \\n     leonerd = 42\"; $@","err_mask":"","out_mask":"","out":"","err":""},{"out":"42","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"eval \"\\$       \\n     leonerd = 42\"; $leonerd"},{"err_mask":"","code":"eval {print 1; next; print 2}","err":"","out":"1","out_mask":"Ã¿"},{"code":"eval { print \"2\" }","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"code":"eval \\{ print \"2\" }","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"code":"eval &{ print \"2\" }","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"eval print \"2\""},{"out_mask":"Ã¿Ã¿","err":"","out":"20","code":"eval { print \"2\" }; print $?","err_mask":""},{"out_mask":"Ã¿","err":"","out":"2","code":"eval { print \"2\" }; print $@","err_mask":""},{"err_mask":"","code":"eval \"print 'nested\\nlike\\nthis'\"","out":"nested\nlike\nthis","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ eval \"qw(yes yes),\\n#no\\nqw(yes yes)\" ]","out":"[\"yes\",\"yes\",\"yes\",\"yes\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"HELLO","code":"eval { return 1; }; print \"HELLO\"","err_mask":""},{"code":"eval \"say 1; next; say 2\"","err_mask":"","out_mask":"Ã¿Ã¿","out":"1\n","err":""},{"err_mask":"","code":"eval {say 1; next; say 2}","out":"1\n","err":"","out_mask":"Ã¿Ã¿"},{"code":"eval: $str=\"network=192.168.1.1; Dummy-SIGB=10.0.2.79; testbed-oam-net=135.111.74.116; Dummy-SIGA=10.0.1.111\"; for ( split /\\;/, $str ){ if ( /(.*)\\=(.*)/ ){ print \"$1,$2\" } }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"network,192.168.1.1 Dummy-SIGB,10.0.2.79 testbed-oam-net,135.111.74.116 Dummy-SIGA,10.0.1.111","err":""},{"code":"eval {sub C::foo {}; my $o = \\&C::foo; undef &C::foo; $o->(); 1} or $@","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Undefined subroutine &C::foo called at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"eval \"\\$       \\t     leonerd = 42\"; $@","out":"","err":"","out_mask":""},{"code":"eval { undef->() }; \"-> $@ <-\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"-> Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n <-"},{"err_mask":"","code":"eval { undef->() }; $@","out":"Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"eval \"unpack 'S', \\\"\\xff\\xff\\\"\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"65535","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"syntax error at (eval 1) line 1, near \"$       v     leonerd \"\n","code":"eval \"\\$       \\v     leonerd = 42\"; $@","err_mask":""},{"out_mask":"","err":"","out":"","code":"eval \"`who\".\"ami`\"","err_mask":""},{"err_mask":"","code":"eval '\"'.'\\x41\\x41'.'\"'","err":"","out":"AA","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"0","code":"exec '/bin/ls'","err_mask":""},{"out_mask":"Ã¿","out":"0","err":"","code":"exec 'ping', 'google.com'","err_mask":""},{"out_mask":"Ã¿","out":"0","err":"","code":"exec '/usr/bin/ping', 'google.com'","err_mask":""},{"err":"","out":"ERROR: exists argument is not a HASH or ARRAY element or a subroutine at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"exists \"\""},{"code":"~~exp 2","err_mask":"","out_mask":"Ã¿","out":"7","err":""},{"out":"7.38905609893065","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"exp(2)"},{"err":"","out":"[[\"hello world\"],$VAR1->[0]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"*EXPORT = \\@Foo::Bar::EXPORT; push @EXPORT, \"hello world\"; [ \\@EXPORT, \\@Foo::Bar::EXPORT ]"},{"err_mask":"","code":"\"#\\\\E \\\\z\" =~ m{ \\Q#\\E \\z}xms ? \"wtf\" : \"k\"","out":"wtf","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"@F=(0..9,0);sub r{my($y,@x)=@_;map{ref$_ ? (&$_) :$_}@d=(@F,($y && sub{@F[$y-1,-1-$y]=($\")x2;r(@x)}),@F%2|$y?@F:())}print r 1,1,3..@F/2-1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Bizarre copy of ARRAY in map iterator at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"","out":"1","code":"\"f0b0\" =~ /f(.)b\\1/","err_mask":""},{"err_mask":"","code":"fail?succeed:fail","err":"","out":"succeed","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"FAIL x 2","err":"","out":"FAILFAIL","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"false ? true : file_not_found","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"true","err":""},{"out":"yes it is","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'false' ? \"yes it is\" : \"no, it isn't\" # place your bets!"},{"out":"2/8","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"%fancylist = ( 1,\"one\",2,\"two\",3,\"three\" ); print scalar %fancylist;"},{"out_mask":"Ã¿","out":"3","err":"","code":"%fancylist = ( 1,\"one\",2,\"two\",3,\"three\" ); print scalar keys %fancylist;","err_mask":""},{"code":"fc('er') eq fc('Er')","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err":"","out":"Ã£Â","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"fc \"Ã\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"07F\n\"\n","code":"FF & 07F","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",undef,undef]","err":"","code":"[ -f \"/\", -f \"/does-not-exist\", -f undef ]","err_mask":""},{"err_mask":"","code":"$_ = '@f@f@f'; s'@f'$b'gr;","out":"$b$b$b","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = 'file-bkp-2014-06-08'; [ map { s/bkp\\K(\\d*)/$1+1/e; $_ } ($_) x 12 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"file-bkp1-2014-06-08\",\"file-bkp2-2014-06-08\",\"file-bkp3-2014-06-08\",\"file-bkp4-2014-06-08\",\"file-bkp5-2014-06-08\",\"file-bkp6-2014-06-08\",\"file-bkp7-2014-06-08\",\"file-bkp8-2014-06-08\",\"file-bkp9-2014-06-08\",\"file-bkp10-2014-06-08\",\"file-bkp11-2014-06-08\",\"file-bkp12-2014-06-08\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1,2]","code":"[ fileno STDIN, fileno STDOUT, fileno STDERR ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"there are 3 files","err":"","code":"@files = qw(one two three); 'there are ' . @files . ' files'","err_mask":""},{"out":"there are 3 files","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@files = qw(one two three); \"there are @{[ scalar @files ]} files\""},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"[ %{File::Stat::} ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"import\",*File::Stat::import]","err":"","code":"File::Stat->import; [ %{File::Stat::} ]","err_mask":""},{"out":"F., Name, 745 45363\nS., One, 343 5454","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" $_ = \"First Name Position first.name@somewhere.com 745 45363\\nSome One Worker some.one@somewhere.com 343 5454\\n\" =~ s/^\\s*(\\S)\\S*\\s+(\\S+).+?(\\d\\d\\d \\d\\d\\d\\d)\\s*/$1., $2, $3/gmr"},{"err_mask":"","code":"$_ = \"First.\\nSecond.\\nBla, bla, bla. \\nHi.\\t\\nLast line.\\n\"; [ /^.*\\h+$/gm ] # try \\h if you only want horizontal whitespace","err":"","out":"[\"Bla, bla, bla. \",\"Hi.\\t\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"first","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@_=('first','second'); print $_[0];"},{"code":"floor()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Usage: POSIX::floor(x) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"[ floor(-5/3), int(-5/3) ]","out":"[-2,-1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"85","err":"","code":"floor(85.3)","err_mask":""},{"out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"-F\\\"m S\\\""},{"code":"foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":""},{"err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"~~\"foo\""},{"out":"-foo","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"-foo"},{"code":"'\\'foo\\''","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"'foo'"},{"out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"'foo'"},{"code":"\"\" . \\@{\\*foo}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"","err":"","out":"","code":"\"foo\" =~ /[.]/","err_mask":""},{"code":"(\\*foo)->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"(\\&{ \\*foo })->()","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"f\"]","err":"","code":"[ \"foo\" =~ /()(.)/ ]","err_mask":""},{"out":"[\"foo\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[${\\ 'foo' }]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","code":"$_=\"foo","err_mask":""},{"err_mask":"","code":"$_ = 'foo'; $::_","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"${\\*foo}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"*main::foo"},{"out_mask":"","out":"","err":"","code":"$foo->@*","err_mask":""},{"err":"","out":"*main::foo","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"*foo"},{"code":"\\\\*foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\\\*::foo","err":""},{"out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\\&::foo"},{"err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\\&{ \\*foo }->()"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"$foo++\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"++$foo++"},{"err_mask":"","code":"'foo'+0","out":"0","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"foo { $$_[0] = 1 } foo \\(my $x); $x","out":"ERROR: syntax error at (eval 1) line 1, near \"foo \\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"(\\@{ \\*foo })->[0]++; \\@foo;","err":"","out":"ERROR: Not an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"(\\@{ \\*foo })->[0]++; say @foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"[\"foo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = [['foo']]; @$_[0] # Which is entirely different from @{$_[0]}"},{"err_mask":"","code":"$foo = 1; [ 0+$foo, map $foo++, 1..4 ] # if you wanted the other behaviour","err":"","out":"[1,1,2,3,4]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of non-creatable array value attempted, subscript -1 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$foo[-1] = 2","err_mask":""},{"err_mask":"","code":"[ foo => (1, 2, 3) ]","out":"[\"foo\",1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ foo => [1, 2, 3] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",[1,2,3]]"},{"err":"","out":"[\"foo\",1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ foo => 1, 2, 3 ]"},{"out":"123","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"{ +FOO => 123 }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1, 2, 3\"]","err":"","code":"@foo = ( 1, 2, 3 ); $\" = ', '; [ \"@foo\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{2 => 3,foo => 1}","code":"{ foo => (1, 2, 3) } # perhaps more useful","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"foo 1\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[foo 1, 2, 3] sub foo { { thingy => $_[0] } }"},{"err":"","out":"bar 13 foo 12","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"@{ [ %{ {foo => 12, bar => 13} }] }\" # no hash slice involved"},{"out":"foo=(1,2)   bar=(3,4)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"foo=(1, 2)   bar=(3, 4)\" =~ s/(?<=\\()([^)]+)/$1=~s{\\s+}{}gr/gre"},{"err":"","out":"124","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"@foo = (1, 2, undef, 4); for my $foo (@foo) { print $foo }"},{"err":"","out":"ERROR: Modification of non-creatable array value attempted, subscript -1 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$foo[-1] = 42"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo1\",\"0.8\",\"foo2\",0,\"foo3\",1]","code":"$foo1 = 4/5; $foo2 = int(4/5); $foo3 = $foo2 ? $foo2 : 1; [ foo1 => $foo1, foo2 => $foo2, foo3 => $foo3 ]","err_mask":""},{"code":"$foo = 1; $bar = *foo; $qux = \\*foo; [ $$bar, $$qux ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,*::foo]"},{"code":"$foo = 1; $bar = *foo; $qux = \\*foo; use strict; [ $$bar, $$qux ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$bar\" requires explicit package name (did you forget to declare \"my $bar\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$qux\" requires explicit package name (did you forget to declare \"my $qux\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"$foo1 = $foo2 = '4 a 2'; ( $foo1 ) = $foo1 =~ /(\\d+)/; $foo2 =~ s/\\D+//g; [ $foo1, $foo2 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[4,42]","err":""},{"err_mask":"","code":"$foo = 1; $foo++; $foo","err":"","out":"2","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[5,1,2,3,4]","code":"$foo = 1; [$foo, map { $foo++ } 1 .. 4]; # isn't the order of evaluation from left to right?","err_mask":""},{"code":"$foo = 1; our $bar = *foo; our $qux = \\*foo; use strict; [ %$bar ]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"err_mask":"","code":"$foo = 1; our $bar = *foo; our $qux = \\*foo; use strict; [ $$bar, $$qux ]","out":"[1,*::foo]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","code":"$foo = 1; our $bar = *foo; our $qux = \\*foo; use strict; [ %$bar, %$qux ]","err_mask":""},{"code":"$foo = 1; our $bar = *foo; our $qux = \\*foo; use strict; [ %{*$qux} ]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"out_mask":"Ã¿","err":"","out":"2","code":"$foo ||= 2;","err_mask":""},{"code":"${{[foo=>2, bar=>3]}}{\"foo\"}","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿","err":"","out":"3","code":"$foo=3; $foo ||= 2;","err_mask":""},{"code":"$foo = 3; oct \"0x$foo\"","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"out":"42","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"{ -foo, 42 }"},{"out_mask":"Ã¿Ã¿","out":"42","err":"","code":"{ +foo => 42 }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{foo => 42}","code":"+{ +foo => 42 }","err_mask":""},{"err_mask":"","code":"($foo = 42)++; $foo  # same kind of thing","out":"43","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[*::foo,*::foo]","err":"","code":"$foo = 42; our $bar = *foo; our $qux = \\*foo; use strict; [ *$bar, *$qux ]","err_mask":""},{"err":"","out":"[\\42,$VAR1->[0]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$foo = 42; our $bar = *foo; our $qux = \\*foo; use strict; [ *{$bar}{SCALAR}, *{$qux}{SCALAR} ]"},{"code":"$foo = 42; [ qq' \"$foo\" ' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\" \\\"42\\\" \"]"},{"code":"$foo = [42]; shift $foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Experimental shift on scalar is now forbidden at (eval 1) line 1, at EOF\n"},{"code":"$foo = 5607181; substr($foo, -6, 0) = '.'; $foo # without all that FANCY COMPLICATED DIVISION","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"5.607181","err":""},{"err_mask":"","code":"$foo=5; ${*$foo}{\"bar\"}=2; $5{bar}","err":"","out":"2","out_mask":"Ã¿"},{"err":"","out":"abcd","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$foo = 'a2b11c3d5'; $foo =~ s/[^a-z]//g; print $foo;"},{"err":"","out":"[\"a2b11c3d5\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@foo = \"a2b11c3d5\" =~ /(\\w+)/g; \\@foo"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"\"f o o\" =~ /[ab ]/"},{"err_mask":"","code":"$foo = \"abcdefg\"; $foo =~ s/ef//; [ $-[0], length $` ]","out":"[4,4]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"$foo = \"abc:def\"; {split /:/, $foo};"},{"err_mask":"","code":"$foo = \"abc:def\"; sprintf(\"0x%x\", ~~{split \":\", $foo});","err":"","out":"0x3d8ea08","out_mask":"Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿"},{"code":"$foo = '...'; \"abc\" =~ /\\Q$foo/","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿","err":"","out":"1","code":"\"f o o\" =~ /[ab ]/x","err_mask":""},{"code":"[ \"foo a b = z\" =~ /foo((?: \\w)+)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\" a b\"]"},{"err_mask":"","code":"\"foo a b = z\" =~ /foo( \\w)+/; [ $1, $& ]","out":"[\" b\",\"foo a b\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$foo = \"AF\"; [chr oct \"0x$foo\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\257\"]"},{"code":"$_ = \"foo: a\\n bar: 1\\n bar: 2\\nfoo: b\\n bar: 5\\nfoo: c\\n\"; my(%h,$last); $1 ? push @{ $h{$last} }, $2 : ($h{$last = $2} = [])   while/^( ?)\\w+: (\\w+)/gm; \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{b => [5],c => [],a => [1,2]}"},{"code":"$foo = \"(A)\"; \"\\Q$foo\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\(A\\)","err":""},{"out_mask":"Ã¿","err":"","out":"f","code":"$foo = [ a..z ]; *array = $foo;  $array[5] # glob trick for programmers that don't like ->  hehehe","err_mask":""},{"err_mask":"","code":"'foo  bang' =~ /foo (?:bar)? bang/ ? match : nomatch","out":"match","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"nomatch","err":"","code":"'foo bang' =~ /foo (?:bar)? bang/ ? match : nomatch","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"match\"]","code":"[ 'foo bang' =~ /foo\\s+(?:bar\\s+)?bang/ ? 'match' : 'nomatch' ]","err_mask":""},{"err_mask":"","code":"<{foo,bar}>","err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"^.\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'foo   ' ^. '   bar'"},{"err_mask":"","code":"'foo' == 'bar'","out":"1","err":"","out_mask":"Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"\"foo\" =~ /bar/"},{"out":"","err":"","out_mask":"","err_mask":"","code":"\"foo\" != \"bar\""},{"err":"","out":"foobar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"foo\" . \"bar\""},{"out":"FOObar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"foobar\" ^ \"   \""},{"out":"[\"foo\",\"bar\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ <{foo,bar}> ]"},{"code":"[ \"foo ); bar );\" =~ /(.* \\)\\;)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo ); bar );\"]","err":""},{"code":"[ \"foo ); bar );\" =~ /(.*? \\)\\;)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo );\"]"},{"code":"[- -foo => 'bar']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"+foo\",\"bar\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in predecrement (--) at (eval 1) line 1, near \"foo =>\"\n","err":"","code":"[--foo => 'bar']","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"+foo\",\"bar\"]","err":"","code":"[-+-+-+-+-+-+-+-+foo => 'bar']","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"+foo\",\"bar\"]","err":"","code":"[-+-foo => 'bar']","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"-foo\",\"bar\"]","err":"","code":"[(-+foo => 'bar')]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{foo => \"bar\"}]","code":"[{ +foo => 'bar' }]","err_mask":""},{"out":"[{\"-foo\" => \"bar\"}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[{-+foo => 'bar'}]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"bar","err":"","code":"{ +foo => 'bar' }","err_mask":""},{"out":"bar","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"{ +foo => \"bar\" }"},{"err_mask":"","code":"{-+foo => 'bar'}","err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"+{ foo => \"bar\" }","err":"","out":"{foo => \"bar\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"Foo'bar","err":"","out":"Foo::bar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"55","err":"","code":"$foo = $bar = 0; $foo += $bar += 1 for 1..10; $foo  # even more fun :)","err_mask":""},{"code":"[ ' foo= bar1,bar2,bar3  ' =~ /bar\\d+/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"bar1\",\"bar2\",\"bar3\"]"},{"err":"","out":"2/8","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$foo{'bar'} = 1; $foo{'baz'} = 1; scalar(%foo);"},{"code":"$foo{'bar'} = 1; $foo{'baz'} = 1; scalar(keys(%foo));","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"code":"@foo = ( bar => 34, baz => 42 ); print +{@foo}->{bar};","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"34"},{"err_mask":"","code":"'foo bar bang' =~ /foo (?:bar)? bang/ ? match : nomatch","out":"match","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"match\"]","code":"[ 'foo bar bang' =~ /foo\\s+(?:bar\\s+)?bang/ ? 'match' : 'nomatch' ]","err_mask":""},{"err":"","out":"[\"foo\",\"bar\",\"baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ foo => bar => baz => ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"foo\" via package \"bar\" (perhaps you forgot to load \"bar\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"foo bar baz","err_mask":""},{"code":"$_ = 'foo bar baz'; my %foo; @foo{qw(one two three)} = m/(\\w+)/g; \\%foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{one => \"foo\",three => \"baz\",two => \"bar\"}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"quux baz","code":"$foo->{bar} = 'baz'; \"quux $foo->{bar}\"","err_mask":""},{"err_mask":"","code":"\"foo bar baz\" =~ s/\\b(\\w)/\\U$1/gr","out":"Foo Bar Baz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ 'foo bar baz' =~ /\\S+/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"bar\",\"baz\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"     bar baz","code":"\"    foo bar baz\" =~ s/(?<=\\s)foo//r","err_mask":""},{"err_mask":"","code":"\"foo bar baz\" =~ s/(?<=\\s)foo//r","out":"foo bar baz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"     bar baz","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"    foo bar baz\" =~ s/\\s\\Kfoo//r"},{"err_mask":"","code":"\"foo bar baz\" =~ s/\\s\\Kfoo//r","err":"","out":"foo bar baz","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"foo/bar-baz&stuff/51\" =~ /(\\d+)$/r # if >5.10, I think","err":"","out":"ERROR: Unknown regexp modifier \"/r\" at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$foo = { bar => 'baz }; sub foo { $foo->{bar}{baz}{quux} }; exists foo()","err_mask":""},{"err_mask":"","code":"$foo = { bar => 'baz' }; sub foo { $foo->{bar}{baz}{quux} }; exists &foo;","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"ERROR: exists argument is not a subroutine name at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$foo = { bar => 'baz' }; sub foo { $foo->{bar}{baz}{quux} }; exists foo()"},{"err":"","out":"[\"foo.getBar().getBaz()\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"foo.bar.baz\" =~ s{\\.(\\w+)}{.get\\u$1()}gr ]"},{"err_mask":"","code":"\"foo bar baz\" =~ s/(\\w+)/\\u$1/gr #ah, this is what I was looking for","err":"","out":"Foo Bar Baz","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"FOO BAR BAZ","code":"\"foo bar baz\" =~ s/(\\w+)/\\U$1/gr #will this work I wonder?","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"blah\",\"blah\"]","code":"$foo = $bar = './blah'; substr($foo, 0, 2) = ''; $bar = substr($bar, 2); [ $foo, $bar ]","err_mask":""},{"out_mask":"Ã¿","out":"0","err":"","code":"%foo; @bar = ('cat', 'dog', 'bird', 'bird'); @foo{@animals} = (); %foo;","err_mask":""},{"code":"%foo; @bar = ('cat', 'dog', 'bird', 'bird'); @foo{@bar} = (); \\%foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{cat => undef,bird => undef,dog => undef}","err":""},{"err_mask":"","code":"%foo; @bar = ('cat', 'dog', 'bird', 'bird'); @foo{@bar} = (); %foo;","out":"2/8","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"{bar => undef}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$foo{bar} = (); \\%foo"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"$foo = 'bar'; ++$$foo; $bar"},{"code":"[\"foobar\" =~ /f(ooo)|(bar)/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,\"bar\"]"},{"err_mask":"","code":"\"foo(bar\" =~ /oo\\(ba/ ? \"match\" : \"no match\"","err":"","out":"match","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"$_='FOO bar'; print if $_ !~ /FOO\\s*?(BAR|xx)/i;"},{"err_mask":"","code":"$_='FOObar'; print if $_ !~ /FOO\\s*?(BAR|xx)/i;","err":"","out":"","out_mask":""},{"out_mask":"","out":"","err":"","code":"$_='FOO bar'; print \"Invalid str.  Foo is missing BAR or xx\"  if $_ =~ /FOO(?!\\s*(BAR|xx))/i;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Invalid str.  Foo is missing BAR or xx","err":"","code":"$_='FOO bar'; print \"Invalid str.  Foo is missing BAR or xx\"  if $_ =~ /FOO\\s*?(?!(BAR|xx))/i;","err_mask":""},{"code":"$_='FOObar'; print \"Invalid str.  Foo is missing BAR or xx\"  if $_ =~ /FOO(?!\\s*(BAR|xx))/i;","err_mask":"","out_mask":"","err":"","out":""},{"code":"%foo = (bar => 'quux'); sub foo { +{%foo} } [ foo->{bar}, $foo{bar} ] #huf, you're wrong, foo->{bar} is $foo{bar} :P","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"quux\",\"quux\"]"},{"err_mask":"","code":"['foobarrrrsplot' =~ /foo(bar+)splot/","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"['foobarrrrsplot' =~ /foo(bar+)splot/]","out":"[\"barrrr\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"barrrr\",\"bar\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"['foobarrrrsplot foobarsplot' =~ /foo(bar+)splot/g]"},{"code":"['foobarrrrsplot' =~ /foo(bar+)splot/g]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"barrrr\"]"},{"code":"$foo = { bar => \"stuff\" };  $foo->{bar}->{gravy}","err_mask":"","out_mask":"","out":"","err":""},{"code":"foo 'bar'; sub foo { 1; } # you mean you want to catch things like this?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"foo 'bar'\"\n"},{"code":"\"foo\" . \"bar\" . \"yin\" . \"yang\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foobaryinyang","err":""},{"out":"FOObat","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_='FOObat'; print if $_ !~ /FOO\\s*?(BAR|xx)/i;"},{"err":"","out":"[\"hah\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$foo = \"blah\"; ($bar = $foo) =~ s/bl/h/; [$bar]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"blah\"]","err":"","code":"$foo = \"blah\"; ($bar = $foo) =~ s/bl/h/r; [$bar]","err_mask":""},{"code":"[ 'fooblahblahbarfoobazbar' =~ /foo((?:(?!bar).)*)bar/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"blahblah\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::e called at (eval 1) line 1, <STDIN> line 1.\n","code":"$foo = \"blah episode9 blah\"; $foo =~ s/episode([0-9])/e($1-1)/e; $foo","err_mask":""},{"err_mask":"","code":"$foo = \"blah episode9 blah\"; $foo =~ s/episode([0-9])/'e'($-1)/e; $foo","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"'e'(\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$-1\"\n","code":"$foo = \"blah episode9 blah\"; $foo =~ s/episode([0-9])/e($-1)/e; $foo","err_mask":""},{"out":"blah e9 blah","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$foo = \"blah episode9 blah\"; $foo =~ s/episode([0-9])/e$1/; $foo"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,\"b\\\\(o\\\\+g\\\\[o\\\\|n\\\\(s\"]","err":"","code":"$foo = 'b(o+g[o|n(s';  [ $foo =~ /\\Q$foo\\E/, \"\\Q$foo\" ]","err_mask":""},{"err_mask":"","code":"'foo' eq 'bar'","err":"","out":"","out_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"\"{{foo\" =~ /{{f/"},{"code":"\"foo\" =~ /foo/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err":"","out":"[\"\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"foo\" =~ /foo(.*)(.*?)/ ]"},{"out":"","err":"","out_mask":"","err_mask":"","code":"%foo{'foo'};"},{"err_mask":"","code":"[ \"foo\" =~ /foo(.*)(bar|)/ ]","out":"[\"\",\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ \"foo\" =~ /foo(.*)(bar)/ ]","out":"[]","err":"","out_mask":"Ã¿Ã¿"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"[ \"foo\" =~ /foo(bar)(baz)/ ]"},{"out":"51","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"($foo) = \"foo/bar-baz&stuff/51\" =~ /(\\d+)$/;  $foo"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\",\"rarafoo\"]","err":"","code":"[ \"foo foobar foobaz rarafoo gerzson\" =~ /\\w*o\\b/g ]","err_mask":""},{"code":"[ \"foo foobar foobaz rarafoo gerzson\" =~ /\\w*o\\W/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo \",\"rarafoo \"]","err":""},{"err_mask":"","code":"[ \"foo foobar foobaz rarafoo\" =~ /\\w*foo\\b/g ]","err":"","out":"[\"foo\",\"rarafoo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"foo\",\"foo\",\"rarafoo\"]","code":"[ \"foo foobar foobaz rarafoo\" =~ /\\w*foo/g ]","err_mask":""},{"err_mask":"","code":"[ \"foo foobar foobaz rarafoo\" =~ /\\w*foo$/g ]","err":"","out":"[\"rarafoo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$foo[\"foo\"] = \"hallo\"; \\@foo","out":"[\"hallo\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"foo!","err":"","code":"$foo = {};  \"foo!\" if $foo;","err_mask":""},{"code":"'foo' =~ /.+/; 'foo' =~ s//bar/r; # yup","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"bar"},{"out_mask":"Ã¿Ã¿Ã¿","out":"\u0000\u0000\u001f","err":"","code":"'foo' ^ 'fop'","err_mask":""},{"err_mask":"","code":"[ 'foo' ^ 'fop' ]","err":"","out":"[\"\\0\\0\\37\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"k","out_mask":"Ã¿","err_mask":"","code":"FOO: for (0 .. 9) { last FOO; } FOO: while () { last FOO; } \"k\""},{"err_mask":"","code":"$foo = 'hello'; push @bar, substr($foo, -$_) for 1 .. length $foo; \\@bar","err":"","out":"[\"o\",\"lo\",\"llo\",\"ello\",\"hello\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"foo \"HERE\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"foo \"HERE\"\"\n","err":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"foo \"hi\\n\"\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"foo \"hi\\n\"; sub foo { print \"moo\\n\"; }"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"\\ @Foo::ISA"},{"err_mask":"","code":"@$foo{key} # except it isn't","out":"","err":"","out_mask":""},{"code":"\"foo\" =~ m/\\1/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Reference to nonexistent group in regex; marked by <-- HERE in m/\\1 <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"yay","code":"\"foo\" =~ m/f/ and print \"yay\"","err_mask":""},{"err_mask":"","code":"$_ = 'foo'; my $a = 5; 1 for $a; $_","err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = 'foo'; { my $_ = 'bar'; print $_; }","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_\"\n","err":"","code":"$_ = 'foo'; { my $_; print $main::_; }","err_mask":""},{"err_mask":"","code":"$foo = 'name'; \"define('DB_NAME', 'l33t7ex7');\" =~ /^define\\('DB_\\U$foo\\E', '(.*)'\\);$/","out":"1","err":"","out_mask":"Ã¿"},{"code":"\"foo\\nbar\" =~ m/[\\n]/ and \"yes\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"yes"},{"code":"[ \"foo\\nbar\\nbaz\" =~ s/^.//mgr ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"oo\\nar\\naz\"]"},{"code":"\"foo\\nbar\" =~ /o\\nb/ ? \"matches\" : \"doesn't match\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"matches"},{"err_mask":"","code":"$_=\"foo\\nbar\"; s/.+//; $_","out":"\nbar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"\"foo\\nbar\" ~~ s/\\n/<br>/gr"},{"err_mask":"","code":"\"foo\\nbar\" =~ s/\\n/<br>/gr","out":"foo<br>bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"foo<br>bar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"foo\\nbar\" =~ s/\\n/<br\\>/gr"},{"err_mask":"","code":"\"foo\" ne \"bar\"","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"nomatch\"]","code":"[ 'foo nobang' =~ /foo\\s+(?:bar\\s+)?bang/ ? 'match' : 'nomatch' ]","err_mask":""},{"err_mask":"","code":"$_ = \"foo\\n#one\\n #two \\n#three\\n##bar\\nfour\\n\"; @parse = (); push @parse, $1 =~ /##/ ? \"ERROR\" : $1 while s/^((?:\\s*#(?!#).*\\n)+|.*\\n)//; \\@parse","err":"","out":"[\"foo\\n\",\"#one\\n #two \\n#three\\n\",\"ERROR\",\"four\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"foo\" =~ /o{2}/, \"foo\" =~ /\\Qo{2}/ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"beans-and-cornbread","err":"","code":"$foo = 'origin/beans-and-cornbread'; substr($foo, 7)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"if !~\"\n","err":"","code":"$_='FOO'; print if !~ /(BAR|xx)/;","err_mask":""},{"code":"$_='FOO'; print if $_ !~ /(BAR|xx)/;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"FOO","err":""},{"out":"nothing found","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$foo = ''; print \"nothing found\" unless length $foo;"},{"err_mask":"","code":"@foo = qw/a b c d e/; $x = \\$foo[2];  $$x = 'i';  [ @foo ]","out":"[\"a\",\"b\",\"i\",\"d\",\"e\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[3]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"@foo = qw/a b c d/; [ $#foo ]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[2]","err":"","code":"@foo = qw( a b c ); [$#foo]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo\r\n\tbar\n","code":"\"foo\\r\\n\\tbar\\n\"","err_mask":""},{"err":"","out":"9\n","out_mask":"Ã¿Ã¿","err_mask":"","code":"*foo{SCALAR}->$* = 2; my $bar; $$bar = 3; say $bar->$****foo{SCALAR}->$*;"},{"out":"[\"foo\",\"flarb\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ (foo => scalar('bar', baz => scalar('quux', flurb => scalar('flarb')))) ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\",\"bar\",\"baz\",\"quux\",\"flurb\",\"flarb\"]","err":"","code":"[ (foo =>scalar 'bar', baz =>scalar 'quux', flurb =>scalar 'flarb') ]","err_mask":""},{"err_mask":"","code":"[ 'foo' =~ s/foo/bar/r, 'foo' =~ tr/o/x/r ]","err":"","out":"[\"bar\",\"fxx\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"foo\" =~ s/foo/^{MATCH}bar/pr;","out":"^{MATCH}bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"foo\" =~ s/foo/$^{MATCH}bar/pr;","err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿"},{"code":"\"foo\" =~ s/foo/${^MATCH}bar/pr;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foobar"},{"out":"fee","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"\"foo\" =~ s/o/e/gr"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo bar","code":"@foo = (\"%s %s\", 'foo', 'bar'); printf @foo;","err_mask":""},{"err_mask":"","code":"@foo = (\"%s %s\", 'foo', 'bar'); sprintf @foo;","err":"","out":"3","out_mask":"Ã¿"},{"err_mask":"","code":"[ {foo => sub {1}} ]","out":"[{foo => sub { \"DUMMY\" }}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hello","code":"\"Foo\"->${\\sub { \"hello\" } };","err_mask":""},{"err_mask":"","code":"'foo*' =~ s{([*?]+)|(\\W)}{ $2 ? \"\\\\$2\" : '.{' . $1 =~ tr/?// . '}' . '.*' x (index($1, '*') >= 0) }egr","out":"foo.{0}.*","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'foo*' =~ s{([*?]+)|(\\W)}{ $2 ? \"\\\\$2\" : '.' x $1 =~ tr/?// . '.*' x (index($1, '*') >= 0) }egr","err":"","out":"foo.*","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"foo\",\"bar\",\"baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \" foo\\tbar  baz \" =~ /\\S+/g ]"},{"err_mask":"","code":"$foo = 'this/that' =~ s/th//r; $foo","out":"is/that","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$_=\"foo\"; tr alaLa; print $_"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"defined\n","code":"%foo = (undef, undef); say \"defined\" if (grep { defined } keys %foo);","err_mask":""},{"err":"","out":"FOO v","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_='FOO v'; print if $_ !~ /FOO\\s*?(BAR|xx)/i;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/FOO( <-- HERE ?!\\s*(BAR|xx)/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$_='FOO v'; print \"Invalid str.  Foo is missing BAR or xx\"  if $_ =~ /FOO(?!\\s*(BAR|xx)/i;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Invalid str.  Foo is missing BAR or xx","err":"","code":"$_='FOO v'; print \"Invalid str.  Foo is missing BAR or xx\"  if $_ =~ /FOO(?!\\s*(BAR|xx))/i;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Group name must start with a non-digit word character in regex; marked by <-- HERE in m/(?<< <-- HERE <<!>&)#(\\w+)/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"\"foo\" =~ /(?<<<<!>&)#(\\w+)/","err_mask":""},{"code":"[ \"(foo)\" =~ /\\w+/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\"]","err":""},{"out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"${\\*foo}->(\"why hello\")"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"$foo","err":"","code":"$foo=\"wibble\"; q\"$foo\"","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"'foo' xor 'fop'"},{"err":"","out":"Invalid str.  Foo is missing BAR or xx","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_='FOO x'; print \"Invalid str.  Foo is missing BAR or xx\"  if $_ =~ /FOO(?!\\s*(BAR|xx))/i;"},{"code":"for \\@{[]} (()) {}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify reference to array dereference in loop entry at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"012345678910","err":"","code":"for ( 0 .. 10 ) { print; } print $_;","err_mask":""},{"out":"\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Â","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for (\"1\"..\"128\"){ print chr \"$_\" };"},{"code":"[ for (1..20){if (/^5$/ .. /^18$/){print $_;} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"[ for \"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"[ for \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ for (1..20){if (/^5$/ .. /^18$/){print $_;}} ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","err":"","code":"for (1..20){if (/^5$/ .. /^18$/){print $_;}","err_mask":""},{"err_mask":"","code":"for (1..20){if (/^5$/ .. /^18$/){print $_;}}","out":"56789101112131415161718","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[123, ,5, ,12, ,7, ]","code":"for (\"123 5 12 7 \") { my $re = qr/(\\d+)(\\s+)/; if(/^(?:$re)+$/) { my @result = /$re/g; print \"[\" . join(\",\", @result) . \"]\" } else { print \"no match\" } } # maybe not necessarily like this, but something along these lines","err_mask":""},{"out":"ARRAY(0x3d55578) ARRAY(0x3b311a8) ARRAY(0x3802e70)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for (1 .. 3) { my @bar; push @foo, \\@bar } \"@foo\""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"234","code":"for(1..3) { print $_+1 }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"12345","code":"for (1..5) { print; print and last if 0 }","err_mask":""},{"code":"... for \"A\" ... \"Z\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unimplemented at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"","out":"","err":"","code":"foreach (1..4) { do { next }; print \"$_\\n\"}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,2,4]","err":"","code":"foreach ($i = 0; $i < 3; $i++) { push @foo, $i*2 }  \\@foo","err_mask":""},{"code":"foreach my $val (qw/entity baz /) {print +(grep /$val/,( \"foo\", \"bar\", \"foo entity bar quux\", \"foo bar\")) ? \"$val found\" : \"$val not found\" };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"entity foundbaz not found","err":""},{"out":"1,2,3,4,5,","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"foreach my $var ( 1..5 ){ print \"$var,\" }"},{"code":"for ('foo', 'bar') { s/oo/ar/g } # sirkha, like this","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"1234512345","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for ( grep { print $_; 1 } 1 .. 5 ) { print $_ }"},{"err_mask":"","code":"for (\"hello\") { $_ = 42 }","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"fork","out":"","err":"","out_mask":""},{"out":"[\"fork\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"fork-fork\" =~ /-/ and [eval '$`..$\\'']"},{"err_mask":"","code":"fork; print $!;","out":"Resource temporarily unavailable","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"28453","out_mask":"Ã¿Ã¿Ã¿Ã¿\u0000","err_mask":"","code":"fork => until 0 => $$"},{"err_mask":"","code":"fork while fork","out":"","err":"","out_mask":""},{"err_mask":"","code":"fork while fork;","out":"","err":"","out_mask":""},{"err":"","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"fork while fork'"},{"code":"for (map $_, 'hello') { $_ = 42 }","err_mask":"","out_mask":"","out":"","err":""},{"code":"formatbw\\.css   # not valid","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"formatbw\\\"\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \") last\"\n","code":"for my $a(1 .. 100) { if ($a == 4) last; }","err_mask":""},{"err_mask":"","code":"for my $cat (1,2,3,4) { $cat++ }","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"for \\my %hash ({foo => 1}, {foo => 2}) { say $hash{foo}; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"1\n2\n","err":""},{"err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for(my $i=0;$i<10;$i++) {print \"Don't spam, please!\"\\n\";}"},{"err":"","out":"Don't spam, please!\nDon't spam, please!\nDon't spam, please!\nDon't spam, please!\nDon't spam, please!\nDon't spam, please!\nDon't spam, please!\nDon't spam, please!\nDon't spam, please!\nDon't spam, please!\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for(my $i=0;$i<10;$i++) {print \"Don't spam, please!\\n\";}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hello #0 Hello #1 Hello #2 Hello #3 Hello #4 Hello #5 Hello #6 Hello #7 Hello #8 Hello #9 ","err":"","code":"for(my $i = 0; $i < 10; $i++) { print \"Hello #$i \"; }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Hello #0\nHello #1\nHello #2\nHello #3\nHello #4\nHello #5\nHello #6\nHello #7\nHello #8\nHello #9\n","code":"for(my $i = 0; $i < 10; $i++) { print \"Hello #$i\\n\"; }","err_mask":""},{"err_mask":"","code":"for(my $i =0; $i <= $#$ref;$i++){ print @$ref[$i] , \"\\n\";}","out":"","err":"","out_mask":""},{"code":"for my $i (1..100) {push @a, [(1) x 1024*1024]}; scalar @a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"100"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Hello #1 Hello #2 Hello #3 Hello #4 Hello #5 Hello #6 Hello #7 Hello #8 Hello #9 Hello #10 ","code":"for my $i (1 .. 10) { print \"Hello #$i \"; }","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"30","err":"","code":"for my $i (1..30) {push @a, [(1) x 1024*1024]}; scalar @a","err_mask":""},{"err_mask":"","code":"for my $k (keys %{{a=>1, b=>2, c=>3}}) { print $k } # works fine with hashes only known by reference too","out":"bca","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"for my $x ( 1..10 ) { print $x }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"12345678910","err":""},{"err":"","out":"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for my $x ( 1..10 ) { say $x }"},{"err_mask":"","code":"for (my $x = 1; $x < 10; $x += my $y) { $y=$x; say $x}","err":"","out":"1\n2\n4\n8\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"for (my $x = 1; $x < 10; $x += my $y) { $y=$x; say $x; push @wtf, \\$y; } say \"@wtf\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1\n2\n4\n8\nSCALAR(0x44f7e90) SCALAR(0x503ab88) SCALAR(0x4d21a08) SCALAR(0x506d228)\n"},{"out":"A B. A B. ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for (my ($x, $y) = (\"A\", \"B\")) { print \"$x $y. \"; }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"A B (current value: A). A B (current value: B). ","code":"for (my ($x, $y) = (\"A\", \"B\")) { print \"$x $y (current value: $_). \"; }","err_mask":""},{"code":"for (()) { next }","err_mask":"","out_mask":"","err":"","out":""},{"code":"for $_ qw(foo bar baz) { print }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"$_ qw(foo bar baz)\"\n","err":""},{"out":"ERROR: &CORE::values cannot be called directly at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for ([qw/foo bar/]->${\\\\&CORE::values}) { print }"},{"err_mask":"","code":"for ([qw/foo bar/]->${\\\\&values}) { print }","out":"ERROR: Undefined subroutine &main::values called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"for (while 1) {}","out":"ERROR: syntax error at (eval 1) line 1, near \"(while\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'á¸' =~ /\\P{UpperCase}/","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"@f{qw/sign exponent fraction/} = (unpack \"b*\",(pack \"d\", 0.9999999999999926)) =~ /^(\\d)(\\d{11,11})(\\d+)$/; \\%f","out":"{sign => 1,fraction => \"1111111111111111111111111111111111111111011111111100\",exponent => \"01111011111\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"23","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"*f = sub { 23 }; no strict; &{'f'}()"},{"out_mask":"Ã¿","err":"","out":"t","code":"\"ft\\n\" =~ m/ft$/ ? 't' : 'f'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"123","code":"*fuck = sub { 123 }; fuck()","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"\"FÂ­uÂ­dge\" =~ /\\N{SOFT HYPHEN}/;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.0704","err":"","code":"Function::Parameters->VERSION","err_mask":""},{"err_mask":"","code":"\"gammadelta\" =~ /alfa(bravo)|(gamma)delta/","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"","err":"","out":"","code":"getlogin()","err_mask":""},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"[glob(\"../*\")]"},{"out":"","err":"","out_mask":"","err_mask":"","code":"(glob '*')[0]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[]]","code":"[[ ((glob(\"*.*\"))[0]) ]]","err_mask":""},{"err":"","out":"[1234,1235,1236,1237]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ glob \"123{4,5,6,7}\" ]"},{"out":"[111,112,113,114,115,116,117,117,118,119,120,211,212,213,214,215,216,217,217,218,219,220,311,312,313,314,315,316,317,317,318,319,320,411,412,413,414,415,416,417,417,418,419,420,511,512,513,514,515,516,517,517,518,519,520,611,612,613,614,615,616,617,617,618,619,620,711,712,713,714,715,716,717,717,718,719,720,811,812,813,814,815,816,817,817,818,819,820,911,912,913,914,915,916,917,917,918,919,920,1011,1012,1013,1014,1015,1016,1017,1017,1018,1019,1020]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ glob(\"{1,2,3,4,5,6,7,8,9,10}{11,12,13,14,15,16,17,17,18,19,20}\") ]"},{"err_mask":"","code":"[ glob \"123[4 .. 7]\" ]","out":"[\"123[4\",\"..\",\"7]\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ glob \"123[4-7]\" ]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"err":"","out":"[\"1 no split on space\",\"1d\",\"2 no split on space\",\"2d\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ glob '\"{1,2}{ no split on space,d}\"' ]"},{"err_mask":"","code":"[glob \"[abc]\"]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[glob \"{a,b,c}\"]","err":"","out":"[\"a\",\"b\",\"c\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[glob \"abc\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"abc\"]"},{"err_mask":"","code":"[ glob '{a,b}' x 2 ]","out":"[\"aa\",\"ab\",\"ba\",\"bb\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"fooa\",\"foob\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[glob \"foo{a,b}\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"fooa","err":"","code":"glob \"foo{a,b}\"","err_mask":""},{"err_mask":"","code":"[glob \"foo{a,b}{c,d}\"]","err":"","out":"[\"fooac\",\"fooad\",\"foobc\",\"foobd\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ glob \"{${\\join ',', 'a' .. 'e'}}\" x 2 ]","err":"","out":"[\"aa\",\"ab\",\"ac\",\"ad\",\"ae\",\"ba\",\"bb\",\"bc\",\"bd\",\"be\",\"ca\",\"cb\",\"cc\",\"cd\",\"ce\",\"da\",\"db\",\"dc\",\"dd\",\"de\",\"ea\",\"eb\",\"ec\",\"ed\",\"ee\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"[ glob \"kjdasfkjdasfdas/*\" ]"},{"code":"*globlal = sub {\"Hello World\"}; globlal()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Hello World"},{"err_mask":"","code":"\\*globlal = sub {\"Hello World\"}; globlal()","out":"ERROR: Can't modify reference to ref-to-glob cast in scalar assignment at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"[glob(\"/*\")] # nothing even in /?","err_mask":""},{"err":"","out":"[\"samuel road\",\"samuel street\",\"samuel alley\",\"sam road\",\"sam street\",\"sam alley\",\"s road\",\"s street\",\"s alley\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ glob '\"samuel road\"' =~ s/\\bsamuel\\b/{samuel,sam,s}/gr =~ s/\\broad\\b/{road,street,alley}/gr ]"},{"err":"","out":"[[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[[ ((glob(\"*.txt\"))[0]) ]]"},{"err_mask":"","code":"[[ ((glob(\"*.txt\"))[0..3]) ]]","err":"","out":"[[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"[glob \".[Zz][Ii][Pp]\"]"},{"err":"","out":"[\"HASH(0x3a10b88)\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[glob {\".[Zz][Ii][Pp]\"}]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"nomatch\"]","err":"","code":"[ \"GMT\" =~ /(?:[PMCE][SD]T|UTC)/ ? 'match' : 'nomatch' ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Âatgma","err":"","code":"~(\"Goat\" & \" \") ^ \"oatgma\"","err_mask":""},{"code":"\"Goat\" & \" \" | \"oatgma\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"oatgma","err":""},{"out_mask":"Ã¿","out":"1","err":"","code":"\"Good morning! Sabah el kheer   ØµØ¨Ø§Ø­ Ø§ÙØ®ÙØ±\" =~  m{[^\\x00-\\x7f]}","err_mask":""},{"code":"goto LABEL; [do { ; LABEL: 42 }];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[42]"},{"err_mask":"","code":"goto LABEL; [do { ; LABEL: print 'wut' }];","out":"wut","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} 1\"\n","code":"goto LABEL; [do { ; LABEL: print 'wut' } 1];","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"goto LABEL; [grep { ; LABEL: print 'wut' } 1];","err":"/home/ryan/workspace/perlblead-ci/runeval.sh: line 5: 28982 Segmentation fault      /home/ryan/perl5/perlbrew/perls/perlbot-intest/bin/perl /home/ryan/bots/perlbuut/lib/eval.pl\n","out":"","out_mask":""},{"out_mask":"","out":"","err":"/home/ryan/workspace/perlblead-ci/runeval.sh: line 5: 28987 Segmentation fault      /home/ryan/perl5/perlbrew/perls/perlbot-intest/bin/perl /home/ryan/bots/perlbuut/lib/eval.pl\n","code":"goto LABEL; [map { ; LABEL: print 'wut' } 1];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ grep /.../ ]","err_mask":""},{"err":"","out":"[\"0 and false\",1,\"false\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep $_, \"0 and false\" , 1 , \"false\", 0 ]"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"[ grep 1 ]","err_mask":""},{"code":"[grep { !($_ & ($_-1)) } 0 .. 1024]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1,2,4,8,16,32,64,128,256,512,1024]"},{"err":"","out":"[\"abcd\",\"abdc\",\"acbd\",\"acdb\",\"adbc\",\"adcb\",\"bacd\",\"badc\",\"bcad\",\"bcda\",\"bdac\",\"bdca\",\"cabd\",\"cadb\",\"cbad\",\"cbda\",\"cdab\",\"cdba\",\"dabc\",\"dacb\",\"dbac\",\"dbca\",\"dcab\",\"dcba\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep !/(.).*\\1/, glob '{a,b,c,d}' x 4 ]"},{"code":"[ grep $_ % 2, 1 .. 20 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,3,5,7,9,11,13,15,17,19]"},{"err_mask":"","code":"[ grep { $_-=2 } 1,2,3,4,5 ]","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ grep { $_-=2 } 1..5 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[-1,1,2,3]"},{"err":"","out":"[3,4,5,6,7]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep { $_+=2 } 1..5 ]"},{"out":"[-1,1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep { $_-=2 } 1..5 ]  # where's my error"},{"code":"[ grep { ($_ >= 5) .. ($_ <= 18) } (1..20) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","err":""},{"err_mask":"","code":"[grep $_ == 5 .. $_ == 18, 1 ..20]","out":"[5,6,7,8,9,10,11,12,13,14,15,16,17,18]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[5,4,3,2,1]","err":"","code":"[grep $_ == 5 .. $_ == 18, reverse 1 ..20]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"abc\",\"bat\"]","code":"[ grep { /a/ and /b/ } qw/abc cat bat/ ]","err_mask":""},{"err_mask":"","code":"[ grep /(a.a)/, qw(apple pear banana) ]","out":"[\"banana\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ grep { /a/ && /b/ } qw/abc cat bat/ ]","out":"[\"abc\",\"bat\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foobar=true\",\"foobar.yes\",\"foobar|no\"]","code":"[grep { $_ =~ /\\Afoobar.(?:true|false|yes|no)\\z/ms } (\"foobar=true\", \"foobar.yes\", \"foobar|no\", \"foobar.lambda\",)];","err_mask":""},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"grep { $_ =~ /\\Afoobar.(?:true|false|yes|no)\\z/ms } (\"foobar=true\", \"foobar.yes\", \"foobar|no\", \"foobar.lambda\",);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"axxxyyyb\"]","err":"","code":"[ grep /a(x{0,3})(??{'y' x length $1})b/, qw( axxxyyb axxxyyyb axxxyyyyb ) ]  # Su-Shee","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo.bar\",\"foo\"]","code":"[ grep /^[a-z0-9]*[a-z](\\.[a-z0-9]*[a-z])*\\z/, qw( foo.bar foo foo..bar foo0.bar foo.bar. ) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"dogs\",\"badgers\",\"monkeys\"]","err":"","code":"[grep \"cats\", qw(dogs badgers monkeys)]","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"25","code":"grep chr() =~ /[[:space:]]/, 0 .. 0x10_ffff","err_mask":""},{"err":"","out":"[\"a test\",\"a problem\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[grep defined, \"this is (a test,a problem)\" =~ /.*\\(|\\).*|([^,()]+)/g ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"present","code":"!grep($_ eq 'bbb', qw(aaa bbb ccc)) ? 'not present' : 'present'","err_mask":""},{"code":"!grep($_ eq 'xxx', qw(aaa bbb ccc)) ? 'not present' : 'present'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"not present","err":""},{"err_mask":"","code":"[ grep /foo(?!.*bar)/, qw( foo bar foobar fooooooobar  foosomebar foosomeba ) ]","out":"[\"foo\",\"foosomeba\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"foo\",\"foo (bar)\",\"(bar) foo\",\"foo (bar) baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep /^([^()]+|\\([^()]*\\))*$/g, \"foo\", \"foo (bar)\", \"(bar) foo\", \"foo (bar) baz\", \"foo (bar\" ]"},{"code":"grep $_ .= '-haha', map $_, qw(a b c d e)","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"code":"grep $_ .= '-haha', qw(a b c d e)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"h\"]","code":"[ grep /h/, map chr, (0..0x3000) ]","err_mask":""},{"code":"[grep -iP { $_ =~ /(?:foobar)(?:\\s.\\s|.)(?:true|false|yes|no) } (\"foobar=true\", \"foobar = true\", \"FOOBAR:no\", \"barfoo=yes\",)];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ grep { length * 2 < 4 } qw/a bcd efgh i j k/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unterminated <> operator at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"[ grep { length <= 3 } qw/a bcd efgh i j k/ ]","err_mask":""},{"err":"","out":"[\"bcd\",\"efgh\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep { length >= 3 } qw/a bcd efgh i j k/ ]"},{"out":"[\"[\",\"]\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep /[\\[\\]]/, map chr, 0..255 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"http://40.media.tumblr.com/b3e62ef833996a4ffb544ed37300807d/tumblr_nlf8czGMpJ1s61cido1_500.jpg\",\"http://40.media.tumblr.com/c0e108161497f351e40db139289b3818/tumblr_nldblnzio71s61cido1_500.jpg\"]","err":"","code":"[ grep m|^http://(?!.*avatar)|, qw( http://assets.tumblr.com/images/default_avatar/octahedron_open_48.png http://assets.tumblr.com/images/default_avatar/cube_closed_48.png http://40.media.tumblr.com/b3e62ef833996a4ffb544ed37300807d/tumblr_nlf8czGMpJ1s61cido1_500.jpg http://40.media.tumblr.com/c0e108161497f351e40db139289b3818/tumblr_nldblnzio71s61cido1_500.jpg ) ]","err_mask":""},{"out_mask":"Ã¿","err":"","out":"0","code":"grep { $_->{name}[0] eq $w } @list,","err_mask":""},{"err_mask":"","code":"grep { $_->{name}[0] eq $w }, @list","out":"ERROR: syntax error at (eval 1) line 1, near \"},\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ grep { not (1../3/) } (1..10) ]","err_mask":""},{"code":"[ grep { not (1 + index $_, 'approver') and m/help.*?\\@example.net/ } qw(help-approver@example.net help-comment@example.net help@example.net) ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"help-comment\\@example.net\",\"help\\@example.net\"]","err":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ grep { not (do{1}../3/) } (1..10) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"m\",\"q\",\"s\",\"y\"]","code":"[ grep { not eval } a..z ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of non-creatable array value attempted, subscript -1 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"grep $_, @order[-1]","err_mask":""},{"code":"[ grep { scalar(/\\Aw\\z/../\\Af\\z/) } qw/m tu w th f sa su/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"w\",\"th\",\"f\"]"},{"out":"[12,\"20.12\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep Scalar::Util::looks_like_number $_, split ' ', \"foo 12 bar lol super-yay 13_000 20.12 baz\" ]"},{"code":"[ grep Scalar::Util::looks_like_number $_, split ' ', \"foo 12 bar lol super-yay 13 baz\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[12,13]"},{"out":"[\"ScaleAddr5=abc\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep /^scaleaddr(\\d)=([^\\d]*)/i, qw(blahj blah blah ScaleAddr5=abc) ];"},{"code":"[ grep /^scaleaddr(\\d)/i qw/scaleaddr123/ ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"/^scaleaddr(\\d)/i qw/scaleaddr123/\"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\t\",\"\\n\",\"\\13\",\"\\f\",\"\\r\",\" \",\"\\205\",\"\\240\"]","code":"[ grep /\\s/,map chr,  0..255 ]","err_mask":""},{"code":"[  grep { $_ !~ /:/ } split('\\s+', 'frog abd:def \"jumping jack\" 123:456 book jimbo:\"billy bob\" elephant') ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"frog\",\"\\\"jumping\",\"jack\\\"\",\"book\",\"bob\\\"\",\"elephant\"]","err":""},{"err_mask":"","code":"grep { $_ !~ /:/ } split('\\s+', 'frog abd:def \"jumping jack\" 123:456 book jimbo:\"billy bob\" elephant');","out":"6","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"foo (bar)\",\"(bar) foo\",\"foo (bar) baz\"]","code":"[ grep tr/()//cdr!~/^\\)|\\($|\\(\\(|\\)\\)/, \"foo\", \"foo (bar)\", \"(bar) foo\", \"foo (bar) baz\", \"foo (bar\" ]","err_mask":""},{"err_mask":"","code":"[ grep tr/()//cdr=~/^(\\(\\))*$/g, \"foo\", \"foo (bar)\", \"(bar) foo\", \"foo (bar) baz\", \"foo (bar\" ]","out":"[\"foo\",\"foo (bar)\",\"(bar) foo\",\"foo (bar) baz\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"one\",\"abcdefghij\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep /^\\w{3,10}\\z/, qw( one jdhfkjhfkjhdlkfjgh qwe.ert abcdefghij  no abcdefghijk ) ]"},{"err":"","out":"no such thing","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"Grinnz->can('import') ? \"has import kthx\" : \"no such thing\""},{"out":"","err":"","out_mask":"","err_mask":"","code":"Grinnz->import()"},{"err":"","out":"k","out_mask":"Ã¿","err_mask":"","code":"\"guess\\nwhat\" =~ /\\Aguess$/m ? \"k\" : \"wtf\""},{"out":"[\"T\",\"F\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%h = ( 1=>1, 1=>0, 0=>1, 0=>0 ); [ map { !$_ || $h{$_} ? 'T' : 'F' } keys %h ]"},{"code":"%h = ( 1=>1, 1=>0, 0=>1, 0=>0 ); map { !$_ || $h{$_} ? 'T' : 'F' } keys %h","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"out":"[\"T\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@h = ( 1=>1, 1=>0, 0=>1, 0=>0 ); [ map { ! $_ || shift @h ? 'T' : 'F' } shift @h ]"},{"code":"@h = ( 1, 1, 1, 0, 0, 1, 0, 0 ); [ map { ! $_ || shift @h ? 'T' : 'F' } shift @h ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"T\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{12 => \"hip\",18 => \"hop\"}","code":"%h = (12 => 'hip', 0x12 => 'hop'); \\%h","err_mask":""},{"err":"","out":"4","out_mask":"Ã¿","err_mask":"","code":"%h = 1..6; {%h{1,3}}"},{"err_mask":"","code":"%h = 1..6; +{%h{1,3}}","out":"{1 => 2,3 => 4}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"%h = 1..6; +{%h{1,3,5}} # boo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{5 => 6,1 => 2,3 => 4}","err":""},{"code":"%h = 1..6; +{%h{1,3,7}} # boo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{7 => undef,1 => 2,3 => 4}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{},{},{}]","err":"","code":"[\\(%h1, %h2, %h3)]","err_mask":""},{"code":"%h = ( 1=>\"one\", 2=>\"two\" ); map { print \"key: $_ val: $h{$_}\" } keys %h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"key: 1 val: onekey: 2 val: two","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,1]","code":"$h = { 25 => 1 }; my $idx = \"25 \"; [ $h->{$idx}, $h->{0+$idx} ]","err_mask":""},{"code":"$h = { 25 => 1 }; my $idx = \"25\"; [ $h->{$idx}, $h->{0+$idx} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,1]"},{"err_mask":"","code":"$^H=256;join(($x)x101)","out":"","err":"","out_mask":""},{"code":"$^H=256;join($x)x101","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, within string\nsyntax error at (eval 1) line 1, at EOF\n","code":"%h=( 'a'=>'1', 'b'=>'2' ); %h=( 'c'=>'3', 'd'=>'4' ); for ( sort keys %h ){ print \"$_ $h{$_\" };","err_mask":""},{"code":"%h=( 'a'=>'1', 'b'=>'2' ); %h=( 'c'=>'3', 'd'=>'4' ); for ( sort keys %h ){ print \"$_ $h{$_}\" };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"c 3d 4"},{"err_mask":"","code":"%h = (a => 1); scalar %h","out":"1/8","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"{b => 3,c => 4,a => 2}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@h{'a' .. 'c'} = 1 .. 3; ++$_ for values %h; \\ %h;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"halal","code":"halal","err_mask":""},{"code":"`halt`;","err_mask":"","out_mask":"","err":"","out":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"; $j \"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$h = {'a' => {'one' => 1}, \"b\" => 2}; $i = {'a' => {'two' => 2}; $j = {%$h, %$i}; print Dumper($j);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$VAR1 = {\n          'b' => 2,\n          'a' => {\n                   'two' => 2\n                 }\n        };\n","code":"$h = {'a' => {'one' => 1}, \"b\" => 2}; $i = {'a' => {'two' => 2}}; $j = {%$h, %$i}; print Dumper($j);","err_mask":""},{"out":"ERROR: Unmatched right curly bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, near \"}}\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$h = {'a' => {'one' => 1}, \"b\" => 2}}; $i = {'a' => {'two' => 2}}; $j = {%$h, %$i}; print Dumper($j);"},{"out_mask":"Ã¿","err":"","out":"0","code":"%hash = 1..4; delete @hash{1,3}; scalar %hash","err_mask":""},{"err_mask":"","code":"%hash = 1..4; scalar %hash","out":"2/8","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{7 => 9,5 => 7,1 => 3,3 => 5}","code":"%hash = (1..8); $_++ for %hash; \\%hash","err_mask":""},{"err_mask":"","code":"%hash = (1..8); %hashtwo = (a..j); $_++ for %hash, %hashtwo; [ \\%hash, \\%hashtwo ]","out":"[{7 => 9,5 => 7,1 => 3,3 => 5},{i => \"k\",c => \"e\",g => \"i\",e => \"g\",a => \"c\"}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"%hash1 = ( foo => 1, bar => 2 ); %hash2 = ( baz => undef, quux => \\%hash1 );  \\%hash2","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{quux => {bar => 2,foo => 1},baz => undef}","err":""},{"err_mask":"","code":"%hash1 = ( foo => 1, bar => 2 ); %hash2 = ( baz => undef, quux => \\%hash1 );  $hash2{quux}","err":"","out":"{bar => 2,foo => 1}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"%hash1 = ( foo => 1, bar => 2 ); %hash2 = ( baz => undef, quux => \\%hash1 );  $hash2{quux}{bar}","out":"2","err":"","out_mask":"Ã¿"},{"code":"%hash=(2=>\"two\", 1=>\"one\"); print sort { $a cmp $b } keys %hash","err_mask":"","out_mask":"Ã¿Ã¿","out":"12","err":""},{"out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%hash=(2=>\"two\", 1=>\"one\"); print sort keys { $a cmp $b } keys %hash"},{"code":"%hash = @array = qw/a list of stuff/; [ \\%hash, \\@array ]   # you have arrayrefs though. see perldoc perlreftut","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{of => \"stuff\",a => \"list\"},[\"a\",\"list\",\"of\",\"stuff\"]]"},{"err_mask":"","code":"$hash = { a => 'z', b => { c => 'y' } }; if(ref $hash->{a} ne ;","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$hash = { a => 'z', b => { c => 'y' } }; if(ref $hash->{a} ne 'ARRAY' && ref $hash->{a} ne 'HASH') { print 'scalar' };","err":"","out":"scalar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"HASH","code":"$hash = { a => 'z', b => { c => 'y' } }; ref $hash->{b};","err_mask":""},{"code":"%hash = (); @hash{a..f} = (1)x7; $_++ for @hash{a,c,f}; \\%hash  # hehehe","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{b => 1,c => 2,f => 2,d => 1,e => 1,a => 2}"},{"code":"$hash{'key1'} = \"val1\"; print ref %hash","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿","out":"1","err":"","code":"$hash{'key1'} = \"val1\"; print ref $hash{'key1'}","err_mask":""},{"err":"","out":"key: key2: val: val1, key: key1: val: val2, ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$hash{\"key1\"}=\"val2\"; $hash{\"key2\"}=\"val1\"; for ( sort { $hash{$a} cmp $hash{$b} } keys %hash ) { print \"key: $_: val: $hash{$_}, \"; };"},{"code":"$hash{\"key1\"}=\"val2\"; $hash{\"key2\"}=\"val1\"; for ( sort { $hash{$a} <=> $hash{$b} } keys %hash ) { print \"key: $_: val: $hash{$_}, \"; };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"key: key2: val: val1, key: key1: val: val2, ","err":""},{"code":"$hash{\"key1\"}=\"val2\"; $hash{\"key2\"}=\"val1\"; for ( sort { $hash{$b} cmp $hash{$a} } keys %hash ) { print \"key: $_: val: $hash{$_}, \"; };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"key: key1: val: val2, key: key2: val: val1, "},{"err_mask":"","code":"$hash{\"key1\"}=\"val2\"; $hash{\"key2\"}=\"val1\"; for ( sort { $hash{$b} <=> $hash{$a} } keys %hash ) { print \"key:$_: val:$hash{$_}, \"; };","err":"","out":"key:key2: val:val1, key:key1: val:val2, ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"%hash={ 'stuff' => 'sterf' } ; \\%hash","err":"","out":"{\"HASH(0x44b9b88)\" => undef}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$h->{bar} eq 'lol'; $h->{baz}->{whiz} eq 'lol'; $h","err":"","out":"{baz => {}}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"{baz => {whiz => \"lol\"}}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$h->{bar} eq 'lol'; $h->{baz}->{whiz} = 'lol'; $h"},{"out":"[\"hello\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"hello\" =~ /^([a-z]+)(?:\\s+(.+))?$/ ]"},{"code":"$_ = \"hello\"; /e/c or die; [pos]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"out_mask":"Ã¿","err":"","out":"1","code":"\"hello it is now on 8:08\" =~ m{\\A .* on (.*) }xms;","err_mask":""},{"code":"(\"hello it is now on 8:08\" =~ m{\\A .* on (.*) }xms);","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"[\"hello it is now on 8:08\" =~ m{\\A .* on (.*) }xms];","err":"","out":"[\" 8:08\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"hello\\n\",\"world\",\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"hello\\nworld\" =~ m/(.*(?:\\n|$))/g ]"},{"err_mask":"","code":"[ \"hello\\nworld\" =~ /^.*\\n?/mg ]","err":"","out":"[\"hello\\n\",\"world\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"Hello\" =~ /^.*(.+)$(??{print\"$1\\n\"})/","err":"","out":"o\nlo\nllo\nello\nHello\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"Hello\" =~ /(?!^).*(.+)$(??{print\"$1\\n\"})/    # test","err":"","out":"o\nlo\nllo\nello\no\nlo\nllo\no\nlo\no\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"Hello\" =~ /(?!^).+(*PRUNE)(?{push @bar, $&})(*FAIL)/; [ reverse @bar ]","out":"[\"o\",\"lo\",\"llo\",\"ello\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hello","code":"\"   hello\" =~ s/^\\s*//sr","err_mask":""},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"hello there\" =~ /^([a-z]+)(?:\\s+(.+))?$/"},{"out":"[\"hello\",\"there\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"hello there\" =~ /^([a-z]+)(?:\\s+(.+))?$/ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"hello\",\"there\"]","err":"","code":"[ \"hello there\" =~ /^([a-z]+)\\s*(|(?<=\\s).+)$/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"[ \"hello-there\" =~ /^([a-z]+)\\s*(|(?<=\\s).+)$/ ]","err_mask":""},{"out":"[\"hellothere\",\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"hellothere\" =~ /^([a-z]+)\\s*(|(?<=\\s).+)$/ ]"},{"err_mask":"","code":"[\"Hello\" =~ tr/l/g/r","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[\"Hello\" =~ tr/l/g/r]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Heggo\"]","err":""},{"code":"{%{hello=>\"world\"}}","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"err_mask":"","code":"%{%{{hello=>\"world\"}}}","err":"","out":"0","out_mask":"Ã¿"},{"err_mask":"","code":"%{%{hello=>\"world\"}}","out":"0","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"$_ = 'hello, world, foo bar baz';  [ map tr/ /-/r, split /,\\s*/ ]","out":"[\"hello\",\"world\",\"foo-bar-baz\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = 'hello, world, foo bar baz';  [ map tr/ /-/r, split /,\\s*/ ] # try three :)","out":"[\"hello\",\"world\",\"foo-bar-baz\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"Hell\",\"o, w\",\"orld\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"Hello, world!\" =~ m/(....)/g ]"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"Hello, world!\" =~ m/(....)/g; ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"h\",\"e\"],[\"l\",\"l\"],[\"o\",\" \"],[\"w\",\"o\"],[\"r\",\"l\"]]","code":"$_ = 'hello world'; push @ar, [$1,$2] while /(.)(.)/g; \\@ar","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in transliteration (tr///) at (eval 1) line 1, at EOF\n","err":"","code":"\"Hello, world\" =~ tr/A-Za-z/N-ZA-Mn-za-m/","err_mask":""},{"err_mask":"","code":"'help-approver@example.net' =~ /^(?!help-approver).+\\@example\\.net$/","out":"","err":"","out_mask":""},{"err_mask":"","code":"'help-approver@example.net' =~ /(?<!^help-approver)\\@example\\.net$/","err":"","out":"","out_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"'help-approver@example.net' =~ /(?<!help-approver)\\@example\\.net$/"},{"out_mask":"Ã¿","out":"1","err":"","code":"'help-approver@example.net' =~ /(?!<^help-approver)\\@example\\.net$/","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"'help-approver@example.net' =~ /(?!<help-approver)\\@example\\.net$/","err_mask":""},{"code":"'help-approver@example.net' =~ /(?!help-approver).+\\@example\\.net/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"'help-comment@example.net' =~ /^(?!help-approver).+\\@example\\.net$/","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"'help@example.net' =~ /(?<!help-approver)\\@example\\.net$/","out":"1","err":"","out_mask":"Ã¿"},{"code":"here","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"here","err":""},{"err":"","out":"{\"ARRAY(0x3d05b88)\" => undef}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"+{[ here => \"are\", my => \"values\" ]}"},{"err":"","out":"123333","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"HERE: { print 1; HERE: { print 2; HERE: { print 3; goto HERE unless $i++ > 2 } } }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"there","code":" ${{here,there}}{here};","err_mask":""},{"err_mask":"","code":"\\&hex","out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"hex(\"000001448e317907\") / 1000","out":"1393955010.823","err":"Hexadecimal number > 0xffffffff non-portable at (eval 1) line 4, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"10","out_mask":"Ã¿Ã¿","err_mask":"","code":"hex '0a'"},{"out_mask":"Ã¿Ã¿","err":"","out":"10","code":"hex '0x0a'","err_mask":""},{"out":"20","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"hex \"0x14\""},{"out":"ERROR: Undefined subroutine &main::hex called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\\&hex->(\"0x24\")"},{"out":"43981","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"hex \"0xabcd\""},{"out_mask":"Ã¿","out":"0","err":"Use of uninitialized value $_[0] in hex at (eval 1) line 4, <STDIN> line 1.\n","code":"hex $1","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"hex \"1e0\"","out":"480","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"hex 41","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"65"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"16725","err":"","code":"hex \"4155\"","err_mask":""},{"code":"$hex = '6060FF'; [ unpack q{L>*}, pack q{H*}, '0' x (-length($hex) % 8) . $hex ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[6316287]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"57005","code":"hex \"dead\"","err_mask":""},{"code":"hex 'f' x 16","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"18446744073709551615","err":"Hexadecimal number > 0xffffffff non-portable at (eval 1) line 4, <STDIN> line 1.\n"},{"err":"Integer overflow in hexadecimal number at (eval 1) line 4, <STDIN> line 1.\nHexadecimal number > 0xffffffff non-portable at (eval 1) line 4, <STDIN> line 1.\n","out":"3.16059037807746e+20","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"hex q{112233445566778899}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"true","code":"\"hey, this contains A-Z somewhere\" =~ /A-Z/ ? 'true' : 'false'","err_mask":""},{"code":"$^H{feature_state} = 1; sub foo { state $x; }","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err":"","out":"42\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$h = { \"foo\" => 42 } ;  push @{$h->{foo}}, 17;  say $h->{foo};  # Really?"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[5,6,2]","code":"$h = {foo => 5, bar => 6, baz => 2}; [@{$h}{qw(foo bar baz)}] # is that what you mean?","err_mask":""},{"code":"$h = {foo => 5, bar => 6}; [$h->{foo}]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[5]"},{"err_mask":"","code":"$h = {foo => 5, bar => 6}; [@{$h}{qw/foo/}]","err":"","out":"[5]","out_mask":"Ã¿Ã¿Ã¿"},{"code":"$H{'foobar'}++","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[: 9]","code":"@h{grep !/[a-zA-Z{}]/, split //, \"MPOPCNTSF: INTEGER[9]\"} = (); join '', keys %h","err_mask":""},{"err_mask":"","code":"$h=\"hello world!\"; $h=~ s/(.){1}(.){1}/$2,$1/eg; print $h","err":"","out":"hlowrd","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$2,$1/eg; print $h","err":"","out":"hlowrd","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ifmmp!xpsme\"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$cipher.=chr(ord($1)+1).chr(ord($2)+1);/eg; print $cipher"},{"err_mask":"","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$cipher.=chr(ord($1)+1).chr(ord($2)+1);/eg; print \"$h == $cipher\"","out":"ififmmifmmp!ifmmp!xpifmmp!xpsmifmmp!xpsme\" == ifmmp!xpsme\"","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ehll oowlr!d","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$h=\"$2$1\";/eg; print $h","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$h=$2++.$1++;/eg; print $h","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"1.$1\"\n","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$h=chr(ord($1)+1.$1++;/eg; print $h","err_mask":""},{"err_mask":"","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$h=chr(ord($1)+1).chr(ord($2)+1);/eg; print $h","err":"","out":"ifmmp!xpsme\"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$h=uc($2).\"$1\";/eg; print $h","err":"","out":"EhLl oOwLr!d","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$h=\"hello world!\"; $h=~ s/(.)(.)/$h=uc($2).$1\";/eg; print $h"},{"out":"hi","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"hi"},{"code":"\"hi\"","err_mask":"","out_mask":"Ã¿Ã¿","out":"hi","err":""},{"err_mask":"","code":"%h = (ichi, ni, san, shi); $h{ichi}","out":"ni","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[\"Hi mace\"]","out":"[\"Hi mace\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_=\"hi\"; print();","err":"","out":"hi","out_mask":"Ã¿Ã¿"},{"code":"$_=\"hi\"; print(undef);","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"'Hi these_eyes' x 3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hi these_eyesHi these_eyesHi these_eyes","err":""},{"code":"\"hi\" x 4","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hihihihi","err":""},{"err":"","out":"[\"hi\",\"hi\",\"hi\",\"hi\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[(\"hi\") x 4]"},{"code":"'{# hiya #} {# world #}' =~ m/{#\\s?(.+?)\\s?#}/g; $1;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"hiya","err":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"\"hlagh\"**0"},{"code":"$h{'login'} = 'foo'; $h{login}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"foo"},{"err_mask":"","code":"%h = map { /^(.+)\\.(.*?)\\.\\1$/ } \"aaa.one.aaa\", \"bbb.two.bbb\", \"ccc.test.ccc\", \"asd.fg.foo.asd.fg\"; \\%h","err":"","out":"{aaa => \"one\",\"asd.fg\" => \"foo\",ccc => \"test\",bbb => \"two\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{b => 456,a => 123}","err":"","code":"%h = map { split /:/ } qw( a:123 b:456 ); \\%h","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"nook","code":"$_ = 'hood'; s/h(.*)d/n$1k/r","err_mask":""},{"code":"$href = { \"foo\"=>\"bar\" }; [ %$href ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"bar\"]"},{"err_mask":"","code":"$href = { \"foo\"=>\"bar\" }; lock_ref_keys($href); map { print \"\\\"$_\\\":$href->{$_}\\n\" } %{$href}","err":"","out":"ERROR: Undefined subroutine &main::lock_ref_keys called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\"foo\":bar\n\"bar\":\n","code":"$href = { \"foo\"=>\"bar\" }; map { print \"\\\"$_\\\":$href->{$_}\\n\" } %{$href}","err_mask":""},{"err":"","out":"foobar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$href = { \"foo\"=>\"bar\" }; print (%{$href})"},{"err_mask":"","code":"$href = { \"foo\"=>\"bar\" }; print $href->{\"foo\"}","out":"bar","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foobar","err":"","code":"$href = { \"foo\"=>\"bar\" }; sub pr { print @_ }; pr( %$href );","err_mask":""},{"err_mask":"","code":"$hs1 = { _ -> {} }","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"qr/XabcY/u","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$h->{someKey}->{whatever} = 'abc'; qr/X$h->{someKey}->{whatever}Y/"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{\"HASH(0x4255b88)\" => undef}","code":"%h = { stuff => 'sterf' }; \\%h","err_mask":""},{"err":"","out":"[\"/html\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"<html>foo</html>\" =~ /<([^>]+)>\\s*$/m]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"k1\",\"v1\",\"k2\",\"v2\"]","code":"$_=\"http://a?k1=v1&k2=v2\"; $_=(split /\\?/)[-1]; [ map { split /=/ } (split /&/) ]","err_mask":""},{"err_mask":"","code":" [ 'http://go2web4free.com:7004/img/users/1/1J2KAFHQk_.jpg' =~ m{[^/]+$}g ]","err":"","out":"[\"1J2KAFHQk_.jpg\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Unknown regexp modifier \"/e\" at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"http://google.com $html->at('title')->text"},{"err_mask":"","code":"https://gist.github.com/anonymous/599c9b609f78f9b0abf4","out":"ERROR: Unknown regexp modifier \"/t\" at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, near \"599c9b609f78f9b0abf4\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"https://gist.github.com/zoffixznet/2ad28e7398c95bb4c92d#file-test-pl-L9","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unknown regexp modifier \"/t\" at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, near \"2ad28e7398c95bb4c92d#file-test-pl-L9\n\"\n"},{"out":"ERROR: Unknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\nUnknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\nUnknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"http://www.google.com/ $html = lc $html; $html =~ tr/a-z/n-za-m/;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\nUnknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\nUnknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\n","err":"","code":"http://www.google.com/ $html = lc $html; $html =~ tr/a-z/n-za-m/; $html","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\nUnknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\nUnknown regexp modifier \"/w\" at (eval 1) line 1, at end of line\n","err":"","code":"http://www.google.com/ ref $html","err_mask":""},{"err_mask":"","code":"\"http://www.google.com\" =~ s/http:\\/\\//http:\\/\\/CLOUD_NETWORK.1.1:2144\\//r # I get www.google.com at the end","err":"","out":"http://CLOUD_NETWORK.1.1:2144/www.google.com","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ 'http://www.site.com/letters0241/something-in-australia-a' =~ m[/(?:[^-/]*-){2}([^-/]*)[^/]*\\z] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"australia\"]"},{"err":"","out":"[\"australia\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'http://www.site.com/letters0241/something-in-australia-a' =~ m[something-in-([^-]*)] ]"},{"err_mask":"","code":"$_ = \"huf\"; ++$_","out":"hug","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"huf->can(\"be::sure\")","err_mask":"","out_mask":"","err":"","out":""},{"code":"huf->can(\"can\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"sub { \"DUMMY\" }","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sub { \"DUMMY\" }","code":"huf->can(\"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")","err_mask":""},{"err_mask":"","code":"@hyperv = qw(foo bar baz); print @hyperv . \"\\n\"","out":"3\n","err":"","out_mask":"Ã¿Ã¿"},{"code":"$i = 0; \"aaaa\" =~ s/a/(++$i == 2) ? 'b' : $&/ger #hey, you can do it in perl too! :P","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"abaa","err":""},{"err_mask":"","code":"$i = 1; for (1 .. 12) { print $i, \" \"; $i = int $i * (.5 + sqrt 1.25) + .5; }","out":"1 2 3 5 8 13 21 34 55 89 144 233 ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"14","err":"","code":"$i=5; $i = ++$i + ++$i","err_mask":""},{"code":"\"I am \"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"I am ","err":""},{"code":"\"I am a bot\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"I am a bot","err":""},{"code":"\"I am a fish \".$_[0]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"I am a fish \"I am a fish \".$_[0]","err":""},{"err_mask":"","code":"$_ = 'i am happy'; [ /(?=(....))/g ]","err":"","out":"[\"i am\",\" am \",\"am h\",\"m ha\",\" hap\",\"happ\",\"appy\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"`id`"},{"err":"","out":"\r","out_mask":"Ã¿","err_mask":"","code":"'i' ^ 'd'"},{"err_mask":"","code":"[ 'i' ^ 'd' ]","out":"[\"\\r\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ \"<id>textA<email1><id>textB<email2>\" =~ m!<id>([^<>]*)<email2>! ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"textB\"]","err":""},{"code":"[ \"<id>textA<email1><id>textB<email2>\" =~ m!<id>([^<>]*)<email\\d>!g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"textA\",\"textB\"]"},{"err_mask":"","code":"if(0)","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"0","code":"if (0) { 'a block' }","err_mask":""},{"code":"if (0) { } esle { } exit","err_mask":"","out_mask":"","out":"","err":""},{"code":"if (1 == 1) { print 'foo'; } else;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":""},{"code":"if ( 1 ){ do_something(); } sub  do_something { print \"heyy\"; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"heyy","err":""},{"code":"if (1) {} elseif (2) {}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \") {\"\n"},{"code":"if (1) {} elsif (2) {}","err_mask":"","out_mask":"","err":"","out":""},{"code":"{ if (1 ) { last; print \"lols\"; } print \"lulz\"; } print \"lelz\";  # linagee","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"lelz","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"here done","err":"","code":"if(1) {{ print \"here\"; last; print \"not here\" }} print \" done\"","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"if ('abc' =~ /^a/) { 1 } else { 0 }","err_mask":""},{"code":"if(\"a\" == \"b\"){print \"true\";}else{print \"false\";}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"true","err":""},{"err":"","out":"false","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"if(\"a\" eq \"b\"){print \"true\";}else{print \"false\";}"},{"code":"\"if answer > 0: answer = answer + 2\" =~ /^\\s*if (.*): (.*)/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"if (@a = sub { return }->()) { 1 }","out":"0","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"if (@a = sub { return undef }->()) { 1 }","err_mask":""},{"out":"matched \"besaid\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"if('besaid' =~ m/(\\w*said)/) {print qq{matched \"$1\"\\n};}"},{"out_mask":"","err":"","out":"","code":"`ifconfig -a | grep -i inet`","err_mask":""},{"err_mask":"","code":"if (exists $x->{foo}{bar}{baz}) { } [$x]","out":"[{foo => {bar => {}}}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"false is true!","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"if (false) { print \"false is true!\"; }"},{"err_mask":"","code":"if...if ($x.endswith(\"ft\"))...","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"if...\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Matches! var1: foo, var2: bar","err":"","code":"if (my ($var1, $var2) = \"foo bar\" =~ /(foo|bar)/g) { print \"Matches! var1: $var1, var2: $var2\"; }","err_mask":""},{"code":"if (my ($var1, $var2) = \"foo bar\" =~ /(foo)|(bar)/g) { print \"Matches! var1: $var1, var2: $var2\"; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Matches! var1: foo, var2: "},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Matches! var1: foo, var2: ","code":"if (my ($var1, $var2) = \"foo bar\" =~ /(foo|bar)/) { print \"Matches! var1: $var1, var2: $var2\"; } #I'm not quite sure it's entirely correct though","err_mask":""},{"out":"Matches! var1: foo, var2: ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"if (my ($var1, $var2) = \"foo bar\" =~ /(foo)|(bar)/) { print \"Matches! var1: $var1, var2: $var2\"; } #meant like this rather, but meh"},{"out":"TRUE","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"if ((my $var) = (\"z\" =~ //)) { print \"TRUE\" ;}"},{"code":"if (my ($x, $y) = (1, 0) { ['true']; } else { ['false'] }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \") {\"\n","err":""},{"err_mask":"","code":"if (my ($x, $y) = (1, 0)) { ['true']; } else { ['false'] }","out":"[\"true\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"if  !\"\n","err":"","code":"if  !($sender =~ qr/@ArrayNickHighLight/i) {}","err_mask":""},{"err_mask":"","code":"if (!($sender =~ qr/@ArrayNickHighLight/i))","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"if (!($sender =~ qr/@ArrayNickHighLight/i)) {}","err_mask":"","out_mask":"","out":"","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"if ($sender !~ qr/@ArrayNightHighLight/i) { ... }"},{"out_mask":"Ã¿","err":"","out":"8","code":"if( \"        \" =~ /^((\\t|\\s{4})+)/ ) { print length $1 }","err_mask":""},{"err":"","out":"4","out_mask":"Ã¿","err_mask":"","code":"if( \"        \" =~ /^(\\t|\\s{4})+/ ) { print length $1 }"},{"err_mask":"","code":"\"        if (x = 2): print y;        yo\" =~ /^([\\t ]+)/; my $indents = () = $1 =~ /(\\t| {8})/g","err":"","out":"1","out_mask":"Ã¿"},{"err":"","out":"ERROR: Can't modify not in scalar assignment at (eval 1) line 1, near \") )\n\"\nsyntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"if (! $x = foo() )"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{foo => {bar => {}}}]","err":"","code":"if ($x->{foo}{bar}{baz}) { } [$x]","err_mask":""},{"out_mask":"","err":"","out":"","code":"if ($x){next}","err_mask":""},{"err":"","out":"If y cn rd ths, y cld b  prgrmmr","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"If you can read this, you could be a programmer\"; tr/aeiou//d; $_"},{"out":"[{i => 2,h => 1},undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$i = {\"h\" => 1, \"i\" => 2}; $j = \"i\"; [ ${$j}, $i->{${$j}} ]"},{"code":"\"I hate people\" =~ s/e//gr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"I hat popl","err":""},{"out_mask":"Ã¿","out":"0","err":"","code":"\"I\" + \"I\";","err_mask":""},{"err_mask":"","code":"$i=$i++;  ++$i + $i++","err":"","out":"3","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"3","code":"$i=$i++;  ++$i + $i++  ;","err_mask":""},{"code":"\"i like my keys with rings, not within my hammy interior\" =~ s/\\b(my|with)\\b/[$1]/rg","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"i like [my] keys [with] rings, not within [my] hammy interior"},{"err":"","out":"ERROR: Can't modify substitution (s///) in postdecrement (--) at (eval 1) line 1, near \"s/\\b(my|with)\\b/[$1]/rg --\"\nsyntax error at (eval 1) line 1, near \"-- this one\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"i like my keys with rings, not within my hammy interior\" =~ s/\\b(my|with)\\b/[$1]/rg -- this one?"},{"out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"img 34 32 4 3453  m agi  img 34 ag sgd dfg dfs img 54323 423 img 3sadf  asd"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"img\n 34 32 4 3453  m agi  img\n 34 ag sgd dfg dfs img\n 54323 423 img\n 3sadf  asd","err":"","code":"\"img 34 32 4 3453  m agi  img 34 ag sgd dfg dfs img 54323 423 img 3sadf  asd\" =~ s/img/img\\n/gr","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[123,456]","err":"","code":"$in = \"abc123def456xyz\"; (@out) = $in =~ /\\d+/g; \\@out;","err_mask":""},{"err_mask":"","code":"$in = \"abc123def\"; ($out) = $in =~ /\\d+/g; [$out]; # for added confusion","err":"","out":"[123]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$in = \"abc123def\"; ($out) = $in =~ /(\\d+)/; [$out]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[123]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"$in = \"abc123def\"; ($out) = $in =~ /\\d+/; [$out]","err_mask":""},{"code":"index('abcde', 'd')","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"code":"[index(\"foo bar\",\"foo\"),index(\"food\",\"foo\")]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,0]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[-1,-1]","err":"","code":"[index(\"foo\", \"foo bar\"),index(\"foo\",\"food\")]","err_mask":""},{"err_mask":"","code":"index('test123', 'test') == 0  # I assume?","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"@indices; for (1 .. 10) { push @indices, 11 - $_ }; [@indices];","err":"","out":"[10,9,8,7,6,5,4,3,2,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'inf'","out":"inf","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"'inf' > ~0","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Illegal division by zero at (eval 1) line 1, <STDIN> line 1.\n","code":"'inf'/0","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"NaN","err":"","code":"'inf' - 'inf'","err_mask":""},{"code":"inf == inf","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"\"inf\" == \"Inf\"","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"NaN","code":"'inf'/'nan'","err_mask":""},{"err":"","out":"[\"foo\",\"foo.bak\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$in=\"foo\"; ($out = $in) .= \".bak\"; [ $in, $out ]"},{"err_mask":"","code":"$in=\"foo\"; $out = $in .= \".bak\"; [ $in, $out ]","err":"","out":"[\"foo.bak\",\"foo.bak\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"9+55","code":"\"INGY\" ^ \"perl\"","err_mask":""},{"err":"","out":"[\"no\",\"yes\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$input = \"123\\n456\"; [ $input =~ /123.*456/ ? \"yes\" : \"no\", $input =~ /123.*456/s ? \"yes\" : \"no\" ]"},{"code":"$input = '       A         B        C'; [ split \" \", $input ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"A\",\"B\",\"C\"]","err":""},{"code":"$input = ideally I'd","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"ideally\" via package \"I::d\" (perhaps you forgot to load \"I::d\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"73","code":"int(11/15 * 100);","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"113","code":"int(1.139999999999999 * 100)","err_mask":""},{"err_mask":"","code":"int(1.14 * 100)","out":"114","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"13494","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"int(134.95 * 100)"},{"out_mask":"Ã¿Ã¿","out":"25","err":"","code":"int( (1414364400 - 1414274400) / 3600 )","err_mask":""},{"err_mask":"","code":"int(19.99*100)","out":"1998","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"int(2.4213534531451E+30)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2.4213534531451e+30"},{"err":"","out":"-9","out_mask":"Ã¿Ã¿","err_mask":"","code":"int((45/50-1)*100)"},{"code":"int(5/3)","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"&Internals::SvREADONLY \\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"&Internals::SvREADONLY \\!0, 0; ${\\!0} = 0; defined 'foo'"},{"out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"&Internals::SvREADONLY(\\!0, 0); ${\\!0} = 0; defined 'foo'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"&Internals::SvREADONLY(\\undef, 0); undef = []; undef","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"int((foo); bar()"},{"err_mask":"","code":"$intsize = length(~1) > 10 ? 64 : 32","err":"","out":"64","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"int sprintf '%.f', 134.95 * 100","out":"13495","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\" \" == int(\" \") ? \"true\" : \"false\"","out":"true","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"true","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\" == int(\"\") ? \"true\" : \"false\""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"int((x)"},{"code":"int((x); y()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Transliteration replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"IO::Socket::INET->new()","err":"","out":"ERROR: Can't locate object method \"new\" via package \"IO::Socket::INET\" (perhaps you forgot to load \"IO::Socket::INET\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ \"<ip:11111432941656@192.168.0.230>\" =~ /:([0-9]+)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"11111432941656\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"sum map\"\n","err":"","code":"$i = [qw/5 7 8 2/]; [sum map { scalar @$_ } @i]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"sum map\"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":"","code":"$i = [qw/5 7 8 2/]; [sum map { scalar @$_ } @list","err_mask":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"sum map\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$i = [qw/5 7 8 2/]; [sum map { scalar @$_ } @list]"},{"code":"'irc.freenode.net' =~ /irc\\.([^.]+)/ and print $1;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"freenode","err":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"isa {STDOUT} 'GLOB';"},{"out_mask":"","err":"","out":"","code":"isa {STDOUT} 'IO::Handle';","err_mask":""},{"err_mask":"","code":"\"\"->isa(\"UNIVERSAL\")","err":"","out":"ERROR: Can't call method \"isa\" without a package or object reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = \"I saw Wilma yesterday\"; [ /(\\w*)a/, /(\\w*a)(\\s+[a-zA-Z]{4})/ ]","out":"[\"s\",\"Wilma\",\" yest\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"\" is just our way of talking to the evalbot. Nothing to do wih code.","err_mask":""},{"err_mask":"","code":"$_ = 'I speak Goat Latin'; my $n = 1; s/\\b([^aeiou\\W])?(\\w+)/\"$2\\L$1ma\".'a'x$n++ ^ (($&&$\")^$\")/geir","out":"imaa peaksmaaa Oatgmaaaa Atinlmaaaaa","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = 'I speAk Goat Latin'; my $n = 1; s/\\b([^aeiou\\W])?(\\w+)/\"$2\\L$1ma\".'a'x$n++ ^ (($&&$\")^$\")/geir","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"imaa peAksmaaa Oatgmaaaa Atinlmaaaaa"},{"err":"","out":"Imaa peaksmaaa Oatgmaaaa Atinlmaaaaa","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'I speAk Goat Latin'; my $n = 1; s/\\b([^aeiou\\W])?(\\w+)/\"\\L$2$1ma\".'a'x$n++ ^ (($&&$\")^$\")/geir"},{"err_mask":"","code":"$_ = 'I speak Goat Latin'; my $n = 1; s/\\b([^\\Waeiouy]?)(\\w+)/$2\\l$1ma/gr =~ s/\\w+\\K/'a'x$n++/ger","out":"Imaa peaksmaaa oatgmaaaa atinlmaaaaa","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Imaa peAksmaaa oatgmaaaa atinlmaaaaa","code":"$_ = \"I speAk Goat Latin\"; my $n = 1; s/\\b([^\\Waeiouy]?)(\\w+)/my $z = \"$2\\l$1ma\" ; ($1=~m\"\\p{Lu}\"?\"\\u$z\":$z)/ger =~ s/\\w+\\K/\"a\"x$n++/ger","err_mask":""},{"code":"$_ = 'I speAk Goat Latin'; my $n = 1; s/\\b([^\\Waeiouy]?)(\\w+)/$\"x length$&&\"$1$2\"^\"\\U$2$1\\Ema\"/ger =~ s/\\w+\\K/'a'x$n++/ger","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Imaa peaKsmaaa Oatgmaaaa Atinlmaaaaa","err":""},{"err":"","out":"Imaa peaKsmaaa Oatgmaaaa Atinlmaaaaa","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'I speAk Goat Latin'; my $n = 1; s/\\b([^\\Waeiouy]?)(\\w+)/$\"x length$&&$&^\"\\U$2$1\\Ema\"/ger =~ s/\\w+\\K/'a'x$n++/ger"},{"code":"$_ = 'I speak Goat Latin'; s/\\b[aeiouy]\\w+\\K/ma/gi || s/\\b(\\w)(\\w*)/$2$1ma/g; my $n = 1; s/\\w+\\K/'a'x$n++/ger # like this riceandbeans","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Imaa peaksmaaa oatGmaaaa atinLmaaaaa","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"is to test things."},{"err_mask":"","code":"\"italic test after italic\"","err":"","out":"italic test after italic","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{itemFilter => \"second value\"}","code":"{ itemFilter => 'first value', itemFilter => 'second value' };","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"second value","code":"( item => \"first value\", item => \"second value\" ); # That's how you fix \u0002*that*\u0002","err_mask":""},{"out":"[\"item\",\"first value\",\"item\",\"second value\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ item => \"first value\", item => \"second value\" ]; # Why did you evaluate the last one the way you did, anyway?"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"It puts the lotion in the basket!","err":"","code":"\"It puts the lotion in the basket!\"","err_mask":""},{"out_mask":"","err":"","out":"","code":"'i' xor 'd'","err_mask":""},{"out_mask":"Ã¿","out":"j","err":"","code":"\"\\j\"","err_mask":""},{"code":"- -'jesus'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"+jesus"},{"err_mask":"","code":"-'jesus'","out":"-jesus","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"john@example.com\"","out":"john.com","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"j oin","out":"ERROR: Can't locate object method \"j\" via package \"oin\" (perhaps you forgot to load \"oin\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"join \"\\0\", qw<a b c>","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"a\u0000b\u0000c","err":""},{"err":"","out":"1:2:3:4:5:6:7:8:9:10","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join(':', (1..10))"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1, 2, \n","code":"join \", \", 1, 2, \"\\n\";","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abcdefghijklmNOPQRSTUVWXYZ","err":"","code":"join'','a'..'m','N'..'Z'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abcdefghijklmNOPQRSTUVWXYZ","err":"","code":"join'',a..'m',N..Z","err_mask":""},{"out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join'',a..m ,N..Z"},{"out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join'',a..m,N..Z"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"abcdefghijklmNOPQRSTUVWXYZ","code":"join('', 'a'..'z') =~ s/(.{13})$/uc$1/er","err_mask":""},{"err":"","out":"abcdefghijklmNOPQRSTUVWXYZ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join('', 'a'..'z') =~ s/^(.*)\\K(??{ '.' x length $1 })$/\\U$&/r;"},{"err_mask":"","code":"join ' ', (\"Buffalo\")","err":"","out":"Buffalo","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"Buffalo Buffalo Buffalo Buffalo Buffalo Buffalo Buffalo Buffalo","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join ' ', (\"Buffalo\") x8"},{"err_mask":"","code":"join ':', 'd850e684e6de' =~ /../g","out":"d8:50:e6:84:e6:de","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"join'e', qw(y s)","err":"","out":"yes","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz","err":"","code":"join \"\", grep /\\w/a, map chr, 0..999999","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"a single argument","err":"","code":"join \"hello\", \"a single argument\"","err_mask":""},{"out":"sqirrel","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join 'irre', qw(sq l)"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"10 ]\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ join('', map { +{} } 0..10 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\\0bar\\0baz\\0\"]","code":"[join \"\", map \"$_\\0\", qw(foo bar baz)]","err_mask":""},{"err_mask":"","code":"[ join ',', map '?', 1..10 ]","out":"[\"?,?,?,?,?,?,?,?,?,?\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"1:4:9:16:25:36:49:64:81:100","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join(':', map { $_ *= $_ } (1..10))"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0 20 40 60 80","code":"join ' ', map { 20 * ($_ - 1) } 1 .. 5;","err_mask":""},{"err_mask":"","code":"join '', map chr, 0x2603 # works fine with >256, but they're unicode not utf-8","out":"Ã¢ÂÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"admin","code":"join '', map { chr(255 - hex) } \"9E9B929691\" =~ /([[:xdigit:]]{2})/g # Nei++","err_mask":""},{"code":"join ' ', map chr, 97 .. 100","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"a b c d","err":""},{"err":"","out":"abc","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"join('',map chr,(97, 98, 99))"},{"code":"join '', map chr(ord ^ 32), split '', 'Grinnz'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"gRINNZ","err":""},{"out":"Ã¿ÂÂÂÂÂµÂÂÂ¶ÂÂÂµÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join '', map { chr } unpack 'H*', \"31323234\""},{"err_mask":"","code":"join \",\", map { $_ || \"\\\\N\" } split \",\", \"abc,,def,ghi,,jkl\"","out":"abc,\\N,def,ghi,\\N,jkl","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"aÃÂ eÃÂ iÃÂ oÃÂ uÃÂ","err":"","code":"join ' ', map $_ . \"\\N{U+0300}\", qw(a e i o u)","err_mask":""},{"code":"join ' ', map $_ . \"\\N{U+0300}\", qw(a e i o u)  <perlbot> anno: Ã Ã¨Ã¬Ã²","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xC3; marked by <-- HERE after ot> anno: <-- HERE near column 155 at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"join ', ', map ord, qw(â° Â¹ Â² Â³ â´ âµ â¶ â· â¸ â¹)","err":"","out":"226, 194, 194, 194, 226, 226, 226, 226, 226, 226","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"h e l p","code":"join ' ', map pack('B8', $_), \"01101000 01100101 01101100 01110000\" =~ /\\d+/g;","err_mask":""},{"code":"[ join \" -- \",map { s!^/|/$!!g;$_ } @{[ qw{ /foo/bar/baz/ foo/bar/baz /foo/bar/baz foo/bar/baz/ } ]} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo/bar/baz -- foo/bar/baz -- foo/bar/baz -- foo/bar/baz\"]","err":""},{"err_mask":"","code":"join(' ', map { sprintf(\"%02X\", ord($_)) } split('', \"bar\"))","out":"62 61 72","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"89 50 4e 47 0d 0a 1a 0a","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join \" \", map sprintf(\"%02x\", $_), qw|137 80 78 71 13 10 26 10|"},{"err_mask":"","code":"join \" \", map {ucfirst} split(\" \", \"My fancy filename.txt\")","err":"","out":"My Fancy Filename.txt","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"V:b1.03.00.00. N:00.00.03.b1.","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join ' ', map { \"$_:\".(unpack( \"H*\", pack $_, 945 ) =~ s/../$&./gr) } 'V', 'N'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"x-x-x","code":"join '-', map { \"x$_y\" } 1..3;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"x1y-x2y-x3y","code":"join '-', map { \"x${_}y\" } 1..3;","err_mask":""},{"code":"[ join (\"\\n\", unpack '(A4)*', 'This is a string') ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"This\\n is\\na st\\nring\"]","err":""},{"code":"join ('\\n', unpack '(A4)*', 'This is a string')","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"This\\n is\\na st\\nring"},{"err":"","out":"[\"(?^u:^[a-zA-Z]+\\$)|(?^u:^[0-9]+\\$)\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ join '|', qr/^[a-zA-Z]+$/, qr/^[0-9]+$/ ]"},{"code":"join ' <<<<<<< ', qw(fname lname age)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"fname <<<<<<< lname <<<<<<< age"},{"out":"foo1bar1baz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join //, qw(foo bar baz)"},{"err_mask":"","code":"join ',', qw(?) x 10","err":"","out":"?,?,?,?,?,?,?,?,?,?","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"join '', reverse \"7c86467b\" =~ m/../g","err":"","out":"7b46867c","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"join '', sort { --$| * 2 - 1 } split //, 'Jurlt ,cneh eeotakrrsa Ph';","out":"Just another Perl hacker,","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"join '', sort { --$| * 2 - 1 } split //, 'LaeulsraWt y yarmsoir r l';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Larry Wall is your master"},{"err_mask":"","code":"join '', sort split '', 'msixpodualngc'","err":"","out":"acdgilmnopsux","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[join '', sort {$|--} split //, \"tuJsa nohterP er lhakcer,\"]","err":"","out":"[\"Just another Perl hacker,\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"(join '', (split //, 'abc'))","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"abc","err":""},{"code":"+join +'_', +(+split /_/, +\"the_cool_string\")[+1,+2]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"cool_string"},{"code":"join '_', (split /_/, \"the_cool_string\")[1,2]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"cool_string"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"cool_string","err":"","code":"join '_', +(split /_/, \"the_cool_string\")[1,2]","err_mask":""},{"err_mask":"","code":"join \" \", @{ unbuu || [] }","out":"","err":"","out_mask":""},{"out_mask":"","out":"","err":"","code":"join \" \", @{ undef || [] }","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"join \" \", @{ undef() || [] }"},{"out_mask":"","out":"","err":"","code":"join \" \", @{ undef() }","err_mask":""},{"out":"[\"x\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ join ',', (undef // ()), 'x', (undef // ()) ]"},{"err_mask":"","code":"join \":\", unpack \"(a2)*\", \"000202056D4C\"","out":"00:02:02:05:6D:4C","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"3.177","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join \".\", unpack \"C*\", pack \"n\", 945"},{"code":"join ':', unpack('(H2)3', \"\\x12\\x34\\x56\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"12:34:56"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"e8:b7:48:68:07:48","err":"","code":"join \":\", unpack \"(H2)*\", pack \"H*\", \"e8b748680748\"","err_mask":""},{"err_mask":"","code":"[ join ',', ('?')x4 ]","out":"[\"?,?,?,?\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"????\"]","err":"","code":"[ join ',', ('?'x4) ]","err_mask":""},{"code":"JSON","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"JSON"},{"err_mask":"","code":"JSON()","err":"","out":"ERROR: Undefined subroutine &main::JSON called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"JSON::encode_json [sprintf(\"%.2f\", 1.234), sprintf(\"%.2f\", 1.234) + 0]","err":"","out":"[\"1.23\",1.23]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\\@JSON::EXPORT","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"from_json\",\"to_json\",\"jsonToObj\",\"objToJson\",\"encode_json\",\"decode_json\"]"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"\\@JSON::EXPORT_OK","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{\"value\":0.086}","code":"JSON->new->encode({ value => 0+sprintf(\"%.3f\", 34.33/400) })","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[bless( do{\\(my $o = 1)}, 'JSON::PP::Boolean' )]","err":"","code":"[JSON::true]","err_mask":""},{"err_mask":"","code":"\"JUNK\" =~ m/(.*)/; do { local $1; \"wibble\" =~ m/(\\d+)/; $1; }","out":"JUNK","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"JUNK","code":"\"JUNK\" =~ m/(.*)/; \"wibble\" =~ m/(\\d+)/; $1;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Just another Perl hacker","code":"Just'another'Perl'hacker =~ s/::/ /gr","err_mask":""},{"err_mask":"","code":"\"Just anotherÂ Perl hacker\" =~ s\u000fo?Â \u000f silly! \u000fr","out":"Just another silly! Perl hacker","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = \"key foo\"; push @arr, /key(.*)/; [@arr]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\" foo\"]","err":""},{"err_mask":"","code":"[ keys { 1 .. 10 } ]","err":"","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[keys {1..4}]","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"keys @{ [1..5] }","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"err_mask":"","code":"keys( {} ) = 42","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ keys (%{{ 'dave' => 1, 'bob' => 2 }}) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"dave\",\"bob\"]"},{"code":"[ keys (%{{ 'dave' => 1, 'bob' => 2 }}); ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"keys (%{ 'dave' => 1, 'bob' => 2 });"},{"err_mask":"","code":"keys (%{{ 'dave' => 1, 'bob' => 2 }});","out":"2","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"keys %hash = 200; scalar %hash","err":"","out":"0","out_mask":"Ã¿"},{"err_mask":"","code":"keys INC","out":"ERROR: Type of arg 1 to keys must be hash (not constant item) at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"1495","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"keys %{main::};"},{"out_mask":"Ã¿","out":"0","err":"","code":"keys(%order) = 2; keys(%order)","err_mask":""},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"keys(%order) = 2; scalar %order"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","code":"[keys { qw(a b c d) }]","err_mask":""},{"err_mask":"","code":"keys { qw(a b c d) }","err":"","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"4","out_mask":"Ã¿","err_mask":"","code":"@keys = qw(a b c d); @hash{@keys} = @hash{@keys}"},{"err_mask":"","code":"@keys = qw(a b c d); @hash{@keys} = @hash{@keys}; \\%hash","out":"{b => undef,c => undef,d => undef,a => undef}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{b => 2,c => [3,4],a => 1}","err":"","code":"@keys = qw(a b c); @values = qw(1 2 3 4); my %result; if (@keys < @values) { push @values, [ splice @values, $#keys ]} @results{@keys} = @values; \\%results","err_mask":""},{"err_mask":"","code":"@keys = qw(a b c); @values = qw(1 2 3 4); my %result; if (@keys < @values) { push @values, [ splice @values, $#keys ]} $results{@keys} = @values; \\%results","err":"","out":"{3 => 3}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ keys(%^V), values(%^V) ]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"code":"kill $$","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"kill -TERM, 0","err":"/home/ryan/workspace/perlblead-ci/runeval.sh: line 5: 32122 Terminated              /home/ryan/perl5/perlbrew/perls/perlbot-intest/bin/perl /home/ryan/bots/perlbuut/lib/eval.pl\n","out":"","out_mask":""},{"code":"@{[\"Knark\",\". \",\"knark\",\",\"]}","err_mask":"","out_mask":"Ã¿","err":"","out":"4"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"\\l$1","err":"","code":"\"\\\\l\\$1\"","err_mask":""},{"code":"\"\\l\\$1\"","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"$1"},{"out":"","err":"","out_mask":"","err_mask":"","code":"LABEL: { goto redo next last LABEL; }"},{"err_mask":"","code":"LABEL: { last LABEL if 1; }","err":"","out":"","out_mask":""},{"err_mask":"","code":"LABEL: sub { }","err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"LABEL: { sub { last LABEL }->() }","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"ok","code":"LABEL: { sub { last LABEL }->(); print \"fail\" }; print \"ok\";","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Label not found for \"last LABEL\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"LABEL: sub { { last LABEL } print \"hax\" }->()","err_mask":""},{"err_mask":"","code":"\"lag\"","err":"","out":"lag","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"here lala","err":"","code":"'lala'->${ \\sub { 'here ' . shift } }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"la la","err":"","code":"*{ 'la la'} = sub { 'la la' }; my $name = 'la la'; my $ref = \\&$name; $ref->()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¡ÂºÂ","code":"lc 'áº'","err_mask":""},{"err":"","out":"ERROR: panic: Infinite recursion in SWASHNEW for 'ToLc'\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"lc chr 0xfb06"},{"code":"lc chr 0xfb08","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: panic: Infinite recursion in SWASHNEW for 'ToLc'\n","err":""},{"out_mask":"Ã¿","out":"1","err":"","code":"lc \"Foo\" eq lc \"foo\"","err_mask":""},{"code":"length","err_mask":"","out_mask":"","out":"","err":""},{"code":"[length]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]"},{"code":"length \"[^ /\"","err_mask":"","out_mask":"Ã¿","err":"","out":"4"},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"length 0x00FF"},{"out_mask":"Ã¿","out":"3","err":"","code":"length 0xFF","err_mask":""},{"out_mask":"Ã¿","err":"","out":"3","code":"length 100","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"13","err":"","code":"length \"1436365603657\"","err_mask":""},{"err_mask":"","code":"length 1e10","out":"11","err":"","out_mask":"Ã¿Ã¿"},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"length 1e1000"},{"code":"length 2**32","err_mask":"","out_mask":"Ã¿Ã¿","out":"10","err":""},{"err_mask":"","code":"length \"2421392269093537440547188383164\"","err":"","out":"31","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"20","code":"length 2**64","err_mask":""},{"code":"length 64.64.64.5000000000.64.64.6","err_mask":"","out_mask":"Ã¿","out":"7","err":""},{"out_mask":"Ã¿","out":"3","err":"","code":"length \"Ìa\"","err_mask":""},{"err_mask":"","code":"length \"aÌ\"","out":"3","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"length \"Ã \"","out":"2","err":"","out_mask":"Ã¿"},{"code":"length (\"a\"x(100*1024*1024))","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"104857600"},{"err":"","out":"31457280","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"length (\"a\"x(30*1024*1024))"},{"out_mask":"Ã¿","err":"","out":"2","code":"length \"Ã©\"","err_mask":""},{"code":"length 'á¹ÍÍÍ'","err_mask":"","out_mask":"Ã¿","out":"9","err":""},{"out_mask":"Ã¿","err":"","out":"1","code":"length pack \"c\", 9999;","err_mask":""},{"code":"length pack \"cc\", 9888, 9999;","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"length pack \"cc\", 9999;"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"length pack \"h\", \"41\""},{"code":"length q(\\\\)","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"length q|0.99999999999996|","err_mask":"","out_mask":"Ã¿Ã¿","out":"16","err":""},{"out":"18","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"length q|0.9999999999999919|"},{"err_mask":"","code":"length q caller vec and print chr ord uc q chr lc and print chr ord q ge log and print chr ord qw q lc q and print chr ord qw q lc q and print chr ord q xor x and print chr ord qq q q and print chr ord uc qw q wait q and print chr ord q xor x and print chr ord q qr q and print chr ord qw q le q and print chr ord qw q do q and print chr hex length q q semctl setpgrp chop q and print chr length q q conti","err":"","out":"ERROR: Can't find string terminator \"q\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"length q[{CRYPT}$2a$04$MjkMhQxasFQod1qq56DXCOvWu6YTWk9X.EZGnmSSIbbtyEBIAixbS]","out":"67","err":"","out_mask":"Ã¿Ã¿"},{"code":"length 'sàº²à» '","err_mask":"","out_mask":"Ã¿","out":"8","err":""},{"err":"","out":"7","out_mask":"Ã¿","err_mask":"","code":"length 'sàº²à»'"},{"code":"length sprintf \"%8.2f\", 12","err_mask":"","out_mask":"Ã¿","err":"","out":"8"},{"err_mask":"","code":"length sprintf \"%8f\", 12","out":"9","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿","out":"64","err":"","code":"length sprintf '%b', 2 ** 100","err_mask":""},{"code":"length sprintf '%b', 2**64","err_mask":"","out_mask":"Ã¿Ã¿","out":"64","err":""},{"out_mask":"Ã¿Ã¿","out":"42","err":"","code":"$            leonerd = 42;","err_mask":""},{"err":"","out":"42","out_mask":"Ã¿Ã¿","err_mask":"","code":"$ leonerd = 42;"},{"code":"@lettuce = ( kale => \"chrunchy\"); map { print \"yummy\" if  /kale/ } @lettuce;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"yummy"},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"@lettuce = ( kale => \"chrunchy\"); map { print \"yummy\" if $lettuce{$_} eq \"kale\" } @lettuce;"},{"code":"'<li><a href=\"' =~ /<li><a href=/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"'<li><a href=\"' =~ /<li><a href=/; [$1, $2, $3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,undef,undef]","err":""},{"code":"$likeb = qr/(?:(?<!\\S)(?!\\s)|(?<!\\s)(?!\\S))/; [ 'this, is..a test.' =~ s/$likeb/*/gr ] # should have been qr// (was typo)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"*this,* *is..a* *test.*\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"*this,* *is..a* *test.*\"]","err":"","code":"$likeb = qw/(?:(?<!\\S)(?=\\S)|(?<=\\S)(?!\\S))/; [ 'this, is..a test.' =~ s/$likeb/*/gr ]  # codydn","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"like this","code":"'like this'","err_mask":""},{"code":"line","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"line","err":""},{"err_mask":"","code":"__LINE__","err":"","out":"1","out_mask":"Ã¿"},{"err":"","out":"[\"line 2\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"line 1\\nline 2\\n\\nline 4\" =~ /^.*\\s$/gm ]"},{"code":"@lines = <{a,b,c}>; \\@lines","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\"]"},{"code":"@lines = <.*>; \\@lines","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$line = \"\\thello\"; [ 0+ $line =~ /^\\t(.+)/ ]"},{"code":"$line = \"\\thello\"; [ $line =~ /^\\t(.+)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hello\"]"},{"err_mask":"","code":"$list{0}=\"zero\"; $list{1}=\"one\"; $list{2}=\"two\"; $list{3}=\"three\"; print scalar %list","err":"","out":"2/8","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$list[0]=\"zero\"; $list[1]=\"one\"; $list[2]=\"two\"; print scalar @list","out":"3","err":"","out_mask":"Ã¿"},{"code":"$list{0}=\"zero\"; $list{1}=\"one\"; $list{2}=\"two\"; print scalar %list","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"2/8"},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"$list[1]=\"one\"; $list[2]=\"two\"; print scalar @list"},{"code":"@list=('d', 'e', 'f', 'a', 'b', 'c'); $startindex=3; @list=@list[$startindex..$#list], @list[0..$startindex-1]; @list","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"a b c d e f","err":"","code":"@list=('d', 'e', 'f', 'a', 'b', 'c'); $startindex=3; @list=(@list[$startindex..$#list], @list[0..$startindex-1]); $text = join ' ', @list; $text;","err_mask":""},{"code":"@list=('d', 'e', 'f', 'a', 'b', 'c'); $startindex=3; @list=@list[$startindex..$#list], @list[0..$startindex-1]; $text = join ' ', @list; $text;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"a b c"},{"err_mask":"","code":"@list = ('d' .. 'f', 'a' .. 'c'); splice @list, 0, 0, splice @list, 3; \\@list","out":"[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"List::MoreUtils::any { $_ eq 'a' } ('b', 'a')","err_mask":""},{"err_mask":"","code":"List::MoreUtils::any { $_ eq 'a' } ('b', 'c')","out":"","err":"","out_mask":""},{"code":"List::MoreUtils::any {$_ eq 'a'}, 'b', 'c'","err_mask":"","out_mask":"Ã¿","err":"","out":"c"},{"err_mask":"","code":"List::MoreUtils::any( {$_ eq 'a'} 'b', 'c' )","out":"ERROR: syntax error at (eval 1) line 1, near \"} 'b'\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Type of arg 1 to List::MoreUtils::any must be block or sub {} (not anonymous hash ({})) at (eval 1) line 1, near \"'c' )\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"List::MoreUtils::any( {$_ eq 'a'}, 'b', 'c' )"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"three\",\"four\"]","code":" @list = ({name => 1, x => one}, {name => 2, x => two}, {name => 3, x => three}, {name => 4, x => four}); [map {$_->{x}} grep { $_->{name} > 2 } @list]","err_mask":""},{"code":"@listof105 = (1..105); @listof11 = (1..11); @listof105 - @listof11","err_mask":"","out_mask":"Ã¿Ã¿","out":"94","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,\"Z\",undef,\"Z\"]","code":"@list_of_indices = ('1','3'); @array[ @list_of_indices ] = (\"Z\") x @list_of_indices;  \\@array","err_mask":""},{"err_mask":"","code":"@list = qw(a b c); $search=\"x\"; [ !! grep($_ eq $search,@list) ]","err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"@list = qw(a b c); $search=\"x\"; [ !! grep($search,@list) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"code":"@list = ([qw(apple banana)], [qw(apple orange)], [qw(orange banana)], [qw(beef fish)]); my %sets = (); for my $pair (@list) { my ($x, $y) = @$pair; $sets{$x}{$y} = undef; for my $el (keys %{delete($sets{$y}) // {}}) { $sets{$el} = $sets{$x}; $sets{$x}{$el} = undef } } \\%sets","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{orange => {banana => undef},beef => {fish => undef},apple => {orange => undef,banana => undef}}"},{"code":"@list = ([qw(apple banana)], [qw(apple orange)], [qw(orange banana)], [qw(beef fish)]); my %sets = (); for my $pair (@list) { my ($x, $y) = @$pair; $sets{$x}{$y} = undef; for my $el (keys %{$sets{$y} // {}}) { $sets{$el} = $sets{$x}; $sets{$x}{$el} = undef } } \\%sets","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{orange => {banana => undef},beef => {fish => undef},apple => {orange => undef,banana => undef}}","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"dog\",\"cat\",\"rabbit\",\"turtle\",\"mouse\",\"wolf\"]","code":"@list = qw(dog cat turtle mouse wolf); splice @list, 2, 0, \"rabbit\"; \\@list","err_mask":""},{"code":"[List::UtilsBy::sort_by( sub { $_ }, 31, 30, 30.1, 31.1)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[30,\"30.1\",31,\"31.1\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[30,301,31,311]","code":"[List::UtilsBy::sort_by( sub { $_ }, 31, 30, 301, 311)]","err_mask":""},{"err_mask":"","code":"List::UtilsBy::sort_by( sub { $_ }, 31, 30, 301, 311)","err":"","out":"311","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"local $[ = 1;","out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"local $[ = -1; my @a = (1); $#a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"local @ARGV = qw(--linkadd y file_name_here.tgz); use Getopt::Long; GetOptions(\"linkadd=s\" => \\$linkadd); { linkadd => $linkadd, ARGV => \\@ARGV }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Getopt/Long.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","code":"[ \"\\local_dir\\selected\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ocal_dirselected\"]","code":"[ \"\\local_dir\\selected\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]","code":"{ local $@; eval { die \"foo\" } } [$@]","err_mask":""},{"out_mask":"","out":"","err":"","code":"{ local $@; eval { die \"foo\" } } $@","err_mask":""},{"err_mask":"","code":"local ($_) = \"foo [aasdf] bar\"; my (%fwd,%bkd); while( s! ( \\[ [^][]* \\] ) ! '.' x length $1 !xe ) { $fwd{$-[1]} = $+[1]; $bkd{$+[1]} = $-[1] }; [ \\%fwd, \\%bkd ]","out":"[{4 => 11},{11 => 4}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"local *_ = \\\"hello\"; $_ = 42","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"My Fancy Filename.txt","code":"local $_ = \"my fancy filename.txt\";$count=0;s/(\\s*)(.)/upper($1,$2,$count++)/ge;print;sub upper { my ($s, $c, $n) = @_;return $s ? \"$s\\u$c\" : !$n ? \"\\u$c\" : $c; }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"My Fancy Filename.txt","err":"","code":"local $_ = \"my fancy filename.txt\";$count=0;s/(\\s*)(\\w+)/upper($1,$2,$count++)/ge;print;sub upper { my ($s, $c, $n) = @_;return $s ? \"$s\\u$c\" : !$n ? \"\\u$c\" : $c; }","err_mask":""},{"err_mask":"","code":"local my $foo","out":"ERROR: Can't localize lexical variable $foo at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"local $, = ','; print 1..10","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1,2,3,4,5,6,7,8,9,10","err":""},{"err_mask":"","code":"$^LOCALTIME","out":"ERROR: syntax error at (eval 1) line 1, near \"$^LOCALTIME\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"UTF-32","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"local $_ = \"UCS-4\"; eval q@qr/^UCS-?4-?(BE|LE)?$/i; uc(\"UTF-32$1\")@"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":" local notlocal","code":"local $var = 'local'; print \" $var \"; { $var = 'notlocal'; print $var };","err_mask":""},{"code":"local $var = 'local'; { $var = 'notlocal'; print $var }; print \" $var \"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"notlocal notlocal "},{"out":"64","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"log(~0 +1)/log(2)"},{"err_mask":"","code":"log(~0+1)/log(2)","err":"","out":"64","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"log(~0)/log(2)","err":"","out":"64","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"log(13500) / log(2)","err":"","out":"13.7206717868256","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$= = log(16777213) / log(2); $= # yep perfectly safe","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"23"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"100.9336796636","err":"","code":"log(2421392269093537440547188383164)/log(2)","err_mask":""},{"err_mask":"","code":"[ log(2), log(10), log(exp(1)) ]","err":"","out":"[\"0.693147180559945\",\"2.30258509299405\",1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"log(3) / log 2","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.58496250072116"},{"err":"","out":"First is bigger","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"((log(632382) * 518061 > log(519432) * 525806) ? \"First\" : \"Second\") . \" is bigger\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"5.97727992349992","code":"log(63) / log(2) # you might want to round to nearest integer if you do","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"LOG\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$log_content .= <<LOG;","err_mask":""},{"code":"[ log_file => 42, die => 9 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"log_file\",42,\"die\",9]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"LogÃ¯Â¿Â½ProcessingÃ¯Â¿Â½ServiceÃ¯Â¿Â½canÃ¯Â¿Â½receiveÃ¯Â¿Â½logÃ¯Â¿Â½messagesÃ¯Â¿Â½","code":"'Logï¿½Processingï¿½Serviceï¿½canï¿½receiveï¿½logï¿½messagesï¿½' =~ y/\\xA0/ /dr","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"'LOL' (\"\n","err":"","code":"$_ = 'LOL' (\\&CORE::lc)->()","err_mask":""},{"code":"$_ = 'LOL'; (\\&CORE::lc)->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"lol","err":""},{"code":"$_=\"lol\"; tr alaLa; print;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"LoL","err":""},{"code":"$long_var_blah = 42;  $my_pay = $long_var_b1ah * 1000; print \"I'm fucking rich, I got $my_pay!\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"I'm fucking rich, I got 0!","err":""},{"out":"HASH(0x3c66b88)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{} . '' # looks something like this, numbers will vary"},{"err_mask":"","code":"`ls`;","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[`ls`]","err_mask":""},{"out_mask":"","err":"","out":"","code":"`ls -a`","err_mask":""},{"err_mask":"","code":"lvfjf is a fool!","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"LWP::Simple::get www.google.com","out":"ERROR: Can't locate object method \"get\" via package \"LWP::Simple\" (perhaps you forgot to load \"LWP::Simple\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"[m#","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"m?^?"},{"out_mask":"Ã¿","out":"1","err":"","code":"m/^+/","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"; m/$#/\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"m/$#/"},{"code":"m0{0\\my}sub H;0;sub{sub{H","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"0\\\"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","err":""},{"err_mask":"","code":"//magic","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"$main::_ == $_","err_mask":""},{"err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"main->can(\"can\")"},{"err_mask":"","code":"[ main->can( sub { 'dummy' } ) ]","out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"main->can( sub { 'dummy' } )","err_mask":""},{"out_mask":"","err":"","out":"","code":"main::for () for ();","err_mask":""},{"code":"*main::main::main::main::X{PACKAGE}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"main","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"bar\n","err":"","code":"@many = ( \"foo\", \"bar\" ); %{$href} = @many; print $href->{'foo'}.\"\\n\"","err_mask":""},{"code":"[ map { 0+!$_} 0, 1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,0]","err":""},{"out":"[-1,0,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { ($_ > 0) - ($_ < 0) } qw(-5 0 10) ]"},{"err_mask":"","code":"[ map [$_->[0] + $_->[3] * 256, $_->[0] - ($_->[1] ^ $_->[2]) * 256], [0b0011_1000, 0, 0, 1], [0b0100_0110, 0, 1, 1] ]","out":"[[312,56],[326,-186]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"map { $_ =~ /(?:^|[^0-9])[0-9]{7}(?:$|[^0-9])/ ? \"+ \" : \"- \"} (\"1234567 \",\" 1234567\",\" 12345678 \")"},{"err_mask":"","code":"[ map { $_->[0] eq $_->[1] } [ split //, \"AB\" ], [ split //, \"A4\" ]]","err":"","out":"[\"\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map { 0+!$_ } qw(0 1) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,0]"},{"err_mask":"","code":"[ map 0+sprintf('%.3f', $_), 0.7, 0.33333 ]","err":"","out":"[\"0.7\",\"0.333\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map 0+sprintf('%.3f', $_), 7, 0.33333 ]","out":"[7,\"0.333\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { $_->[0] xor $_->[1] } [ split //, \"AB\" ], [ split //, \"A4 ]"},{"err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { $_->[0] xor $_->[1] } [ split //, \"AB\" ], [ split //, \"A4 ]]"},{"out":"[\"\",\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { $_->[0] xor $_->[1] } [ split //, \"AB\" ], [ split //, \"A4\" ]]"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ map 1 ]","err_mask":""},{"code":"[ map $_/10, 0..10 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,\"0.1\",\"0.2\",\"0.3\",\"0.4\",\"0.5\",\"0.6\",\"0.7\",\"0.8\",\"0.9\",1]"},{"err_mask":"","code":"map { $_*10 } 1..10","out":"10","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[ map{($.||1..$.&&0)-1 .\" $_\"}split(//,japh) ]","out":"[\"0 j\",\"1 a\",\"2 p\",\"3 h\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[map { $_ & ($_-1) } 0 .. 32]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,0,0,2,0,4,4,6,0,8,8,10,8,12,12,14,0,16,16,18,16,20,20,22,16,24,24,26,24,28,28,30,0]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"1 1\"\n","code":"[map 1 1]","err_mask":""},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[map 1, 1]"},{"err_mask":"","code":"[ map --$|, 1..10 ] # ++ and -- in perl don't have to make sense, they just do useful stuff","err":"","out":"[0,1,0,1,0,1,0,1,0,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[2,4,8,16,32,64,128,256,512,1024]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map { 1 << $_ } (1 .. 10)]"},{"err_mask":"","code":"map { \"$_\" => 1 } 1,2,3","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} 1\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"6","err":"","out_mask":"Ã¿","err_mask":"","code":"map { $_ => 1 } 1,2,3"},{"out_mask":"Ã¿","out":"6","err":"","code":"map {; \"$_\" => 1 } 1,2,3","err_mask":""},{"code":"[map +{; $_ => $_ }, 1 .. 3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"; $_ \"\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{1 => 1},{2 => 2},{3 => 3}]","code":"[map +{ $_ => $_ }, 1 .. 3] # need + and , for that","err_mask":""},{"code":"[ map --$|, 1..5 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1,0,1,0]","err":""},{"err_mask":"","code":"[ map $|--, 1 .. 5 ]","err":"","out":"[1,0,1,0,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[map {/.*\\.(.*)$/;$1} \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","out":"[\"jpg\",\"pdf\",\"\",\"vimrc\",\"pl\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[map {/.*\\.*(.*)$/;$1} \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","err":"","out":"[\"\",\"\",\"\",\"\",\"\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"4","err":"","out_mask":"Ã¿","err_mask":"","code":"map \"$_\" => 1, qw(a b c);"},{"out_mask":"Ã¿","err":"","out":"c","code":"map (\"$_\" => 1), qw(a b c);","err_mask":""},{"err":"","out":"6","out_mask":"Ã¿","err_mask":"","code":"map +(\"$_\" => 1), qw/a b c/"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} qw/foo bar baz/\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"map { \"$_\" => 1 } qw/foo bar baz/"},{"err_mask":"","code":"map { $_ => 1 } qw/foo bar baz/","err":"","out":"6","out_mask":"Ã¿"},{"err":"","out":"[\"1000000000000066600000000000001\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map (1x$_) =~ /^1?$|^(11+?)\\1+$/, '1000000000000066600000000000001' ]"},{"err_mask":"","code":"map { $_* 2 } 1..10","out":"10","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"<3>\",\"<5>\",\"<7>\"]","err":"","code":"[ map { $_ % 2 ? \"<$_>\" : () } 2, 3, 4, 5, 6, 7 ]","err_mask":""},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"[ map { $_ ** 2 } grep { $_ % 2 } (2, 4, 6, 8) ]"},{"err_mask":"","code":"[ map { 2 ** $i++ if $_ } reverse split //, sprintf \"%b\", 20]","err":"","out":"[0,0,1,0,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map { $_ ? 2 ** $i++ : ()  } reverse split //, sprintf \"%b\", 20]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,4,8,16]","err":"","code":"[ map { 2 ** $i++ } reverse split //, sprintf \"%b\", 20]","err_mask":""},{"code":"[ map { 2 ** $i++ * $_ } reverse split //, sprintf \"%b\", 20]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,0,4,0,16]"},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"map{@$_ == 3} \\@arr1, \\@arr2, \\@arr3"},{"err_mask":"","code":"[ map { 47 - ($_ ^ 7) } 0..40 ]","out":"[40,41,42,43,44,45,46,47,32,33,34,35,36,37,38,39,24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[-1,-1,-1,-1,0,1,1,1,1,1]","err":"","code":"[ map { $_ <=> 5 } 1 .. 10 ]","err_mask":""},{"code":"[ map { $_ / 5 } (1..10) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"0.2\",\"0.4\",\"0.6\",\"0.8\",1,\"1.2\",\"1.4\",\"1.6\",\"1.8\",2]"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"},\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { $_ / 5 }, (1..10) ]"},{"out":"[40,41,42,43,44,45,46,47,32,33,34,35,36,37,38,39,24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { $_ % 8 + 40 - ($_ & ~7) } 0..40 ]  # shorter :)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[40,41,42,43,44,45,46,47,32,33,34,35,36,37,38,39,24,25,26,27,28,29,30,31,16,17,18,19,20,21,22,23,8,9,10,11,12,13,14,15,0]","err":"","code":"[ map { $_ % 8 + 40 - (int($_ / 8) * 8) } 0..40 ]","err_mask":""},{"code":"[ map { $_->{a} } @{[ undef ]} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"err_mask":"","code":"[ map [/(?!\\A\\z)^.*/mg], \"\", \"\\n\", \"a\\nb\\n\", \"a\\nb\", \"\\n\\n\", \"\\nb\\n\" ]","out":"[[],[\"\"],[\"a\",\"b\"],[\"a\",\"b\"],[\"\",\"\"],[\"\",\"b\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map { ~~/\\b([A-Z]\\.){2,}\\b/ } qw(A.A. B.B.B.B.B.B.B.B. C.C.C.C A.M) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1,1,0]"},{"out":"[\"LATIN SMALL LETTER A WITH CIRCUMFLEX\",\"LATIN SMALL LETTER A WITH CIRCUMFLEX\",\"LATIN SMALL LETTER A WITH CIRCUMFLEX\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map charnames::viacode(ord($_)), qw(â â â) ]"},{"code":"[ map charnames::viacode(ord), qw(â â â) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"LATIN SMALL LETTER A WITH CIRCUMFLEX\",\"LATIN SMALL LETTER A WITH CIRCUMFLEX\",\"LATIN SMALL LETTER A WITH CIRCUMFLEX\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"[ map{chomp} (\"foo\\n\",\"bar\\n\") ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"I H A T E P E O P L E","code":"\"@{[ map chr $_ + 64, qw/9 8 1 20 5 16 5 15 16 12 5/]}\"","err_mask":""},{"err_mask":"","code":"\"@{[ map chr $_ + 65, qw/9 8 1 20 5 16 5 15 16 12 5/]}\"","out":"J I B U F Q F P Q M F","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map chr hex, \"302e3f313133\" =~ /../g ] # if you don't want the extra validation","out":"[0,\".\",\"?\",1,1,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map chr(hex($_)), sprintf('%08x', 1383403352) =~ /../g ]","out":"[\"R\",\"u\",\"\\17\",\"X\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"\t \b \u0001 \u0014 \u0005 \u0010 \u0005 \u000f \u0010 \f \u0005","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"@{[ map chr, qw/9 8 1 20 5 16 5 15 16 12 5/]}\""},{"code":"[ map \"$_\", \\&configure ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"CODE(0x5328b88)\"]"},{"code":"[ map { $_ || defined $_ } (0, 1, undef) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,1,\"\"]"},{"err_mask":"","code":"[ map defined, 1, '', undef, 42 ]","out":"[1,1,\"\",1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"describing\",\"description\",\"descriptive\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { \"descri$_\" } \"bing\", map { \"pti$_\" } \"on\", \"ve\" ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"1990 1992 1993 2010\",\"this-is-a-string-with-9-something-3ls3\"]","code":"[ map { /[^\\d-]/ ? $_ : tr/-/ /r } '1990-1992-1993-2010', \"this-is-a-string-with-9-something-3ls3\" ]","err_mask":""},{"out":"[\"du\",\"uc\",\"ck\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { \"duck\" =~ m/$_/ ? $_ : \"no\" } qw/du uc ck/ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\",\"a\",\"foo\",\"b\",\"foo\",\"c\"]","err":"","code":"[ map { ; foo => $_ } 'a'..'c' ]","err_mask":""},{"err_mask":"","code":"[ map +{ foo => $_ } 'a'..'c' ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} 'a'\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[{foo => \"a\"},{foo => \"b\"},{foo => \"c\"}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map +{ foo => $_ }, 'a'..'c' ]"},{"err_mask":"","code":"[ map { foo => $_ } 'a'..'c' ]; # which of the above two should this be?","out":"ERROR: syntax error at (eval 1) line 1, near \"} 'a'\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[1,1,0,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map {; /^(?!(foobar){2}$)(?:\\1)*/ ? 1 : 0 } \"\", \"foobar\", \"foobarfoobar\", \"foobarfoobarfoobar\" ]"},{"err":"","out":"[[\"bar\",123],[undef,123],[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map [ /foo (bar)? (\\d+)/ ], 'foo bar 123', 'foo  123', 'no match' ]"},{"err_mask":"","code":"[ map !!/(?<!^)foo/, \"foo\", \"barfoo\" ]","err":"","out":"[\"\",1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map !!/(?!^)foo/, \"foo\", \"barfoo\" ]","err":"","out":"[\"\",1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map /(?!^)foo/, \"foo\", \"barfoo\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"code":"[ map {; for (()){} } qw(A B C D) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",\"\",\"\",\"\"]"},{"err_mask":"","code":"[ map { $i++; $_ ? 2 ** ($i - 1) : ()  } reverse split //, sprintf \"%b\", 20]","out":"[4,16]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { if ($_ % 2) { \"<$_>\" } else { say \"hey!\"; () }; } (1..10); ]"},{"err":"","out":"[\"\",0,0,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map {; if ($_ ne 'A') { 0 } } qw(A B C D) ]"},{"err_mask":"","code":"[ map { int($_ / 5) } (1..10) ]","out":"[0,0,0,0,1,1,1,1,1,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1,2]","code":"[ map { $i++ } qw/foo bar baz/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{ITEM => \"bla\"},{ITEM => \"hi\"},{ITEM => \"hue\"}]","code":"[  map { +{ ITEM => $_ } } qw( bla hi hue )  ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"} qw( bla hi hue )\"\n","err":"","code":"[  map { ITEM => $_ } qw( bla hi hue )  ]","err_mask":""},{"err_mask":"","code":"[  map { ITEM => $_ }, qw( bla hi hue )  ]","err":"","out":"[{ITEM => \"bla\"},{ITEM => \"hi\"},{ITEM => \"hue\"}]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{ITEM => \"bla\"},{ITEM => \"hi\"},{ITEM => \"hue\"}]","code":"[  map { +{ ITEM => $_ } } qw( bla hi hue )  ]  # see","err_mask":""},{"out_mask":"","err":"","out":"","code":"%map{key}","err_mask":""},{"code":"[ map !!/.\\Kfoo/, \"foo\", \"barfoo\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",1]"},{"code":"[map { $_; last } (1,2,3)]","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[57,35]","err":"","code":"[map length, q{$\"=\"\";@x=([],{},\" \",sub{},\\\"\");map{s/..(..).*/$1/}@x;\"@x\"}, q{print/..(..?)/ for[],{},$\"x3,\\&f,\\0}]","err_mask":""},{"err_mask":"","code":"[ map m?^?, 1 .. 4 ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"cryptsetup\",\"1.1.3-r3\"],[\"cronbase\",\"0.3.3\"],[\"automake-wrapper\",\"3-r1\"],[\"gcc\",\"4.5.3-r1\"]]","err":"","code":"[ map [ m{\\A (.*?) - ( \\d+ (?: \\. \\d+ )* (?: -r \\d+ )? ) \\z}xa ], qw(cryptsetup-1.1.3-r3 cronbase-0.3.3 automake-wrapper-3-r1 gcc-4.5.3-r1) ]","err_mask":""},{"err_mask":"","code":"[ map [ m{\\A (.*?) - ( \\d+ (?: \\. \\d+ )* (?: -r \\d+ )? ) \\z}xa ], qw(cryptsetup-1.1.3-r3 cronbase-0.3.3. automake-wrapper-3-r1 gcc-4.5.3-r1) ]","err":"","out":"[[\"cryptsetup\",\"1.1.3-r3\"],[],[\"automake-wrapper\",\"3-r1\"],[\"gcc\",\"4.5.3-r1\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map { m/^(\\d+)-(\\d+)$/ ? ( $1 .. $2 ) : ( $_ ) } split m/,/, \"1-3,5,6-9\" ]","out":"[1,2,3,5,6,7,8,9]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map [/^.*/mg], \"\", \"\\n\", \"a\\nb\\n\", \"a\\nb\", \"\\n\\n\", \"\\nb\\n\" ]","out":"[[\"\"],[\"\"],[\"a\",\"b\"],[\"a\",\"b\"],[\"\",\"\"],[\"\",\"b\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",123,\"b\",456]","err":"","code":"[ map { my ( $a, $b ) = split /:/; { $a => $b } } qw( a:123 b:456 ) ];","err_mask":""},{"out":"[{a => 123},{b => 456}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { my ( $a, $b ) = split /:/; +{ $a => $b } } qw( a:123 b:456 ) ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3,4,5,6,7,8,9,10]","code":"[ map { my $foo if 0; ++$foo } 1 .. 10 ]","err_mask":""},{"err_mask":"","code":"[ map { my $foo if 0; ++$foo } 5 .. 10 ]","err":"","out":"[1,2,3,4,5,6]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"asdf\",\"asdf\"]","code":"[ map { my $line = $_; $line =~ s/\\n+$//; $line } (\"asdf\",\"asdf\\n\") ]","err_mask":""},{"code":"[ map { my $line = $_; $line =~ s/\\n*$/\\n/; $line } (\"asdf\",\"asdf\\n\") ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"asdf\\n\",\"asdf\\n\"]","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"[map { $_; next } (1,2,3)]"},{"err":"","out":"[[\"\"],[\"\\n\"],[\"a\\n\",\"b\\n\"],[\"a\\n\",\"b\"],[\"\\n\",\"\\n\"],[\"\\n\",\"b\\n\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map [/^.*\\n?/mg], \"\", \"\\n\", \"a\\nb\\n\", \"a\\nb\", \"\\n\\n\", \"\\nb\\n\" ]"},{"out_mask":"Ã¿","err":"","out":"3","code":"map {; no strict qw(refs); $_; } 1..3","err_mask":""},{"code":"[ map oct '0b1' . '01' x $_, 0 .. 9 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,5,21,85,341,1365,5461,21845,87381,349525]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[5,21,85,341,1365,5461,21845,87381,349525,1398101]","err":"","code":"[ map oct '0b1' . '01' x $_, 1 .. 10 ]","err_mask":""},{"err":"","out":"[9,32,160,5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map ord, grep /\\h/, map chr, (0..0x3000) ]"},{"code":"[ map ord, qw(â â â) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[226,226,226]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[76,69,79,86]","err":"","code":"[map ord, qw(L E O V)]","err_mask":""},{"out":"[0,'18446744073709551615',0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { ord } split //, 0.18446744073709551615.0 ]"},{"err":"","out":"[0,0,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { ord } split //, 0.18446744073709551616.0 ]"},{"err_mask":"","code":"[ map ord, split //, 64.64.64.5000000000.64.64.64 ]","out":"[64,64,64,5000000000,64,64,64]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[97,115,99,105,105]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map ord, split //, \"ascii\" ]"},{"code":"[map { ord } split //, fuckit","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":""},{"err_mask":"","code":"[ map {POSIX::ceil($_*20)/20} (0.80, 0.81, 0.82, 0.83, 0.84, 0.85) ]","err":"","out":"[\"0.8\",\"0.85\",\"0.85\",\"0.85\",\"0.85\",\"0.85\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"map print, [1,2,3]->@*  # or maybe a -, a >, an @ and an *","err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿"},{"code":"[ map { !$_ } qw(0 1) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,\"\"]","err":""},{"err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"LVALUE\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\(substr($_,1)),  ]"},{"err":"","out":"[1,1,1,1,0,1,0,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map {  $_  || ref && ( eval q{@$_} || eval q{%$_} ) ? 1 : 0  } [], [5], {}, {A=>6}, 0, 123, q{}, q{abc} ]; # I added the input to the map, but everything else is verbatium."},{"err_mask":"","code":"[ map s/[0-9]\\K-(?=[A-Z])//r, qw(4-A 4-a 4-4 9-X)]","err":"","out":"[\"4A\",\"4-a\",\"4-4\",\"9X\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map { /!(.+?)\\s/ ? $1 : \"doesn't match\" } \"!fff askd\", \"!dja\", \"!kasdfk \" ]","out":"[\"fff\",\"doesn't match\",\"kasdfk\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,\"\",\"\",\"\"]","err":"","code":"[ map scalar m?^?, 1 .. 4 ]","err_mask":""},{"err":"","out":"[5,\"abc\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map /^scaleaddr(\\d)=([^\\d]*)/gi, qw(blahj blah blah ScaleAddr5=abc) ];"},{"out":"[5,\"abc\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map /^scaleaddr(\\d)=([^\\d]*)/gi, qw(blahj blah blah ScaleAddr5=abc foo bar) ];"},{"err_mask":"","code":"[ map s!\\.\\d{3}\\K(\\d+)!!r, 0.7, 0.33333, -0.800000000000001 ]","err":"","out":"[\"0.7\",\"0.333\",\"-0.800\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map s!\\.\\d{3}\\K(\\d+)!!r, 0.7, 0.33333, -0.800900000000001 ] #he probably wants the last one to be -0.801 in this case?","err":"","out":"[\"0.7\",\"0.333\",\"-0.800\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"a\",\"b\"],[\"c\",\"d\",\"e\",\"f\"],[\"g\",\"h\"]]","code":"[ map [ split /,/ ], split /,,/, 'a,b,,c,d,e,f,,g,h' ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"foo\",\"bar\",\"baz\"],[\"foo\"]]","err":"","code":"[ map [split /,/], split ' ', \"foo,bar,baz foo\" ]","err_mask":""},{"code":"[map {[sprintf \"%010B %010B\", $_, $_-1]} grep {$_ && !($_ & ($_-1)) } 0 .. 1024]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"0000000001 0000000000\"],[\"0000000010 0000000001\"],[\"0000000100 0000000011\"],[\"0000001000 0000000111\"],[\"0000010000 0000001111\"],[\"0000100000 0000011111\"],[\"0001000000 0000111111\"],[\"0010000000 0001111111\"],[\"0100000000 0011111111\"],[\"1000000000 0111111111\"],[\"10000000000 1111111111\"]]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"000\",\"000\",\"000\"]","code":"[ map {sprintf \"%03b\"} 7, 6, 7&6 ]","err_mask":""},{"out":"[1010,1001,1000]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map {sprintf \"%04b\", $_} 10, 9, 10&9 ]"},{"err_mask":"","code":"[ map {sprintf \"%04b\", $_} 7, 6, 7&6 ]","out":"[\"0111\",\"0110\",\"0110\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map {sprintf \"%04b\"} 7, 6, 7&6 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0000\",\"0000\",\"0000\"]","err":""},{"code":"[ map { sprintf \"%04x\", $_ } unpack \"n*\", \"\\x41\\x42\\x43\\x44\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[4142,4344]"},{"err":"","out":"[-2,-2,\"-0\",0,2,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map { sprintf '%.0f', $_ } -2.5, -1.5, -0.5, 0.5, 1.5, 2.5]"},{"code":"[ map { sprintf \"%.24f\", $_ }   0.3,   0.1*3   ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0.299999999999999988897770\",\"0.300000000000000044408921\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"3.14\",\"8.68\",\"1.2\",3]","err":"","code":"[ map { sprintf(\"%.2f\", $_) + 0 } 3.14159, 8.675309, 1.20, 3 ]","err_mask":""},{"err":"","out":"[0,1,1,2,1,2,2,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { (sprintf(\"%b\", $_) =~ tr/1/1/) % 3 } qw(0 1 2 3 4 5 6 7) ]"},{"err_mask":"","code":"[map { sprintf '%d', $_ } -2.5, -1.5, -0.5, 0.5, 1.5, 2.5]","err":"","out":"[-2,-1,0,0,1,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[6,8,8,10]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map sprintf('%.f', $_), 6.5, 7.5, 8.5, 9.5 ]"},{"code":"[ map { sprintf '%.*f', length('9999999999999911'), \"0.99999999999999$_\" } '00' .. '10' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"0.9999999999999900\",\"0.9999999999999900\",\"0.9999999999999902\",\"0.9999999999999905\",\"0.9999999999999905\",\"0.9999999999999905\",\"0.9999999999999906\",\"0.9999999999999908\",\"0.9999999999999908\",\"0.9999999999999908\",\"0.9999999999999910\"]"},{"code":"[map { sprintf '%i', $_ } -2.5, -1.5, -0.5, 0.5, 1.5, 2.5]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[-2,-1,0,0,1,2]","err":""},{"out":"[\"2.00\",\"64.00\",\"100.00\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { sprintf q{%03.2f}, $_; } 2, 64, 100 ];"},{"err":"","out":"[\"2.00\",\"64.00\",\"100.00\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { sprintf q{%3.2f}, $_; } 2, 64, 100 ];"},{"err_mask":"","code":"[ map { sprintf q{%3i}, $_; } 2, 64, 100 ];","err":"","out":"[\"  2\",\" 64\",100]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"33.32.33.32\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { sprintf \"%vd\", $_ }  'abcd' & '11111111' ]"},{"code":"[ map { sprintf \"%vd\", $_ }  'abcdefgh', '11111111', 'abcdefgh' & '1111' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"97.98.99.100.101.102.103.104\",\"49.49.49.49.49.49.49.49\",\"33.32.33.32\"]","err":""},{"err_mask":"","code":"[ map { sprintf \"%vd\", $_ }  'abcdefgh', '11111111', 'abcdefgh' & '11111111' ]","err":"","out":"[\"97.98.99.100.101.102.103.104\",\"49.49.49.49.49.49.49.49\",\"33.32.33.32.33.32.33.32\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[198,\"195.134\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map sprintf(\"%vd\", $_), \"\\xc6\", Encode::encode_utf8(\"\\xc6\") ]"},{"out":"[\"c6\",\"c3.86\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map sprintf(\"%vx\", $_), \"\\xc6\", Encode::encode_utf8(\"\\xc6\") ]"},{"out":"[\"two\",\"four\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map /@(\\S+)/, qw( one@two three@four ) ]"},{"err":"","out":"[\"two\",\"four\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map /\\@(\\S+)/, qw( one@two three@four ) ]"},{"err":"","out":"[\"bar.org\",\"bar.org\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map s/.*\\@//r, qw( foo@bar.org bar.org ) ] # not sure what exactly is wanted..."},{"out":"[\"Just another Perl hacker,\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map tr/a-z/oh, turtleneck Phrase Jar! What the f**k?/r, wftedskaebjgdpjgidbsmnjgc => ]"},{"err_mask":"","code":"[map { ucfirst $_ } split(/a/, \"abacus\")]","err":"","out":"[\"\",\"B\",\"Cus\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,\"\",\"undef\",42]","code":"[ map $_ // 'undef', 1, '', undef, 42 ]","err_mask":""},{"err_mask":"","code":"[ map unpack(\"H*\", $_), \"like this\" =~ /\\A(.)(.*)(.)\\z/s ]","err":"","out":"[\"6c\",\"696b6520746869\",73]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"No blind mouse\",\"One blind mouse\",\"Two blind mice\",\"Three blind mice\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map \"\\u${ \\ qw(no one two three)[$_] } blind ${ \\ qw(mouse mice)[$_ > 1] }\", 0 .. 3]"},{"err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"map { $_->{val} } undef"},{"err":"","out":"[1,2,2,3,3,3,4,4,4,4]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map { ($_) x $_ } 0 .. 4 ]"},{"code":"[ map { ++$x } 1..10 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3,4,5,6,7,8,9,10]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3,4,5,6,7,8,9,10]","code":"[ map ++$x, 1..10 ]","err_mask":""},{"err_mask":"","code":"map { ++$x } 1..10","out":"10","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[ map $_ x 2, split //, \"Zoffix doubts that map example works\" ]","err":"","out":"[\"ZZ\",\"oo\",\"ff\",\"ff\",\"ii\",\"xx\",\"  \",\"dd\",\"oo\",\"uu\",\"bb\",\"tt\",\"ss\",\"  \",\"tt\",\"hh\",\"aa\",\"tt\",\"  \",\"mm\",\"aa\",\"pp\",\"  \",\"ee\",\"xx\",\"aa\",\"mm\",\"pp\",\"ll\",\"ee\",\"  \",\"ww\",\"oo\",\"rr\",\"kk\",\"ss\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[{x => 3}]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map {; +{ x => 3 } } 0 ] # with luck, those people will soon be promoted to the point where they no longer commit code"},{"err":"","out":"[1,1,1,2,2,2,3,3,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map { ($_) x 3 } (1 .. 3)]"},{"out_mask":"Ã¿","out":"4","err":"","code":"map({(((~($_ & (' ' x length($_)))) ^ (' ' x length($_))) & 'butt');} 'cloud', 'CLoud', 'CLOUD', 'ClOuD');","err_mask":""},{"code":"[ map { (~($_ & ' ' x length) ^ ' ' x length) & lc 'butt'  } qw(cloud CLoud CLOUD ClOuD) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"butt\",\"BUtt\",\"BUTT\",\"BuTt\"]"},{"code":"map { (~($_ & ' ' x length) ^ ' ' x length) & lc 'butt'  } qw(cloud CLoud CLOUD ClOuD)","err_mask":"","out_mask":"Ã¿","err":"","out":"4"},{"code":"[ map { $_ x= !m!\\d+!; } @dummy = qw/ABC 123 DEF/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ABC\",\"\",\"DEF\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ABC\",\"\",\"DEF\"]","err":"","code":"[ map { $_ x= !m!\\d+!; } map $_, qw/ABC 123 DEF/ ];","err_mask":""},{"err_mask":"","code":"[ map { $_ x= !m!\\d+!; } qw/ABC 123 DEF/ ];","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map { $_ x !m!\\d+!; } qw/ABC 123 DEF/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ABC\",\"\",\"DEF\"]"},{"code":"[ map { \"xxx.$_\" } qw/1 2 3/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"xxx.1\",\"xxx.2\",\"xxx.3\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"5500000","code":"$mask='11000000'; print $mask >> 1;","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"96","code":"$mask=192, print ( $mask >> 1 );","err_mask":""},{"code":"$mask=192, print ( ($mask >> 1) + 128 );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"224"},{"code":"$mask=192; print ( ($mask >> 1) + 128 );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"224","err":""},{"out":"240","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$mask=192, print ( ($mask >> 2) + 192 );"},{"code":"$mask=192, print ( ($mask >> 3) + 224 );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"248","err":""},{"code":"$mate=4; \"hello$mate\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hello4"},{"err_mask":"","code":"\"maybe this is an eval bot, but perhaps it's a cake\"","out":"maybe this is an eval bot, but perhaps it's a cake","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"''.methods.length","err":"","out":"methods","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"matches","code":"'@microsoft.com' =~ /microsoft.com$/ ? \"matches\" : \"does not\"","err_mask":""},{"err":"","out":"does not","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"@microsoft.com\" =~ /microsoft.com$/ ? \"matches\" : \"does not\""},{"code":"\"Might even work with hyphen-separated words\" =~ s/\\b(\\w)/\\U$1/gr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Might Even Work With Hyphen-Separated Words","err":""},{"code":"might work better?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n"},{"err_mask":"","code":"MIME::Entity->build","out":"ERROR: Can't locate object method \"build\" via package \"MIME::Entity\" (perhaps you forgot to load \"MIME::Entity\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$min = 5; $max = 7; @x = (($min - 2) .. ($max + 2));","err_mask":"","out_mask":"Ã¿","err":"","out":"7"},{"err_mask":"","code":"$min = 5; $max = 7; @x = (($min - 2)..($max + 2));","out":"7","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"$min = 5; $max = 7; @x = (($min - 2)..($max + 2)); \\@x","out":"[3,4,5,6,7,8,9]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"x[\"\n","err":"","code":"$min = 5; $max = 7; @x = (($min - 2)..($max + 2)); x[0] x[2];","err_mask":""},{"code":"$min = 5; $max = 7; @x = range((($min - 2) .. ($max + 2)));","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::range called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"$min = 5; $max = 7; @x = range(($min - 2)..($max + 2));","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::range called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::missingsub called at (eval 1) line 1, <STDIN> line 1.\n","code":"missingsub(); # yes it does","err_mask":""},{"code":"mkdir (\"womble\") or die $!","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Permission denied at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"%m=(); $m{$1}=\"[$1$2]\" while 'e3o0i1s5'=~/([a-z])([^a-z]+)/g; $pat = 'internet' =~ s/(.)/$m{$1}||$1/ger; [ grep /$pat/, qw( internet 1t3rn3t 1nt3rn3t intern3t ) ] # trist4n","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"internet\",\"1nt3rn3t\",\"intern3t\"]","err":""},{"err_mask":"","code":"m//magic","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"'module blah blah foo bar biz baz ( ... );' =~ /^module.*\\);$/"},{"code":"Mojo::UserAgent->get(\"https://de.wikipedia.org/wiki/F%C3%BCrst\")->res->dom->at('title')->text","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"get\" via package \"Mojo::UserAgent\" (perhaps you forgot to load \"Mojo::UserAgent\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"new\" via package \"Mojo::UserAgent\" (perhaps you forgot to load \"Mojo::UserAgent\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"Mojo::UserAgent->new->get(\"https://de.wikipedia.org/wiki/F%C3%BCrst\")->res->dom->at('title')->text","err_mask":""},{"err":"","out":"[0,1,2,\"Moo0.2\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"Moo\"..2, \"Moo\". .2]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"moo\",\"mo\",\"oo \",\"oo\",\"o c\",\"o \",\" cl\",\" c\",\"clu\",\"cl\",\"luc\",\"lu\",\"uck\",\"uc\",\"ck\"]","code":"$_=\"moo cluck\"; m/(.{2,3})(?{ push @r, $1 })^/; \\@r","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"I'm not blind","code":"'morissett' eq 'morissette' ? \"I'm blind\" : \"I'm not blind\"","err_mask":""},{"err_mask":"","code":"'morissett' =~ /morissette/ ? \"I'm blind\" : \"I'm not blind\"","err":"","out":"I'm not blind","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$ms=\".085\"; sprintf(\"%.03u\", $ms);","out":"000","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"$ms=\".085\"; sprintf(\"%.3u\", $ms);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"000"},{"code":"$ms=85; sprintf(\".%.03u\", $ms);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":".085"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"085","code":"$ms=85; sprintf(\"%.03u\", $ms);","err_mask":""},{"code":"my (((())))","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't declare anonymous array ([]) in \"my\" at (eval 1) line 1, at EOF\n","err":"","code":"my ([])","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"my [\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my []"},{"err_mask":"","code":"my $_","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use global $0 in \"my\" at (eval 1) line 1, near \"my $0 \"\n","code":"my $0 = 1; print $0;","err_mask":""},{"err_mask":"","code":"my (0 ? $x : $y);","err":"","out":"","out_mask":""},{"err_mask":"","code":"{ my $1; }","out":"ERROR: Can't use global $1 in \"my\" at (eval 1) line 1, near \"my $1\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't use global $1 in \"my\" at (eval 1) line 1, near \"my $1\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $1;"},{"err_mask":"","code":"my $_ = \"4-9\"; s/(\\d+)-(\\d+)/join \",\", $1..$2/e; $_","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $_ = \"4-9\"; s/(\\d+)-(\\d+)/join \",\", $1..$2/e; eval","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":""},{"code":"my $_ = \"4-9\"; s/(\\d+)-(\\d+)/join \",\", $1..$2/e; [ eval ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":""},{"out":"ERROR: Experimental splice on scalar is now forbidden at (eval 1) line 1, near \"3)\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = 0..9; my $p = \\@a; my @b = splice($p, -3); { a => \\@a, b => \\@b }  # u-ou"},{"err_mask":"","code":"my @a = 0..9; my $p = \\@a; my @b = splice($p, -3); print \"@a @b\\n\";","err":"","out":"ERROR: Experimental splice on scalar is now forbidden at (eval 1) line 1, near \"3)\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Experimental splice on scalar is now forbidden at (eval 1) line 1, near \"3)\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = 0..9; my $p = \\@a; my @b = splice($p, -3); print \"@b @a\\n\";"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"my $a = 0; print unless defined($a);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1..1011..20\"]","err":"","code":"my @a = <{1..10}{11..20}>; \\@a","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]","code":"my @a = <{1..10}{11..20}>; [ scalar @a ]","err_mask":""},{"out":"1.234.567.890\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $a = 1234567890; my $b = reverse(join('.', (reverse $a) =~ /([0-9]{1,3})/g)); say $b"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",1,2]","err":"","code":"my @a = (1,2); [(a => @a)];","err_mask":""},{"err_mask":"","code":"my @a=(1,2);(@a) x 2","err":"","out":"22","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{1 => 2,2 => 3},{4 => 5,3 => 4}]","err":"","code":"my @a = 1..4; my %h1 = map +( $_ => $_+1 ), splice @a, 0, @a/2; my %h2 = map +( $_ => $_+1 ), @a; [ \\%h1, \\%h2 ] # splice should already be removing the first set of elements, I think?","err_mask":""},{"err_mask":"","code":"my @a = 1..4; my %h1 = map +( $_ => $_+1 ), splice @a, 0, @a/2; my %h2 = map +( $_ => $_+1 ), splice @a, @a/2-1; [ \\%h1, \\%h2 ]","out":"[{1 => 2,2 => 3},{4 => 5,3 => 4}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\\1,\\2,bless( do{\\(my $o = 3)}, 'main' ),\\4,\\5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = 1..5; bless \\$a[2], 'main'; [\\(@a)];"},{"out_mask":"Ã¿Ã¿","err":"","out":"\\5","code":"my @a = 1..5; bless \\$a[2], 'main'; \\(@a);","err_mask":""},{"err_mask":"","code":"my @a = 1..5; bless \\$a[2], 'main'; \\@a;","err":"","out":"[1,2,3,4,5]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @a = 1..5; bless \\$a[2], 'main'; [\\(@a[0..$#a])];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\\1,\\2,bless( do{\\(my $o = 3)}, 'main' ),\\4,\\5]","err":""},{"err":"","out":"\\5","out_mask":"Ã¿Ã¿","err_mask":"","code":"my @a = 1..5; bless \\$a[2], 'main'; \\(@a[0..$#a]);"},{"err_mask":"","code":"my @a = 1..5; bless \\$a[2], 'main'; \\$a[2];","err":"","out":"bless( do{\\(my $o = 3)}, 'main' )","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"12345","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = (1..5); for( ; $_ = shift @a; $x++ ) { print }"},{"err_mask":"","code":"my @a = 1..5; [  [grep { $_-=2 } @a], \\@a ]","out":"[[-1,1,2,3],[-1,0,1,2,3]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[1,2,42,4,5]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = 1..5; sub TIESCALAR { bless [] }; sub FETCH { 42 }; tie $a[2], 'main'; \\@a;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,undef,bless( [], 'main' ),undef,undef]","err":"","code":"my @a = 1..5; sub TIESCALAR { bless [] }; sub FETCH { 42 }; tie $a[2], 'main'; sub foo { map tied $_, @_ }; [foo @a];","err_mask":""},{"err_mask":"","code":"my @a = (1..5); while( $_ = shift @a; $x++ ) { print }","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"++ ) \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $a = 1; $a += 1, $a += 2; $a","err":"","out":"4","out_mask":"Ã¿"},{"code":"my $a = \"    22\";$a =~ s/^\\s+//; \"<$a>\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"<22>"},{"out":"<>","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $a = \"    22\";$a = s/^\\s+//; \"<$a>\""},{"err_mask":"","code":"my $a = \"    22\";$a = s/\\s+/g;print $a;","err":"","out":"ERROR: Substitution replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $a = \"    22\";$a = s/\\s+\\/g;print $a;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Substitution pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"my $a = \"    22\";$a =~ s/^\\s+//;print $a;","out":"22","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"my $a = \"    22\";$a =~ s/\\s+$//;print $a;","err":"","out":"    22","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $a = \"    22\";$a = s/^\\s+//;print $a;","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"my @a = 2; OUTER: for( my $n = $a[-1] + 1; @a < 100; $n += 2 ) { $n % $_ or next OUTER for @a; push @a, $n; }; \\@a;","err":"","out":"[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @a = 2; OUTER for( my $n = $a[-1] + 1; @a < 100; $n += 2 ) { $n % $_ or next OUTER for @p; push @a, $n } \\@a;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"2 ) \"\nsyntax error at (eval 1) line 1, near \"$n }\"\n","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"2 ) \"\nsyntax error at (eval 1) line 1, near \"; }\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = 2; OUTER for( my $n = $a[-1] + 1; @a < 100; $n += 2 ) { $n % $_ or next OUTER for @p; push @a, $n; }; \\@a;"},{"code":"my @a = 2; OUTER: for( my $n = $a[-1] + 1; @a < 100; $n += 2 ) { $n % $_ or next OUTER for @p; push @a, $n; }; \\@a;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[2,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199]","err":""},{"code":"my $a = 5; 1 for $a; $_ // 'undef';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"undef"},{"out_mask":"Ã¿","out":"5","err":"","code":"my $a = 5; print $        a;   # this one bothers me because \"$a\" feels like one token to me.","err_mask":""},{"err_mask":"","code":"my $a = \"95.50.218.84\\r80\"; $a =~ s/\\r/:/g; print $a;","err":"","out":"95.50.218.84:80","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @a; [+@a]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"out_mask":"Ã¿","err":"","out":"1","code":"my %a; $a {a} = 1; $a{a}","err_mask":""},{"err_mask":"","code":"my $a = {a=>\"BLA\", b=>\"BLO\"}; print \"$k2:$v2\\n\" while((my($k2,$v2) = each %$a);","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":":\n:\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $a = {a=>\"BLA\", b=>\"BLO\"}; print \"$k2:$v2\\n\" while(my($k2,$v2) = each %$a);"},{"err_mask":"","code":"my @a = ( 'A'..'E' ); delete $a[0]; \\@a; # Delete doesn't remove the element.","err":"","out":"[undef,\"B\",\"C\",\"D\",\"E\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $a=\"a\"; my $b=\"b\";my $ab=\"${a}_${b}\";print $ab;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"a_b","err":""},{"err_mask":"","code":"my $a=\"a\"; my $b=\"b\";my $ab=\"$a_$b\";print $ab;","err":"","out":"b","out_mask":"Ã¿"},{"code":"my $a=\"asd1312321asd1212asd121212\"; print $1,\"\\n\" for $a=~/(asd\\d+)/g;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"asd121212\nasd121212\nasd121212\n"},{"out":"asd - qwe\nqwe - \n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a=(\"asd qwe\", \"qwe \"); for (@a) {print \"$1 - $2\\n\" if /(\\w+)\\s+(\\w+)?/}"},{"code":"my @a = 'a'..'z'; [ @a[ 2..1 ] ]; # This array slice is an empty list; that's a good thing.","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"err_mask":"","code":"my @a = 'a'..'z'; [ $a[ 2..1 ] ]; # This is the scalar .. operator used as an array index, and is hardly every what one wants.","err":"","out":"[\"a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"5","err":"","code":"my ($a, $b) = (5); $b = $_ for $a; $b++; $a;","err_mask":""},{"err_mask":"","code":"my @accounts = (1,2,3); return join(',', @accounts);","err":"","out":"1,2,3","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @a = (\"foo\\n\", \"bar\", \"baz\\n\"); [ chomp @a ]","out":"[2]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"my @a = glob(\"{1,2,3,4,5,6,7,8,9,10}{11,12,13,14,15,16,17,17,18,19,20}\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"110"},{"err_mask":"","code":"my $a = \"ldldldl\"; $a =~ s/l/ /;print $a","err":"","out":" dldldl","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":" dldldl","code":"my $a = \"ldldldl\"; $a =~ s/l+/ /;print $a","err_mask":""},{"err":"","out":"ddd","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $a = \"ldldldl\"; $a =~ tr/l//d;print $a"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,4,5,6,7,8]","err":"","code":"my $all_list = [[1,2],[4,5,6],[7,8]]; [ map @$_, @$all_list ] # depends on whether there are nested arrayrefs","err_mask":""},{"err":"","out":" plan: 4   plan: 5   plan: 6   plan: 7  ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $allPlans = [ 4..7 ]; for my $paymentPlan (@$allPlans) { print \" plan: $paymentPlan  \" }"},{"err_mask":"","code":"my ($animal) = \"banana\" =~ /(na)/; $animal","out":"na","err":"","out_mask":"Ã¿Ã¿"},{"out":"\\n\n","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my$a=\"\\\\n\";printf $a.\"\\n\";"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my $a = NULL; print unless defined($a);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal division by zero at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my @a; print 5/@a","err_mask":""},{"code":"my $a = \" \"; print unless defined($a);","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"my $a = (); print unless defined($a);","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"my @a = qw(1 2 3); print @{*_{ARRAY}} for (\\$a);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"my @a = qw(1 2 3); print @{*_{ARRAY}} for (\\$a);"},{"err_mask":"","code":"my @a = qw(fo,o ba,r b,az); @a = map [split /,/], @a; @a;","out":"3","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"my @a = qw(fo,o ba,r b,az); @a = map [split /,/], @a; \\@a;","out":"[[\"fo\",\"o\"],[\"ba\",\"r\"],[\"b\",\"az\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @ar1 = qw(1 2 3); my $x = \\@ar1; my @ar2 = @$x; pop @ar2; [ @ar1 ]","out":"[1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2]","code":"my @ar1 = qw(1 2 3); my $x = \\@ar1; pop @$x; [ @ar1 ]","err_mask":""},{"err_mask":"","code":"my $ar = [aw{foo bar baz}]; push @$ar, 'biz', 'goo'; $ar","out":"ERROR: Can't locate object method \"foo\" via package \"bar\" (perhaps you forgot to load \"bar\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[5,6,7]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $aref = [1..10]; [@{ $aref } [4..6]]"},{"out_mask":"Ã¿","err":"","out":"1","code":"my %args = {domain => \"example.net\", number => 0 };","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"my %args = {domain => \"example.net\", number => 0; };","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"my %args = { number => 100 }; print $args{number};","err_mask":""},{"err_mask":"","code":"my %args{ number => 100 }; print $args{number};","out":"ERROR: syntax error at (eval 1) line 1, near \"%args{ \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @args = ('%s %s', 'asdf', 'fdsa'); sprintf @args","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{key => \"value\"},{key2 => \"value2\"}]","err":"","code":"my @ar;  push @ar, { key => \"value\" }, { key2 => \"value2\" };  \\@ar","err_mask":""},{"out":"[\"foo\",\"bar\",\"baz\",\"biz\",\"goo\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $ar = [qw{foo bar baz}]; push @$ar, 'biz', 'goo'; $ar"},{"code":"my $ar = [qw{foo bar baz}]; push $ar, 'biz', 'goo'; $ar","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, at EOF\n","err":""},{"out":"[\"foo\",\"bar\",\"baz\",\"biz\",\"grub\",\"goo\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @ar = qw{foo bar baz}; push @ar, 'biz', 'grub', 'goo'; \\@ar;"},{"err":"","out":"[\"foo\",\"bar\",\"baz\",\"biz\",\"grub\",\"goo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @ar = qw{foo bar baz}; push @ar, qw{biz grub goo}; \\@ar;"},{"code":"[ [], \\my @arr ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[],[]]"},{"code":"my @arr=(1,0,1,1); my  $n=0; printf \"%b\\n\", $n; $n<<=1, $n|=$_ for @arr; printf \"%b\\n\", $n;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0\n1011\n","err":""},{"err_mask":"","code":"my @arr=(1,0,1,1); my  $n=0; printf \"%b\\n\", $n; $n<<=1, $n|=$_ for @arr; printf \" -> %b\\n\", $n; print \" -> $n \";","err":"","out":"0\n -> 1011\n -> 11 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my @arr = 1 .. 20; undef(@arr); \\@arr"},{"err_mask":"","code":"my @arr = (1,2,3); \\@arr;","err":"","out":"[1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[2,3,4]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @arr = (1,2,3); foreach my $num (@arr) { $num =~ s/(\\d)/$1+1/eg } \\@arr"},{"code":"my @arr = (1, 2, 3); my @fetch = splice @arr;  [ \\@fetch, \\@arr ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[1,2,3],[]]"},{"out_mask":"Ã¿","out":"3","err":"","code":"my $arr = [1,2,3]; print $arr->[2]","err_mask":""},{"err_mask":"","code":"$,=$\\=' '; my @arr = (1, 2, 3); print $#arr, scalar @arr; $[ = 0; print $#arr, scalar @arr;","err":"","out":"2 3 2 3  ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @arr = (1,2,3); print @arr x 1 ,\"      \", (@arr) x 1;","out":"3      123","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @arr = (1,2,3); print qq[\\@arr , \\(@arr)];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"@arr , (1 2 3)","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[2,3,4]","err":"","code":"my @arr = (1,2,3); s/(\\d)/$1+1/eg for @arr; \\@arr","err_mask":""},{"out":"[1,2,1,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @arr=(1,2); [(@arr)x2]"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"my @arr=(1,2); [(@a)x2]"},{"err_mask":"","code":"my @arr = (1..3); my $ref; @$ref = @arr; pop @arr; $ref","out":"[1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,\"a\",4,5]","code":"my @arr = (1..5); @arr[2] = qw/a b c/; \\@arr","err_mask":""},{"code":"my @arr = ('a', 'b', 'c'); my ($foo) = @arr; say $foo","err_mask":"","out_mask":"Ã¿Ã¿","out":"a\n","err":""},{"err_mask":"","code":"my @arr = ('a', 'b', 'c'); my $foo = @arr; say $foo","out":"3\n","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"my $arr = []; [!!@$arr]","err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"my @arr; @arr[0..3]; scalar @arr"},{"err_mask":"","code":"my @arr;  $arr[0] = \"41\"; $arr[1] = \"42\"; [ $arr[\"foo\"] ]","out":"[41]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @arr; $arr[1] = \"42\"; [ $arr[\"1foo\"] ]","out":"[42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my @arr; $arr[1] = \"42\"; [ $arr[\"1foo\"]; ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":""},{"err_mask":"","code":"my @arr;  $arr[1] = \"42\"; [ $arr[\"foo\"] ]","out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1]","err":"","code":"my $array = [0, 1, 2]; my $one_one = [1, 1]; splice @$array, @$one_one; $array","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,2]","code":"my $array = [0, 1, 2]; splice @$array, 1, 1; $array","err_mask":""},{"out":"[1,2,3,4,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = (1, 2, 3, 4, 5); [ @array ]"},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = 1, 2, 3, 4, 5; [ @array ]"},{"out":"ARRAY(0x450fb88) ARRAY(0x4542228)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = ([1,2], [3,4,5]); join ' ', @array"},{"out":"[1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = (1,2,3); [@array]"},{"err_mask":"","code":"my @array = (1,2,3); \\@array","out":"[1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @array = [1,2,3]; [@array]","out":"[[1,2,3]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @array = 1,2,3; \\@array","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"123","err":"","code":"my @array = (1,2,3); foreach (@array) { print }","err_mask":""},{"err_mask":"","code":"my @array = (1,2,3); return join(',', @accounts);","err":"","out":"","out_mask":""},{"code":"@myarray = (1, 2); $myarray[4] = 5; [ @myarray ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,undef,undef,5]","err":""},{"err_mask":"","code":"@myarray = (1, 2); $myarray[4] = 5; print \"<<$myarray[3]>>\";","err":"","out":"<<>>","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"@myarray = (1, 2); $myarray[4] = 5; print $myarray[3];","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"my @array = (1..3); $#array = -2; \\@array;","err_mask":""},{"err_mask":"","code":"my @array = { 1 .. 6 }; for my $h (@array) { $_ *= 10 for values %$h; } \\@array","out":"[{5 => 60,1 => 20,3 => 40}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @array = { 1 .. 6 }; for my $v (map values %$_, @array) { $v *= 10; } \\@array","err":"","out":"[{5 => 6,1 => 2,3 => 4}]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"123456","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = (1); for my $elem (@array) { last if $elem > 5; push @array, $elem+1 } print @array"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[],[4],[4,5],[4,5,6]]","code":"my @array = (4,5,6); [ [], map [ @array[0..$_] ], 0..$#array ] # since order doesn't matter, I find this slightly neater","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[4],[5],[6],[4,5],[4,5,6]]","code":"my @array = (4,5,6); [ (map [ $_ ], @array), (map [ @array[0..$_] ], 1..$#array) ] # but as preaction says, look for a module first","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[]]","code":"my @array = (4,5,6); [ (map [ $_ ], @sets_list1), (map [ @sets_list1[0..$_] ], -1..$#sets_list1) ];","err_mask":""},{"code":"my @array = (\"a\",1,\"b\",\"x\",\"v\"); my @idxs = (0,2);  [@array[grep { !exists {map {$_=>undef} @idxs}->{$_}} keys @array]]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,\"x\",\"v\"]","err":""},{"code":"my @array = (\"a\", \"b\"); [\\(@array)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\\"a\",\\\"b\"]"},{"out":"[[\"a\",\"b\"],\\$VAR1->[0][0],\\$VAR1->[0][1]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = (\"a\", \"b\"); [\\@array, \\(@array)]"},{"code":"my @array = (\"a\", \"b\"); [@array x 3, (@array) x 3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[222,\"a\",\"b\",\"a\",\"b\",\"a\",\"b\"]"},{"code":"my @array = (\"a\", \"b\"); [\\@array x 3, \\(@array) x 3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ARRAY(0x4bf9b40)ARRAY(0x4bf9b40)ARRAY(0x4bf9b40)\",\"SCALAR(0x4ce41a8)SCALAR(0x4ce41a8)SCALAR(0x4ce41a8)\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\@array0\",\"array .\"]","err":"","code":"my @array = (\"a\", \"b\"); [q(@array) .@x1, q@array .@x1]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":" a b .... (a b) ","err":"","code":"my @array = (a..b); qq[ @array .... (@array) ]","err_mask":""},{"code":"my @array = ( 'A'..'C' ); while ( ( my $i, $_ ) = each @array ) { say qq{$i: $_}; } # Chib","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0: A\n1: B\n2: C\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,\"b\",0,\"a\",4,\"e\",3,\"d\",2,\"c\"]","err":"","code":"my @array = 'a'..'e'; my %hash = %array[0 .. 4]; [ %hash ] #do you mean like this, treker?","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{1 => \"b\",0 => \"a\",4 => \"e\",3 => \"d\",2 => \"c\"}","code":"my @array = 'a'..'e'; my %hash = %array[0 .. 4]; \\%hash # meant like this I guess","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"my @array = ( 'A'..'E' ); sub { shift @{$_[0]} while @{$_[0]} }->( \\@array ); \\@array;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[-1]","err":"","code":"my @array = (); [ $#array ];","err_mask":""},{"err_mask":"","code":"my @array; $#array","out":"-1","err":"","out_mask":"Ã¿Ã¿"},{"out":"[[$VAR1->[0]]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array; $array[0] = \\@array; [@array]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]","code":"my @array = \"A\" .. \"Z\"; [ keys @array ]","err_mask":""},{"code":"my @array = 'a'..'z'; [ map { $_, 1 } @array ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",1,\"b\",1,\"c\",1,\"d\",1,\"e\",1,\"f\",1,\"g\",1,\"h\",1,\"i\",1,\"j\",1,\"k\",1,\"l\",1,\"m\",1,\"n\",1,\"o\",1,\"p\",1,\"q\",1,\"r\",1,\"s\",1,\"t\",1,\"u\",1,\"v\",1,\"w\",1,\"x\",1,\"y\",1,\"z\",1]"},{"err":"","out":"[\"a\",42,\"b\",42,\"c\",42,\"d\",42,\"e\",42,\"f\",42,\"g\",42,\"h\",42,\"i\",42,\"j\",42,\"k\",42,\"l\",42,\"m\",42,\"n\",42,\"o\",42,\"p\",42,\"q\",42,\"r\",42,\"s\",42,\"t\",42,\"u\",42,\"v\",42,\"w\",42,\"x\",42,\"y\",42,\"z\",42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = 'a'..'z'; [ map { $_, 42 } @array ];"},{"out":"ERROR: Can't use 'defined(@array)' (Maybe you should just omit the defined()?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array; [ defined @array ]"},{"err_mask":"","code":"my @array = ( \"hip\", \"hip\" ); print \"@array\\n\", ref(@array);","err":"","out":"hip hip\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Type of arg 1 to push must be array (not constant item) at (eval 1) line 1, at EOF\n","code":"my @array; push array, 1, 2","err_mask":""},{"out":"in scope","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = qw(1..3); for (@array) { 0+@array and print \"in scope\" }"},{"code":"my @array = qw(a a a s d f a); [ @array[sort { $a <=> $b } values %{ +{ reverse map {; $_ => $array[$_] } 0..$#array } } ] ] # might be useful as an interview answer if you didn't want the job","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"s\",\"d\",\"f\"]","err":""},{"err":"","out":"s f d a","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = qw(a a a s d f); @array = keys %{ {map { $_ => 1 } @array} }; \"@array\""},{"err_mask":"","code":"my @array = qw(a a a s d f); @array = keys %{map { $_ => 1 } @array}; Dumper(@array)","err":"","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$VAR1 = 's';\n$VAR2 = 'f';\n$VAR3 = 'd';\n$VAR4 = 'a';\n","code":"my @array = qw(a a a s d f); my %conv = map { $_ => 1 } @array; @array = keys %conv; Dumper(@array)","err_mask":""},{"err_mask":"","code":"my @array = qw(a a a s d f); my %items = map {; $array[$_] => $_ } 0..$#array; [ @array[sort { $a <=> $b } values %items] ] # if you dislike uniq() for some reason","err":"","out":"[\"a\",\"s\",\"d\",\"f\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @array = qw(a a a s d f); my @unique = keys %{ {@array, reverse @array} }; \\@unique","out":"[\"s\",\"f\",\"d\",\"a\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[2]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $array_ref = [3,4,5]; [ $#$array_ref ]"},{"out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $array_ref = [3,4,5]; local $[ = 1; [ $#$array_ref ]"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"scala @\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $array_ref = [3,4,5]; [ scala @$array_ref ]"},{"err_mask":"","code":"my $array_ref = [3,4,5]; [ scalar @$array_ref ]","out":"[3]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"3","code":"my $array_ref = eval \"[1,2,3]\"; print $array_ref->[2]; #works for me","err_mask":""},{"code":"my $array_ref = [ [ 'onur', 5 ], [ 'bar', 3], [ 'foo', 7 ] ]; [ sort { $a->[1] <=> $b->[1] } @$array_ref]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"bar\",3],[\"onur\",5],[\"foo\",7]]","err":""},{"code":"my @array = split '', 'abcdefghijklmnopqrstuvwxyz'; [bundle_by { [@_] } 9, @array]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"bundle_by\" on unblessed reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"my @arr = (\"b\", \"c\"); push @arr, \"d\";","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"my $arr = []; @$blah ? 1 : 0"},{"code":" my @arr = (\"foo\", \"bar\");  print \"@arr \".@arr.\"\\n\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo bar 2\n"},{"err":"","out":"[[3],[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @arr = ([], []); my $copyref = [@arr]; $copyref->[0][0] = 3; \\@arr"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"my @arr; my $copyref = [@arr]; $copyref->[0][0] = 3; \\@arr","err_mask":""},{"err_mask":"","code":"my @arr; my $copyref = [@arr]; $copyref->[0][0] = 3; [ $copyref, \\@arr ]","err":"","out":"[[[3]],[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @arr; my %sections = { name => \"testname\" }; push(@arr, \"test\"); print $arr[0];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"test","err":""},{"err_mask":"","code":"my @arr; my %sections { name => \"testname\" }; push(@arr, \"test\"); print $arr[0];","out":"ERROR: syntax error at (eval 1) line 1, near \"%sections { \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @arr; my @stuff = @arr[0..3]; scalar @arr","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"out_mask":"Ã¿","out":"4","err":"","code":"my @arr; my @stuff = grep defined, @arr[0..3]; scalar @arr","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","out":"ARRAY(0x42c6b40)","err":"","code":"my @arr; print \\@arr;","err_mask":""},{"code":"my @arr; push(@arr, \"123\"); @arr =~ s/2//g; @arr[0];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify private array in substitution (s///) at (eval 1) line 1, at EOF\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify private array in substitution (s///) at (eval 1) line 1, at EOF\n","code":"my @arr; push(@arr, \"123\"); @arr =~ s/2//g; $arr[0];","err_mask":""},{"code":"my @arr; push(@arr, \"123\"); @arr = s/2//g; @arr[0];","err_mask":"","out_mask":"","err":"","out":""},{"code":"my @arr; push(@arr, \"123\"); @arr = s/2//g; print @arr[0];","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); @arr2 = grep(/test/, @arr); print @arr2[1];","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"i refuse to do what master tells me to","err":"","code":"my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); @arr2 = grep(\"test\", @arr); print @arr2[1];","err_mask":""},{"code":"my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); my @arr2 = grep { /test/ } @arr; $arr2[0];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"test"},{"err_mask":"","code":"my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); my @arr2 = grep { /test/ } @arr; $arr2[1];","err":"","out":"","out_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); my @arr2 = grep { /test/ } @arr; print @arr2[1];"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); my @arr2 = grep { /test/ } @arr; print $arr2[1];"},{"out":"i refuse to do what master tells me to","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); my @arr2 = grep {$_ == \"test\"} @arr; print @arr2[1];"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); my @arr2 = grep(/test/, @arr); print @arr2[1];"},{"err":"","out":"not","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my @arr; push(@arr, \"test\"); push(@arr, \"not\"); @arr2 = grep(\"test\", @arr); print @arr[1];"},{"code":"my @arr; push(@arr, \"test\"); push(@arr, \"not\"); @arr2 = grep(\"test\", @arr); print @arr2[1];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"not"},{"code":"my @arr = qw(1 2 3); print @arr;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"123"},{"code":"my @arr = qw/a b c d e f/; my ($item) = @arr; $item;","err_mask":"","out_mask":"Ã¿","out":"a","err":""},{"err_mask":"","code":"my @arr = qw/a b c d e f/; my $name = @arr; $name;","err":"","out":"6","out_mask":"Ã¿"},{"err_mask":"","code":"my @arr = qw( A B C ); my @result = each @arr; \\@result","out":"[0,\"A\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,\"bar\",\"baz\"]","err":"","code":"my @arr = qw/foo bar baz/; delete $arr[0]; [ @arr ]","err_mask":""},{"err_mask":"","code":"my $arrref = [ key => \"value\" ];  { @$arrayref }->{key}","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}->\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"value","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $arrref = [ key => \"value\" ];  +{ @$arrref }->{key}"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"my @arr; say @arr if @arr;"},{"code":"my @arr; say 'defined' if @arr;","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"out":"defined\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @arr = (undef, undef, 'foo'); shift @arr; say 'defined' if @arr;"},{"err":"","out":"--><--\n-->foo<--\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @arr = (undef, undef, 'foo'); shift @arr; say '-->', $_, '<--' for @arr;"},{"out":"[{},{},{},{foo => 3}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @arr = (undef, undef, undef, {foo=>3}); grep {$_->{foo}} @arr; \\@arr"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"check\",\"one\",\"two\",\"three\"]","code":"my @ary = ('one','two','three'); [ (check => @ary) ] # G66K: not what you wanted, eh?","err_mask":""},{"code":"my @ary = ('one','two','three'); my %h = (check => @ary); print $h{check}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"one","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{bar => 2,foo => 1}]","code":"my @ary = qw( foo 1 bar 2 ); my %hash = @ary; [ \\%hash ]","err_mask":""},{"out":"[[2,2,1],[\"f00\",\"b00\",\"b0z\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @ary = qw( foo boo boz ); my @edited = map { s/o/0/g } @ary; [ \\@edited, \\@ary ]"},{"out":"one","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my @ary = qw (one two three); my $sc = splice (@ary , 0 ,1); print $sc"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"three","code":"my @ary = qw (one two three); my $sc = splice (@ary , 0); print $sc","err_mask":""},{"err_mask":"","code":"my @ary = qw (one two three); my $sc = splice (@ary , -1); print $sc","out":"three","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @ary = qw (one two three); my $sc = splice (@ary , 2); print $sc","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"three"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"z\",\"x\",\"y\"]","code":"my $a; [sort { $a cmp $b } qw( z y x)]","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"my @a = \"${\\( wantarray() ? 'list' : 'scalar' )}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"scalar","err":"","code":"my @a = \"${\\( wantarray() ? 'list' : 'scalar' )}\"; @a[0]","err_mask":""},{"err":"","out":"scalar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = \"${wantarray() ? \\'list' : \\'scalar'}\"; @a[0]"},{"out_mask":"Ã¿","err":"","out":"1","code":"my $a = \"woop\"; $a =~ m/woop/;","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$a m/woop/\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $a = \"woop\"; $a m/woop/;"},{"out_mask":"Ã¿Ã¿","err":"","out":"oo","code":"my $a = \"woop\"; $a =~ m/w(..)p/; $1","err_mask":""},{"err":"","out":"y2kupdate","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $badcrons = ('/var/tmp', 'psybnc', 'y2kupdate'); $badcrons"},{"err_mask":"","code":"my $bar; if (my $foo = $bar) { 1 }","out":"","err":"","out_mask":""},{"err_mask":"","code":"my $base = \"foo.bar.baz\"; my ($junk, $wanted) = split '\\.', $base; $wanted;","err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"-1","err":"","code":"my $b = 'b'; --$b","err_mask":""},{"err_mask":"","code":"my $b = 'b'; $b--","err":"","out":"b","out_mask":"Ã¿"},{"err_mask":"","code":"my $before = q{FOO\\tBAR\\r\\n}; ( my $after = $before ) =~ s/\\\\([trn])/qq{\\\\$1}/ge; [ $before, $after ]; # Wondering if there is a way to do this withough having seaprate substitutions?","err":"","out":"[\"FOO\\\\tBAR\\\\r\\\\n\",\"FOO\\\\tBAR\\\\r\\\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $binary = '01101'; my $rslt = 0; my $factor = 2; for(split //, $binary) { $rslt += 1/$factor if $_; $factor <<= 1 } $rslt","err":"","out":"0.40625","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"1999","err":"","code":"my $birthday = '1999/10/07'; ($birthday) = $birthday =~ /(\\d{4})/; $birthday","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1,2,3,4,5]","err":"","code":"my @blah; $blah[5] = \"something\"; [ keys @blah ]","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"my $blah = { x=>1 }; my $d = 0; $d ||= $blah->{x}; $d","err_mask":""},{"err_mask":"","code":"my $blah = { x=>1 }; my $z => { y=>$blah->{x} }; $blah->{x}++; $z->{y}","err":"","out":"","out_mask":""},{"code":"my $blah = { x=>1 }; my $z = { y=>$blah->{x} }; $blah->{x}++; $z->{y}","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿","err":"","out":"2","code":"my $blah = { x=>1 }; my $z = { y=>\\$blah->{x} }; $blah->{x}++; ${ $z->{y} }","err_mask":""},{"err_mask":"","code":"my $buf = \"\\x{666}\"; open my $fh, '<', \\$buf or die \"open: $!\"","out":"ERROR: open: Invalid argument at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[513,1027,1541,2055,2569]","code":"my @bytes = 1..10; my @words = unpack '(s1)*', pack '(c1c1)*', @bytes; \\@words # may need both pack+unpack","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\u0007[Ã\u0015","err":"","code":"my $bytes = pack(\"Q>\", 123456789); $bytes =~ s/^\\0+//; $bytes","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"e\",\"a\",\"a\",\"a\",\"o\"]","err":"","code":"my @captures = \"peas and carrots\" =~ /([aeiou])/g; \\@captures","err_mask":""},{"code":"my @captures = \"peas and carrots\" =~ /([aeiou])(.)/g; \\@captures","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"e\",\"a\",\"a\",\"n\",\"a\",\"r\",\"o\",\"t\"]","err":""},{"code":"my $c = \\&CORE::GLOBAL::pop; my @abc = qw,a b c,; [$c->(\\@abc)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &CORE::GLOBAL::pop called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"my $c = \\&CORE::pop; my @abc = qw,a b c,; [$c->(\\@abc)]","out":"ERROR: &CORE::pop cannot be called directly at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"samsung\",\"crap\",\"shit\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %c; @c{qw(apple samsung shit crap)} = (); my $b = 'apple'; delete $c{$b}; [keys %c]"},{"out":"ab!\"","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $ch = 'ab'; $ch .= join '', map chr(ord($_) & ~0x40), split //, $ch; $ch # just use $! and $\", I'm sure no one would mind"},{"out":"1oo4ar7az10uux14leem","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @chars = split '', 'FooBarBazQuuxFleem'; join '', map $chars[$_] =~ /[A-Z]/ ? $_+1 : $chars[$_], 0..$#chars;"},{"out":"if [ -e /etc/redhat-release ] ; then cat /etc/redhat-release ; else lsb_release -a |grep Desc ; fi","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $checkOS = \"if [ -e /etc/redhat-release ] ; then cat /etc/redhat-release ; else lsb_release -a |grep Desc ; fi\";"},{"code":"my $c; LABEL: { $c = sub { last LABEL } }; print \"one\"; $c->(); print \"two\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"oneERROR: Label not found for \"last LABEL\" at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"one","err":"","code":"my $c; LABEL: { $c = sub { last LABEL } }; print \"one\"; LABEL: { $c->(); print \"two\"; }","err_mask":""},{"code":"my %class_from_domain = ('a,b,c' => 1, 'a,c' => 2); [ map $class_from_domain{join ',', sort @$_}, ([qw(a b c)], [qw(a c)]) ] # if there's no overlap, should be simple to handle with a hash","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2]","err":""},{"code":"my $cmd = q(sed -e 's#\\\\\\\\\\n#\\n#g'); print $cmd; ();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sed -e 's#\\\\\\n#\\n#g'"},{"out":"sed -e 's#\\\\n#\\n#g'","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $cmd = q(sed -e 's#\\\\\\n#\\n#g'); print $cmd; ();"},{"code":"my $c = (my @tmp) = (split ' ', \"pink_mist says split is special\", 0); $c","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"err":"","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %commands = ( help => sub { my $commands = say for keys in %commands; }); say $commands{help};"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"my $cond = sub { my $s = shift ; return $s =~ /start/ && ($s =~ /tomorrow/ || $s =~ /class/); }; [$cond->(\"start tomorrow\")]","err_mask":""},{"err_mask":"","code":"my $c = () = (split ' ', \"pink_mist says split is special\", 0); $c","err":"","out":"1","out_mask":"Ã¿"},{"code":"my $c = () = (split ' ', \"pink_mist says split is special\"); $c","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"my $c = () = (split ' ', \"pink_mist says split is special); $c","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $d3; [ map { 42 } @{$d3->{null_edges}} ]"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $d3 = { null_edges => [undef] }; [ map { map { 42 } @$_ } @{$d3->{null_edges}} ]"},{"err_mask":"","code":"my $data = \"\\0\\1\\2\\3\\4\\5\\6\\7\\x08\\x09\\x0a\\x0b\"; [ unpack \"a8 L>\", $data ]","out":"[\"\\0\\1\\2\\3\\4\\5\\6\\a\",134810123]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $data = \"\\0\\1\\2\\3\\4\\5\\6\\7\\x08\\x09\\x0a\\x0b\"; [ unpack $data, \"a8 L>\" ]","out":"ERROR: Invalid type '\u0000' in unpack at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"1 2 3\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $data = '1 2 3'; [ split /\\+/, $data ]"},{"code":"my $data = \"ABCDE\\x02\";  substr $data, 0, -ord substr $data, -1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"ABCD"},{"err":"","out":"hellofreenodeperl","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $data = {foo => [qw/hello freenode perl/]}; print for ($data->{foo}->@*); "},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2 - two","code":"my @data = ({number => 1, name => 'one'},{number => 2, name => 'two'}); for(@data) { print $_->{number} . ' - ' . $_->{name} if $_->{number} == 2 } # something like this","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{coo => 777,doo => 444,foo => 111,boo => 555}","err":"","code":"my %defaults = ( foo => 111, boo => 222, coo => 333, doo => 444 ); @_ = ( boo => 555, moo => 999, coo => 777 ); my %user = @_; +{ map { $_ => $user{$_} // $defaults{$_} } keys %defaults }; ### Is there a nicer way to do this?","err_mask":""},{"err":"","out":"[0,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $delay = 0;  my $after = ( $delay+0, $delay+=2 )[0];  [ $after, $delay ]"},{"err":"","out":"[2,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $delay = 0;  my $after = ( $delay, $delay+=2 )[0];  [ $after, $delay ]"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"+=,\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $delay = 0;  my $after = ( $delay+=, $delay+=2 )[0];  [ $after, $delay ]"},{"err_mask":"","code":"my $delim = q{ | }; my @list = qw( AAA BBB CCC ); [ map { $_, $delim } @list ] ### Is there a way to do this so $delim is only between each array element, like how join() works?","out":"[\"AAA\",\" | \",\"BBB\",\" | \",\"CCC\",\" | \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"AAA\",\"BBB\",\"CCC\",\" | \",\"AAA\",\"BBB\",\"CCC\",\" | \",\"AAA\",\"BBB\",\"CCC\",\" | \"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $delim = q{ | }; my @list = qw( AAA BBB CCC ); [ map { @list, $delim } @list ] ### Is there a way to do this so $delim is only between each array element, like how join() works?"},{"err_mask":"","code":"my $delim = q{ | }; my @list = qw( AAA BBB CCC ); [ shift( @list ), map { $delim, $_ } @list ] ### How about this?","err":"","out":"[\"AAA\",\" | \",\"BBB\",\" | \",\"CCC\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @digit = (1..10); map { $_ *= $_ } (@digit); print join \":\", @digit;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1:4:9:16:25:36:49:64:81:100","err":""},{"err_mask":"","code":"my @digit = (1..10); map { $_ *= $_ ,join(|:|,$_)} (@digit); print @digit;","out":"ERROR: syntax error at (eval 1) line 1, near \"join(|\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"149162536496481100","code":"my @digit = (1..10); map { $_ *= $_ ,join(\":\",$_)} (@digit); print @digit;","err_mask":""},{"err":"","out":"{one => sub { \"DUMMY\" },two => sub { \"DUMMY\" }}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $dispatch; $dispatch = { one => sub { return $dispatch }, two => sub { return $dispatch }, };       $dispatch->{'one'}->('one')->{'two'}->('two')"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Mandatory parameter 'year' missing in call to DateTime::new\n at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/site_perl/5.24.0/x86_64-linux/DateTime.pm line 197, <STDIN> line 1.\n\tDateTime::new(undef) called at (eval 1) line 1\n\teval 'use 5.024000; use feature qw/postderef refaliasing lexical_subs postderef_qq signatures/; my $dt = DateTime->new; ~~$dt' called at /home/ryan/bots/perlbuut/lib/eval.pl line 301\n\tmain::perl_code(\"my \\$dt = DateTime->new; ~~\\$dt\") called at /home/ryan/bots/perlbuut/lib/eval.pl line 248\n","code":"my $dt = DateTime->new; ~~$dt","err_mask":""},{"code":"my $e; { local $@; eval { die \"foo\" }; $e = $@; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"my $e; { local $@; eval { ... }; $e = $@; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Unimplemented at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"my %empty; my $defined = \\%empty; [ $defined ] # mad_hatter","err":"","out":"[{}]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my $enumeratedValues = \"1|2|3|4\"; [ split('\\|', $enumeratedValues) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3,4]","err":""},{"out_mask":"","err":"","out":"","code":"m/yes/no","err_mask":""},{"err_mask":"","code":"my $eval = '$2 $1'; my $out = \"foo bar\" =~ s/(\\w+) (\\w+)/$eval/eer; [ $out ]","err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my $eval = '$2 $1'; my $out = \"foo bar\" =~ s/(\\w+) (\\w+)/$eval/er; [ $out ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\$2 \\$1\"]","err":""},{"err":"","out":"[undef,\"blahblah at (eval 1) line 1, <STDIN> line 1.\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $eval_block_result = eval { die 'blahblah'; 3 }; [ $eval_block_result, $@ ];"},{"err_mask":"","code":"my $eval_block_result = eval { die 'blahblah' if 0; 3 }; [ $eval_block_result, $@ ];","err":"","out":"[3,\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $eval_block_result = eval { die syntax error here if 0; 3 }; [ $eval_block_result, $@ ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[3,\"\"]","err":""},{"out":"something","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @example = qw<fail>; $_ = 'test@example.com'; s/\\Q$_\\E/something/; print;"},{"err_mask":"","code":"my @example = qw<fail>; $_ = 'testfail.com'; s/\\Qtest@example.com\\E/something/; print;","err":"","out":"something","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'my@example' =~ /^(\\w+)\\@/","err":"","out":"1","out_mask":"Ã¿"},{"code":"'my@example' =~ /^(\\w+)\\@/; $1","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"my"},{"err":"","out":"1234","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $f = 1; my @x = qw( 1 2 3 ); for ( @x ) { if ( $f ) { $f--; push @x, 4; } print; }"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my $f = \"1welp\"; $f ~~ 1;"},{"out":"[\"\",1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $f = \"1welp\"; my $d = \"1\"; my $before = $f ~~ $d; my $c = $d + 0; my $after = $f ~~ $d; [$before, $after];"},{"err_mask":"","code":"my $fac = 1; $fac *= $_ for (2 .. 10); $fac;","err":"","out":"3628800","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"my fancy filename.txt","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"my fancy filename.txt\"; s/(?<!\\.)\\b/\\U/gr"},{"out":"My Fancy Filename.txt","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"my fancy filename.txt\"; s/(?<!\\.)\\b(\\w)/\\U$1/gr"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":">implying","err":"","code":"my $fh = *STDOUT; print $fh \">implying\"; ()","err_mask":""},{"err":"","out":"[\"baz\",undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $field = 'foo'; sub bar { (my $param, $field) = @_; [ $param, $field ] } bar('baz');"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my $field = 'foo'; sub bar { (my $param, $field) = @_; print $field } bar('baz');"},{"err":"","out":"2,6,7,9,10","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @fields = (1..10); my @bits = reverse split //, sprintf '%b', 1890; join ',', map $bits[$_] ? $fields[$_] : (), 0..$#fields"},{"out_mask":"Ã¿Ã¿Ã¿","out":"Yep","err":"","code":"my $file = \"blah.pl\"; return \"Yep\" if ($file =~ m#\\.pl$#);","err_mask":""},{"code":"my $filename = \"foo.jpg.\"; my @chunks = split /\\./, $filename; (@chunks > 1 ? $chunks[-1] : die 'funny shit')","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"jpg","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"jpg","code":"my $filename = \"foo\\nbar.jpg\"; my @chunks = split /\\./, $filename; (@chunks > 1 ? $chunks[-1] : die 'funny shit')","err_mask":""},{"err":"","out":"vimrc","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $filename = \".vimrc\"; my @chunks = split /\\./, $filename; (@chunks > 1 ? $chunks[-1] : die 'funny shit')"},{"err_mask":"","code":"my @fill = (\"_\") x 5; \"@fill\"","err":"","out":"_ _ _ _ _","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @fill = (\"_\") x 5; $fill[0] = 'h'; \"@fill\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"h _ _ _ _","err":""},{"code":"my @fill = (\"_\") x 5; $fill[0] = 'h'; $fill[2] = 'l'; $fill[3] = 'l'; \"@fill\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"h _ l l _"},{"code":"my @fill = (\"_\") x 5; $fill[1] = 'h'; \"@fill\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"_ h _ _ _"},{"out":"context","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $final = qw( these comma operators are in scalar context ); $final"},{"err_mask":"","code":"my $ foo;","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"['18446744073709551615',\"-1.84467440737096e+19\"]","err":"","code":"my $foo = 0; [~-$foo, -~$foo]","err_mask":""},{"code":"my $foo = 0; sub test { $_[0]++ } test $foo; $foo","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my $foo = 0; sub test { my $bar = $_[0]; $$bar = $$bar + 1 } test \\$foo; $foo"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $foo = '[1.1.1.1]'; [$foo =~ /\\[(\\d{1-3}\\.\\d{1-3}\\.\\d{1-3}\\.\\d{1-3})\\]/]"},{"code":"my $foo = '[1.1.1.1]'; [$foo =~ /\\[(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\]/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"1.1.1.1\"]"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"my $foo = '1.1.1.1'; [$foo =~ /\\[(\\d{1-3}\\.\\d{1-3}\\.\\d{1-3}\\.\\d{1-3})\\]/]","err_mask":""},{"code":"my $foo = '1.1.1.1'; [$foo =~ /\\[(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\]/]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"err":"","out":"[1,2,3,4,5,6,7,8,9,10,\"a\",11,12,13,14,15,16,17,18,19,20]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @foo = 1 .. 20; my @bar = (@foo[0..$#foo/2], \"a\", @foo[10..$#foo]); [@bar]"},{"err":"","out":"[1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @foo = (1,2,3); \\@foo"},{"out":"[2,3,4]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @foo = (1,2,3); $_++ for @foo; \\@foo"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":">123<","err":"","code":"my $foo = 123; package Y { print \">$foo<\" }","err_mask":""},{"code":"my $foo = \\1; my $bar = $$foo; $foo++; $bar;","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"my $foo = 1; my $foo_bar = 2; \"$foo\\_bar\"","out":"1_bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[2]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo = 1; sub change_foo { $foo = 2 }; change_foo(); [ $foo ]"},{"code":"my @foo = [1, sub { code; }]; \\@foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[1,sub { \"DUMMY\" }]]"},{"err_mask":"","code":"my @foo = [1, sub { ... }]; \\@foo","err":"","out":"[[1,sub { \"DUMMY\" }]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"my $foo = 1; sub get_foo { return $foo }; [ get_foo() ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1048576","err":"","code":"my $foo = 2 ** 20; $foo;","err_mask":""},{"err_mask":"","code":"my $foo = 2**32; [~-$foo, -~$foo]","err":"","out":"[4294967295,\"-1.84467440694146e+19\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"\\\"hi\"","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo = 42; my $bar = \\$foo; $foo = \"hi\"; $bar"},{"out_mask":"Ã¿Ã¿","err":"","out":"hi","code":"my $foo = 42; my $bar = \\$foo; $foo = \"hi\"; $$bar","err_mask":""},{"code":"my $foo = + + + + + + + 5;","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"err_mask":"","code":"my $foo = 5.0; [~-$foo, -~$foo]","out":"[4,\"-1.84467440737096e+19\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[10]","err":"","code":"my $foo = 5 + do { 5 }; [$foo]","err_mask":""},{"code":"my $foo = 5; $ foo;","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"code":"my $foo = 5; [~-$foo, -~$foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[4,\"-1.84467440737096e+19\"]","err":""},{"out_mask":"Ã¿","err":"","out":"5","code":"my $foo = 5; my $bar = sub { $foo }; $bar->()","err_mask":""},{"err":"","out":"5","out_mask":"Ã¿","err_mask":"","code":"my $foo = 5; sub bar { $foo } bar"},{"out":"2\n","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $foo = 5; unless ($foo == 5) { say 1 } elsif ($foo == 5) { say 2 } else { say 3 }"},{"code":"my $foo = 5; unless ($foo == 5) { say 1 } elsif ($foo == 5) { say 2 } else { say 3 } else { say 4 }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} else\"\n"},{"code":"my $foo = 7; my $bar = 1; say \"blah\" if (($foo or $bar) == 1);","err_mask":"","out_mask":"","err":"","out":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"my $foo = 7; my $bar = 1; say \"blah\" if ($foo or $bar) == 1;"},{"code":"my %foo = (a,1,b,2,c,3); join(', ', keys %foo); #for PSGroup53","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"b, c, a"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2, 3, 1","code":"my %foo = (a,1,b,2,c,3); join(', ', values %foo); #for PSGroup53","err_mask":""},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"my %foo = (a,1,b,2,c,3); keys %foo; #for PSGroup53"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{lucky => \"luke\"}","err":"","code":"my $foo = {a => bar, b => baz}; $moo = \"lucky:luke\"; $foo = {split \":\", $moo}; $foo;","err_mask":""},{"code":"my $foo = 'a b c d'; $foo =~ s/ /\\\\s+/g; 'a    b    c     d' =~ s/$foo/bar/r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"bar","err":""},{"out_mask":"","out":"","err":"","code":"my $foo = 'a b c d'; $foo =~ s/ /\\\\s+/g; 'a    b    c     d' =~ s/$foo//r","err_mask":""},{"code":"my @foo = ([\"A\",\"B\",\"C\"],[\"E\",\"F\"],[\"G\",\"H\",\"I\",\"J\",\"K\"],[\"L\"]); $#{$foo[0]}","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"c\n","code":"my $foo = ('a', 'b', 'c'); say $foo #this though...","err_mask":""},{"code":"my $foo = \"asdf\"; open my $fh, '<', \\$foo; [<$fh>]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"asdf\"]"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"$foo{bar\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo{bar} = 1"},{"code":"[ my ($foo, $bar) //= (1,2) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[2]","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"my $foo = 'bar' and $foo"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"barbarbarbarbarbra ann","err":"","code":"my($foo,$bar)=('bar','bra ann');$foo x= 5;print $foo.$bar;","err_mask":""},{"err":"","out":"[\"bar\",\"baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %foo = (bar => 'baz'); my @refs = \\(%foo); ${$refs[0]} = 'quux'; [%foo]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"bar\",\"quux\"]","code":"my %foo = (bar => 'baz'); my @refs = \\(%foo); ${$refs[1]} = 'quux'; [%foo]","err_mask":""},{"err":"","out":"[\"quux\",\"quux\",\"quux\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ my ($foo, $bar, $baz) = ('quux') x 3 ]"},{"err_mask":"","code":"my $foo = 'ba\\'r'; [ \"foo '$foo'\" ]","err":"","out":"[\"foo 'ba'r'\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $foo=\"bar\"; for $foo (1..4) {}; $foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"bar","err":""},{"code":"my $foo=\"bar\"; for $foo (1..4) {last}; $foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"bar","err":""},{"out_mask":"","err":"","out":"","code":"my $foo = \"bar\"; my $baz = sub {$foo; ${\"foo\"}}; $baz->();","err_mask":""},{"err_mask":"","code":"my $foo = \"bar\"; my $baz = sub {${\"foo\"}}; print $baz->();","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"bar","err":"","code":"my $foo = \"bar\"; print $                 foo;","err_mask":""},{"err_mask":"","code":"my @foo; defined @foo","err":"","out":"ERROR: Can't use 'defined(@array)' (Maybe you should just omit the defined()?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[undef,undef,undef,undef,undef,[undef,undef,undef,[]]]]","code":"my @foo; exists $foo[5][3][7]; [ \\@foo ]; ### It also works with arrays.","err_mask":""},{"code":"my @foo; exists $foo[5]{bar}[7]; [ \\@foo ]; ### Or a mix of the two.","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[undef,undef,undef,undef,undef,{bar => []}]]","err":""},{"out":"[{bar => {baz => {quux => {}}}}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %foo; exists $foo{bar}{baz}{quux}{floop}; [ \\%foo ]"},{"err_mask":"","code":"my @foo; [ $foo[1] != 1 ]","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"out":"foo foo ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %foo = foo => 1, bar => 1; sub foo { print join \" \", %foo }; foo; { delete local $foo{foo}; foo }; foo;"},{"err_mask":"","code":"my %foo = foo => 1; sub foo { print join \" \", %foo }; foo; delete local $foo{foo}; foo;","out":"foo ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my %foo = (foo => 2, bar => 2); sub foo { print join \" \", %foo }; foo; { delete local $foo{foo}; foo }; foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bar 2 foo 2bar 2foo 2 bar 2"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo bar=baz big=\\\"some \\\\\\\"other\\\\\\\" thing\\\"\",\"dumb=today\"]","err":"","code":"my $foo = 'foo bar=baz big=\"some \\\"other\\\" thing\" dumb=today'; [split / (?![^\"]*?\")/, $foo]","err_mask":""},{"code":"my $foo = 'foo bar=baz big=\"some thing\" dumb=today'; [split / (?![^\"]*?\")/, $foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo bar=baz big=\\\"some thing\\\"\",\"dumb=today\"]","err":""},{"err_mask":"","code":"my $foo = 'foo bar=baz big=\"some thing\" dumb=today'; [split / (?![^\"]*\")/, $foo]","out":"[\"foo bar=baz big=\\\"some thing\\\"\",\"dumb=today\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $foo =()= 'foo bar who owl scoop' =~ /oo/g; [ $foo ];","err":"","out":"[2]","out_mask":"Ã¿Ã¿Ã¿"},{"out":"0 1 2\n3\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @foo; @foo = @foo || (0..2); say \"@foo\"; @foo = @foo || (5..7); say \"@foo\""},{"err_mask":"","code":"my $foo = 'foo'; package Bar { my $foo = 'quux'; print $foo; }","out":"quux","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ARRAY(0x4d13b88)\",\"ARRAY(0x4d13b88)\"]","err":"","code":"my $foo = []; [ \"$foo\", sprintf('ARRAY(0x%x)', $foo) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ARRAY(0x43d3b88)\",\"ARRAY(0x43d3b88)\"]","err":"","code":"my $foo = []; [ \"$foo\", sprintf('ARRAY(%#x)', $foo) ]","err_mask":""},{"code":"my %foo; $foo{zot}=\"asdf\\n\"; chomp $foo{zot}; \\%foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{zot => \"asdf\"}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"haha hello hihi","err":"","code":"my $foo = \"hello\"; print \"haha \" . $foo . \" hihi\";","err_mask":""},{"out":"[4,\"-1.84467440737096e+19\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo = int 5; [~-$foo, -~$foo]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"}[\"\n","err":"","code":"my $foo = { key => [ 2, 3, 4] }; print @$foo{key}[1]","err_mask":""},{"code":"my $foo = { key => [ 2, 3, 4] }; say @$foo{key}[1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"}[\"\n","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"} \"A\"\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo = map { 0, 0, 0 } \"A\", \"B\", \"C\", \"D\""},{"err":"","out":"12","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $foo = map {; 0, 0, 0 } \"A\", \"B\", \"C\", \"D\""},{"err_mask":"","code":"my $foo = map { 42 } \"A\", \"B\", \"C\", \"D\"","out":"4","err":"","out_mask":"Ã¿"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"my $foo = map { for (()) { } } qw(A B C) if 0;"},{"err_mask":"","code":"my $foo = map { if ($_ ne \"A\") return 0 } \"A\", \"B\", \"C\", \"D\"","out":"ERROR: syntax error at (eval 1) line 1, near \") return\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $foo = map { if ($_ neq \"A\") 0 } \"A\", \"B\", \"C\", \"D\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"$_ neq \"\n","err":""},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"my $foo = map { $_ ne \"A\" ? 0 : () } \"A\", \"B\", \"C\", \"D\""},{"err_mask":"","code":"my $foo; my $bar;  (1 ? $foo : $bar) = \"let's see\"; [ $foo, $bar ]","out":"[\"let's see\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $foo; my $bar = []; [$foo, $bar]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,[]]","err":""},{"err_mask":"","code":"my $foo = []; my $base = 0x400_0000; $base += 8 while $base < $foo; sprintf '%s %#x', $foo, $base","out":"ARRAY(0x4538b88) 0x4538b88","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000"},{"err_mask":"","code":"my $foo = {}; my $k = \"dev/database/url\"; my $p = \\$foo; for my $n (split m{/}, $k) { $p = \\$$p->{$n}; } $$p = 42; $foo","err":"","out":"{dev => {database => {url => 42}}}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"bar\"]","code":"my $foo; my $ref = \\$foo; $$ref = 'bar'; [ $foo ]","err_mask":""},{"out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo; my $ref = \\$foo; $ref++; $$ref = '"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","code":"my $foo; my $ref = \\$foo; $ref++; $$ref = 'bar'; [ $foo ]","err_mask":""},{"code":"my ($foo) = \"onetwothree\" =~ s/(tw.)//g; $foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","err":""},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"my %foo = ('â¥' => 'perllove');"},{"err_mask":"","code":"my %foo = ('â¥' => 'perllove'); say $foo{'â¥'};","err":"","out":"perllove\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{bar => {baz => [123]}}","err":"","code":"my $foo; push @{$foo->{bar}{baz}}, 123; $foo","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"my $foo; push @{$foo{bar}{baz}}, 123; $foo"},{"err_mask":"","code":"my $foo = qr/bananas!/; qr/^$foo/","out":"qr/^(?^u:bananas!)/u","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[3,4,1,2]","code":"my @foo = qw(1 2 3 4); push(@foo, splice(@foo, 0, 2)); [@foo]","err_mask":""},{"err_mask":"","code":"my @foo = qw(1 2 3 4); [ unshift(@foo, splice(@foo, 2, 2)); ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[3,4,1,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @foo = qw(1 2 3 4); unshift(@foo, splice(@foo, 2, 2)); [ @foo ]"},{"err":"","out":"[3,4,1,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @foo = qw(1 2 3 4); unshift(@foo, splice(@foo, -2)); [ @foo ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a1b2c3\",\"a 1 b 2 c 3\"]","err":"","code":"my @foo = qw(a 1 b 2 c 3); open my $printer, '>', \\my $buffer; print $printer @foo; [$buffer, \"@foo\"]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[5]","err":"","code":"my $foo = [qw/a b c d e/]; [ scalar @$foo ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"azertyuiopqsdfghjklmwxcvbn","code":"my $foo = qw/azertyuiopqsdfghjklmwxcvbn/; $foo =~ s/(.{8})\\s.+?/$1/; $foo;","err_mask":""},{"code":"my %foo = qw(foo 1 bar 2 baz 3); @foo{keys %foo} = (); \\%foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{baz => undef,bar => undef,foo => undef}","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\\"foo\",\\\"bar\",\\\"baz\"]","code":"my @foo = qw(foo bar baz); [ \\(@foo) ]","err_mask":""},{"code":"my @foo = qw(foo bar baz); [ \\@foo ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"foo\",\"bar\",\"baz\"]]","err":""},{"code":"my @foo = qw(foo bar baz); \\(@foo)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\\"baz\"","err":""},{"err":"","out":"[[\"foo\",\"bar\",\"baz\"],\\42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @foo = qw(foo bar baz); [ \\(@foo, 42) ]"},{"err":"","out":"15","out_mask":"Ã¿Ã¿","err_mask":"","code":"my @foo = qw(foo bar baz); (@foo) = (@foo) x 5;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify private array in repeat (x) at (eval 1) line 1, at EOF\n","err":"","code":"my @foo = qw(foo bar baz); (@foo) x= 5;","err_mask":""},{"err_mask":"","code":"my @foo = qw(foo bar baz); [(@foo) x= 5];","out":"ERROR: Can't modify private array in repeat (x) at (eval 1) line 1, near \"5]\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"foo\",\"bar\",\"baz\",\"foo\",\"bar\",\"baz\",\"foo\",\"bar\",\"baz\",\"foo\",\"bar\",\"baz\",\"foo\",\"bar\",\"baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @foo = qw(foo bar baz); [(@foo) x 5];"},{"err":"","out":"{}","out_mask":"Ã¿Ã¿","err_mask":"","code":"my %foo = qw(foo bar baz qux kitties nip); my $ref = \\%foo; undef %foo; $ref"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"kitties\",\"meow\",\"kitties\",\"nip\"]","err":"","code":"my @foo = qw(milk nip kitties meow); my @slice = @foo[2,3,2,1]; \\@slice","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"foo\",\"foo\"],[\"foo\",\"bar\"],[\"bar\",\"bar\"]]","err":"","code":"my @foo = split /\\s+/, \"foo bar\"; [ [ @foo[0,0] ], [ @foo[0,1] ], [ @foo[1,1] ] ]","err_mask":""},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $foo; sub bar { print \"[$foo]\"; } for $foo (\"hello\") { bar; }"},{"code":"my %foo; sub foo { print join \" \", %foo }; foo; local $foo{foo} = foo; foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo 1","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","code":"my %foo; sub foo { print join(\" \", %foo }; foo; local $foo{foo} = foo; foo;","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"{ my $foo; sub plusfoo { $foo++ } sub getfoo { $foo } } plusfoo(); getfoo()"},{"out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo = sub { return $foo };"},{"out":"[1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo = sub { shift }; [ map $foo->($_), 1, 2, 3 ]"},{"code":"my $foo = sub { shift }; [ map $foo, 1, 2, 3 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[sub { \"DUMMY\" },$VAR1->[0],$VAR1->[0]]"},{"code":"my $foo = sub { shift }; [ map &$foo, 1, 2, 3 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"my \\$foo = sub { shift }; [ map &\\$foo, 1, 2, 3 ]\",undef,undef]","err":""},{"code":"my $foo = \"test\\x{327}\"; $foo =~ tr/\\x{327}/\\x{326}/; [$foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"test\\x{326}\"]"},{"err_mask":"","code":"(my $foo:)//= undef","err":"","out":"","out_mask":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"$foo :\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo ://= undef;"},{"out_mask":"","out":"","err":"","code":"my $foo //= undef;","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"my $foo = undef; [ @$foo ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"it broke!\n","code":"my $foo = undef // say \"it broke!\"; [ $foo ]","err_mask":""},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"my $found = 0; 0+($found == 7) # you pass a zero to exit, it will happily use that value"},{"out":"yx\n","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $f = \"s/l/y/g;s/k/x/g\"; my $s = \"lk\\n\"; $s = do { local $_ = $s; eval($f); $_ }; printf(\"%s\", $s)"},{"out_mask":"Ã¿Ã¿","err":"","out":"10","code":"my $f = sub { [] }; @a = map { 0+ $f->($_) } 1..10;","err_mask":""},{"err":"","out":"[79761832,76426864,79761832,76426864,79761832,76426864,79761832,76426864,79761832,76426864]","out_mask":"Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err_mask":"","code":"my $f = sub { [] }; @a = map { 0+ $f->($_) } 1..10; \\@a"},{"out":"ERROR: Can't call method \"refaddr\" on unblessed reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $f = sub { [] }; @a = map { refaddr $f->($_) } 1..10;"},{"err_mask":"","code":"my $f = sub { SUB: my ($n) = @_; print \"$n \"; $n or return; @_ = $n - 1; goto SUB; }; $f->(5);","out":"5 4 3 2 1 0 ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"my.funny-str is a string\"; [ [split /(?=[. -])/], [split /[. -]/]"},{"code":"$_ = \"my.funny-str is a string\"; [ [split /(?=[. -])/], [split /[. -]/]]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"my\",\".funny\",\"-str\",\" is\",\" a\",\" string\"],[\"my\",\"funny\",\"str\",\"is\",\"a\",\"string\"]]"},{"err_mask":"","code":"my $gf = sub { (1..50) }; my $ev = sub { $_ % 2 == 0 }; print join \",\", grep { $ev->($_) }  $gf->()","err":"","out":"2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after ) = split(<-- HERE near column 132 at (eval 1) line 1, <STDIN> line 1.\n","code":"(my $good_stuff, my $throw_away) = split(â=â, $stuff);  # for comparison","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"foo\",\"bar\",\"baz\\n\"]]","err":"","code":"my @groups; my $chunk = []; for my $x (\"foo\", \"bar\", \"baz\\n\", \"x\", \"y\", \"z\") { push @$chunk, $x; if ($x =~ /\\R\\z/) { push @groups, $chunk; $chunk = []; } } push @$groups, $chunk if @$chunk; [ @groups ]","err_mask":""},{"code":"my @groups; my $chunk = []; for my $x (\"foo\", \"bar\", \"baz\\n\", \"x\", \"y\", \"z\") { push @$chunk, $x; if ($x =~ /\\R\\z) { push @groups, $chunk; $chunk = []; } } push @$groups, $chunk if @$chunk; [ @groups ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"my $h = {}; [ {}, {} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{},{}]"},{"err_mask":"","code":"my $h = '09:12:34'; $h =~ s/0(\\d)(?=(?::\\d\\d){2})/$1/r;","out":"9:12:34","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"09\",9]","err":"","code":"my $h = '09'; [ $h, 0+$h ];","err_mask":""},{"err_mask":"","code":"my %h = (a => 1); ++$_ for keys %h;","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in scalar assignment at (eval 1) line 1, near \"1)\"\n","err":"","code":"my %h = (a = 1); ++$_ for keys %h;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{a => 1}","code":"my %h = (a => 1); ++$_ for keys %h; \\%h;","err_mask":""},{"code":"my %h = (a => 1); ++$_ for values %h; \\%h;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{a => 2}","err":""},{"err_mask":"","code":"my %hash = ( 1 => '', 2 => '', 1 => '');  \\%hash","err":"","out":"{1 => \"\",2 => \"\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"my $hash = { a=>1, b=>2 }; delete $hash->{(keys %{$hash})[0]}"},{"out_mask":"","err":"","out":"","code":"my $hash = { a=>1, b=>2 }; delete $hash{(keys %{$hash})[0]}","err_mask":""},{"out_mask":"Ã¿","err":"b, 2, a, 1 at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"my %hash = (a => 1, b => 2); mySub(%hash); sub mySub { my (%hash) = @_; warn join ', ', %hash }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"1 at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"my %hash = (a => 1, b => 2); mySub(%hash); sub mySub { my (%h) = @_; warn $h{a} }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"def jkl;","code":"my %hash = ( abc => 'def', asdf => 'jkl;' ); print join ' ', @hash{abc,asdf}","err_mask":""},{"err_mask":"","code":"my %hash = ( abc => 'def', asdf => 'jkl;' ); print join ' ', @hash{abc,def}","err":"","out":"def ","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my %hash; bless \\%hash, \"SomeClass\";  ref \\%hash;   # <== tm604: \u0002*technically*\u0002 it's the referrant itself, and not the reference","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"SomeClass","err":""},{"code":"my %hash; bless \\%hash, \"SomeClass\";  ref \\%somehash;   # <== tm604: \u0002*technically*\u0002 it's the referrant itself, and not the reference","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"HASH","err":""},{"out_mask":"Ã¿","err":"","out":"1","code":"my %hash = (foo => !!1); $hash{foo} = 1","err_mask":""},{"out_mask":"Ã¿","out":"4","err":"","code":"my %hash = (foo => [ 4 ]); $ hash { 'foo' } [ 0 ]","err_mask":""},{"err":"","out":"{\"baz\":\"bra\",\"foo\":\"bar\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %hash = (foo => \"bar\", baz => \"bra\"); use JSON::XS; encode_json \\%hash"},{"out_mask":"Ã¿Ã¿Ã¿","out":"bar","err":"","code":"my %hash = (foo => 'bar'); (%hash)[1]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"bar","code":"my %hash = (foo => 'bar'); (values %hash)[0];","err_mask":""},{"err_mask":"","code":"my @hash = %hash; print @hash","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"my %hash; if ($hash{foo} eq $hash{bar}) { print \"OMG\" }","out":"OMG","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1/256\"]","err":"","code":"my %hash; keys %hash = 200; $hash{abc} = 1; [scalar %hash]","err_mask":""},{"code":"my %hash; my @array1 = qw/ 1 2 3 4 /; my @array2 = qw/ 3 4 5 /;    @hash{@array1,@array2} = ();   my @combined = sort keys %hash;    [ @combined ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3,4,5]"},{"out":"[0,\"2/8\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %hash; my %dash = (qw/a 1 b 2/); [ scalar %hash, scalar %dash ]"},{"err":"","out":"8\n16\n32\n64\n128\n256\n512\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %hash; my $prior = \"\"; for my $new (1..1000) { ++$hash{$new}; print \"$new\\n\" if $prior ne join \" \", grep $_ != $new, keys %hash; $prior = join \" \", keys %hash }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{baz => 45,bar => 34,foo => 12}","code":"my %hash; my $str = \"foo:12 bar:34 baz:45\"; @hash{'foo', 'bar', 'baz'} = $str =~ /foo:(\\d+) bar:(\\d+) baz:(\\d+)/; \\%hash","err_mask":""},{"err_mask":"","code":"my %hash; my $val1 = $hash{a}; my $val2 = $hash{b} if exists $hash{b}; [keys %hash]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"2","code":"my %hash = (one => [1, 2, 4]);","err_mask":""},{"code":"my %hash = (one => [1, 2, 4]); sub bar { \tmy $href = shift @_; \tpush @{$href->{one}}, 5; } bar(\\%hash); @{$hash{one}};","err_mask":"","out_mask":"Ã¿","out":"4","err":""},{"out":"1245","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %hash = (one => [1, 2, 4]); sub bar { \tmy $href = shift @_; \tpush @{$href->{one}}, 5; } bar(\\%hash); print @{$hash{one}};"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[2,2]","err":"","code":"my $hash = {one=>1,two=>2,three=>2}; [ grep $_ == 2, values %$hash ]","err_mask":""},{"code":"my $hash = {one=>1,two=>2,three=>2};[  @{$hash}{ grep $hash->{$_} == 2, keys %$hash } ] # then as huf said, use something like this. seems a bit pointless though","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[2,2]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"one\",1,\"two\",2]","err":"","code":"my %hash = ( one => 1, two => 2, three => 3 );  [ %hash{qw(one two)} ]","err_mask":""},{"code":"my %hash = ( one => 1, two => 2, three => 3 );  [ %hash{qw(one, two)} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"one,\",undef,\"two\",2]"},{"err":"","out":"[\"one\",\"baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %hash = (one => 'foo'); sub bar { my ($href) = @_; $href->{one} = 'baz'; } bar(\\%hash);  [ %hash ]"},{"err_mask":"","code":"my %hash = (one => 'foo'); sub bar { my $href = @_; $href->{one} = 'baz'; } bar(\\%hash);  [ %hash ]","err":"","out":"[\"one\",\"foo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my %hash = (one => two, three => four); say for keys %hash;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"one\nthree\n"},{"err_mask":"","code":"my %hash = one => two, three => four; say for keys %hash;","err":"","out":"one\n","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{foo => [3]}","code":"my %hash; push @{$hash{foo}}, 3; \\%hash","err_mask":""},{"code":"@{\\my %hash}{qw(a b)} = (1, 2); \\%hash","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"{}"},{"code":"my $hash = {ref => [1, 2, 3]}; while(my $num = $hash->{ref}->CORE::each) {print $num, \" => \";}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"each\" on unblessed reference at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"my $hashref = { 20001 => {} }; my ($key) = %$hashref; $key","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"20001","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"my $hashref = { 20001 => {} }; my ($key) = %$hr; $key"},{"out_mask":"","err":"","out":"","code":"my $hash_ref = { 'foo' => 'bar' }; $hash_ref{'foo'};","err_mask":""},{"err_mask":"","code":"my $hashref = { foo => 'bar' }; my $doesntwork = $#$hashref;","out":"ERROR: Not an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[{one => \"falcom\",three => \"Isaac Newton\",two => \"rindolf\"}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $hash_ref = {'one' => 'falcom', 'two' => 'rindolf'}; my $d = { %$hash_ref, 'three' => \"Isaac Newton\"}; [$d]"},{"err_mask":"","code":"my %hash; scalar %hash","err":"","out":"0","out_mask":"Ã¿"},{"code":"my %hash = (thing => SOME_CONSTANT() ); sub SOME_CONSTANT { 5 }; $hash{thing}","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"err_mask":"","code":"my %hash = (thing => SOME_CONSTANT); sub SOME_CONSTANT { 5 }; $hash{thing}","out":"SOME_CONSTANT","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my %hash = (x=>123); %hash = (); \\%hash","out":"{}","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{\"how strange\" => \"is this, anyway?\"}","err":"","code":"my %h = (a..z); ${%h}{\"how strange\"} = \"is this, anyway?\"; \\%{%h};","err_mask":""},{"code":"my %h = (a..z); ${%h}{\"ignore the man\"} = \"behind the curtain\"; print scalar %h; undef $h{$_} for 1..20; print scalar %h;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"6/1626/64","err":""},{"out_mask":"Ã¿Ã¿","out":"{}","err":"","code":"my %h = (a..z); ${%h}{\"ignore the man\"} = \"behind the curtain\"; undef $h{$_} for 1..20; \\%{%h};","err_mask":""},{"err_mask":"","code":"my %hb = (a => 'bleh', b => 'bluh'); my %ha = (a => 'woo', x => 'y', %hb); \\%ha;","err":"","out":"{b => \"bluh\",x => \"y\",a => \"bleh\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"4","err":"","code":"my @headers = qw(foo bar ibytes pickles);","err_mask":""},{"err":"","out":"5","out_mask":"Ã¿","err_mask":"","code":"my @headers = qw(hits bytes ihits ibytes ips);"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my %h = (); exists $h{foo}->{bar}; print exists $h{foo}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[6316287,[6316287]]","err":"","code":"my $hex = q{6060FF}; [ hex($hex), [ unpack q{L>*}, pack q{H*}, map { sprintf q{%08s}, $_; } ( $hex =~ s!^0x!!r) =~ m!(^.{2,6}|.{2,8})!g ] ]; ### How to do what hex() does with pack/unpack. Is there a cleaner / less-hackier way?","err_mask":""},{"err_mask":"","code":"my $hex = q{6060FF}; [ hex($hex), [ unpack q{L>*}, pack q{H*}, map { sprintf q{%08s}, $_; } ( $hex =~ s!^0x!!r) =~ m!(^.{2,6}|.{2,8})!g ] ]; How to do what hex() does with pack/unpack. Is there a cleaner / less-hackier way?","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"what hex\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $hex = q{6060FF}; [ hex($hex), [ unpack q{N*}, pack q{(h8)*}, $hex ] ];","out":"[6316287,[101121792]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[6316287,[1616969472]]","code":"my $hex = q{6060FF}; [ hex($hex), [ unpack q{N*}, pack q{(H8)*}, $hex ] ];","err_mask":""},{"code":"my $hex = q{6060FF}; [ hex($hex), [ unpack q{N}, pack q{H8}, q{6060FF} ] ] # How to do the equivilent of hex() with pack/unpack functions?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[6316287,[1616969472]]","err":""},{"out":"[6316287,[]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $hex = q{6060FF}; [ hex($hex), [ unpack q{N}, pack q{H*}, q{6060FF} ] ] # with H* it is only three bytes and apparently rejected by V/N/I/L"},{"code":"my $hex = q{6060FF}; [ hex($hex), [ unpack q{V*}, pack q{(h8)*}, $hex ] ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[6316287,[16713222]]","err":""},{"out":"[6316287,[16736352]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $hex = q{6060FF}; [ hex($hex), [ unpack q{V*}, pack q{(H8)*}, $hex ] ];"},{"err_mask":"","code":"my $hex = unpack(\"H*\", pack(\"Q<\", 1397463445)); my $td = pack(\"H*\", unpack(\"Q<\",$hex)); $td;","err":"","out":"6ÂÂ4F\u0013xaC0","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $h = { foo => 42 }; $h == \\%{$h}","err":"","out":"1","out_mask":"Ã¿"},{"code":"my %h = ( foo => { bar => {ber => [boor] } } ); my $ar = $h{foo}{bar}{ber}; push @$ar, 'foor';  \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{foo => {bar => {ber => [\"boor\",\"foor\"]}}}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"HASH(0x3838b88)\"]","code":"my $h = {}; [ \"$h\" ]","err_mask":""},{"out":"{\"HASH(0x39abb88)\" => undef}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h = +{}; \\%h"},{"code":" my %h; @h{(20..34)} = (); [(sort keys %h)[0..10]];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[20,21,22,23,24,25,26,27,28,29,30]"},{"err_mask":"","code":"my %h=(); %h=( 'a'=>'1', 'b'=>'2' ); %h=( 'c'=>'3', 'd'=>'4' ); for ( sort keys %h ){ print \"$_ $h{$_}\" };","out":"c 3d 4","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"{a => {b => [\"c\",\"d\",\"e\"]}}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h; @{ $h{a}{b} } = qw/c d e/; \\%h"},{"out":"eHll oowlr!d","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $h = \"Hello world!\"; $h =~ s/(.)(.)/$2$1/g; $h"},{"err_mask":"","code":"my $h = \"Hello world!\"; $h =~ s/(.)(.)/\\U$2\\E$1/g; $h","out":"EHLl oOwLr!d","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"c 3d 4","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h=(); %h=getone(); sub getone {return ('a'=>'1','b'=>'2')}; %h=gettwo(); sub gettwo { return('c'=>'3','d'=>'4')}; for ( sort keys %h ){ print \"$_ $h{$_}\" };"},{"err_mask":"","code":"my %h=(); %h=getone(); sub getone {return ('a'=>'1','b'=>'2')}; %h=gettwo(); sub gettwo { return undef}; for ( sort keys %h ){ print \"[$_] $h{$_}\" }","out":"[] ","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my %h=(); %h=getone(); sub getone {return ('a'=>'1','b'=>'2')}; %h=gettwo(); sub gettwo { return undef}; for ( sort keys %h ){ print \"$_ $h{$_}\" }","out":" ","err":"","out_mask":"Ã¿"},{"code":"my %h=(); %h=getone(); sub getone {return ('a'=>'1','b'=>'2')}; %h=gettwo(); sub gettwo { return undef}; for ( sort keys %h ){ print \"$_ $h{$_}\" };","err_mask":"","out_mask":"Ã¿","err":"","out":" "},{"out":"[{},$VAR1->[0]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $h = {}; [ $h, $h ]"},{"err_mask":"","code":"my %h=(); %h=(%h, 'a'=>'1', 'b'=>'2' ); %h=(%h, 'c'=>'3', 'd'=>'4' ); for ( sort keys %h ){ print \"$_ $h{$_}\" };","err":"","out":"a 1b 2c 3d 4","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"{key => [undef,undef,{anotherkey => \"hello\"}]}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $h; $h->{key}[2]{anotherkey} = \"hello\"; $h"},{"err_mask":"","code":"my %h=(); %h={return ('a'=>'1','b'=>'2')}; %h={ return('c'=>'3','d'=>'4')}; for ( sort keys %h ){ print \"$_ $h{$_}\" };","err":"","out":"2","out_mask":"Ã¿"},{"code":"my %h; $h{two} = sub { \\%h }; $h{two}->()->{two}->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{two => sub { \"DUMMY\" }}","err":""},{"err":"","out":"{x => {y => {z => 123}}}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h; $h{x}{y}{z} = 123; \\%h # sure"},{"err":"","out":"[3,6,5,10,8,16]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h = (map { $_ => 2*$_ } 1 .. 10); [ %h{3,5,8} ]"},{"out_mask":"Ã¿Ã¿","err":"","out":"18","code":"my %h = (map { $_ => 3*$_  } 1.. 10); { %h{(1,4,6)} }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{6 => 18,1 => 3,4 => 12}","err":"","code":"my %h = (map { $_ => 3*$_  } 1.. 10); +{ %h{(1,4,6)} }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{foo => {bar => {bizbaz => {cats => 1}}}}]","code":"my %h; my $p = \\%h; $p = $p->{$_} //= {} for qw/foo bar bizbaz/; $p->{cats} = 1; [ \\%h ]","err_mask":""},{"out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h = (one => [1,2,4]); sub bar { my ($href) = @_; push ${$href->{one}}, 5; } bar(\\%h); @{$h{one}}"},{"out":"[\"one\",1,\"three\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h = ( one => 1, two => 2 ); [ %h{qw( one three )} ]"},{"err_mask":"","code":"my %h = qw/foo bar baz ber/; say $h{foo}; my $x = 'baz'; say $h{$x}","out":"bar\nber\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my %h = qw(must 1 should 2 could 3); [ sort {$h{$a} <=> $h{$b}} qw(must should could could must could should must) ]","out":"[\"must\",\"must\",\"must\",\"should\",\"should\",\"could\",\"could\",\"could\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $hr = {a => 5}; my @arr; push @arr, %$hr; my %hash = @arr; \\%hash","err":"","out":"{a => 5}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"5","err":"","code":"my $hr = {a => 5}; my %hash; $hash{hashref}=$hr; $hash{hashref}{a}","err_mask":""},{"out":"5","err":"","out_mask":"Ã¿","err_mask":"","code":"my $hr = { asdf => 5 }; (%$hr)[1]"},{"out":"5","err":"","out_mask":"Ã¿","err_mask":"","code":"my $hr = { asdf => 5 }; (values %$hr)[0]"},{"out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $href = { foo => 42, bar => 37 }; keys %$href - 3"},{"code":"my $href = { foo => 42, bar => 37 }; keys(%$href) - 3","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"-1"},{"out":"","err":"","out_mask":"","err_mask":"","code":"my $href; %$href"},{"err_mask":"","code":"my $href; $href->{key} = {}; my $other = $href->{key}; $other->{bar} = 1; $href","out":"{key => {bar => 1}}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $href; my $other = $href->{key} ||= {}; $other->{bar} = 1; $href","err":"","out":"{key => {bar => 1}}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"not empty","err":"","code":"my $hr = {searchable => {phones => \"bullshit\"}}; unless ($hr->{searchable}->%*) { \"Empty\" } else { \"not empty\" };","err_mask":""},{"out":"Empty","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $hr = {searchable => {}}; unless ($hr->{searchable}->%*) { \"Empty\" } else { \"not empty\" };"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"find\" via package \"<html><body><div>and stuff</div></body></html>\" (perhaps you forgot to load \"<html><body><div>and stuff</div></body></html>\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $html = \"<html><body><div>and stuff</div></body></html>\"; $html->find","err_mask":""},{"out":"Hello World!\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $hw = \"Hello World!\\n\"; print $hw;"},{"code":"my %h = (x => \"abc123\", y => \"def456\"); map { tr/a-z//dc } values %h; \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{x => \"abc\",y => \"def\"}","err":""},{"out":"{x => \"abc\",y => \"def\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h = (x => \"abc123\", y => \"def456\"); tr/a-z//dc for values %h; \\%h # are you trying to do something like this"},{"code":"my $i = 0; HERE: { HERE: { HERE: { HERE: goto HERE unless $i++ > 3 } } }  print $i","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"code":"my $i = 0; while ( $i <= 10) { print; $i++; } print $_;","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$i++\"\n","code":"my $i = 5; ++$i++","err_mask":""},{"out_mask":"Ã¿","err":"","out":"0","code":"my @ids = $page_content =~ m!http://www\\.liveleak\\.com/view\\?i=(\\w{14})!g;","err_mask":""},{"out":"[[\"foo\",\"bar\",\"baz\\n\"],[\"x\",\"y\",\"z\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $idx = 0; my @group; push @{$group[/\\R$/ ? $idx++ : $idx]}, $_ for  \"foo\", \"bar\", \"baz\\n\", \"x\", \"y\", \"z\"; \\@group # something like that?"},{"out":"%01","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $imagecount = \"\"; my $foo = \"%0\" . length $imagecount . \"d\";"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,0,0]","err":"","code":"my $i; { my $foo; sub get_foo { $foo //= $i++ } } [get_foo, get_foo, get_foo]","err_mask":""},{"code":"my @in = 1..3; my @out = grep { $_++ } @in; [ \\@in, \\@out ] # far as I recall, List::UtilsBy has an explicit local $_ = $_; to avoid this sort of behaviour, so presumably ::XS doesn't have an equivalent","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[2,3,4],[2,3,4]]"},{"err_mask":"","code":"my $indents = () = \"        \" =~ /(\\t|\\s{4})/g","err":"","out":"2","out_mask":"Ã¿"},{"err":"","out":"[3,5,10,12,13]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @index; $_ = \"  * *    * ** \"; while(/\\G[^*]*\\*/gc) { push @index, pos } \\@index"},{"code":"my $ind = index(fc 'test string', fc 'STRING'); $ind;","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"out_mask":"Ã¿Ã¿","err":"","out":"-1","code":"my $ind = index('test string', 'STRING'); $ind;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"42\n","err":"","code":"my $input = 'Ù£'; say $input + 42;","err_mask":""},{"code":"my @input = map pack('H2', $_), qw(02 02 01 11 48 85 03 86 11 FB FF 42 01 00 00 08 00 00 00 00 00 00 00 86); [ join ' ', map sprintf(\"%08x\", unpack('N1', $_)), join('', @input) =~ /..../g ] # you're asking for this?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"02020111 48850386 11fbff42 01000008 00000000 00000086\"]","err":""},{"out":"666","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $input = \"Number 123 here won't be matched, but <number 666, the number of the beast> will.\"; my $match_mode = 0; while ($input =~ /(\\d+)|(<)|(>)/g) { if ($1 and $match_mode) { print $1; } if ($2) { $match_mode = 1; } if ($3) { $match_mode = 0; }}"},{"err":"","out":"666","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $input = \"Number 666 will match, but not <number 123 here>, ok?\"; my $match_mode = 1; while ($input =~ /(\\d+)|(<)|(>)/g) { if ($1 and $match_mode) { print $1; } if ($2) { $match_mode = 0; } if ($3) { $match_mode = 1; }}"},{"err_mask":"","code":"my $ip = '127.0.0.1'; $ip =~ s#(\\d+)#unpack( \"H*\", pack( \"V1\",$1))#ge; $ip","err":"","out":"7f000000.00000000.00000000.01000000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"my $ip = '127.0.0.1'; $ip =~ s#(\\d+)#unpack( \"H*\", pack( \"V1\",$1))#ge; $ip =~ s#.##g; $ip","err_mask":""},{"err":"","out":"ERROR: Substitution replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $ip = '127.0.0.1'; $ip =~ s#(\\d+)#unpack( \"H*\", pack( \"V1\",$1))#ge; $ip =~ s#.#g; $ip"},{"err_mask":"","code":"my $ip = '127.0.0.1'; $ip =~ s#(\\d+).?#unpack( \"H*\", pack( \"v\",$1))#ge; $ip","out":"7f00000000000100","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $i; sub get_foo { state $foo = $i++ } [get_foo, get_foo, get_foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,0,0]"},{"err_mask":"","code":"my $karma = 27; sub mst :() :lvalue { $karma } mst++; $karma","out":"ERROR: syntax error at (eval 1) line 1, near \":(\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $karma = 27; sub mst :lvalue { $karma } mst++; $karma"},{"err_mask":"","code":"my $karma = 27; sub mst() :lvalue { $karma } mst++; $karma","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"28","err":"","code":"my $karma = 27; sub mst :lvalue { $karma } mst()++; $karma # actually, might just be this?","err_mask":""},{"code":"my $key = 'a'; $hash{$key} = 'foo'; print $hash{$key};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":""},{"code":"my @keys = (1..10); ++$_ for @keys; \\@keys","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[2,3,4,5,6,7,8,9,10,11]","err":""},{"code":"my $L = 2**32; join \"\", reverse split //, ((reverse $L) =~ s/(\\d{3})/$1,/rg);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"4,294,967,296","err":""},{"code":"my $L = 2**32; local $\\ = ','; print for reverse unpack '(A3)*', scalar reverse $L","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"4,492,769,692,"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"4492769692,","code":"my $L = 2**32; local $\\ = ','; print reverse unpack '(A3)*', scalar reverse $L","err_mask":""},{"code":"my $L = 2**32; $L =~ s/(?<=\\d)(?=(?:\\d{3})+(?!\\d))/,/rg","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"4,294,967,296","err":""},{"err":"","out":"4,294,967,296","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $L = 2**32; $L =~ s/\\d\\K(?=(?:\\d{3})+(?!\\d))/,/rg"},{"err":"","out":"4,294,967,296","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $l = 2**32; my $s = join \"\", reverse split //, $l; $s =~ s/(\\d{3})/$1,/g; join \"\", reverse split //, $s"},{"code":"my $L = 2**32; reverse reverse($L) =~ s/(\\d{3})/$1,/rg","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"4,294,967,296","err":""},{"err_mask":"","code":"my $L = 2**32; scalar reverse join ',', unpack '(A3)*', scalar reverse $L","err":"","out":"4,294,967,296","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"stuff5","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $l = 4; \"stuff\" . ( $l + 1 );"},{"err_mask":"","code":"my $l = 4; \"stuff\" . $l + 1;","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"[{1 => 2,2 => 3},{4 => 5,3 => 4}]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $lambda = sub { shift()+1 }; @a=1..4; [{map{$_=>$lambda->($_)}@a[0..@a/2-1]},{map{$_=>$lambda->($_)}@a[@a/2..$#a]}]"},{"code":"my $last; [ map { $last = $_ // $last } ( 123, 456, undef, undef, undef ) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[123,456,456,456,456]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"123,\",\"456,\",\"undef,\",\"undef,\",\"undef\"]","err":"","code":"my $last; [ map { $last = $_ // $last } qw[ 123, 456, undef, undef, undef ] ]","err_mask":""},{"err_mask":"","code":"my $lengths = { mach => 5 }; \"%-$lengths->{mach}s\" # you want this, right?","err":"","out":"%-5s","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my $line = \"COMP2711|3713452|Warren, Ahmad|3645/2|M\"; $line =~ s/\\|(.+), (.+)\\|/$2$1/; print $line;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"COMP2711Ahmad|3645/23713452|WarrenM","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"COMP2711|3713452|Warren, Ahmad|3645/2|M","err":"","code":"my $line = \"COMP2711|3713452|Warren, Ahmad|3645/2|M\"; print $line;","err_mask":""},{"code":"my $line = \"if answer > 0: answer = answer + 2\"; if(0) { } elsif($line =~ /^\\s*if (.*): (.*)/) { print \"1 => $1, 2 => $2\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1 => answer > 0, 2 => answer = answer + 2","err":""},{"code":"my $line = \"take cat\";  my ( $verb, @others ) = split m/\\s+/, $line;  \"The verb is <$verb> and the other arguments are <@others>\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"The verb is <take> and the other arguments are <cat>"},{"err_mask":"","code":"my @list = qw(foo bar foo baz kitties meow); 3 + @list","out":"9","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{kitties => \"meow\",foo => \"baz\"}","err":"","code":"my @list = qw(foo bar foo baz kitties meow); my %hash = @list; \\%hash","err_mask":""},{"err_mask":"","code":"my @l = qw/2 4 6/; my @f; for ( my $i=0; $i<@l; $i++ ) { my $x = $l[$i]; push @f, sub { 3 * $x; }; } [ map { $_->(); } @f ];","err":"","out":"[6,12,18]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @l = qw/2 4 6/; my @f; for ( my $i=0; $i<@l; $i++ ) { push @f, sub { 3 * $l[$i]; }; } [ map { $_->(); } @f ];","out":"[0,0,0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"some foo1 string\",\"foo2\",\"foo3\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @l = qw(foo1 foo2 foo3); my $foo1 = \\ $l[0]; $$foo1 = 'some foo1 string'; \\@l"},{"err_mask":"","code":"my %map = (param1 => 'cats', param2 => 'botje'); my $str = 'foo%-33{param1}bar%{param0}'; my @params; $str =~ s/(%[^{]*) \\{ ([^{]+) \\}/push @params, $2; $1 . 's'/gex; printf $str, map {$map{$_}} @params","err":"","out":"foocats                             bar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my ($mapped, $grepped); map { $mapped = wantarray } 1; grep { $grepped = wantarray } 1; [$mapped, $grepped]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"\"]","err":""},{"code":"my %map = ('\\t' => \"\\t\", '\\r' => \"\\r\", '\\n' => \"\\n\"); my $x = q{FOO\\tBAR\\r\\n}; my $y = s/(\\\\[trn])/$map{$1}/ge; [$x, $y]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"FOO\\\\tBAR\\\\r\\\\n\",\"\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"FOO\\\\tBAR\\\\r\\\\n\",undef]","err":"","code":"my %map = ('\\t' => \"\\t\", '\\r' => \"\\r\", '\\n' => \"\\n\"); my $x = q{FOO\\tBAR\\r\\n}; my $y = s/(\\\\[trn])/$map{$1}/gre; [$x, $y]","err_mask":""},{"err_mask":"","code":"my %map = ('\\t' => \"\\t\", '\\r' => \"\\r\", '\\n' => \"\\n\"); my $x = q{FOO\\tBAR\\r\\n}; my $y = $x =~ s/(\\\\[trn])/$map{$1}/gre; [$x, $y]","err":"","out":"[\"FOO\\\\tBAR\\\\r\\\\n\",\"FOO\\tBAR\\r\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"bar\",\"baz\"]","err":"","code":"my @matches = \"foobarbaz\" =~ /(ba.)/g; \\@matches","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"here","code":"my $meth = sub { 'here' }; main->$meth","err_mask":""},{"err_mask":"","code":"my $meth = sub { 'here' }; notmain->$meth","out":"here","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my $meth = sub { 'here' }; undef->$meth","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"here","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"space\",\" \"],[\"digit\",3],[\"space\",\" \"],[\"digit\",5],[\"space\",\" \"],[\"digit\",1],[\"space\",\" \"],[\"digit\",7],[\"space\",\" \"]]","code":"my @m; push @m, $1 ? [ digit => $1 ] : [ space => $2 ] while \"foo 3 5 1 7 bar\" =~ m/(\\d+)|(\\s+)/g; \\@m","err_mask":""},{"out_mask":"","out":"","err":"","code":"my $my->{my}","err_mask":""},{"err":"","out":"ERROR: Can't redeclare \"my\" in \"my\" at (eval 1) line 1, at end of line\nCan't redeclare \"my\" in \"my\" at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my (my (my $delilah))"},{"code":"my My $my :Delilah;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: No such class My at (eval 1) line 1, near \"; my My\"\nsyntax error at (eval 1) line 1, near \"$my :\"\n","err":""},{"err_mask":"","code":"my (my $x)","err":"","out":"ERROR: Can't redeclare \"my\" in \"my\" at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"Out of memory!\n","out":"","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"my $n = 0; while(1){print $n.\" \"; $n = $n+1;}"},{"out":"[4,16]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $n = 20; my $t = 0; my @c; while ($n) { push @c, 1 << $t if $n & 1; $n >>= 1; $t++; } \\@c"},{"err_mask":"","code":"my $n = 3; my $str = q(|1|2a|3abc|4abcd|5abcde); [join q(|), (split /\\|/, $str)[0..$n]];","err":"","out":"[\"|1|2a|3abc\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $name = \"nonconvergent\"; my $s = \"Hello $name - what's up?\"; [$s]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Hello nonconvergent - what's up?\"]","err":""},{"err":"","out":"2 - two","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @names = qw(one two three); my @numbers = qw(1 2 3); for(0..$#numbers) { print $numbers[$_] . ' - ' . $names[$_] if $numbers[$_] == 2} # one option is to iterate by index rather than element"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"xx_xx_xx_xx","err":"","code":"my $name = 'xx.xx.xx.xx'; $name =~ s/\\./_/g; $name","err_mask":""},{"err":"","out":"[\"C\",\"D\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %notes = qw/0 C 2 D/; [ @notes{0,2} ]"},{"out":"b","err":"","out_mask":"Ã¿","err_mask":"","code":"my $not_really_an_array = (\"a\", \"b\"); $not_really_an_array # no arrays here"},{"err_mask":"","code":"my $n=split(/\\|/,\"one|two|three|four\");","err":"","out":"4","out_mask":"Ã¿"},{"err_mask":"","code":"'my $num = 10; my  $res = ($num > 15 and $num < 30) ? \"Num is out of range\" : \"Num is in range\"; print $res .\"\\n\";'","out":"my $num = 10; my  $res = ($num > 15 and $num < 30) ? \"Num is out of range\" : \"Num is in range\"; print $res .\"\\n\";","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $num = 10; my  $res = ($num > 15 and $num < 30) ? \"Num is out of range\" : \"Num is in range\"; print $res .\"\\n\";","err":"","out":"Num is in range\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"my $num = 42; my @array = (1, 2, qr/2$/); $num ~~ @array","err_mask":""},{"err":"","out":"ERROR: wat at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $num = 42; my @array = (1, 2, sub { die \"wat\" }); $num ~~ @array"},{"out":"1010110000001100","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $num = 50; my $bitstring = unpack 'b*', $num;"},{"err_mask":"","code":"my $num = 50; my $bitstring = unpack 'B*', $num;","err":"","out":"0011010100110000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"my $num = \"99839489327429485246\"; $num =~ tr/89/01/; oct $num","out":"163026885721590438","err":"Octal number > 037777777777 non-portable at (eval 1) line 11, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"3","err":"","code":"my $number = grep { $_ == 2 } (1, 2, 2, 2, 3); $number","err_mask":""},{"code":"my $obj = \"azertyu iopqsdfghjklmwxcvbn\"; $obj =~ s/(.{8})\\s.+?/$1/; $obj;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"azertyu iopqsdfghjklmwxcvbn"},{"out":"azertyuipqsdfghjklmwxcvbn","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $obj = \"azertyui opqsdfghjklmwxcvbn\"; $obj =~ s/(.{8})\\s.+?/$1/; $obj;"},{"code":"my $obj = \"azertyui opqsdfghjklmwxcvbn\"; $obj =~ s/(.{8})\\s[^\\n]+/$1/; [$obj;]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n"},{"err_mask":"","code":"my $obj = \"azertyui opqsdfghjklmwxcvbn\"; $obj =~ s/(.{8})\\s[^\\n]+/$1/; [$obj]","out":"[\"azertyui\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[bless( {}, 'main' ),$VAR1->[0],$VAR1->[0]]","err":"","code":"my $obj = bless {};  ($a, $b, $c) = ($obj) x 3; [$a, $b, $c]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{7 => 8,5 => 6,1 => 2}","err":"","code":"my %old = (1..10); +{ %old{1,5,7} }","err_mask":""},{"code":"my %old_hash = (1 => 2, 3 => undef); my %new_hash = reverse %old_hash; \\%new_hash","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{2 => 1,\"\" => 3}","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"1/8","code":"my %old_hash = (1 => 2, 3 => undef); my %new_hash = reverse %old_hash; %new_hash","err_mask":""},{"code":"my $one = \"1\"; my $two = $one + \"0 but true\"; [ $one ^ $one ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]"},{"err":"","out":"[0]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $one = 1; my $two = $one . \" used as a string?\"; [ $one ^ $one ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\0\"]","code":"my $one = \"1\"; [ $one ^ $one ];","err_mask":""},{"err_mask":"","code":"my $one = 1; [ $one ^ $one ];","err":"","out":"[0]","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use 'defined(@array)' (Maybe you should just omit the defined()?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my @one = qw(1 2 3); @one = (); my @two; @two = (); [ (defined(@one) ? 'defined' : 'undef'), (defined(@two) ? 'defined' : 'undef') ]","err_mask":""},{"code":"my $optional = 1; my $alternative = 1; print ([\"\", \"Optional.\", \"Alternative.\", \"Optional and alternative.\"]->[($alternative ? 2 : 0) + ($optional ? 1 : 0)])","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Optional and alternative.","err":""},{"err_mask":"","code":"my $orig = 'abcdef'; my $str = $orig =~ s/(cde)//r; my $removed = $1; [$orig, $str, $removed]","err":"","out":"[\"abcdef\",\"abf\",\"cde\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"lemmings!!!(eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"my $orig = $SIG{__WARN__}; local $SIG{__WARN__} = sub { my $warn = shift; $warn =~ s/ at /!!!/g; local $SIG{__WARN__} = $orig; warn $warn }; warn 'lemmings' # could just double-local it","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't redeclare \"our\" in \"my\" at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my (our $x);"},{"out":"[\"d\",\"e\",\"f\",\"g\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @out; { local our @tmp; 'abcdefghi' =~ /c(?:(.)(?{ local @tmp = (@tmp, $^N) })){4}(?{ @out = @tmp })/ or die } \\@out"},{"err":"","out":"[\"f\",\"g\",\"h\",\"i\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @out; { local our @tmp; 'abcdefghi' =~ / (?:(.)(?{ local @tmp = (@tmp, $^N) })){4}(?{ @out = @tmp }) (?= $ ) /x or die } \\@out"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't localize through a reference at (eval 1) line 1, <STDIN> line 1.\n","code":"my @out; { my $tmp = []; 'abcdefghi' =~ /c(?:(.)(?{ local @$tmp = (@$tmp, $^N) })){4}(?{ @out = @$tmp })/ or die } \\@out","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"d\",\"e\",\"f\",\"g\"]","code":"my @out; { our @tmp; 'abcdefghi' =~ /c(?:(.)(?{ local @tmp = (@tmp, $^N) })){4}(?{ @out = @tmp })/ or die } \\@out","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"bar\",\"baz\",\"quux\",\"teeen\"]","code":"my @packets = qw(foo=ba r=baz= quux =teeen); my @chunks; my $prev = ''; for my $part (@packets) { my @pieces = split /=/, $part, -1; $pieces[0] = $prev . $pieces[0]; $prev = pop @pieces; push @chunks, @pieces; } push @chunks, $prev; \\@chunks","err_mask":""},{"out":"ERROR: Undefined subroutine &CORE::print called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $p = \\&CORE::print; $p->(\"foo\")"},{"code":"my $pi = atan2(0, -1); my $x = $pi; [ $pi, map { $x *= 1e10; ($x - int $x)*1e10;  } 1..10 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"3.14159265358979\",\"8979301452.63672\",0,0,0,0,0,0,0,0,0]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"['31415926535',\"0.897930145263672\"]","err":"","code":"my $pi = atan2(0, -1); $pi *= 1e10; [ int $pi, $pi - int $pi ]","err_mask":""},{"code":"my $pi = atan2(0, -1); $pi *= 1e20; [ int $pi, $pi - int $pi ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"3.14159265358979e+20\",0]"},{"code":"my %pool = (param0 => 'a', param1 => 'b'); [ map { $pool{$_} } 'param1', 'param0' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"b\",\"a\"]","err":""},{"err_mask":"","code":"my %pool = (param0 => 'a', param1 => 'b'); [ @pool{'param1', 'param0'} ]","out":"[\"b\",\"a\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my %pool = qw(param0 altreus param1 cats); my $str = 'foo%-33{param1}bar%{param0}'; my @params; $str =~ s/(%[^{]*) \\{ ([^{]+) \\}/push @params, $pool{$2}; $1 . 's'/gex; printf $str, @params","out":"foocats                             baraltreus","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo                                 bar","err":"","code":"my %pool = qw(param0 altreus param1 cats); my $str = 'foo%-33{param1}bar%{param0}'; my @params; $str =~ s/(%[^{]*) \\{ ([^{]+) \\}/push @params, $pool{\"param$2\"}; $1 . 's'/gex; printf $str, @params","err_mask":""},{"err":"","out":"c","out_mask":"Ã¿","err_mask":"","code":"my $pos = 3; my $ref = '1'; my $seq = [qw(a b c d e f g h i j)]; join '', @{$seq}[($pos - 1)..(($pos-2) + length($ref))] # off by 2, I think?"},{"code":"my $p = \"(part1).*(part2)\"; \"foopart1barpart2\" =~ /$p/; print \"$1 $2\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"part1 part2","err":""},{"err_mask":"","code":"my $prev; for my $cur (\"A\" .. \"D\") { print \"($prev $cur) \"; } continue { $prev = $cur; }","out":"( A) (A B) (B C) (C D) ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":"","code":"my $_ = q,asdf \"foo\"='bar baz',; my $h = 0x20000; my %h; s/(([\"'])(?:[^\"']+|\\\\.|(?!\\2).)*\\2)/$h{chr $h}=$1;chr($h++)/ge; my @words = split ' '; $h = chr($h-1); s/([\\x{20000}-$h])/$h{$1}/g for @words; \\@words;","err_mask":""},{"err_mask":"","code":"my $_ = q, echo foo bar=baz hmm=\"1 2 3\" nn='aa bb',; my $h = 0x20000; my %h; s/(([\"'])(?:[^\"']+|\\\\.|(?!\\2).)*\\2)/$h{chr $h}=$1;chr($h++)/ge; my @words = split /\\s+/; $h = chr($h-1); s/([\\x{20000}-$h])/$h{$1}/g for @words; \\@words;","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my qw( $foo ); $foo = 123; $foo; ### Why does this not work?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: No such class qw at (eval 1) line 1, near \"; my qw\"\n"},{"err":"","out":"HASH","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $r = bless [], \"HASH\";  ref $r"},{"code":"my @rc; my @vals = ('a','b','c'); (0 ? @rc : $rc[0]) = @vals; \\@rc","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\"]","err":""},{"out":"[3]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my @rc; my @vals = ('a','b','c'); 0 ? @rc : $rc[0] = @vals; \\@rc"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\"]","code":"my @rc; my @vals = ('a','b','c'); (1 ? @rc : $rc[0]) = @vals; \\@rc","err_mask":""},{"code":"my @rcolors = (\"red\", \"orange\", \"color green\"); my $count = 0; for (@rcolors) { last if /color green/; } continue { $count++; } $count; # seems unlikely","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"err_mask":"","code":"my $r = \\&CORE::ref; $r->([])","err":"","out":"ARRAY","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: failed at (eval 1) line 1, <STDIN> line 1.\n","code":"my $readfromfile = '[x'; my $re = eval { qr/$readfromfile/; 1 } or die 'failed'; [ $re ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]","code":"my $re = 'asdf'; ['asdfasdf' =~ /^\\Q$re\\E.*$/]","err_mask":""},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $re = 'asdf\\E.*'; ['asdfasdf' =~ /^\\Q$re$/]"},{"err":"","out":"{baz => \"moomoomoomoo\",foo => \"moomoomoo\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $records = { foo => \"bar\", baz => \"quux\" }; s/./moo/g for values %$records; $records"},{"err":"","out":"ERROR: Experimental values on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $recurse = sub { ref ? __SUB__->($_) : say for values $_[0] }; $recurse->({x => 123, y => [qw(a b c)]}) # this"},{"err":"","out":"#646464","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my ($red, $green, $blue) = (100, 100, 100); sprintf '#%02x%02x%02x', $red, $green, $blue;"},{"err":"","out":"1\n2\n3\n4\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $ref = [1,2,3,4]; for my $item (@$ref) { print $item, \"\\n\" }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3,\"hi\"]","err":"","code":"my $ref = [1,2,3]; push @{$ref}, \"hi\"; $ref","err_mask":""},{"err":"","out":"{5 => \"floop\",3 => \"baz\",4 => \"quux\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $ref = { 1 => foo => 2 => bar => 3 => baz => 4 => quux => 5 => 'floop' }; %{ $ref } = %{ $ref }{ (reverse sort keys %$ref)[0 .. 2] }; $ref # joobie"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $ref = \\42; ${$ref} = \"hi\";","err_mask":""},{"out":"10","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $ref = [[8],[9],[10]]; @{$ref}[0,1,2]->[0]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"][\"\n","code":"my $ref = [[8],[9],[10]]; @{$ref}[0,1,2][0]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"SCALAR","code":"my $ref = do { \\ my $foo; }; ref $ref","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"42","code":"my $ref = \\&foo; $ref->(21);  sub foo { $_[0] * 2 }","err_mask":""},{"code":"my $refName = [ 'one', 'two', 'three', 'four', 'five' ];  my @slice = (1,3);  my @values = @{$refName}[@slice];  \\@values","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"two\",\"four\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"two\",\"four\"]","code":"my $refName = [ 'one', 'two', 'three', 'four', 'five' ];  my @values = @{$refName}[1,3];  \\@values","err_mask":""},{"code":"my $ref = [ qw/ a b c / ]; [ @{ $ref }[1,2] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"b\",\"c\"]"},{"out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $ref = [qw/foo bar baz/]; for $i (keys $ref) { print \"$i \"; }"},{"code":"my $re = \"motd \\\\^(.*)\"; [ map /$re/, 'motd ^something' ] # vs. /motd \\^/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"something\"]","err":""},{"err_mask":"","code":"my @replacements = (['foo', 'bar', 'baz'], ['quux']); $replacements[0][0]","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"my $re = '/projects/test/(.*)'; [ \"/projects/test/vkAuth?code=edb31139a2f04d22a8\" =~ $re ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"vkAuth?code=edb31139a2f04d22a8\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"test\",\"vkAuth?code=edb31139a2f04d22a8\"]","code":"my $re = '/projects/(\\w+)/(.*)'; [ \"/projects/test/vkAuth?code=edb31139a2f04d22a8\" =~ $re ]","err_mask":""},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $re = '/projects/(\\w+)/test/(.*)'; [ \"projects/test/vkAuth?code=edb31139a2f04d22a8\" =~ $re ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"qr/[[]/u","code":"my $re = qr/[[]/","err_mask":""},{"code":"my $re = qr/ blah \\n | \\n blah1 \\n | \\n yada/x; print \"Failed\\n\" if 'testing' =~ $re","err_mask":"","out_mask":"","err":"","out":""},{"out":"Match","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $re = qr/^To: .*helpme\\@mydomain.com/; 'To: Some person<helpme@mydomain.com> lalala' =~ $re ? \"Match\" : \"No match\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,\"\",\"\"]","code":"my $re = qr/(?<!x)(x+)(??{ my $len = length $1; \"y{$len}\" })(?!y)/; [ map { scalar $_ =~ $re } qw(xxyy xxy xyy) ]","err_mask":""},{"out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @res = map { chomp; $_ if (-f $_) } qw(dupes.txt allfiles.bak.txt hahaha.setnhue); print join(' ', @res) . \"\\n\";"},{"err_mask":"","code":"my ($result) = \"a numeric example: 42\" =~ /(\\d+)/; $result # note the lack of \\","err":"","out":"42","out_mask":"Ã¿Ã¿"},{"code":"my $result = do { \"my string\" for 1 .. 8 };  [$result]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"out_mask":"","out":"","err":"","code":"my $result = do { \"my string\" for 1 .. 8 };  $result","err_mask":""},{"code":"my $result; if (0) { $result = \"if\"; } elsif (1) { $result = \"elsif\"; } else { $result = \"else\"; } [$result]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"elsif\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.0000000000143531262539072984","code":"my $result = sprintf '%.28f', '1.43531262539073e-11'; { local $/ = '0'; 1 while chomp($result) } $result # let perl work it out","err_mask":""},{"code":" my $result = sub { my $str = \"foo:12 bar:34 baz:45\"; $str =~ /foo:(?<foo>\\d+) bar:(?<bar>\\d+) baz:(?<baz>\\d+)/; return \\%+ }->(); 'x: 78' =~ /\\w+: (?<whatevs>\\d+)/; +{ %$result } # yeah, you'll just get the results from whichever regex is in the current scope","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{whatevs => 78}","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[10,1,2]","err":"","code":"my $ret = my ($x, $y) = 1..10; [ $ret, $x, $y ];","err_mask":""},{"code":"my $ret = my ($x, $y) = 9..19; [ $ret, $x, $y ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[11,9,10]"},{"err_mask":"","code":"my $ret = my ($x, $y, @z) = 9..19; [ $ret, $x, $y, \\@z ]; # For those wondering, the right way to grab the rest of the elements.","err":"","out":"[11,9,10,[11,12,13,14,15,16,17,18,19]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[2,9,10,[9,10]]","code":"my $ret = my @z = my ($x, $y) = 9..19; [ $ret, $x, $y, \\@z ];","err_mask":""},{"out":"hello, here is my message","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $return = print \"hello, here is my message\";   $return"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,2,3]","err":"","code":"my @rocks = qw (granite rubble lava slate); [ grep { $rocks[$_] =~ /a/ } 0..$#rocks ]","err_mask":""},{"out":"{IV => 4,II => 2,V => 5,I => 1,III => 3}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %roman; sub r :lvalue { $roman{$_[0]} }  ( r(\"I\"), r(\"II\"), r(\"III\"), r(\"IV\"), r(\"V\") ) = 1..5;  \\%roman"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"2/8\",0]","err":"","code":"my %s = (1,2,3,4,5,6); my $pre = %s; delete @s{keys %s}; [$pre, scalar %s]","err_mask":""},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"my %s = (1,2,3,4,5,6); %s+1"},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"my %s = (1,2,3,4,5,6); scalar keys %s"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"2/8\",2,3]","code":"my %s = (1,2,3,4,5,6); [ scalar %s, 0+%s, 0+keys %s ]","err_mask":""},{"err_mask":"","code":"my %s = (1,2,3,4,5,6); [ scalar %s, 1+%s, 0+keys %s ]","err":"","out":"[\"2/8\",3,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1-2-3,4,5","code":"my $s = \"1,2,3,4,5\"; join \"-\", split \",\", $s, 3;","err_mask":""},{"err_mask":"","code":"my $s1 = q#([A-Z]+)# ; my $s2 = q#([a-z]+)#; my @foo = (\"HELLO-hi\" =~ /$s1-$s2/); [@foo]","out":"[\"HELLO\",\"hi\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"ab","code":"my ($s1, $s2) = qw/abc abx/; my $prefix = ($s1 ^ $s2) =~ /\\A(\\0*)/ ? substr($s1, 0, length $1) : ''; $prefix","err_mask":""},{"out":"[7,\" \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $s = \"3 5 1 7 \";  my @m = $s =~ /^(?:(\\d)(\\s))+$/g; \\@m;"},{"out":"[7,\" \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $s = \"3 5 1 7 \";  my @m = $s =~ /^(?:(\\d)(\\s))+$/; \\@m;"},{"err_mask":"","code":"my $s = \"aabaaaaaaaaaaaab\"; @x = /(a++b)/; [@x]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"code":"my $s = \"abcdefghijklmnopqrstuvwxyz\"; $s =~ tr/a-e/A-E/; [$s]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ABCDEfghijklmnopqrstuvwxyz\"]"},{"code":"my $s = 'ABC'; $s =~ s/([A-Za-z])/join '', map chr(ord ^ 32), split '', $1/ge; $s   # pretty, portable, uses s//, what's not to like?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"abc"},{"code":"my $s = \"A#B\"; $s =~ s/[#]//; [ $s ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"AB\"]"},{"out":"ARRAY(0x4ee2b88)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $scalar = [1,2,3]; \"$scalar\""},{"code":"my $scalar = [1,2,3]; $scalar","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3]"},{"err_mask":"","code":"my $search = \"hot chicks\"; $search =~ tr/ /%20/; print $search","out":"hot%chicks","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $search = \"hot chicks\"; $search =~ tr/hot/123/; print $search","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"123 c1icks","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hot+chicks","code":"my $search = \"hot chicks\"; $search =~ tr/ /+/; print $search","err_mask":""},{"err":"","out":"[\"ILMT::HIN::PAN::UTF2WX\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $search_path = \"ILMT::HIN::PAN\"; [ grep /^${search_path}::[^:]+$/, \"ILMT::HIN::PAN::UTF2WX\" ]"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"my $search_path = \"ILMT::HIN::PAN\"; [ grep /^${search_path}::[^:]+$/, \"ILMT::HIN::PAN::UTF2WX::UTF2WX\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{one => 1,three => 3,two => 2}","code":"my %seen; my $i = 0; $seen{$_} = ++$i for 'one','two','three'; \\%seen","err_mask":""},{"code":"my %seen; my $i = 0; $seen{''} = ++$i; \\%seen","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{\"\" => 1}","err":""},{"err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my %seen; $seen{''} = 123; print $seen{''};"},{"err_mask":"","code":"my %seen; $seen{foo} // 1; \\%seen","err":"","out":"{}","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"{}","err":"","code":"my %seen; $seen{foo}; $seen{bar}; \\%seen","err_mask":""},{"code":"my %seen; $seen{''} //= keys(%seen)+1; print $seen{''}.\"\\n\";","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"2\n"},{"out_mask":"Ã¿","out":"2","err":"","code":"my %seen; $test=\"one\"; $seen{$test} //= keys(%seen)+1; print $seen{$test};","err_mask":""},{"err_mask":"","code":"my %seen; $test=\"one\"; $seen{$test} //= keys(%seen); print $seen{$test};","err":"","out":"1","out_mask":"Ã¿"},{"err":"","out":"{one => []}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %seen; $test=\"one\"; $seen{$test} = [keys(%seen)]; \\%seen"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{one => [\"one\"]}","code":"my %seen; $test=\"one\"; $seen{$test} //= [keys(%seen)]; \\%seen","err_mask":""},{"code":"my ( $self ) = @_;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"my ( $self ) = $_;","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"my $self = bless {}; $self->goats();","out":"ERROR: Can't locate object method \"goats\" via package \"main\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",2,3]","err":"","code":"my $self = +{}; $self->{messages} = [1,2,3]; $self->{messages}->[0] = \"a\"; $self->{messages}","err_mask":""},{"code":"my $sentence = \" I saw the the router.\"; [$sentence =~ /([a-zA-Z]+)\\s+\\1/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"the\"]"},{"err":"","out":"[[4],[5],[6],[],[4],[4,5],[4,5,6]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @sets_list1 = (4,5,6); [ (map [ $_ ], @sets_list1), (map [ @sets_list1[0..$_] ], -1..$#sets_list1) ];"},{"err_mask":"","code":"my $s = \"foo 3 5 1 7 bar\";  my @m = $s =~ /(?:(\\d)(\\s))/g; \\@m;","out":"[3,\" \",5,\" \",1,\" \",7,\" \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $s = \"foo 3 5 1 7 bar\";  my @m = $s =~ /(\\d)(\\s)/g; \\@m;","out":"[3,\" \",5,\" \",1,\" \",7,\" \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $s = \"foo 3 5 1 7 bar\";  my @m = $s =~ /(?:(\\d)(\\s))/g; \\@m;  # JQKP","out":"[3,\" \",5,\" \",1,\" \",7,\" \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $s = \"foo 3 5 1 7 bar\";  my @m = $s =~ /(?:(\\d)(\\s))/g; \\@m; # wasn't your earlier example already capturing what you wanted?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[3,\" \",5,\" \",1,\" \",7,\" \"]"},{"err_mask":"","code":"my $s = \"foo 3 5 1 7 bar\";  my @m = $s =~ /(?:(\\d)(\\s))/g; say join \"|\", @m;  # JQKP","err":"","out":"3| |5| |1| |7| \n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $s = \"foo\\r\\nbar\\r\\nbaz\\r\\n\"; $s =~ s/\\R(?=.)//g; [ $s ];","err":"","out":"[\"foobarbaz\\r\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":" my ($sha) = split(' ', readpipe(\"sha1sum\", $filename));"},{"out":"[\"Hello  My name is .\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $s = \"Hello (hey) My name is (rindolf).\"; $s =~ s/\\([^)]*\\)//g; [$s]"},{"out":"Matched <Hello>\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $s = \"Hello.label\"; if (my ($m) = $s =~ /^(.*)\\.label$/) { print \"Matched <$m>\\n\"; }"},{"err_mask":"","code":"my $s = \"Hello\" [ref($s)]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"\"Hello\" [\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"my $s = \"Hello\"; [ref($s)]","err_mask":""},{"code":"my $s = \"Hello\"; [($s eq \"Good\" or \"Way\")]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Way\"]"},{"code":"my $s = \"Hello\"; $s .= \" rrman!\"; [$s]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Hello rrman!\"]","err":""},{"err":"","out":"[\"     Hello\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $s = \"      Hello\"; $s =~ s/^\\s//; [$s]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Hello\"]","err":"","code":"my $s = \"      Hello\"; $s =~ s/^\\s+//; [$s]","err_mask":""},{"out":"[\"hello world 120423424 one two three\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $s = \"hello world <120423424> one two three\"; $s =~ s/\\A((?:\\S+\\s+){2})<([0-9]+)>/$1$2/; [$s]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hello world 120423424 one two three\"]","code":"my $s = \"hello world <120423424> one two three\"; $s =~ s/\\A(?:\\S+\\s+){2}\\K<([0-9]+)>/$1/; [$s]","err_mask":""},{"code":"my $s = \"Hello World\"; $s=~ /Wor/; [$`]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Hello \"]"},{"err_mask":"","code":"my %sieve; my @primes = (2,3); my ($p_i, $p, $q, $n)=(1,3,9,3); push @primes, do { { $n += 2; if ( my $s = delete $sieve{$n} ) { push @{$sieve{$n + $_}}, $_ for @$s; redo } elsif ( $n < $q ) { $n } else { push @{$sieve{$q + $p*2}}, $p * 2; $p = $primes[++$p_i]; $q = $p*$p; redo } } } until @primes >= 1000; \\%sieve;","out":"{7939 => [34],7967 => [62],7925 => [10],8051 => [166],7973 => [134],8023 => [142],7965 => [118],7991 => [122],7923 => [38,6],7931 => [22,14],8003 => [106],7955 => [86,74],7943 => [94,26],7979 => [158],7957 => [146],7975 => [58],7935 => [46],7995 => [82]}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my %sieve; my @primes = (2,3); my ($p_i, $p, $q, $n)=(1,3,9,3); push @primes, do { { $n += 2; if ( my $s = delete $sieve{$n} ) { push @{$sieve{$n + $_}}, $_ for @$s; redo } elsif ( $n < $q ) { $n } else { push @{$sieve{$q + $p*2}}, $p * 2; $p = $primes[++$p_i]; $q = $p*$p; redo } } } until @primes >= 100; \\@primes;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541]","err":""},{"err_mask":"","code":"my %sieve; my @primes = (2,3); my ($p_i, $p, $q, $n)=(1,3,9,3); push @primes, do { { $n += 2; if ( my $s = delete $sieve{$n} ) { push @{$sieve{$n + $_}}, $_ for @$s; redo } elsif ( $n < $q ) { $n } else { push @{$sieve{$q + $p*2}}, $p * 2; $p = $primes[++$p_i]; $q = $p*$p; redo } } } until @primes >= 100; \\%sieve;","out":"{551 => [38],543 => [6],559 => [26],553 => [14],545 => [10],575 => [46],561 => [34,22]}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"llama\",\"lamal\",\"amall\",\"malla\",\"allam\"]","err":"","code":"my $s = \"llama\"; [ map { substr($s, $_).substr($s, 0, $_) } 0..4 ]","err_mask":""},{"out_mask":"","err":"Warning: something's wrong at (eval 1) line 1, <STDIN> line 1.\nWarning: something's wrong at (eval 1) line 1, <STDIN> line 1.\nWarning: something's wrong at (eval 1) line 1, <STDIN> line 1.\n","out":"","code":"my $s; my $c = sub { warn $s }; for $s (1,2,3) { $c->(); }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"2 3 5 7 0%1","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @some_array = qw/0 1 2 3 4 5 6 7 8 9 10/; my (@primes, $zero) = @some_array[2,3,5,7,0]; print \"@primes%\"; print !defined $zero;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"One\",\"Three\",\"Five\"]","code":"my $s = \"<One> Two <Three> Four <Five>\"; [$s =~ /<([^>]+)>/g]","err_mask":""},{"err_mask":"","code":"my $s = \"one.two.three\"; my $count = $s =~ tr/././; [$count]","out":"[2]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"... foo             => bar","err":"","code":"my $space = 15; printf(\"... %-${space}s => %s\", \"foo\", \"bar\");","err_mask":""},{"err_mask":"","code":"my $space = 15; printf(\"... %${space}s => %s\", \"foo\", \"bar\");","out":"...             foo => bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $space = 15; printf(\"... %s%${space}s => %s\", \"foo\", \"\", \"bar\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"... foo                => bar"},{"err_mask":"","code":"my $s = q{abc}; [ $s =~ /(?:abc(foo|bar|baz)|)/ ]; # anno, seems it does returns undef.","err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","code":"my $s = q{abc}; [ $s =~ /(?:abc(foo|bar|baz)|)/ # anno, seems it does returns undef.","err_mask":""},{"err_mask":"","code":"my $s = q{foo=bar=baz}; my $p = qr/=(.*?)=/; my $r = q{,$1,}; $s =~ s/$p/$r/re;","out":"foo,$1,baz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foobaz","err":"","code":"my $s = q{foo=bar=baz}; my $p = qr/=(.*?)=/; my $r = q{,$1,}; $s =~ s/$p/$r/ree;","err_mask":""},{"err":"","out":"foo,bar,baz","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $s = q{foo=bar=baz}; my $p = qr/=(.*?)=/; my $r = q{\",$1,\"}; $s =~ s/$p/$r/ree"},{"err":"","out":"","out_mask":"","err_mask":"","code":"my $s = q{foo=bar=baz}; my $p = qr/=/; my $r = ','; $s = s/$p/$r/;"},{"code":"my $s = q{foo=bar=baz}; my $p = qr/=/; my $r = ','; $s = s/$p/$r/r;","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"my $s = q{foo=bar=baz}; my $p = qr/=/; my $r = ','; $s =~ s/$p/$r/rg;","err":"","out":"foo,bar,baz","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my sql $db: cool cool","out":"ERROR: No such class sql at (eval 1) line 1, near \"; my sql\"\nsyntax error at (eval 1) line 1, near \"$db:\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $s = qq{ 0xFF }; [ 0+$s ];","out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"my $s = qq{ 1234.5 }; [ 0+$s ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"1234.5\"]"},{"code":"my $s = qq{Hello \"World\"!}; [$s]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Hello \\\"World\\\"!\"]"},{"err_mask":"","code":"my $s = 'some text'; my $f = 's/x/s/g; s/o/a/g;'; eval $f for $s; $s # if you want to limit the scope... why is there a string eval involved anyway","err":"","out":"same test","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $_ = \"â\"; s/(.)/sprintf('\\\\u%04x', ord \"$1\")/ger","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"x1y-x2y-x3y","code":"my $s = sub { \"x${_}y\" }; join '-', map $s->(), 1..3;","err_mask":""},{"err_mask":"","code":"my (state $foo)","err":"","out":"ERROR: Can't redeclare \"state\" in \"my\" at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"{ my $state_var sub function_that_uses_state_var { ... } }","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$state_var sub function_that_uses_state_var \"\nsyntax error at (eval 1) line 1, near \"} }\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"{ my $state_var; sub function_that_uses_state_var { ...; } }"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"my $str = \"001.html\"; my @pats = (qr/^\\d\\d\\d\\.html/); print \"fail\" unless $str ~~ @pats;"},{"code":"my $str = \"001.html\"; my @pats = (qr/\\d\\d\\d\\.html/); print \"fail\" unless $str ~~ @pats;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"my $str = \"001.html\"; my @pats = (qr/\\d\\d\\d\\.html); print \"fail\" unless $str ~~ @pats;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ok","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $str = \"001.html\"; my $re = qr/^\\d\\d\\d\\.html/;  $str =~ /$re/ ? \"ok\" : \"fail\""},{"code":"my $str = \"\\0\"; [ $str ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\0\"]","err":""},{"err":"","out":"1234,56","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = '123456'; substr $str, -2, 0, ','; $str"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[123,\"AG\",3,\"GC\",\"AT\",422,\"TG\",3]","err":"","code":"my $str = \"123AG3GCAT422TG3\"; my @groups = $str =~ m/(\\d+|[[:alpha:]]{2})/g; \\@groups","err_mask":""},{"code":"my $str = \"13month\"; my ($N, $dep) = $str =~ m/(\\d+)(\\w+)/; print \"$N; $dep\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"13; month"},{"code":"my $str = \"#     18       0     18      0 Chunk     17:25:25 17:25:25 2    arabidopsis_thaliana_core_28_81_10.analysis_description\"; [split /\\s+/, $str]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"#\",18,0,18,0,\"Chunk\",\"17:25:25\",\"17:25:25\",2,\"arabidopsis_thaliana_core_28_81_10.analysis_description\"]"},{"err_mask":"","code":"my $str = \"\\23\\53\\52\"; $str # Grinnz_","err":"","out":"\u0013+*","out_mask":"Ã¿Ã¿Ã¿"},{"code":"my $str = \"\\\\23\\\\53\\\\52\"; $str =~ s/\\\\(\\d\\d)/chr $1/eg; $str","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"\u001754"},{"code":"my $str = \"\\23\\53\\52\"; $str =~ s/\\\\(\\d\\d)/chr $1/eg; $str","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"\u0013+*"},{"out_mask":"Ã¿Ã¿Ã¿","out":"\u0013+*","err":"","code":"my $str = \"\\\\23\\\\53\\\\52\"; $str =~ s/\\\\(\\d\\d)/chr oct $1/eg; $str","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$1 / 2 $1 / 2 $1 / 2 $1 / 2","err":"","code":"my $str = '2 4 8 16'; my $match = '(\\d+)'; my $subst = '$1 / 2'; $str =~ s/$match/$subst/ge; $str","err_mask":""},{"err_mask":"","code":"my $str = \"4 8 16 7\"; $str =~ s{(\\d+)}{$1 / 2}ge; print $str","out":"2 4 8 3.5","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"aabbcc","err":"","code":"my $str = \"aabbcc\"; $str =~ s/((\\w)\\1)/ $1 /g; $str","err_mask":""},{"out_mask":"Ã¿","err":"","out":"3","code":"my $str = \"aabbcc\"; $str =~ s/(\\w)\\1/ $& /g;","err_mask":""},{"err":"","out":" aa  bb  cc ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"aabbcc\"; $str =~ s/(\\w)\\1/ $& /g; $str"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":" aa  bb  cc ","code":"my $str = \"aabbcc\"; $str =~ s/((\\w)\\2)/ $1 /g; $str","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"c\",\"h\",\"h\"]","err":"","code":"my $str = \"a b c d e f g h i j h k l\"; [ (split \" \", $str)[2,5-8,10] ]","err_mask":""},{"err":"","out":"[\"c\",\"f\",\"g\",\"h\",\"i\",\"h\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"a b c d e f g h i j h k l\"; [ (split \" \", $str)[2,5..8,10] ]"},{"code":"my $str = 'abcdefghijklmnopqrstuvwxyz'; [ join '', split /(.)../, $str ] # depends on how you define 'easiest'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"adgjmpsvyz\"]","err":""},{"err":"","out":"cfilorux","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = 'abcdefghijklmnopqrstuvwxyz'; join '', $str =~ /..(.)/g"},{"code":"my $str = 'abcdefghijklmnopqrstuvwxyz'; $str =~ s/..(.)/$1/gr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"cfiloruxyz"},{"err_mask":"","code":"my $str = 'abc def'; [ $str =~ m/^(\\w*)/ ]","out":"[\"abc\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = 'abc def'; [ $str =~ m/^(\\w*)/; ]"},{"out":"cde","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = 'abcdef'; $str =~ s/(cde)//; my $removed = $1; $removed"},{"code":"my $str = 'abcdef'; $str =~ s/(cde)//; my $removed = $1; [$str, $removed]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"abf\",\"cde\"]"},{"err_mask":"","code":"my $str = 'abc def'; [ $str =~ /^(\\w*)/; ]","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = 'abc def'; [ $_ =~ /^(\\w*)/; ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"a_b_c_da_b_c","code":"my $str = \"a_b_c_d\"; my $newstr = $str =~ s/_[^_]*$//r; print $str, $newstr","err_mask":""},{"err_mask":"","code":"my $str = 'abcd'; substr($str, 2, 2).substr($str, 0, 2)","out":"cdab","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"Abc\",\"aBc\",\"ABc\",\"abC\",\"AbC\",\"aBC\",\"ABC\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"abc\"; my $len = length $str; my $copy = $str; my @rslt; for(1..2**$len-1) { my $idx = 0; do { substr($copy, $idx, 1) ^= \" \" } until substr($copy, $idx, 1) eq uc substr($str, $idx++, 1); push @rslt, $copy } \\@rslt"},{"err":"","out":"[\"Anna\",\"barbara\",\"cindy\",\"deborah\",\"ellen\",\"fiona\",\"greta\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"Anna: barbara (>= 0.6.16), cindy (>= 0.6.16), deborah (>= 2.7), ellen (= 1.5.3-5+deb7u1), fiona (>= 1.4.2), greta (>= 1.4.0)\"; my @girls = $str =~ /\\b([a-z]+)\\b/ig; [@girls]"},{"out":"[\"\\303\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"ÃÃ¶\"; [ $str =~ /([[:upper:]])/ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"woot","err":"","code":"my $str = '{ awf wv qwea vwev eaga }END'; return \"woot\" if ($str =~ m#^{.*}END$#);","err_mask":""},{"err":"","out":"[\"vivek\",\"jena\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"Buyer information:vivek jena\"; my ($first, $second) = $str =~ /:(\\w+)\\s+(\\w+)/; [$first, $second]"},{"code":"my $str = '{f.43.fq34.gf.34gfeg.ea.greags sdfasfd sd {} s{S}D F{SA}D{ FSA}D{ }},'; my ($return) = $str =~ m#^({.*?}).*#; $return","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{f.43.fq34.gf.34gfeg.ea.greags sdfasfd sd {}"},{"err_mask":"","code":"my $str = \"foo:12 bar:34 baz:45\"; $str =~ /foo:(?<foo>\\d+) bar:(?<bar>\\d+) baz:(?<baz>\\d+)/; \\%+","err":"","out":"{}","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{baz => 45,foo => 12,bar => 34}","err":"","code":"my $str = \"foo:12 bar:34 baz:45\"; $str =~ /foo:(?<foo>\\d+) bar:(?<bar>\\d+) baz:(?<baz>\\d+)/; +{ %+ }","err_mask":""},{"code":"my $str = \"foo:12 bar:34 baz:45\"; $str =~ /foo:(?<foo>\\d+) bar:(?<bar>\\d+) baz:(?<baz>\\d+)/; $+{foo}","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"12"},{"err":"","out":"[\"baz\",\"bar\",\"foo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"foo:12 bar:34 baz:45\"; $str =~ /foo:(?<foo>\\d+) bar:(?<bar>\\d+) baz:(?<baz>\\d+)/; [ keys %+ ]"},{"code":"my $str = \"foo:12 bar:34 baz:45\"; $str =~ /foo:(?<foo>\\d+) bar:(?<bar>\\d+) baz:(?<baz>\\d+)/; { %+{keys %+} }","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"12"},{"out":"{baz => 45,foo => 12,bar => 34}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"foo:12 bar:34 baz:45\"; $str =~ /foo:(?<foo>\\d+) bar:(?<bar>\\d+) baz:(?<baz>\\d+)/; +{ %+{keys %+} }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{params => [\"param1\",\"param0\"],str => \"foo%-331bar%2\"}","err":"","code":"my $str = 'foo%-33{param1}bar%{param0}'; my @params; $str =~ s/(%[^{]*) \\{ ([^{]+) \\}/push @params, $2; $1 . @params/gex; { str => $str, params => \\@params }","err_mask":""},{"err_mask":"","code":"my $str = 'foo%-33{param1}bar%{param0}'; my @params; $str =~ s/(%[^{]*) \\{ ([^{]+) \\}/push @params, $2; $1 . 's'/gex; printf $str, @params","err":"","out":"fooparam1                           barparam0","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $str = 'foo%-33{param1}bar%{param0}'; my @params; $str =~ s/(%[^{]*) \\{ ([^{]+) \\}/push @params, $2; $1 . 's'/gex; { str => $str, params => \\@params }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{params => [\"param1\",\"param0\"],str => \"foo%-33sbar%s\"}"},{"err_mask":"","code":"my $str = \"foo,bar,baz foo\"; my $arr = [map {split(\",\", $_)} split(\" \", $str)]; [$arr]","out":"[[\"foo\",\"bar\",\"baz\",\"foo\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"foo,bar,baz foo\"; my $arr = [map {split(\",\", $_)} split($str)]; [$arr]"},{"err_mask":"","code":"my $str = \"foo bar baz\"; open(my $fh, '<', \\$str); print <$fh>;","out":"foo bar baz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $str = \"foobar\"; my $new = $str ^ \"   \"; $new","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"FOObar","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"STR is now 'foo bar'","code":"my $str='   foo bar   '; $str =~ s/^\\s+|\\s+$//gie; print \"STR is now '$str'\";","err_mask":""},{"code":"my $str='   foo bar   '; $str =~ s/^\\s+|\\s+$//gi; print \"STR is now '$str'\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"STR is now 'foo bar'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"STR is now '   foo bar   '","code":"my $str='   foo bar   '; $str =~ s/^\\s+|\\s+$//grie; print \"STR is now '$str'\";","err_mask":""},{"code":"my $str = \"foo\\nbar\\nbaz\\n\"; my @lines; while ($str =~ m/([^\\n]+\\n)/gc) { my $line = $1; push @lines, $line } \\@lines","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\\n\",\"bar\\n\",\"baz\\n\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"/(?<=\\n)/ $str \"\n","code":"my $str = \"foo\\nbar\\nbaz\\n\"; [ split /(?<=\\n)/ $str ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\\n\",\"bar\\n\",\"baz\\n\"]","code":"my $str = \"foo\\nbar\\nbaz\\n\"; [ split /(?<=\\n)/, $str ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Group name must start with a non-digit word character in regex; marked by <-- HERE in m/(?<\\ <-- HERE n)/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $str = \"foo\\nbar\\nbaz\\n\"; [ split /(?<\\n)/ $str ]","err_mask":""},{"err":"","out":"ERROR: Group name must start with a non-digit word character in regex; marked by <-- HERE in m/(?<\n <-- HERE )/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"foo\\nbar\\nbaz\\n\"; [ split \"(?<\\n)\" $str ]"},{"code":"my $str = \"fooo.bar/blah,+bar\"; $str =~ s/,[+]/%2C+/g","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"my $str = \"fooo.bar/blah,+bar\"; $str =~ s/,[+]/%2C+/g; $str","err":"","out":"fooo.bar/blah%2C+bar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $str = \"fooo.bar/blah,+bar\"; $str =~ s/,\\+/%2C+/g; $str","out":"fooo.bar/blah%2C+bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"bar\"]","code":"my $str = \"foo\"; open( my ($fh), \">\", \\$str ); print $fh \"bar\"; [ $str ];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unknown open() mode '>+' at (eval 1) line 1, <STDIN> line 1.\n","code":"my $str = \"foo\"; open( my ($fh), \">+\", \\$str ); print $fh \"bar\"; [ $str ];","err_mask":""},{"code":"my $str = \"foo\"; open( my ($fh), \"+>\", \\$str ); print $fh \"bar\"; [ $str ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"bar\"]","err":""},{"code":"my $str = \"foo\"; open( my ($fh), \">\", \\$str ); print $fh; [ $str ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","out":"GLOB(0x4894b88)","err":""},{"code":"my $str = \"foo\"; substr $str, 0, 1, ''; $str","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"oo"},{"err_mask":"","code":"my $str = '( G1 Z0.252 F7200.000 )'; my ($int) = $str =~ m#^.*?Z([0-9.]+)#; $int","out":"0.252","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"0.252000","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = '( G1 Z0.252 F7200.000 )'; my ($value) = $str =~ m#Z([0-9.]+)#; printf(\"%f\",$value);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.252","code":"my $str = '( G1 Z0.252 F7200.000 )'; my ($value) = $str =~ m#Z([0-9.]+)#; printf(\"%s\",$value);","err_mask":""},{"code":"my $str = \"Hello\"; $str = $str =~ tr/l/m/r =~ tr/m/l/r; # b100s is this what you mean?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hello","err":""},{"err":"","out":"danny","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $string = 'danny larry monica'; my @names = split /\\s/, $string; print $names[0];"},{"out":"it's great funt's grit's great funit's great funt fit's great funn","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $string = \"it's great fun\"; $string =~ s/[aeiou]/$string/g; $string"},{"code":"my $string = \"Number of Users: 3 Active: 3 Neighbor: 0 Parent: \"; my ($number_of_users) = $string =~ /Number of Users: (\\d+)/; $number_of_users","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"code":"my $string = \"parachutes are good\"; $string =~ /chute/; pos($string) = $-[0]; $string =~ /\\G.*//;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n"},{"err":"","out":"[\"c\",\"f\",\"i\",\"l\",\"o\",\"r\",\"u\",\"x\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = join '', a..z; [map substr($str, 2 + $_ * 3, 1), 0 .. length($str)/3 ]"},{"err":"","out":"[\"a\",\"f\",\"k\",\"p\",\"u\",\"z\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = join '', a..z; [map substr($str, $_ * 5, 1), 0 .. length($str)/5 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"; >\"\n\"use\" not allowed in expression at (eval 1) line 1, at end of line\n","err":"","code":"my $str = $LastZvalue; my ($int) = $str =~ m#^.*?Z([0-9.]+)#; $int; > and when I use the variable in < printf $fhS \"; Last Z value = %d\\n\", $int; > it is showing me '; Last Z value = 0'","err_mask":""},{"code":"my $str = \"mello\"; $str = $str =~ tr/l/m/r =~ tr/m/l/r; # this might illustrate it better?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"lello"},{"err_mask":"","code":"my $str = \"nickserv!nickserv@blah\"; return 1 if ($str =~ m#^nickserv!nickserv\\@#);","out":"","err":"","out_mask":""},{"err_mask":"","code":"my $str = \"nickserv!nickserv\\@blah\"; return 1 if ($str =~ m#^nickserv!nickserv\\@#);","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"}\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","code":"my $str = q{blah blah","err_mask":""},{"err_mask":"","code":"my @str = ('Site oficial', 'Site nÃ£o oficial'); my @results = grep { /(?<!nÃ£o )oficial/i } @str; [@results]","err":"","out":"[\"Site oficial\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $str = \"some text here\"; $str =~ / (\\S+) (\\S+)/  or die; my $tmpl = \"we had '[1]' and '[2]'\"; my @matches = map substr($str, $-[$_], $+[$_] - $-[$_]), 0..$#+; [ $tmpl =~ s/\\[(\\d+)\\]/$matches[$1]/ger ] # and it tends to obscure the important parts of the code","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"we had 'text' and 'here'\"]","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"--","code":"my $str = \"--\"; $str =~ tr/-/-1/; $str","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"take\",\" cat\"]","err":"","code":"my $str = \"take cat\"; open my $fh, '<', \\$str; $/ = \\4; [ readline($fh) ]","err_mask":""},{"out":"te","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $str = 'te'; return substr($str,0,3);"},{"err_mask":"","code":"my $str = \"test\"; my $len = length $str; my $mask = \"\\0\" x $len; my @rslt; for(1..2**$len-1) { my $idx = 0; do { substr($mask, $idx, 1) ^= \" \" } until substr($mask, $idx++, 1) eq \" \"; push @rslt, $str ^ $mask } \\@rslt","out":"[\"Test\",\"tEst\",\"TEst\",\"teSt\",\"TeSt\",\"tESt\",\"TESt\",\"tesT\",\"TesT\",\"tEsT\",\"TEsT\",\"teST\",\"TeST\",\"tEST\",\"TEST\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"test test test","err":"","code":"my $str = \"test test, test\"; substr($str, (rindex $str, ','), 1, ''); $str;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3,\"more\",\"things\"]","code":"my $struct = { things => [1, 2, 3] };  push @{ $struct->{things} }, \"more\", \"things\";  $struct->{things}","err_mask":""},{"code":"my $structure = {}; push @{$structure->{test}}, \"hello\";  $structure","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{test => [\"hello\"]}"},{"err":"","out":"{test => [\"hello\"]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $structure; push @{$structure->{test}}, \"hello\";  $structure"},{"code":"my $str = '[word1] word2 [word3] word4'; 1 while $str =~ s/(\\[.*?\\])/\\N{U+FFFC}/; [ $str =~ /(\\w+)/g ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"word2\",\"word4\"]","err":""},{"err":"","out":"words only like this phrase","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"words, only like this phrase!\"; $str =~ tr/ a-z//cd; $str; # doesn't need regex, if you mean remove non-alpha characters"},{"err_mask":"","code":"my $str = \"\\x01\\x92\"; my $v = 0; $v = ($v << 8) | $_ for map ord, split //, $str; $v","err":"","out":"402","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"402","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"\\x01\\x92\"; my $v = 0; $v = $v << 8 | $_ for unpack 'C*', $str; $v"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"402","code":"my $str = \"\\x01\\x92\"; unpack 'N', substr(\"\\0\" x 4 . $str, -4)","err_mask":""},{"code":"my $str = \"\\xff\\xff\\xff\\xff; my $v = 0; $v = $v << 8 | $_ for unpack 'C*', $str; $v","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"4294967295","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"\\xff\\xff\\xff\\xff\"; my $v = 0; $v = $v << 8 | $_ for unpack 'C*', $str; $v"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"4294967295","err":"","code":"my $str = \"\\xff\\xff\\xff\\xff\"; unpack 'N', substr(\"\\0\" x 4 . $str, -4)","err_mask":""},{"code":"my @stuff = ( 1..4 ); my ( $x, $y, @output ) = @stuff; [ @output, $x, $y ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[3,4,1,2]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2]","err":"","code":"my $stuff = {a => 1, b => 2}; [@$stuff{'a','b'}]","err_mask":""},{"err_mask":"","code":"my $stuff = {a => 1, b => 2}; [$stuff->@{'a','b'}] # might work on new perls?","err":"","out":"[1,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my %stuff = (abc => 1); { local $stuff{abc} = 2; delete $stuff{abc} } \\%stuff","err":"","out":"{abc => 1}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"foorlp\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my ($stuff) = grep { /foo/ } qw/acme beta foorlp/; [ $stuff ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"42ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","code":"{ my sub foo { 42 } print foo(); } foo()","err_mask":""},{"code":"{ my $_; sub foo { say } } foo for 123","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_\"\n"},{"err_mask":"","code":"my @subs; for (1 .. 5) { { push @subs, sub { $_ + 1 } } }; [ map { $_->","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @subs; for (1 .. 5) { { push @subs, sub { $_ + 1 } } }; [ map { $_->>() } @subs ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"->>\"\n","err":""},{"out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err":"","out":"[80596529,80596529,80596529,80596529,80596529]","code":"my @subs; for (1 .. 5) { push @subs, sub { $_ + 1 } }; [ map { $_->() } @subs ]","err_mask":""},{"out":"[87034481,87034481,87034481,87034481,87034481]","err":"","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err_mask":"","code":"my @subs; for (1 .. 5) { { push @subs, sub { $_ + 1 } } }; [ map { $_->() } @subs ]; # stupid fingers."},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":"","code":"my @subs; for my $_ (1 .. 5) { { push @subs, sub { $_ + 1 } } }; [ map { $_->() } @subs ]; # stupid fingers.","err_mask":""},{"err":"","out":"[2,3,4,5,6]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @subs; for my $n (1 .. 5) { push @subs, sub { $n + 1 } }; [ map { $_->() } @subs ]"},{"out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $subs = [ sub { print 'foo'; }, sub { print 'bar'; } ]; &{$subs->[0]};"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"} sub foo \"\n","err":"","code":"my $sub = sub { say shift // 'no args' } sub foo { &$sub } foo('one arg')","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"one arg\n","err":"","code":"my $sub = sub { say shift // 'no args' }; sub foo { &$sub } foo('one arg')","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't declare single ref constructor in \"my\" at (eval 1) line 1, at EOF\n","err":"","code":"my (sub { $x })","err_mask":""},{"err_mask":"","code":"my @super = qw/foo bar baz aaa bbb/; my @unordered = qw/aaa foo baz/; my %order; $order{$super[$_]} = $_ for 0 .. $#super; [ sort { $order{$a} <=> $order{$b} } @unordered ]","err":"","out":"[\"foo\",\"baz\",\"aaa\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $_ = \"system qw(rm -rf /*)\"; s/(\\d+)-(\\d+)/join \",\", $1..$2/e; [ eval ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n"},{"code":"my @t=(3,5,7); print shift(@t)*100","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"300","err":""},{"err_mask":"","code":"my $tdata = { }; push @{ $data }, $tdata;","out":"1","err":"","out_mask":"Ã¿"},{"code":"my $test = 1; my $something = delete $test;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: delete argument is not a HASH or ARRAY element or slice at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"my $test = `echo \"here\" >> /tmp/tactical`; print $test;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"my $test = ('hello'); ref(\\$test)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"SCALAR"},{"code":"my @test = qw(dword 42 imixed42); my $pat = join '|', qr/(.).{3,}\\1/, qr/(.).{0,1}\\1/; [ grep { m/(?|$pat)/ } @test ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"dword\",\"imixed42\"]","err":""},{"err_mask":"","code":"my @test = qw(dword 42 imixed42); my $pat = join '|', qr/(.).{3,}\\1/, qr/(.).{0,1}\\1/; [ grep { m/$pat/ } @test ]","err":"","out":"[\"dword\",42,\"imixed42\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @test = qw(test ing foobar thab); my $pat = join '|', map { quotemeta } qw(e a t); [ grep { m/$pat/ } @test ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"test\",\"foobar\",\"thab\"]","err":""},{"err_mask":"","code":"my @test = qw(word 42 mixed42); my $pat = join '|', qr/^[a-zA-Z]+$/, qr/^[0-9]+$/; [ grep { m/$pat/ } @test ]","err":"","out":"[\"word\",42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"","code":"my $test = sub { \"don't do this\" }; [ $test { 'main' } ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\$test is not a string\"]","err":"","code":"my $test = sub { '$test is not a string' }; my $class = 'main'; [ $class->$test() ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"M\\xf6glich","code":" my $text = 'M\\xf6glich'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"MÃ¶glich","err":"","code":" my $text = \"M\\xf6glich\"","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"my $text = \"onetwothree\"; my ($foo) = $text =~ s/(tw.)//g; $foo","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"text","code":"my $text = 'some text to match'; my ($captured) = $text =~ /\\b(t[^ ]+)/; $captured","err_mask":""},{"err_mask":"","code":"my $thing = {};  $thing->{cycle} = $thing;  q( <== Here I have created a cycle. IT IS NOT YET A LEAK BECAUSE $thing STILL HOLDS IT );   undef $thing->{cycle};   q( <== There. I broke the cycle so now all is fine )","err":"","out":" <== There. I broke the cycle so now all is fine ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $title = (sub (_) { defined ? $_ : '' })->($big_long_var_name)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(_\"\n","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"my $title = (sub :prototype(_) { defined ? $_ : '' })->($big_long_var_name)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't declare array dereference in \"my\" at (eval 1) line 1, at EOF\n","code":"my @$tmp;","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"my @tmp = (1..3); my @tmp; \\@tmp","err_mask":""},{"out":"10","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"( my $tmp = \"Hello, world\" ) =~ tr/A-Za-z/N-ZA-Mn-za-m/"},{"err_mask":"","code":"( my $tmp = \"Hello, world\" ) =~ tr/A-Za-z/N-ZA-Mn-za-m/; $tmp","err":"","out":"Uryyb, jbeyq","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @tmp; $tmp[3] = \"gi|300707803|ref|XP_002996096.1|hypothetical protein NCER_100860 [Nosema ceranae BRL01] >gi|239605364|gb|EEQ82425.1| hypothetical protein NCER_100860 [Nosema ceranae BRL01]\"; my($ia,$ib) = split(/\\[/,$tmp[3]); [ $ia, $ib]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"gi|300707803|ref|XP_002996096.1|hypothetical protein NCER_100860 \",\"Nosema ceranae BRL01] >gi|239605364|gb|EEQ82425.1| hypothetical protein NCER_100860 \"]","err":""},{"err_mask":"","code":"my $two = \"two\"; [ \"two\\n\" =~ /^\\Q$two\\E$/, \"two\\n\" =~ /\\A\\Q$two\\E\\z/, \"two\\n\" eq $two ]","err":"","out":"[1,\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $two = \"two\"; [ \"two\\n\" =~ /^\\Q$two\\E$/, \"two\\n\" eq $two ]","err":"","out":"[1,\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"T\\\\0a\\\\0b\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $txt = \"T\\x0A\\x0B\"; s{([^[:print:]])}{sprintf '\\\\%02x', ord $1}ge for $txt; [ $txt ] # or this. or Data::Dumper"},{"code":"[ my $tz ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"out_mask":"Ã¿","err":"","out":"2","code":"my (undef, $b) = (1,2)","err_mask":""},{"err":"","out":" ","out_mask":"Ã¿","err_mask":"","code":"my $undef = \" \"; print $undef"},{"err_mask":"","code":"my $undef = \"\"; print $undef","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"my (undef, undef);"},{"err_mask":"","code":"my $undef = undef; print $undef","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"my (undef, $y) = (\"a\", \"b\");","err":"","out":"2","out_mask":"Ã¿"},{"err_mask":"","code":"my @under = ( \"_\" );   [ ( @under )x 5 ]","err":"","out":"[\"_\",\"_\",\"_\",\"_\",\"_\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @under = ( \"_\" );   [ @under x 5 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[11111]","err":""},{"err_mask":"","code":"my $url = 'http://something'; my @cmd = (qw(youtube-dl -f 17 ...), $url); \\@cmd # I'd write it more like this","err":"","out":"[\"youtube-dl\",\"-f\",17,\"...\",\"http://something\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $USA; my $x = 'USA'; ${$x} = 42; [ $USA ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"xyz%","code":"my $username_ = 'xyz'; \"$username_%\" # ${...} might look better","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"pwned\n","code":"my ( $user, $nick ) = ( 'root', 'ro.+' ); if($user =~ /^$nick$/){ say 'pwned' } else { say 'you are not root' }","err_mask":""},{"out":"damn them\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $users = 1;say \"damn them\" if $users;"},{"err_mask":"","code":"my $v = 0.223; die \"out of range\" if $v > 1; my $w = 0.05; my $start = $w * int($v / 0.05); [ $start, $start + $w ]","err":"","out":"[\"0.2\",\"0.25\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $v = '0.9'; $v .= '9' until $v . '9' == $v; length $v","out":"18","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"my $v = 0.9; $v .= '9' until $v == $v.'9'; length $v;","err":"","out":"18","out_mask":"Ã¿Ã¿"},{"code":"my $v = 0; $v ||= 5; [$v]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[5]"},{"code":"my $v = -1; my @x; for( my $i = 0, my $r = 0; $r = ($v/256**$i)%256; $i++ ) { push @x, pack q{C}, $r; } [ map { [ unpack( q{C} ), unpack( q{B8} ) ]; } @x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[255,11111111]]","err":""},{"err_mask":"","code":"my $v = 1; $v ||= 5; [$v]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"[\"00100011\",11000010,\"00000011\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $v = 246307; my @x; for( my $i = 0, my $r = 0; $r = ($v/256**$i)%256; $i++ ) { push @x, pack q{C}, $r; } [ map { unpack q{B8}; } @x ]"},{"err_mask":"","code":"my $v = 261; my @x; for( my $i = 0, my $r = 0; $r = ($v/256**$i)%256; $i++ ) { push @x, pack q{C}, $r; } [ map { unpack q{B8}; } @x ] ## Use 'reverse @x' for opposite endian, big endian in this case.","err":"","out":"[\"00000101\",\"00000001\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"a\",\"a\",\"a\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $val = 'a'; [($val++)x3]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,undef,undef]","code":"my @vals = (1,2,3); sub do_stuff { undef $_ } [ map { do_stuff(); $_ } (@vals) ]","err_mask":""},{"err_mask":"","code":"my @values = (1, 0, 1, 1);  my $n = 0; ($n >>= 2) |= $_ for reverse @values; [ $n, sprintf '%b', $n ];","out":"[1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @values = (1, 0, 1, 1);  my $n = 0; ($n <<= 2) |= $_ for reverse @values; [ $n, sprintf '%b', $n ]; # d'oh","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[81,1010001]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"127","err":"","code":"my @values = ((1)x 7, 0);  my $n = 0; ($n *= 2) += $_ for reverse @values; $n;","err_mask":""},{"out_mask":"","err":"","out":"","code":"my @values = ((1)x 7, 0);  my $n = 0; ($n *= 2) += $_ for @values;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"254","code":"my @values = ((1)x 7, 0);  my $n = 0; ($n *= 2) += $_ for @values; $n;","err_mask":""},{"out":"16843009","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @values = ((1)x 7, 0); unpack 'I<', pack(('b' x @values), @values);"},{"out":"16843009","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @values = ((1)x 7, 0); unpack 'I>', pack(('b' x @values), @values);"},{"out":"2155905152","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @values = ((1)x 7, 0); unpack 'I<', pack(('B' x @values), @values);"},{"code":"my @values = ((1)x 7, 0); unpack 'I>', pack(('B' x @values), @values);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2155905152"},{"code":"my @values = ((1)x 7, 0); unpack 'n', pack(('b' x @values), @values);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"257"},{"err":"","out":"32896","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @values = ((1)x 7, 0); unpack 'n', pack(('B' x @values), @values);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: '<' allowed only after types sSiIlLqQjJfFdDpP( in unpack at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my @values = ((1)x 7, 0); unpack 'N<', pack(('b' x @values), @values);","err_mask":""},{"code":"my @values = ((1)x 7, 0); unpack 'N', pack(('b' x @values), @values);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"16843009"},{"err_mask":"","code":"my @values = ((1)x 7, 0); unpack 'N', pack(('B' x @values), @values);","err":"","out":"2155905152","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $value = undef;  undef == 2","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"my $var = 0 || 1;","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"my $var = 0; [ defined $var ]","err_mask":""},{"out_mask":"Ã¿","out":"0","err":"","code":"my $var = (1-1) || (2-2);","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"var1: 7888. var2: 3","code":"my $var1 = 3; my $var2 = 7888; ($var1, $var2) = ($var2, $var1); print \"var1: $var1. var2: $var2\"; #hudo","err_mask":""},{"code":"my $var = \"1k10k1l11dld1\";  $var =~ /(\\d+)/; print $var;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1k10k1l11dld1","err":""},{"err_mask":"","code":"my $var = \"1k10k1l11dld1\";  $var = tr/(d+)//d; print $var;","err":"","out":"01","out_mask":"Ã¿Ã¿"},{"code":"my ($var1, $var2) = split(/\\=/, \"you=me\"); print $var1 . \" = \" . $var2","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"you = me","err":""},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"my $var = 2 || 3;"},{"err_mask":"","code":"my $var = 42; my $ref = \\$var; Internals::SvREFCNT $var","err":"","out":"2","out_mask":"Ã¿"},{"err_mask":"","code":"my $var = 42; sub xxx { my ($stuff) = @_; return $stuff + $var } xxx(5)","out":"47","err":"","out_mask":"Ã¿Ã¿"},{"code":"my(@var) = 5; [ @var ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[5]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[5]","err":"","code":"my@var = 5; [ @var ]","err_mask":""},{"err_mask":"","code":"my $var = \"6d73616e64626f78\"; $var =~ s/([0-9a-f]{2})/chr hex $1/eg","err":"","out":"8","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"msandbox","code":"my $var = \"6d73616e64626f78\"; $var =~ s/([0-9a-f]{2})/chr hex $1/eg; $var","err_mask":""},{"code":"my $var = (7,8,9); print \"($var)\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"(9)","err":""},{"err_mask":"","code":"my $var='/.a./.a./.a./.a./'; $var =~ /(\\.\\.)/ ? print \"match two dots in a row\" : \"no match\";","out":"no match","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $var = \"cat\"; \"${var}iable\"","err":"","out":"catiable","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $var = ( 'One', 'Two', 'Three');","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Three"},{"err":"","out":"Three","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $var = ( 'One', 'Two', 'Three'); $var"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $var='\\/print \"OK\" if","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Three","code":"my $var = qw/ One Two Three /; $var","err_mask":""},{"out":"something","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $var = \"something\"; \"$var\" # this?"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"this","code":"my $var = \"this\"; my $ref = \\$var; my $copy = $$ref; $var = \"that\"; $copy","err_mask":""},{"out":"that","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $var = \"this\"; my $ref = \\$var; my $copy = $ref; $var = \"that\"; print($$copy);"},{"err":"","out":"match two dots in a row","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $var='/../../../../'; $var =~ /(\\.\\.)/ ? print \"match two dots in a row\" : \"no match\";"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"1.41_02\",\"1.4102\"]","code":"my $v = q{1.41_02}; [ $v, eval $v ];","err_mask":""},{"code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { 1 } @$v[ $i, $i + 1 ]; print qq{($a,$n)}; } ### This results in an infinate loop some how...","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Out of memory!\nAttempt to free unreferenced scalar: SV 0xa3a3208, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"(1,1)(1,1)(1,1)","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { 1 } @$v; print qq{($a,$n)}; } ### Oddly though, changing @$v[ $i, $i + 1 ]; to just @$v makes the loop finite again...","err_mask":""},{"err_mask":"","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } do { @$v[ $i, $i + 1 ] }; print qq{($a,$n)}; } ### Another way, a little cleaner and without an explicit array being declared.","out":"(A,B)(B,C)(C,)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } (my @x) = @$v[ $i, $i + 1 ]; print qq{($a,$n)}; } ### Slightly hackish but works.","err":"","out":"(A,B)(B,C)(C,)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } splice @$v, $i, -2, 2; print qq{($a,$n)}; }","err":"Out of memory!\n","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"(,)(,)(,)","err":"","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } () = @$v[ $i, $i + 1 ]; print qq{($a,$n)}; }","err_mask":""},{"code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } @$v[ $i, $i + 1 ]; print qq{($a,$n)}; } ### This results in an infinate loop some how...","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Out of memory!\nAttempt to free unreferenced scalar: SV 0xaf97e48, <STDIN> line 1.\n","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"(A,B)(B,C)(C,)","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } @$v[ $i, $i < $#$v ? $i + 1 : () ]; print qq{($a,$n)}; } ### This solution is rather ugly as sin, but it works. Is there another way?","err_mask":""},{"code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } $v->[$i], $v->[$i+1]; print qq{($a,$n)}; }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Out of memory!\nAttempt to free unreferenced scalar: SV 0xa90ce48, <STDIN> line 1.\n","out":""},{"err_mask":"","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } $v[$i], $v[$i+1]; print qq{($a,$n)}; }","err":"","out":"(,)(,)(,)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"Out of memory!\nAttempt to free unreferenced scalar: SV 0xa592258, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ // q{} } $v->[ $i ], $v->[ $i + 1 ]; print qq{($a,$n)}; } ### Why does this still loop infinately when $v->[ $i ], $v->[ $i + 1 ]; on two seaprate lines does not?"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = map { $_ } @$v[ $i, $i + 1 ]; print qq{($a,$n)}; } ### This results in an infinate loop some how...","err":"Out of memory!\nAttempt to free unreferenced scalar: SV 0x985ce48, <STDIN> line 1.\n","out":"","out_mask":""},{"err_mask":"","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = @$v[ $i, $i + 1 ]; print qq{($a,$n)}; }","out":"(A,B)(B,C)(C,)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my ( $a, $n ) = ($v->[$i], $v->[$i+1]); print qq{($a,$n)}; }","err":"","out":"(A,B)(B,C)(C,)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"(A,B)(B,C)(C,)","code":"my $v = [ qw( A B C ) ]; for ( my $i = 0; $i < @$v; $i++ ) { my $a = $v->[ $i ] // q{}; my $n = $v->[ $i + 1 ] // q{}; print qq{($a,$n)}; } ### This works as expected.","err_mask":""},{"err_mask":"","code":"my $warning; $SIG{__WARN__} = sub { $warning = shift }; warn 'asdf'; [$warning]","out":"[\"asdf at (eval 1) line 1, <STDIN> line 1.\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @warnings; sub foo { local $SIG{__WARN__} = sub { push @warnings, @_ }; goto &bar } sub bar { warn \"blah\" } foo(); \\@warnings","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿","err":"blah at (eval 1) line 1, <STDIN> line 1.\n","out":"[]"},{"out":"yes","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $wat = \"\\\\Q\"; \"Q\" =~ /$wat/ ? \"yes\" : \"no\""},{"code":"my $what = \"cats\"; [ delete $cats ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: delete argument is not a HASH or ARRAY element or slice at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"my $what = \"cats\"; [ delete $what ]","out":"ERROR: delete argument is not a HASH or ARRAY element or slice at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @whatever = ( my %being = qw(state alive) ); \\@whatever","out":"[\"state\",\"alive\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"the\",\"b\",\"brown\",\"dog\",\"the\",\"b\",\"brown\"]","code":"my @whitelist = qw(the b brown dog); [ map { my $word = $_; grep { index($word, $_) >= 0 } @whitelist } \"the brown dog jumps over the brown fox\" =~ /\\w+/g ] # apart from the illegibility, of course","err_mask":""},{"err_mask":"","code":"my $_ = \"wibble\"; s/(.)/sprintf('\\\\u%04x', \"$1\")/ger","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $_ = \"wibble\"; s/(.)/sprintf('\\\\u%04x', $1)/ger","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":""},{"err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $_ = \"wibble\"; s/(.)/sprintf('\\\\u%04x', ord \"$1\")/ger"},{"out_mask":"Ã¿","err":"","out":"3","code":"my @w = map { $_ =~ /\\s+/ ? $_ =~ s/\\s|\\s+/-/g : trim($_) } split ',', ('hello, world, foo bar baz');","err_mask":""},{"code":"my @words = split /\\W/, \"a.b!c?d e\"; for my $i (0..$#words - 1) { push @word_pairs [ $words[$i], $words[$i+1 ]; }; \\@word_pairs","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n"},{"code":"my @words = split /\\W/, \"a.b!c?d e\"; for my $i (0..$#words - 1) { push @word_pairs, [ $words[$i], $words[$i+1] ]; }; \\@word_pairs","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"a\",\"b\"],[\"b\",\"c\"],[\"c\",\"d\"],[\"d\",\"e\"]]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{right => [],wrong => [[]]}","code":"my @wrong = [] ; my @right = (); { wrong => \\@wrong, right => \\@right }","err_mask":""},{"err":"","out":"[\\undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\\my $x]"},{"code":"my @x = ;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿","out":"2","err":"","code":"my @x = ( [ 0, 1, 2 ] ); $#{$x[0]}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$x[\"\n","code":"my @x = ( [ 0, 1, 2 ] ); $#$x[0]","err_mask":""},{"code":"my $x = [ [ 0, 1, 2 ] ]; $#{$x[0]}","err_mask":"","out_mask":"Ã¿Ã¿","out":"-1","err":""},{"err":"","out":"00111","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0.21875; my $out = ''; while(int($x) != $x) { $x *= 2; $out .= ($x & 1) ? 1 : 0; }; $out"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"010011001100110011001100110011001100110011001100110011","code":"my $x = 0.3; my $out = ''; while(int($x) != $x) { $x *= 2; $out .= ($x & 1) ? 1 : 0; }; $out","err_mask":""},{"err":"","out":"01101","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0.40625; my $out = ''; while(int($x) != $x) { $x *= 2; $out .= ($x & 1) ? 1 : 0; }; $out"},{"err_mask":"","code":"my $x = 0.5; my $out = ''; while(int($x) != $x) { $x *= 2; $out .= ($x & 1) ? 1 : 0; }; $out","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"9","out_mask":"Ã¿","err_mask":"","code":"my $x = [0..9];  $#$x # is this the right way to get the last index of @$x?"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"12345678910","err":"","code":"my $x = 0; eval 'print ++$x;'x10  # \"power of looping\"","err_mask":""},{"err":"","out":"[1,0,1,0,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0; [ map { $x = int !!--$x } 1..5 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,1,1,1,1]","err":"","code":"my $x = 0; [ map { $x = int !!++$x } 1..5 ]","err_mask":""},{"err":"","out":"01","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $x = 0; print \"$x\" if $x == 0;"},{"out_mask":"Ã¿Ã¿","out":"01","err":"","code":"my $x = 0; print $x if $x == 0;","err_mask":""},{"err_mask":"","code":"my $x = 0; print \"$x,  return value:\" if $x == 0;","out":"0,  return value:","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"2277532","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0; $x += $_ + ($_*$_ < 2119) * $_ * $_ for 1 .. 2118; $x"},{"out":"ERROR: Use of := for an empty attribute list is not allowed at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x := 1;"},{"out":"0.00999999999999979","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 10.01; $x -= 10; print $x"},{"err":"","out":"25","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $x = 10,25;"},{"code":"my $x = 10,25; [$x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[10]","err":""},{"err_mask":"","code":"my $x = 10; my $y = 20; sprintf \"%d is %s %d\", $x, [qw( equal-to greater-than less-than )]->[ $x <=> $y ], $y","out":"10 is less-than 20","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my %x = 1 .. 100; eval scalar %x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.546875","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"35","code":"my %x = 1..100; int %x","err_mask":""},{"code":"my %x = 1..100; scalar keys %x","err_mask":"","out_mask":"Ã¿Ã¿","out":"50","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"35/64","code":"my %x = 1..100; scalar %x","err_mask":""},{"err_mask":"","code":"my %x = 1..10; $_ += 100 for keys %x; \\%x","out":"{7 => 8,9 => 10,5 => 6,1 => 2,3 => 4}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"{7 => 108,9 => 110,5 => 106,1 => 102,3 => 104}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %x = 1..10; $_ += 100 for values %x; \\%x"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"my @x = 1..10; [ @x[0 .. -1] ]"},{"err_mask":"","code":"my @x = 1..10; [ $x[0 .. -1] ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = \"123\"; 0+$x; \"123 \" ~~ $x ? 'yes' : 'no'","err":"","out":"yes","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"yes","err":"","code":"my $x = \"123\"; 0+$x; print \"123 \" ~~ $x ? \"yes\" : \"no\"","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"no","code":"my $x = \"123\"; \"123 \" ~~ $x ? 'yes' : 'no'","err_mask":""},{"out":"001.2345","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = '1.2345' + '10000000000'; $x =~ /([0-9]{3}\\.[0-9]+)$/; print $1;"},{"err_mask":"","code":"my @x = [1,2,3]; for my $v (@x) { print \"$v\" } # are you doing something like this","out":"ARRAY(0x4116b88)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"no","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $x = \"123\"; print \"123 \" ~~ $x ? \"yes\" : \"no\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"closure","code":"{ my $x =123; sub cloure { $x } } closure","err_mask":""},{"out":"closure","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ my $x =123; sub clousre { $x } } closure"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[1],[3]]","err":"","code":"my $x = [[1],[2],[3]]; [ @$x[0, 2] ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use an array as a reference at (eval 1) line 1, <STDIN> line 1.\n","code":"my $x = [[1],[2],[3]]; @x->[0,2]","err_mask":""},{"code":"my @x = (1,2,3); [\\@x, \\(@x)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[1,2,3],\\$VAR1->[0][0],\\$VAR1->[0][1],\\$VAR1->[0][2]]"},{"out":"","err":"","out_mask":"","err_mask":"","code":"my $x = [[1],[2]]; my $y = $x->[1]; 42 if \\$x->[1] == $y"},{"out_mask":"","out":"","err":"","code":"my $x = [[1],[2]]; my $y = $x->[1]; 42 if \\$x->[1] == \\$y","err_mask":""},{"code":"my $x = [[1],[2]]; my $y = \\$x->[1]; [grep { $y == \\$_ } @$x];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[2]]"},{"out_mask":"Ã¿","out":"1","err":"","code":"my $x = [ 1, 2 ]; $x->[0] # or these?","err_mask":""},{"err_mask":"","code":"my @x = (1..5); @x[0..2] = (1..3); scalar @x;","out":"5","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"3","code":"my @x = (1..5); @x = (1..3); scalar @x;","err_mask":""},{"out":"[1,\"a\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %x = (1, 'a'); my @x = ('c', 'd'); [ %x{1} ]"},{"out":"1e-100","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 1e-100; print $x"},{"code":"my @x1 = 'FOO'; my @array = (\"a\", \"b\"); [q(@array) .@x1, q@array .@x1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\@array1\",\"array .\"]","err":""},{"err":"","out":"1255","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 1; print $x++, $x++, ++$x, ++$x;"},{"code":"my $x = 1; print $x++, $x++, \"\" . ++$x, \"\" . ++$x, $x++, \"\" . ++$x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"124557"},{"code":"my $x = 1; print $x++, $x++, ++$x, ++$x, $x++, ++$x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"127757"},{"code":"my $x = 1; sub foo :lvalue { $x }  undef foo; [$x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]"},{"code":"my $x = 1; sub foo :lvalue { $x }  undef foo; $x","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"my $x = 1; $x+2","out":"3","err":"","out_mask":"Ã¿"},{"code":"my $x = 1; ( ++$x ) =~ s/2/TWO/;  $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify preincrement (++) in substitution (s///) at (eval 1) line 1, at EOF\n"},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"my $x = 1; ${\\$x++} =~ s/2/TWO/; $x"},{"out_mask":"Ã¿Ã¿Ã¿","out":"TWO","err":"","code":"my $x = 1; ${\\++$x} =~ s/2/TWO/; $x","err_mask":""},{"err":"","out":"2277532","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 2118 * 2119 / 2; $x += $_ * $_ for 1 .. sqrt 2118; $x"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"my $x = (3,2,1); $x"},{"err_mask":"","code":"my $x = '3 + 4 eq \"7\"; my @n = $x =~ /(\\d+)g/; [ @n ]","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = '3 + 4 eq \"7\"'; my @n = $x =~ /(\\d+)/g; [ @n ]","out":"[3,4,7]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = '3 + 4 eq \"7\"'; my @n = $x =~ /(\\d+)g/; [ @n ]","out":"[]","err":"","out_mask":"Ã¿Ã¿"},{"code":"my $x = '3 + 4 eq \"7\"'; my @n = $x =~ /\\d+/g; [ @n ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[3,4,7]","err":""},{"out_mask":"Ã¿","out":"1","err":"","code":"my $x = 3; $x /= 3; $x","err_mask":""},{"code":"my $x = 42; [  map { state $y = $x++; $y } 0..3 ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[42,42,42,42]","err":""},{"err_mask":"","code":"my $x = 42; sub { $x++ }->(); $x","err":"","out":"43","out_mask":"Ã¿Ã¿"},{"code":"my $x = \\42; $x->$*","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"42"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"my $x = ~42; [ $x =~ 42 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"['18446744073709551573']","err":"","code":"my $x = ~42; [ $x = ~42 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"x = ","code":"{ my $x = 42; } \"x = $x\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $x = 43; Internals::SvREADONLY $x, 1; $x = 23; $x","err_mask":""},{"out":"6","err":"","out_mask":"Ã¿","err_mask":"","code":"my $x = ( 4, 5, 6 ); $x; ### Gives last value from comma list (comma operator.)"},{"err":"","out":"4-9","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \"4-9\"; s/(\\d+)-(\\d+)/join \",\", $1..$2/e; $x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[55]","err":"","code":"my $x = 55; sub foo { unless ($x) { return 'foo' } } [foo()]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Hello3\n","code":"my @x = (5,6,7); print \"Hello\", scalar(@x), \"\\n\";","err_mask":""},{"out":"Hello567\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = (5,6,7); print \"Hello\", @x, \"\\n\";"},{"err_mask":"","code":"my @x = (5,6,7); \\@x","err":"","out":"[5,6,7]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[5,6,7]]","err":"","code":"my @x = [5,6,7]; \\@x","err_mask":""},{"code":"my @x = 7 .. 9; please, print @x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"789"},{"err":"","out":"789","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = 7..9; print @x;"},{"code":"my %x = (a => 0); [ (exists $x{a} ? 'true' : 'false'), ($x{a} ? 'true' : 'false') ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"true\",\"false\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"REF\",123]","err":"","code":"my $x = \\{ a => 123 }; [ ref $x, $$x->{a} ]","err_mask":""},{"out":"{a => 1}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %x = (a => 1); my $y = { %x }; delete $y->{a}; \\%x"},{"code":"my %x = (a => 1); my $y = \\%x; delete $y->{a}; \\%x","err_mask":"","out_mask":"Ã¿Ã¿","out":"{}","err":""},{"code":"my $x = 'aaa'; sub f { $_[0] = 'bbb';}; f($x); [$x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"bbb\"]"},{"code":"my $x = 'aaa'; sub f { \\@_ }; my $y = f($x); $y->[0] = 'bbb'; $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"bbb","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"xbxbxbaba","code":"my $x=\"ababababa\"; $x=~s/a/x/ for 1..3; $x","err_mask":""},{"err_mask":"","code":"my $x = \"a b a c a d a e\"; [$x =~ s/a/t/g]","out":"[4]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = \"a b a c a d a e\"; [$x !~ s/a/t/g]","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"cd","err":"","code":"my $x = 'abcd'; substr $x, 2 # but more importantly it'd make the code almost readable","err_mask":""},{"err":"","out":"a","out_mask":"Ã¿","err_mask":"","code":"my $x = \"a\"; ${\\my $x} = \"b\"; $x"},{"code":"my $x = \"asdf\"; pos($x) = 1; { local pos($x) = 2; print pos $x, \";\";} pos $x","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"2;"},{"out":"4;4","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \"asdf\"; pos($x) = 2; { local pos($x) = 4; print pos $x, \";\";} print pos $x"},{"out_mask":"Ã¿","out":"4","err":"","code":"my $x = \"asdf\"; pos($x) = 666; pos $x","err_mask":""},{"code":"my $x = \"asdfX\"; my $y = \"asdfY\"; $x =~ /\\A\\Q$y\\E{0}.\\z/s ? \"yes\" : \"no\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"yes"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"yes","code":"my $x = \"asdfX\"; my $y = \"asdfY\"; $x =~ /\\A(?>\\Q$y\\E??).\\z/s ? \"yes\" : \"no\"","err_mask":""},{"out":"no","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $x = \"asdfY\"; my $y = \"asdfYt\"; $x =~ /\\A(?>\\Q$y\\E??).\\z/s ? \"yes\" : \"no\""},{"err_mask":"","code":"my $x = \"asdfYt\"; my $y = \"asdfY\"; $x =~ /\\A(?>\\Q$y\\E??).\\z/s ? \"yes\" : \"no\"","err":"","out":"no","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"my $x; BEGIN { $x = 'x' } our $$x = 123; # basically this - the 'our' isn't doing anything useful so it can be left out entirely","err":"","out":"ERROR: Can't declare scalar dereference in \"our\" at (eval 1) line 1, near \"$x =\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"(0, 7)(1, 8)(2, 9)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = bless [7,8,9], q{FOO}; print qq{($a, $b)} while ($a, $b) = each @$x; ### What I don't quite understand is that @$x to such a function works, so it wouldn't make sense for keys or so to do something similar, if UNIVERSAL::isa( $arg, q{ARRAY} ) @$arg or something like that? Or would overloading still muck with that?"},{"code":"my $x = bless [7,8,9], q{FOO}; UNIVERSAL::isa( $x, q{ARRAY} )","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"my $x = bless {}, q{Foo}; \"$x\";","out":"Foo=HASH(0x4cf8b88)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @x = ('c', 'd'); [ %x[1] ]","out":"[1,\"d\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[1,undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = ('c', 'd'); [ %x{1} ]"},{"code":"my $x = 'code'; print $$x;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"","out":"","err":"","code":"my $x = 'code'; $$x;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"use $x\"\n","code":"my $x = \"Data::Dumper\"; use $x;","err_mask":""},{"code":"my $x = \\do {42}; [ $x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\\42]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","code":"my $x = \\do {42}; [ ++$$x ]","err_mask":""},{"err_mask":"","code":"my $x = \\do {my $o = 42}; [ ++$$x ]","out":"[43]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my $x = do { my $tmp; \\$tmp }; my $y = $x; $$y = 'foo'; print $$x; # porton is this what you want?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":""},{"err":"","out":"-1","out_mask":"Ã¿Ã¿","err_mask":"","code":"{ my $x = \"e\"; $x--; print $x }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{second => \"great success\"}","code":"my $x = { first => 'some error here', second => 'great success' }; my %h = map { ($x->{$_} !~ /error/) ? ($_ => $x->{$_}) : () } keys %$x; \\%h # like this, you mean?","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"my \\\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = { foo => 1 }; my \\%y = $x; $y{bar} = 2; $x;"},{"err":"","out":"1oo4ar7az10uux14leem","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 'FooBarBazQuuxFleem'; my $off = 1; join '', map { (my $str = $_) =~ s/^./$off/; $off += length($_); $str } split /(?=[A-Z])/, $x;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Foo1Bar4Baz7Quux10Fleem14","code":"my $x = 'FooBarBazQuuxFleem'; my $off = 1; join '', map { (my $str = $_) =~ s/$/$off/; $off += length($_); $str } split /(?=[A-Z])/, $x;","err_mask":""},{"err_mask":"","code":"my $x = 'FooBarBazQuuxFleem'; $x =~ s/[A-Z]/$+[0]/g; $x","err":"","out":"1oo4ar7az10uux14leem","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = 'FooBarBazQuuxFleem'; $x =~ s/B/$+[0]/g; $x","out":"Foo4ar7azQuuxFleem","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $x = 'FooBarBazQuuxFleem'; $x =~ s/B/$+[0]/g; $x =~ s/Q/$+[0]/g; $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Foo4ar7az10uuxFleem"},{"out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 'FooBarBazQuuxFleem'; $x =~ s/B/$+[0]/g; x =~ s/Q/$+[0]/g; $x"},{"err_mask":"","code":"my $x = \"foo:bar:baz\"; [ $x =~ /\\A(.*?)(?:=|==|:|--)(.*)\\z/s ]","err":"","out":"[\"foo\",\"bar:baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = \"foo:bar:baz\"; $x =~ /=|==|:|--/ or die; [ substr($x, 0, $-[0]), substr($x, $+[0]) ]","out":"[\"foo\",\"bar:baz\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foobar","code":"my $x = \"foo\"; my $f = sub { print $x }; $f->(); $x = \"bar\"; $f->();","err_mask":""},{"code":"my @x = (\"foo\\n\", \"bar\", \"baz\\n\"); chomp @x; \\@x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"bar\",\"baz\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\"]","err":"","code":"my $x = 'foo'; $x ||= do { print 'bar'; 'baz' }; [ $x ];","err_mask":""},{"code":"my $x = 'foo'; $x &&= do { print 'bar'; 'baz' }; [ $x ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"bar"},{"err":"","out":"","out_mask":"","err_mask":"","code":"my @x; for (@x) { print \"entered\" } # unless you mean something other than running code inside the foreach loop?"},{"err_mask":"","code":"my $x; $_++ for ($x)x3; $x # two more examples","out":"3","err":"","out_mask":"Ã¿"},{"code":"my $x = 'Friseure'; [ map { $x =~ /e$/g; pos($x) } 1..10 ] # does this make it any clearer?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[8,undef,8,undef,8,undef,8,undef,8,undef]"},{"err":"","out":"[\"nm37.bullet.mail.ir2.yahoo.com\",\"212.82.96.62\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x=\"from nm37.bullet.mail.ir2.yahoo.com (nm37.bullet.mail.ir2.yahoo.com [212.82.96.62])\"; [ ($x =~ /[\\w.]+/g)[-2, -1] ] # tharkun"},{"code":"my $x = \"Hello a and b\"; $x =~ s/\\b([ab])\\b/$1 eq 'a' ? \"l3u\" : \"rindolf\"/ge; [$x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Hello l3u and rindolf\"]","err":""},{"code":"my $x = \"Hello anna!\" [($x eq \"anna\" ? \"T\" : \"F\"), ($x =~ /anna/ ? \"T\" : \"F\")]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"\"Hello anna!\" [\"\n"},{"err_mask":"","code":"my $x = \"Hello anna!\"; [($x eq \"anna\" ? \"T\" : \"F\"), ($x =~ /anna/ ? \"T\" : \"F\")]","out":"[\"F\",\"T\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = \"Hello \"; $x .= \"KNERD\"; [$x]","out":"[\"Hello KNERD\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $x = \"hmm\"; [ (my $tmp = $x, undef $x)[0] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"hmm\"]","err":""},{"code":"my $x = \"hmm\"; [ (my $tmp = $x; undef $x)[0] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"$x)\"\n","err":""},{"out":"[\"hmm\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 'hmm'; [ ([$x]->[0], undef $x) ]"},{"code":"my $x = 'hmm'; [ ([$x]->[0], undef $x)[0] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hmm\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hmm\"]","code":"my $x = 'hmm'; [ (\"$x\", undef $x)[0] ]","err_mask":""},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 'hmm'; [ ($x, undef $x)[0] ]"},{"err_mask":"","code":"my $x = 'hmm'; [ [$x, undef $x]->[0] ]","err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"my $x = \"Host: myHost\\n\";  my ($targetHost) = $heap->{buffer} =~ m#Host: (.*?)#; return $targetHost;"},{"err":"","out":"a ref is true even when it refers to empty","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = []; if ($x) { print \"a ref is true even when it refers to empty\" }"},{"out":"interpolates?","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 'interpolates?'; qq'$x';"},{"err_mask":"","code":"my $x = 'interpolates?'; q\"$x\";","err":"","out":"$x","out_mask":"Ã¿Ã¿"},{"code":"my %x; local keys %x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify keys in local at (eval 1) line 1, at EOF\n"},{"out":"ERROR: Can't modify keys in local at (eval 1) line 1, near \"%x =\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %x; local keys %x = \"hi\";"},{"code":"my @x; local $x[0] = 42; \"@x\";","err_mask":"","out_mask":"Ã¿Ã¿","out":"42","err":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my @x; local $x[0] = 42; @x;"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"my @x; local $x[0] = 42; \\@x;","err_mask":""},{"out":"[3,30,6,60]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = (map { $_ * 10 } 0 .. 9); [%x[3,6]]"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"my @x = map { no strict qw(refs); $_; } 1..3; ### Why does this generate an error regarding the use of `no` ?"},{"code":"my @x = map { qq{$_\\n} } qw/ABC DEF 123 GHI/; join q{}, map { $_ x= !m!\\d+!; } @x ;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ABC\nDEF\nGHI\n"},{"err":"","out":"[\"some\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = map /^(\\w+)/g, \"some test line\"; \\@x; # This is what I meant."},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"some\"]","err":"","code":"my @x = map /^(\\w+)/m, \"some test line\"; \\@x; # Passing flags can be useful.","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"some\"]","code":"my @x = map /^(\\w+)/, \"some test line\"; \\@x; # yet another way to do it.","err_mask":""},{"out":"some","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x; my $line = \"some test line\"; push @x, $line =~ /^(\\w+)/; print for @x; # another way to write the same thing"},{"code":"[\\(my $x, my $y)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\undef,\\undef]"},{"err":"","out":"[undef,\"1E0\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x; my $y = 1..1; [ $x, $y ]; ### Why exactly does assigning a range in scalar context result in the lhs being an empty string (not undef) ?"},{"code":"my $x = \"\" ; my $y; [ ($x // '') eq ($y // '') ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \"\\n\"; [ $_ = chomp $x ]"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \"\\n\"; [chomp($x);]"},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \"\\n\"; [chomp($x)]"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"my $x = \"\\n\"; chomp($x); print $x;"},{"err_mask":"","code":"my $x = \"\\n\"; [ $x = chomp $x ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = \"\\n\"; [$x = chomp $x, $x]","out":"[1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = \"\\n\"; $x = chomp $x; $x","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"my $x = \"\\n\"; $x = chomp($x); $x","out":"1","err":"","out_mask":"Ã¿"},{"code":"my @x = (\"One\", \"Two\", \"Three\"); [join(\" \", @x)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"One Two Three\"]"},{"err_mask":"","code":"my @x; push @x, foo(), foo(); { my $var = 0; sub foo { $var++ } } push @x, foo(), foo(); \\@x","out":"[0,1,0,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @x; push @x, qw( A B C ); unshift @x, qw( X Y Z ); \\@x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"X\",\"Y\",\"Z\",\"A\",\"B\",\"C\"]"},{"out":"[\"test\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x; push @x, /^(\\w+)/ for 'test something'; \\@x;"},{"code":"my $x = q{abc}; !!$x;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"FOO\\\\tBAR\\\\r\\\\n\",\"FOO\\tBAR\\r\\n\"]","code":"my $x = q{FOO\\tBAR\\r\\n}; ( my $y = $x ) =~ s/\\\\t/\\t/g; $y =~ s/\\\\r/\\r/g; $y =~ s/\\\\n/\\n/g; [ $x, $y ];","err_mask":""},{"out_mask":"Ã¿","out":"0","err":"","code":"my $x = q{}; int !!$x;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err":"","out":"Regexp=REGEXP(0x3c78a08)","code":"my $x = qr/bar/; no overloading; \"$x\";","err_mask":""},{"err":"","out":"(?^u:bar)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = qr/bar/; \"$x\"; # vs."},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"(?^ux:what does this do)","code":"my $x = qr/what does this do/x; \"$x\"","err_mask":""},{"err":"","out":"[qr/\\w+/u,qr/\\w+/u]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = qr/\\w+/; [ $x, qr/$x/ ]; # Why can't dclone just handle Regexp objects like this?"},{"err_mask":"","code":"my $x = qr/x/; my $y = $x; [ $x, $y ];","out":"[qr/x/u,$VAR1->[0]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[4,5,6]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = qw/1 2 3/; $_+=3 for @x; \\@x"},{"code":"my @x = qw/1 2 3 4/; delete $x[-1]; print $_ // '!' for @x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"123","err":""},{"err_mask":"","code":"my @x = qw/1 2 3 4/; $x[-1] = undef; print $_ // '!' for @x;","err":"","out":"123!","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"A => 1 | 1 => B | B => 2 | 2 => C | C => 3 | 3 =>  | ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = qw( @ A 1 B 2 C 3 ); foreach my $i ( 1 .. $#x ) { my ( $k, $v ) = ( $x[ $i ], $x[ $i++ + 1 ] ); print qq{$k => $v | }; }"},{"err_mask":"","code":"my @x = qw( @ A 1 B 2 C 3 ); for ( my $i = 1; $i < @x; $i++ ) { my ( $k, $v ) = ( $x[ $i ], $x[ $i++ + 1 ] ); print qq{$k => $v | }; }","out":"A => 1 | B => 2 | C => 3 | ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\",\"d\",\"d_aa\",\"a_aa\",\"b_aa\",\"a_ab\",\"c_aa\",\"a_ac\",\"c_ab\",\"c_ac\",\"c_ad\",\"d_ab\",\"e\",\"f\",\"g\",\"h\"]","err":"","code":"my @x = qw(a b c d d a b a c a c c c d e f g h); for(@x) { if($seen{$_}) { $_ = $_ . \"_\" . $seen{$_}++ } else { $seen{$_} = \"aa\" } } \\@x # like this, or something else?","err_mask":""},{"out":"a!cd","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = qw(a b c d); delete $x[1]; print $_ // '!' for @x;"},{"code":"my %x = qw(a b c d e f g h); [ @x{a, g} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"b\",\"h\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{g => \"h\",a => \"b\"}","err":"","code":"my %x = qw(a b c d e f g h); @y{a, g} = @x{a, g}; \\%y","err_mask":""},{"err_mask":"","code":"my @x = ( qw( A B C ) ); { exists => [ map { exists $x[ $_ ] } 0..5 ], x => \\@x };","err":"","out":"{exists => [1,1,1,\"\",\"\",\"\"],x => [\"A\",\"B\",\"C\"]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @x = qw(a b c); splice @x, 1, 1; \\@x # if you want to remove an element from the array, use splice, pop or shift","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"c\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",undef,\"c\"]","code":"my @x = qw(a b c); undef $x[1]; \\@x # if you want to set a specific element to undef, use undef","err_mask":""},{"out_mask":"Ã¿","err":"","out":"c","code":"my $x = qw(a b c); $x # it's the list/scalar context that determines what you get","err_mask":""},{"err_mask":"","code":"my @x = qw(foo bar baz); my @y = 1..3; [ \\(map {$_} @x, @y, 42) ]","err":"","out":"[\\\"foo\",\\\"bar\",\\\"baz\",\\1,\\2,\\3,\\42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"foo\",\"bar\",\"baz\"],[1,2,3],\\42]","code":"my @x = qw(foo bar baz); my @y = 1..3; [ \\((@x, @y, 42)) ]","err_mask":""},{"code":"my @x = qw(foo bar baz); my @y = 1..3; [ \\(@x, @y, 42) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"foo\",\"bar\",\"baz\"],[1,2,3],\\42]","err":""},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"my $x = () = qw(foo bar baz); $x"},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"my @x = qw/foo bar/; my $y = (123 => @x); $y # or the usual fun"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"x\",\"y\",\"z\",\"hi\"],[\"hi\"]]","err":"","code":"my @x = qw(x y z); my @y = do { push @x, my @x = q chic; @x }; [ \\@x, \\@y ]","err_mask":""},{"out_mask":"Ã¿","err":"","out":"2","code":"my @x = qw(zero one two); my ($idx) = grep $x[$_] eq 'two', 0 .. $#x; $idx","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"my $x = q{}; !!$x;"},{"code":"my $x = {}; [ q{}. $x, int $x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","out":"[\"HASH(0x3cf1b88)\",63904648]","err":""},{"err":"","out":"REF","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = []; ref \\$x"},{"code":"my @xs; bless \\@xs, \"hello world\"; ref \\@xs","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hello world","err":""},{"err_mask":"","code":"my $x :shared;","out":"","err":"","out_mask":""},{"out":"[\"/newpath/newdir/whatever.txt\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = '/somepath/subdir'; $y = '/newpath/newdir'; my $data = '/somepath/subdir/whatever.txt'; $data =~ s/\\Q$x/$y/g; [ $data ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"some data","code":"my $x = 'some test'; my $y = \\substr($x, 5, 4); $$y = 'data'; $x","err_mask":""},{"code":"my $x = \"something\"; qq/'\" foo bar baz '\" $x/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"'\" foo bar baz '\" something"},{"code":"my $x = 'some var'; my $y = $x =~ s/var/thing/r; [ $x, $y ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"some var\",\"some thing\"]","err":""},{"err_mask":"","code":"my @xs = qw/a b d z o l p a l/; [ keys %{{ @xs, reverse @xs }} ]","out":"[\"l\",\"p\",\"b\",\"o\",\"d\",\"z\",\"a\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = sub (\\@) { \"$_[0]\" }; my @a = (3, 4); print &$x(@a); ()","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $x = sub (\\@) { \"$_[0]\" }; my @a = (3, 4); $x->(@a)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n"},{"code":"my $x; sub foo:lvalue { return $x } foo() = 123; $x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"123","err":""},{"err":"","out":"[\\undef,$VAR1->[0]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x; sub lala { \\$x } [\\$x, lala()] # identical"},{"err_mask":"","code":"my $x = sub ($) { @_ }; *x = $x; [ join ' ', $x->('a'..'c'), '|', x('a'..'c') ]","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = 'test$blah'; $x =~ s#[^a-zA-Z0-9 ]##g; $x","out":"testblah","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = \"test$blah\"; $x =~ s#[^a-zA-Z0-9 ]##g; $x","out":"test","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"my $x = 'testing'; for ($x) { (sub { $_ = shift; return /firefox/ })->('...') } $x # no, probably not okay","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"...","err":""},{"out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \\undef; &Internals::SvREADONLY($x, 0); $$x = 3; [ undef ]"},{"err_mask":"","code":"my $x = \\undef; &Internals::SvREADONLY($x, 0); $$x = Scalar::Util::dualvar 0, \"lemons\"; [ undef, defined undef ]","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \\undef; &Internals::SvREADONLY($x, 0); $$x = Scalar::Util::dualvar 0, \"lemons\"; [ undef ] # maybe?"},{"err_mask":"","code":"my $x = unpack \"b*\", \"this is a test\"; $c","out":"","err":"","out_mask":""},{"err":"","out":"0010111000010110100101101100111000000100100101101100111000000100100001100000010000101110101001101100111000101110","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = unpack \"b*\", \"this is a test\"; $x"},{"err_mask":"","code":"my @x; [ @x[0..3] ]","out":"[undef,undef,undef,undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"ARRAY(0x4f24b88)\",82987912]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err_mask":"","code":"my $x = []; [\"$x\", 0+$x]"},{"out_mask":"Ã¿","out":"1","err":"","code":"my %x; $x[1] = 1;","err_mask":""},{"err_mask":"","code":"my %x; %x[1] = 1; # gives a syntax error","out":"ERROR: Can't modify index/value array slice in list assignment at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"my ($x, $x) = (1, 2); $x"},{"err":"","out":"5","out_mask":"Ã¿","err_mask":"","code":"my %x; $x{a} = 4; @x{a} = (5); print $x{a}"},{"code":"my %x; $x{a} = 4; @x{'a','b'} = (5); print $x{a}","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"err_mask":"","code":"my $x; $x{abc} = 123; $x","out":"","err":"","out_mask":""},{"code":"my $x; $x ||= do { print 'bar'; 'baz' }; [ $x ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"bar","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]","code":"my $x; $x &&= do { print 'bar'; 'baz' }; [ $x ];","err_mask":""},{"code":"my $x; $x->what_did_you_expect","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"what_did_you_expect\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"my @x; { ++$#x } \\@x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]"},{"code":"my $x; $x++; $x","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿","err":"","out":"no","code":"my $x = []; $x == \\@$xs ? \"yes\" : \"no\"","err_mask":""},{"code":"my $x; $x ? $x++ : ( $x = 1 ); $x;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"my $x = {}; $x->{x} = $x; $x","out":"{x => $VAR1}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"yes","err":"","code":"my $x = []; $x == \\@$x ? \"yes\" : \"no\"","err_mask":""},{"err":"","out":"10","out_mask":"Ã¿Ã¿","err_mask":"","code":"my ($x, $y) = 1..10;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"33.754","code":"my ( $x, $y ) = ( 2733.754, 60 ); sprintf q{%.3f}, $x - int( $x/$y ) * $y;","err_mask":""},{"code":"my ( $x, $y ) = ( 2733.754, 60 ); ( ( $x * 10000 ) - ( int($x/$y) * $y * 10000) ) / 10000; ### :)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"33.754","err":""},{"err_mask":"","code":"my ( $x, $y ) = ( 2733.754, 60 ); $x - int( $x/$y ) * $y; ### :)","out":"33.7539999999999","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my ($x, $y) = 9..19;","out":"11","err":"","out_mask":"Ã¿Ã¿"},{"code":"my $x->{y} = $x;","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,undef]","err":"","code":"my ($x, $y); ${'x'} = 123; ${'y'} = 456;  [ $x, $y ] # even typo fixes I can't see how that would ever work","err_mask":""},{"err_mask":"","code":"my $x = 'Zoffix'; substr($x, 2, 1) = 'ooooo'; $x","out":"Zoooooofix","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @y = 1..9; my $x = (map { $y[$_-1] += $y[$_] } reverse 1..$#y)[-1]; $x # death.","out":"45","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[70978369,1]","err":"","code":"my $y=1; my $x=\\$y; ++$x; [$x, $y]","err_mask":""},{"out_mask":"Ã¿","err":"","out":"6","code":"my @y = ( 4, 5, 6 ); my $x = ( 0, @y[0 .. $#y] ); $x","err_mask":""},{"err_mask":"","code":"my @y = ( 4, 5, 6 ); my $x = ( 0, @y ); ### I thought that would work, but I see it interprets @y in ( 0, @y ) in scalar context, effectively being ( 0, 3 ) rather than ( 0, 4, 5, 6 )","out":"3","err":"","out_mask":"Ã¿"},{"code":"my @y = ( 4, 5, 6 ); my $x = @y; $x; ### Gives size of list instead, as expected here. Is there a way to get the last item in the list, similar to how the comma operator would, like above?","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"err_mask":"","code":"my %y; my $x; \\$x = \\$y{x}; $x = 42; [ $x, \\%y ]","out":"[42,{x => 42}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[42,{x => 42}]","err":"","code":"my %y; our $x; *x = \\$y{x}; $x = 42; [ $x, \\%y ]","err_mask":""},{"code":"my $y = q{bar}; my @x = <A \"B \\\\\"foo $y baz\\\\\" C\" D>; print qq{$_\\n} for @x; # Seems to do everything I've seen people over and over ask if qw() could do.","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"A\nB \"foo bar baz\" C\nD\n","err":""},{"err":"","out":"[\"foox\",\"fooy\",\"fooz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $y = q|foo{x,y,z}|; my @x = < $y >; \\@x;"},{"err_mask":"","code":"my $y = q{x y z}; my @x = <A \"B foo\" C $y D \"$y\" E>; \\@x; # Feels a little like bash.","err":"","out":"[\"A\",\"B foo\",\"C\",\"x\",\"y\",\"z\",\"D\",\"x y z\",\"E\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[11,9,10,[11]]","code":"my @z = my $ret = my ($x, $y) = 9..19; [ $ret, $x, $y, \\@z ]; # Basically just assigning $ret to @z, a la @z = $ret;","err_mask":""},{"code":"myÂ %argsÂ =Â {domainÂ =>Â \"example.net\", numberÂ =>Â 0;};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xC2; marked by <-- HERE after tures/; my<-- HERE near column 93 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","code":"my $_ = \"åå\"; s/(.)/sprintf('\\\\u%04x', $1)/ger","err_mask":""},{"code":"\"\\n\" =~ /^$/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\\\n\"]","err":"","code":"['\\n']","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\n\"]","code":"[\"\\n\"]","err_mask":""},{"code":"$n = 0; 5 / ($n || 1)","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"code":"$n=10;$==0,(1x$_)=~/^(1|11(??{}))*$(?{$=++})^/,print\"$= \"for 0..$n-1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1 1 2 3 5 8 13 21 34 55 ","err":""},{"err_mask":"","code":"$n=10;$==0,(1x$_)=~/^(1|11(?{}))*$(?{$=++})^/,print\"$= \"for 0..$n-1","out":"1 1 2 2 2 2 2 2 2 2 ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$n=10;$==0,(1x$_)=~/^(1|11)*$(?{$=++})^/,print\"$= \"for 0..$n-1","err":"","out":"1 1 2 2 2 2 2 2 2 2 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$n = 11111111113232323232 ; $d = $n << 32 >> 32 ; $d1 = ($n - $d) >> 32 ;  $r = pack(\"N\",$d1) . pack(\"N\",$d) ; print unpack(\"H*\",$r) .\"\\n\"","err":"","out":"9a3298b0341b92a0\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$n = 232 ; $d = $n << 32 >> 32 ; $d1 = ($n - $d) >> 32 ;  $r = pack(\"N\",$d1) . pack(\"N\",$d) ; print unpack(\"H*\",$r) .\"\\n\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"00000000000000e8\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ffffffffffffffff\n","err":"","code":"$n = 23342342342342342342 ; $d = $n << 32 >> 32 ; $d1 = ($n - $d) >> 32 ;  $r = pack(\"N\",$d1) . pack(\"N\",$d) ; print unpack(\"H*\",$r) .\"\\n\"","err_mask":""},{"code":"$n = 42; $, = ' '; print ++$n, ++$n, ++$n, ++$n  # oh, really","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"46 46 46 46"},{"err_mask":"","code":"$n = 4; [ 'abcdefghi' =~ /c@{['(.)'x$n]}/ ]","err":"","out":"[\"d\",\"e\",\"f\",\"g\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"5","code":"$n = 5; $n = $n++; $n","err_mask":""},{"err_mask":"","code":"$n = 5; $n = ++$n; $n","err":"","out":"6","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ab\nac\nac\n1\n\n","err":"","code":"$\\=\"\\n\"; $_ = \"ab\"; print; $_++; print; $_+0; print; $_++; print","err_mask":""},{"out":"ab\nac\nac\n1\n\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$\\=\"\\n\"; $_ = \"ab\"; print; $_++; print; $_+0; print; $_++; print; ()"},{"code":"$! = 'NaN'; $!","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"No such file or directory"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal division by zero at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"'nan'/0","err_mask":""},{"out":"bless( {sign => \"NaN\",value => [0]}, 'Math::BigInt' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"NaN/0"},{"out_mask":"","out":"","err":"","code":"!!( \"nan\" <= 1.0 )","err_mask":""},{"err_mask":"","code":"\"NaN\" <=> \"NaN\"","out":"","err":"","out_mask":""},{"err_mask":"","code":"(\"NaN\" <=> \"NaN\") + 0","out":"0","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"'na'x3^\"\\f\"","out":"banana","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"\"\\n\" =~ /\\A\\z/"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã°ÂÂÂº","code":"\"\\N{BEER MUG}\"","err_mask":""},{"err_mask":"","code":"\"\\nD\" =~ /^D/m","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"needs more :","code":"'needs more :'","err_mask":""},{"err":"","out":"[\"true\",\"true\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$new = true; [$new, true]"},{"err_mask":"","code":"{ next }","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{a => {}}]","err":"","code":"{ next if $x->{a}{b}; } [ $x ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"nickserv!nickserv","err":"","code":"\"nickserv!nickserv@blah\"","err_mask":""},{"code":"\"\\N{INTERROBANG}\" x 3 . \"HELLO\" . \"\\N{INTERROBANG}\" x 3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¢ÂÂ½Ã¢ÂÂ½Ã¢ÂÂ½HELLOÃ¢ÂÂ½Ã¢ÂÂ½Ã¢ÂÂ½"},{"out_mask":"Ã¿","out":"1","err":"","code":"\"\\n\" =~ /\\n/","err_mask":""},{"code":"[ \"  \\n   \\n  \\n   hello\\n\" =~ s/^\\s*\\n//r ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"   hello\\n\"]"},{"code":"\"  \\n   \\n  \\nhello\\n\" =~ s/^\\s*//sr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hello\n","err":""},{"code":"$_ = \"\\n\\nTAG\\n\\n\\n\"; s/\\A\\n+//; s/\\n+\\z/\\n/; [ $_ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"TAG\\n\"]"},{"err_mask":"","code":"no arybase;","err":"","out":"","out_mask":""},{"err_mask":"","code":"no autovivification 'delete'; delete $undef->{key}; $undef","out":"ERROR: Can't locate autovivification.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$nodes[5] = 1; \\@nodes","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,undef,undef,undef,undef,1]","err":""},{"err_mask":"","code":"@nodeStatus = (0) * 150; \\@nodeStatus","out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out":"[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@nodeStatus = (0) x 150; \\@nodeStatus"},{"err_mask":"","code":"no feature ':all'; sub foo (;$) { [@_] }; my %h = ( bar => foo 42, meow => 'moo' );  \\%h","err":"","out":"{meow => \"moo\",bar => [42]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"no feature; no indirect 'fatal'; sub new { bless [] }; [ new {main} 1,2 ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} 1\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"no feature; no indirect 'fatal'; sub new { bless [] }; package foo; sub new { bless [] }; [ new {main} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( [], 'foo' )]"},{"err":"","out":"ERROR: Indirect call of method \"new\" on object \"main\" at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no feature; no indirect 'fatal'; sub new { bless [] }; package foo; sub new { bless [] }; [ new main ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( [], 'foo' )]","code":"no feature; no indirect 'fatal'; sub new { bless [] }; package foo; sub new(*) { bless [] }; [ new main ]","err_mask":""},{"err_mask":"","code":"no feature; no indirect 'fatal'; sub new { bless [] }; package foo; sub new { die @_ }; [ new {main} ]","out":"ERROR: HASH(0x36acb88)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} 1\"\n","code":"no feature; no indirect 'fatal'; sub new { bless [] }; package foo; sub new { die @_ }; [ new {main} 1,2 ]","err_mask":""},{"err_mask":"","code":"no feature; no indirect; sub new { bless [] }; package foo; sub new(*) { bless [] }; [ new main ]","err":"","out":"[bless( [], 'foo' )]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"foo\\nbar\\nbaz\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no feature 'say'; open $fh, \">\", \\$str; say $fh $_ for qw,foo bar baz,; [ $str ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$fh $_\"\n","code":"no feature 'say'; open $fh, \">\", \\$str; say($fh $_) for qw,foo bar baz,; [ $str ]","err_mask":""},{"err_mask":"","code":"no feature 'signatures'; sub foo (\\@) { say @_ };  foo +(split //, \"foobar\")","out":"ERROR: Type of arg 1 to main::foo must be array (not split) at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"no feature 'signatures'; sub foo { [@_] } sub bar (\\@) { [@_] } [foo(1,2,3), bar(1,2,3)]","err":"","out":"ERROR: Type of arg 1 to main::bar must be array (not constant item) at (eval 1) line 1, near \"3)\"\nToo many arguments for main::bar at (eval 1) line 1, near \"3)\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[{thingy => 1},2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no feature 'signatures'; sub foo ($) { {thingy => $_[0]} } [foo 1, 2, 3]"},{"err":"","out":"[4,3,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no feature 'signatures'; sub sort_subset_by (\\@@) { my ($expected, @stuff) = @_; my %in = map { ($_ => 1) } @stuff; return grep { $in{$_} } @$expected; } my @exp = (5,4,3,2,1); my @arr = (2,3,4); [sort_subset_by @exp, @arr]"},{"code":"no feature; sub new { bless [] }; package foo; sub new(*) { bless [] }; [ new main ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( [], 'foo' )]"},{"code":"no feature 'unicode_strings'; my $d = my $u; utf8::upgrade($u); utf8::downgrade($d); [ map /\\w/, $u, $d ]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"out":"[1,0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no feature 'unicode_strings'; my $d = my $u = \"\\x{df}\"; utf8::upgrade($u); utf8::downgrade($d); [ map 0+/\\w/, $u, $d ]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"no feature 'unicode_strings'; my $d = my $u = \"\\x{df}\"; utf8::upgrade($u); utf8::downgrade($d); [ map /\\w/, $u, $d ]","err_mask":""},{"code":"no feature 'unicode_strings'; \"\\N{U+666}\" =~ /\\d/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"no indirect; parse backwards;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"parse\" via package \"backwards\" (perhaps you forgot to load \"backwards\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"Indirect call of method \"parse\" on object \"backwards\" at (eval 1) line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"new main \"\n","err":"","code":"no indirect; sub main { bless [] }; [ new main ]","err_mask":""},{"out":"No output.","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"No output.\""},{"code":"no overloading; '' . *STDOUT{IO};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","out":"IO::File=IO(0x17d7f78)","err":""},{"err_mask":"","code":"no 'strict'","out":"ERROR: syntax error at (eval 1) line 1, near \"no 'strict'\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"no strict; [ Foo ]","err":"","out":"[\"Foo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"no strict 'refs';  my $lexicalvar = \"hello\";  ${\"lexicalvar\"}","err_mask":""},{"err":"","out":"hello","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no strict 'refs';  our $packagevar = \"hello\";  ${\"packagevar\"}"},{"err_mask":"","code":"no strict; sub Foo { \"Bar\" }; [ Foo ]","out":"[\"Bar\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{one => [[\"a\",0,\"F\"],[\"b\",1,\"N\"],[\"c\",2,\"N\"]],two => [[\"x\",0,\"F\"],[\"y\",1,\"N\"],[\"z\",2,\"N\"]]}","err":"","code":"no strict 'vars'; sub foo { local $n = $n//0; my @p = (shift, $n, $n ? 'N' : 'F'); ++$n; @_ ? (\\@p, &foo) : \\@p }; { 'one' => [foo('a'..'c')], 'two' => [foo('x'..'z')] };","err_mask":""},{"code":"no strict 'vars'; sub foo { local $n = $n//0; my @p = [ shift, $n, $n ? 'N' : 'F' ]; ++$n; @_ ? [ @p, foo( @_ ) ] : \\@p }; { 'one' => foo('a'..'c'), 'two' => foo('x'..'z') };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{one => [[\"a\",0,\"F\"],[[\"b\",1,\"N\"],[[\"c\",2,\"N\"]]]],two => [[\"x\",0,\"F\"],[[\"y\",1,\"N\"],[[\"z\",2,\"N\"]]]]}","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{one => [\"a\",0,\"F\",\"b\",0,\"F\",\"c\",0,\"F\"],two => [\"x\",0,\"F\",\"y\",0,\"F\",\"z\",0,\"F\"]}","err":"","code":"no strict 'vars'; sub foo { local $n = $n//0; my @p = (shift, $n, $n ? 'N' : 'F'); @_ ? (@p, &foo) : @p }; { 'one' => [foo('a'..'c')], 'two' => [foo('x'..'z')] };","err_mask":""},{"err":"","out":"{one => [[\"a\",0,\"F\"],[\"b\",0,\"F\"],[\"c\",0,\"F\"]],two => [[\"x\",0,\"F\"],[\"y\",0,\"F\"],[\"z\",0,\"F\"]]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no strict 'vars'; sub foo { local $n = $n//0; my @p = (shift, $n, $n ? 'N' : 'F'); @_ ? (\\@p, &foo) : \\@p }; { 'one' => [foo('a'..'c')], 'two' => [foo('x'..'z')] };"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ No::Such::Class->import() ]","err_mask":""},{"out":"{not => \"a block\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ not => 'a block' }"},{"err_mask":"","code":"$nothing=\"a\"; print \"Nothing found\\n\" if $nothing !~ /^\\w+/;","err":"","out":"","out_mask":""},{"err_mask":"","code":"$nothing=\"\"; if ($nothing !~ /./) { print \"Nothing found\\n\" }","err":"","out":"Nothing found\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$nothing=\"\"; print \"Nothing found\\n\" if $nothing eq \"\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Nothing found\n"},{"err_mask":"","code":"$nothing=\"\"; print \"Nothing found\\n\" if $nothing !~ /^\\w+/;","out":"Nothing found\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"no utf8; encode 'UTF-8', 'ÃÂ¡r jÃÂº sÃÂºr?'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ÃÂÃÂÃÂÃÂ¡r jÃÂÃÂÃÂÃÂº sÃÂÃÂÃÂÃÂºr?"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"195.188","code":"no utf8; printf \"%vd\", \"Ã¼\"  # does this even work","err_mask":""},{"err_mask":"","code":"{no utf8; $x=\"âââ\" }; $x","err":"","out":"Ã¢ÂÂÃ¢ÂÂÃ¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"Ã°ÂÂÂ©","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\N{PILE OF POO}\""},{"err_mask":"","code":"[ $., $NR ]","out":"[1,undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"\\N{REGIONAL INDICATOR SYMBOL LETTER Z}\\N{REGIONAL INDICATOR SYMBOL LETTER A}\"","err":"","out":"Ã°ÂÂÂ¿Ã°ÂÂÂ¦","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"\n\r\n","err":"","code":"\"\\n\\r\\n\"","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"\"\\n\" =~ /\\s/"},{"err_mask":"","code":"\"\\n\" =~ /(?[ \\s - [\\n] ])/ ? \"match\" : \"no match\"","err":"","out":"no match","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Substitution pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\n\" =~ (?[ \\s - [\\n] ]) ? \"match\" : \"no match\""},{"err_mask":"","code":"\"\\N{SNOWMAN}\"","err":"","out":"Ã¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"Ã¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\N{SPARKLE}\""},{"err_mask":"","code":"\"\\N{SPARKLE}\";","out":"Ã¢ÂÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\x{2747}\"]","code":"[ \"\\N{SPARKLE}\" ]","err_mask":""},{"err_mask":"","code":"[ \"\\N{test}\" ]","out":"ERROR: Unknown charname 'test' at (eval 1) line 1, within string\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"Â¢","code":"\"\\N{U+00A2}\"","err_mask":""},{"err":"","out":"match","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\N{U+0B}\" =~ /(?[ \\s - [\\n] ])/ ? \"match\" : \"no match\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂ«","err":"","code":"\"\\N{U+1f52b}\"","err_mask":""},{"code":"\"\\N{U+666}\" =~ /\\d/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"$num = 0b00000011111111111111111111111111; [vec($num, 0, 26), vec($num, 26, 6)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Illegal number of bits in vec at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿","err":"","out":"-2","code":"$num = -1.67; int($num + $num / abs($num * 2));","err_mask":""},{"err":"","out":"b1n2n3","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$num = 1; \"banana\" =~ s/a/$num++/ger"},{"code":"$num = 1; \"banana\" =~ s/a/\"test: ${\\$num++}\"/ger","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"btest: 1ntest: 2ntest: 3"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"btest: 1++ntest: 1++ntest: 1++","err":"","code":"$num = 1; \"banana\" =~ s/a/\"test: $num++\"/ger","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"b1n2n3","err":"","code":"$num = 1; \"banana\" =~ s/a/test: $num++/ger","err_mask":""},{"err":"","out":"4,294,967,296","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$num=2**32; $digits=reverse $num; $digits =~ s/(\\d\\d\\d)(?=\\d)(?!\\d*\\.)/$1,/g; $num=reverse $digits; print $num"},{"code":"$num=2**32; $digits=reverse $num; $digits =~ s/(\\d\\d\\d)(?=\\d)(?!\\d*\\.)/$1,/g; print $digits;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"692,769,492,4","err":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"$num='2**32'; $digits=reverse $num; $digits =~ s/(\\d\\d\\d)(?=\\d)(?!\\d*\\.)/$1,/g; print reverse $digist;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"23**2","code":"$num='2**32'; $digits=reverse $num; $digits =~ s/(\\d\\d\\d)(?=\\d)(?!\\d*\\.)/$1,/g; print reverse $digits;","err_mask":""},{"err_mask":"","code":"$num=2**32; $digits=reverse $num; $digits =~ s/(\\d\\d\\d)(?=\\d)(?!\\d*\\.)/$1,/g; print reverse $digits;","out":"692,769,492,4","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$num=\"2\"; $num = sprintf(\"%02d\", $num); print $num","err":"","out":"02","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"$num=\"2\"; $num = sprintf(\"%2d\", $num); print $num","out":" 2","err":"","out_mask":"Ã¿Ã¿"},{"code":"@nums = (30, 7, 200, 40, 5, 1000); [ [ sort @nums ], [ sort { $a <=> $b } @nums ] ] # string-sort using default cmp vs numeric <=>","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[1000,200,30,40,5,7],[5,7,30,40,200,1000]]","err":""},{"code":"\"\\N{VERTICAL TAB}\" =~ /(?[ \\s - [\\n] ])/ ? \"match\" : \"no match\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unknown charname 'VERTICAL TAB' at (eval 1) line 1, within string\n","err":""},{"err_mask":"","code":"\"\\N{VT}\" =~ /(?[ \\s - [\\n] ])/ ? \"match\" : \"no match\"","err":"","out":"match","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"\\n\" =~ /^/ ? 'y' : 'n'","err_mask":"","out_mask":"Ã¿","out":"y","err":""},{"err_mask":"","code":"\"\\n\" =~ /^$/ ? 'y' : 'n'","err":"","out":"y","out_mask":"Ã¿"},{"err":"","out":"n","out_mask":"Ã¿","err_mask":"","code":"\"\\n\" =~ /^\\z/ ? 'y' : 'n'"},{"code":"$obj->generic_method();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"generic_method\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"@occ = 'xxx hihi.so yyy hoho.so' =~ /\\w+\\.so/g; \\@occ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hihi.so\",\"hoho.so\"]"},{"code":"[ oct \"0.00_02\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":""},{"code":"oct '0775'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"509","err":""},{"out_mask":"Ã¿","out":"0","err":"","code":"oct '0a'","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"36","code":"oct \"0b0100100\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[2,2,2]","code":"[ oct(0b10),oct(0x2),hex(0b10) ]","err_mask":""},{"err_mask":"","code":"oct(0b11111);","out":"25","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"oct '0b' . '11111111'","err":"","out":"255","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"oct '0b' . ('1' x 64)","err":"Binary number > 0b11111111111111111111111111111111 non-portable at (eval 1) line 11, <STDIN> line 1.\n","out":"18446744073709551615","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"oct \"0x10\"","err_mask":"","out_mask":"Ã¿Ã¿","out":"16","err":""},{"out":"[16,16]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ oct \"0x10\", hex \"010\" ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[10]","code":"[ oct \"0xa\" ]","err_mask":""},{"out_mask":"Ã¿","out":"8","err":"","code":"oct \"10\"","err_mask":""},{"err_mask":"","code":"[ oct \"10_00\" ]","err":"","out":"[512]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"oct \"1_2\"","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"10"},{"err_mask":"","code":"oct \"1.2e3\"","out":"1","err":"","out_mask":"Ã¿"},{"code":"oct(\"420)\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":""},{"err_mask":"","code":"oct \"4e3\"","err":"","out":"4","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","code":"$_='oh turtleneck","err_mask":""},{"code":"$_='oh turtleneck phrase jar!'; s/.{13}\\K.*//s; print;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"oh turtleneck","err":""},{"err_mask":"","code":"$_='oh turtleneck phrase jar!'; s/(?<=.{13}).*//; print","err":"","out":"oh turtleneck","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_='oh turtleneck phrase jar!'; s/(?<=.{13}).*//s; print","out":"oh turtleneck","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_='oh turtleneck phrase jar!'; s/(?<=.{13}).*//s; print;","out":"oh turtleneck","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_='oh turtleneck phrase jar!'; s/(?<=\\w{13}).*//s; print;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"oh turtleneck phrase jar!","err":""},{"out":"[\"\",\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$old = 'abc'; $new = substr($old, 0) = ''; [$old, $new]"},{"code":"$old = 'abc'; $new = substr($old) = ''; [$old, $new]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"$old) \"\n","err":""},{"err_mask":"","code":"\\@ONC","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"one\",1,\"two\",2,\"three\",3]","code":"$_ = \"one=1 two=2 three=3\"; [ m/(\\w+)=(\\d+)/gc ]","err_mask":""},{"out":"onetwothree","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"one=1 two=2 three=3\"; print $1 while m/(\\w+)=(\\d+)/gc"},{"out_mask":"Ã¿","out":"1","err":"","code":"$one = 'foobar'; $two = \"foobazquux\"; $count = () = $one.$two =~ /[$one$two]/g","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"16","code":"$one = 'foobar'; $two = \"foobazquux\"; $count = () = ($one.$two) =~ /[\\Q$one$two\\E]/g","err_mask":""},{"err_mask":"","code":"$one = 'foobar'; $two = \"foobazquux\"; $count = () = $one.$two =~ /[\\Q$one$two\\E]/g","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"5","out_mask":"Ã¿","err_mask":"","code":"$one = 'foobar'; $two = \"foobazquux\"; $count = () = $two =~ /[$one]/g"},{"code":"$one = \"foobar\"; $two = \"foobazquux\"; $i++ while substr($one, $i, 1) eq substr($two, $i, 1); $i","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"out":"[\"three some text four\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"one\\ntwo\\nthree some text four\\nfive\\n\"; [ /(.*some text.*)/ ]"},{"err_mask":"","code":"[\"one two \" =~ /(one (two)) (three)?/]","err":"","out":"[\"one two\",\"two\",undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"one.two\"]","code":"$_ = 'one.two.three'; [ /(.*)\\./ ]","err_mask":""},{"code":"$_ = \"one two three\"; %h = ( one => 1, two => 2 ); s/$_/$h{$_}/ for keys %h; $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"one two three"},{"err_mask":"","code":"$_ = \"one two three\"; %h = ( one => 1, two => 2 ); s/$_/$h{$_}/ for keys %h; $_\"","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[\"one two three\" =~ /(one (two)) (three)/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"one two\",\"two\",\"three\"]"},{"err":"","out":" two three","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'one two two three'; $_ =~ s/^.*?two//; $_"},{"err":"","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'one two two three' =~ 's/^.*?two//r"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":" two three","code":"'one two two three' =~ s/^.*?two//r","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"O_O","err":"","code":"\"O.O\" =~ s/\\./_/r","err_mask":""},{"code":"[ ${^OPEN} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]"},{"code":"open(2, \"|df -h\")","err_mask":"","out_mask":"","out":"","err":""},{"code":"[ 'openerp-server' =~ m{/([^/]+)$} ]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"err_mask":"","code":"open $fh, \">\", \\$str; say($fh 'asdf'); [ $str ]","out":"[\"asdf\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"foo\\nbar\\nbaz\\n\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"open $fh, \">\", \\$str; say($fh $_) for qw,foo bar baz,; [ $str ]"},{"code":"open FILE, \"<\", \"/etc/passwdoeuoe\"; print <FILE>","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"open FILE, \"<\", \"/etc/passwd\"; print <FILE>","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"","out":"","err":"","code":"open $f, \"<\", \"/proc/self/mountinfo\"; fileno($f)","err_mask":""},{"err_mask":"","code":"open my $fh, \\$altreus; print $fh \"I hate you\";","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Too many open files at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"open my @fh, '<', '/dev/zero' or die $!; \\@fh","err_mask":""},{"code":"open my $fh, '>', \\my $buffer; ref $fh","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"GLOB"},{"code":"open my $fh, '>', \\my $foo or die $!; [$fh, $fh->isa(\"GLOB\"), ref $fh]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\\*{'::$fh'},1,\"GLOB\"]","err":""},{"out":"[\\*{'::$fh'},1,\"GLOB\",[]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"open my $fh, '>', \\my $foo or die $!; [$fh, $fh->isa(\"GLOB\"), ref $fh, \\@GLOB::ISA]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"GLOB","code":"open my $fh, '>', \\my $foo or die $!; print ref $fh;","err_mask":""},{"out":"[\"IO::File=IO(0x3771a08)\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"open my $fh , '>', \\my $str; [ '' . *$fh{IO} ]"},{"code":"open my $fh , '>', \\my $str; [ *$fh{IO} ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[bless( , 'IO::File' )]","err":"cannot handle ref type 15 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Data/Dumper.pm line 233, <STDIN> line 1.\n"},{"code":"open my $fh , '>', \\my $str; [ ref *$fh{IO} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"IO::File\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"GLOB\"]","code":"open my $fh , q{>}, \\(my $str); say $fh q{foo}; [ ref $fh ];","err_mask":""},{"err_mask":"","code":"open my($fh), \"<\", \"some file which doesn't exist\"; [ $! + 0, \"\" . $! ]","err":"","out":"[24,\"Too many open files\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"open my($fh), \"<\", \"some file which doesn't exist\"; [ 0 + $!, \"\" . $! ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[24,\"Too many open files\"]"},{"code":"open my $fh, '<', \\\"xyzwtu\"; my $s = \"abc\"; read $fh, $s, 4, 3; $s","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abcxyzw","err":""},{"err_mask":"","code":"open my $lol, '<', 'lol'; <$lol>","err":"","out":"","out_mask":""},{"code":"open my $lol, '>', 'lol'; $lol->print(\"lol\");","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"ERROR: write: Too many open files at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"open( my $ofh, q{>}, q{/tmp/abc.txt} ) or die qq{write: $!}; print $ofh q{abcdefghijklmnopqrstuvwxyz}; close $ofh; open( my $ifh, q{<}, q{/tmp/abc.txt} ) or die qq{read: $!}; my $count = read $ifh, my $chunk, 10, 5; close $ifh; [ $count, $chunk ];"},{"code":"open $out2, '>&=', 2 or warn \">$!<\"; $out2->autoflush(1); \"\".$out2","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","out":"GLOB(0x3912b88)","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use an undefined value as filehandle reference at (eval 1) line 1, <STDIN> line 1.\n","code":"open undef","err_mask":""},{"err_mask":"","code":"ord 'Â«'","out":"194","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"194","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"ord 'Â£'"},{"err":"","out":"42","out_mask":"Ã¿Ã¿","err_mask":"","code":"ord '*'"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"226","code":"ord 'â'","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"39","err":"","code":"ord \"'\"","err_mask":""},{"out":"47","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"ord('/')"},{"err_mask":"","code":"ord(\".\")","err":"","out":"46","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[ ord \"â°\", ord \"â¹\" ]","err":"","out":"[226,226]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[194]","err":"","code":"[ord \"Â²\"]","err_mask":""},{"code":"ord 'a'","err_mask":"","out_mask":"Ã¿Ã¿","out":"97","err":""},{"code":"ord 'A'","err_mask":"","out_mask":"Ã¿Ã¿","out":"65","err":""},{"out":"32","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"ord('a')^ord('A')"},{"err":"","out":"233","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"ord chr 0xe9"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"(ord chr 0xe9) == 0xe9"},{"code":"ord chr 0xe9 == 0xe9","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"; or\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"or deparse:?"},{"code":"$#order = 2; $#order","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"code":"@order = 2; @order and @order = grep $_, @order[-2, -1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of non-creatable array value attempted, subscript -2 at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"","out":"0","code":"$#order = 2; @order and @order = grep $_, @order[-2,-1]","err_mask":""},{"code":"$#order = 2; @order and order = grep $_, @order[-2,-1];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in scalar assignment at (eval 1) line 1, at EOF\n","err":""},{"code":"@order and @order = grep $_, @order[-2, -1]","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"err_mask":"","code":"... or die","out":"ERROR: Unimplemented at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"10","out_mask":"Ã¿Ã¿","err_mask":"","code":"ord \"\\n\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[126,32]","err":"","code":"[ord '~', ord ' ']","err_mask":""},{"err_mask":"","code":"[ord '.', ord '[']","out":"[46,91]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"ord('/') - ord('+')","out":"4","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"ord pack 'A', 32","err":"","out":"51","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"ord pack \"B8\", \"11111110\"","out":"254","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"ord(split '',a..m=>N..Z)-7","err_mask":"","out_mask":"Ã¿Ã¿","out":"41","err":""},{"err_mask":"","code":"[ord 'Ã']","err":"","out":"[195]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"ord unpack 'A', 32","out":"51","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"ord \"\\xFE\"","err":"","out":"254","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"208","code":"ord 'Ð¹'","err_mask":""},{"err_mask":"","code":"or evaljs:","out":"ERROR: syntax error at (eval 1) line 1, near \"; or\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"bar","code":"$_=\"otmat\"; /(?{$name=\"foo\"})re[x]ma|(?{$name=\"bar\"})o[ther]matc/; $name","err_mask":""},{"code":"our $AUTOLOAD = 'cats'; sub cats { \"lol\" } notlol()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::notlol called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,2,\"abc\"]","code":"our $baz = 'abc'; package foo; sub bar { our $baz; return ++$baz }; package main; [ foo::bar(), foo::bar(), $foo::baz, $baz ]","err_mask":""},{"err_mask":"","code":"{ our $baz = 'abc'; package foo; sub bar { our $baz; return ++$baz }; }; package thisfails; [ foo::bar(), foo::bar(), $foo::baz, $baz ]","err":"","out":"[1,2,2,undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[1,2,2,\"abc\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our $baz = 'abc'; package foo; sub bar { our $baz; return ++$baz }; package thisfails; [ foo::bar(), foo::bar(), $foo::baz, $baz ]"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"our $descriptivism++;"},{"err_mask":"","code":"our $DIR; BEGIN { $DIR = 'BAR' } say $DIR;","out":"BAR\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"2","err":"","code":"our %foo = 1 .. 2; *foo->{1}","err_mask":""},{"out":"ERROR: Not a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our %foo = 1, 2; (\\*foo)->{HASH}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{1 => undef}","err":"","code":"our %foo = 1, 2; *foo{HASH}","err_mask":""},{"err_mask":"","code":"{ our $foo = 5;} eval { $foo }; { our $foo . $@ }","err":"","out":"5","out_mask":"Ã¿"},{"code":"our $n = 0; sub foo { local $n = $n; my @p = [ shift, $n ? 'N' : 'F' ]; ++$n; @_ ? do { @p, foo( @_ ) } : \\@p }; { 'one' => foo('a'..'c'), 'two' => foo('x'..'z') };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{one => [\"a\",\"F\"],\"ARRAY(0x3468e28)\" => [[\"z\",\"N\"]],two => [\"x\",\"F\"],\"ARRAY(0x2d18130)\" => [[\"c\",\"N\"]]}","err":""},{"out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{\"ARRAY(0x2ac1130)\" => [[\"c\",\"N\"]],one => [\"a\",\"F\"],\"ARRAY(0x3211e28)\" => [[\"z\",\"N\"]],two => [\"x\",\"F\"]}","code":"our $n = 0; sub foo { local $n = $n; my @p = [ shift, $n ? 'N' : 'F' ]; ++$n; @_ ? do { @p, foo( @_ ) } : \\@p }; { one => foo('a'..'c'), two => foo('x'..'z') };","err_mask":""},{"err_mask":"","code":"our $n = 0; sub foo { local $n = $n; my @p = [ shift, $n ? 'N' : 'F' ]; ++$n; @_ ? [ @p, foo( @_ ) ] : \\@p }; { 'one' => foo('a'..'c'), 'two' => foo('x'..'z') };","out":"{one => [[\"a\",\"F\"],[[\"b\",\"N\"],[[\"c\",\"N\"]]]],two => [[\"x\",\"F\"],[[\"y\",\"N\"],[[\"z\",\"N\"]]]]}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"our $n = 0; sub foo { local $n = $n; my @p = [ shift, $n, $n ? 'N' : 'F' ]; ++$n; @_ ? [ @p, foo( @_ ) ] : \\@p }; { 'one' => foo('a'..'c'), 'two' => foo('x'..'z') };","err":"","out":"{one => [[\"a\",0,\"F\"],[[\"b\",1,\"N\"],[[\"c\",2,\"N\"]]]],two => [[\"x\",0,\"F\"],[[\"y\",1,\"N\"],[[\"z\",2,\"N\"]]]]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Wimbledon(eval 1)1","err":"","code":"our sub Bulgaria { print caller; } package Wimbledon; Bulgaria()","err_mask":""},{"code":"our $varname = \"womble\"; ${$varname} = \"Bulgaria\"; print \"Uncle $womble\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Uncle Bulgaria","err":""},{"code":"our $x = \"\\","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"{ our $x = \"dogs\" } { our $x; print $x }","err":"","out":"dogs","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"our $x=\"\\n\"; $x = chomp $x; $x","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err":"","out":"package","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our $x = 'package'; my $x = 'lexical'; { our $x; print $x }"},{"err":"","out":"[\\undef,$VAR1->[0]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our $x; sub lala { \\$x } [\\$x, lala()] # also identical"},{"out":"ERROR: Can't modify glob elem in scalar assignment at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our %y; our $x = 5; *{y{x}} = *x; $y = 3; [ $x, \\%y ]; ### I saw this in some code I was reviewing, which I think was someone trying to alias a hash key to a variable, similar to *x = *y, but it doesn't seem t owork (maybe for an old Perl?)"},{"code":"@output=`df -h`; for my $line (@output){ print $line if $line =~ /procfs/ }","err_mask":"","out_mask":"","err":"","out":""},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ overload::Overloaded( 'Regexp' ) ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]","code":"[ overload::Overloaded( v1.2.3 ) ]","err_mask":""},{"err_mask":"","code":"overload::StrVal bless {}, \"Whatevs\"","out":"Whatevs=HASH(0x460eb88)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{1 => 2}","code":"%p = (1,2); @array = values %p; s/\\d// for @array; \\%p","err_mask":""},{"code":"%p = (1,2); s/\\d// for keys %p","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"{1 => 2}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%p = (1,2); s/\\d// for keys %p; \\%p"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{1 => \"\"}","code":"%p = (1,2); s/\\d// for values %p; \\%p","err_mask":""},{"err_mask":"","code":"$P2::x = \"P2\"; package P1; our $x = \"P1\"; package P2; $x","err":"","out":"P1","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"P2","code":"$P2::x = \"P2\"; package P1; $x = \"P1\"; package P2; $x","err_mask":""},{"err_mask":"","code":"pack \"a\", 0x32;","err":"","out":"5","out_mask":"Ã¿"},{"err_mask":"","code":"pack \"a\", 0x33;","err":"","out":"5","out_mask":"Ã¿"},{"err_mask":"","code":"pack '(a)*', 123456 =~ /.(.)(?<=(.).)/g","err":"","out":"214365","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"3","err":"","code":"pack 'a', 32","err_mask":""},{"out_mask":"Ã¿","out":"3","err":"","code":"pack 'A', 32","err_mask":""},{"out_mask":"Ã¿","out":"4","err":"","code":"pack 'a', 48","err_mask":""},{"err_mask":"","code":"__PACKAGE__","err":"","out":"main","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"main\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ __PACKAGE__ ]"},{"code":"package A; sub new { bless {}, ref $_[0] || $_[0]; } sub foo { [ $_[0], q{A:111} ]; } package B; our @ISA = qw(A); package C; our @ISA = qw(A); package D; our @ISA = qw(B C); package main; my $d = D->new; [ $d->foo, $d->B::foo, $d->C::foo, $d->A::foo ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[bless( {}, 'D' ),\"A:111\"],[$VAR1->[0][0],\"A:111\"],[$VAR1->[0][0],\"A:111\"],[$VAR1->[0][0],\"A:111\"]]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[bless( {}, 'D' ),\"B:222\"],[$VAR1->[0][0],\"B:222\"],[$VAR1->[0][0],\"C:333\"],[$VAR1->[0][0],\"A:111\"]]","code":"package A; sub new { bless {}, ref $_[0] || $_[0]; } sub foo { [ $_[0], q{A:111} ]; } package B; our @ISA = qw(A); sub foo { [ $_[0], q{B:222} ]; } package C; our @ISA = qw(A); sub foo { [ $_[0], q{C:333} ]; } package D; our @ISA = qw(B C); package main; my $d = D->new; [ $d->foo, $d->B::foo, $d->C::foo, $d->A::foo ];","err_mask":""},{"err":"","out":"[\"A::x\",\"B::x\",\"C::x\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package A; sub x { q{A::x}; } package B; sub x { q{B::x}; } package C; sub x { q{C::x}; } package main; [ map { $_->can( q{x} )->() } qw(A B C) ]; ### litewait"},{"out":"eh","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"package Blah { sub foo { print \"eh\" } } Blah::foo()"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","code":"package Blah { sub foo { print \"eh\" } } foo()","err_mask":""},{"out":"{mewl => *Cats::mewl,meow => *Cats::meow}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Cats; our $meow; our $mewl = '>:('; package main; \\%Cats::"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{meow => *Cats::meow}","err":"","code":"package Cats; our $meow; package main; \\%Cats::","err_mask":""},{"code":"package C; sub new { bless {}, ref $_[0] || $_[0] } package main; my $foo = sub { [ @_ ] }; my $c = C->new; $c->$foo( 1..3 );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( {}, 'C' ),1,2,3]"},{"err_mask":"","code":"package C; sub new { bless {}, ref $_[0] || $_[0] } package main; sub foo { [ @_ ] }; \\&foo;","out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package C; sub new { bless {}, ref $_[0] || $_[0] } package main; sub foo { [ @_ ] }; my $c = C->new; $c->(\\&foo)->( 1..3 );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package C; sub new { bless {}, ref $_[0] || $_[0] } package main; sub foo { [ @_ ] }; my $c = C->new; $c->(\\&foo)( 1..3 );","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( {}, 'C' ),1,2,3]","code":"package C; sub new { bless {}, ref $_[0] || $_[0] } package main; sub foo { [ @_ ] }; my $c = C->new; $c->${\\\\&foo}( 1..3 );","err_mask":""},{"code":"package C; sub new { bless {}, ref $_[0] || $_[0] } package main; sub foo { [ @_ ] }; my $c = C->new; $c->\\&foo( 1..3 );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"->\\\"\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"foo\" via package \"C\" at (eval 1) line 1, <STDIN> line 1.\n","code":"package C; sub new { bless {}, ref $_[0] || $_[0] } package main; sub foo { [ @_ ] }; my $c = C->new; my $name = \"foo\"; $c->$name( 1..3 );","err_mask":""},{"err":"","out":"[bless( {}, 'C' ),1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package C; sub new { bless {}, ref $_[0] || $_[0] } package main; sub foo { [ @_ ] }; my $c = C->new; my $ref = \\&foo; $c->$ref( 1..3 );"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"CODE(0x42c1ac0)\",\"CODE(0x3977a90)\",222,111]","code":"package C; sub new { bless {}, ref $_[0] || $_[0] } sub foo { 111 }; package main; my $o = \\&C::foo; { no warnings qw/redefine/; *C::foo = sub { 222 }; } my $c = C->new; [ qq{$o}, q{}.\\&C::foo, $c->foo, $c->$o ];","err_mask":""},{"code":"package C; sub new { bless {}, ref $_[0] || $_[0] } sub foo { 111 }; package main; my $o = \\&C::foo; undef &C::foo; *C::foo = sub { 222 }; my $c = C->new; [ qq{$o}, q{}.\\&C::foo, $c->foo, $c->$o ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"CODE(0x36fdac0)\",\"CODE(0x362dca8)\",222,222]","err":""},{"err_mask":"","code":"{ package damnit; sub a { \"\" } } tr/// for a damnit","out":"","err":"","out_mask":""},{"err_mask":"","code":"package dedicated::dedicated.fr {}","err":"","out":"ERROR: Invalid version format (0 before decimal required) at (eval 1) line 1, near \"; package dedicated::dedicated\"\nsyntax error at (eval 1) line 1, near \"package dedicated::dedicated.\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package Don; sub t { 'cats' } package main; Don't;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"cats","err":""},{"code":"package DudeUseMoo { sub moot { bless {} } } $m = DudeUseMoo->moot; $m->{asdf} = 'blah'; $m->{asdf}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"blah"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"blah","code":"package DudeUseMoo { sub moot { bless {} } sub whurble { my $self=shift; $self->{asdf} } } $m = DudeUseMoo->moot; $m->{asdf} = 'blah'; $m->whurble","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[15,15]","code":"{ package FF; sub TIESCALAR { my ($c, $v) = @_; bless \\$v, $c } sub FETCH { my $v = ${$_[0]}; ${$_[0]} = -${$_[0]}; $v } } sub frob :lvalue { my ($v) = @_; tie $v, \"FF\", $v; $v } sub List::Util::0sum {my ($a, $b)=(0,0); $a+=$_, $b-=$_ for @_; ($a, $b)}; [List::Util::0sum(map frob($_), 1,2,3,4,5)]","err_mask":""},{"err_mask":"","code":"package foo; $bar = 1; package quux; print $main::foo::bar;","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"package foo; our $AUTOLOAD; sub AUTOLOAD {print \"The method called was: $AUTOLOAD\"}; package main; foo->gooblegobble();","err":"","out":"The method called was: foo::gooblegobble","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package foo { our $bar = 'baz' } [\"blah $foo::bar\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"blah baz\"]"},{"err_mask":"","code":"package Foo; our $foo = 42; package main; my $z = 'Foo';  \\%{$x}::","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}::\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package Foo: our $var;  package Splot; $var = 3; print $Foo::var;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Invalid version format (non-numeric data) at (eval 1) line 1, near \"; package Foo\"\nsyntax error at (eval 1) line 1, near \"package Foo:\"\nNo package name allowed for variable $Foo::var in \"our\" at (eval 1) line 1, near \"print $Foo::var\"\n","err":""},{"err":"","out":"[\"bar\",undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package Foo; our $x = \"foo\"; package Bar; $x = \"bar\"; } [ $Foo::x, $Bar::x ]"},{"code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' );  $x->can($foo{bar})->()","err_mask":"","out_mask":"Ã¿Ã¿","out":"42","err":""},{"out":"ERROR: Can't locate foo.pm:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/base.pm line 100, <STDIN> line 1.\n\t...propagated at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/base.pm line 109, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package foo; sub bar { 'ok' }; package main; use base 'foo'; [ main->SUPER::bar ];"},{"code":"package foo; sub bar { 'ok' }; package main; use base 'foo'; package other; [ main->SUPER::bar ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate foo.pm:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/base.pm line 100, <STDIN> line 1.\n\t...propagated at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/base.pm line 109, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"package foo; sub bar { our $baz; \"[\". ++$baz . \"]\" }; [ bar(), bar(), $baz ]","out":"[\"[1]\",\"[2]\",2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package foo; sub bar { our $baz; \"[\". ++$baz . \"]\" }; [ bar(), bar(), $foo::baz ]","err":"","out":"[\"[1]\",\"[2]\",2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package foo; sub bar { our $baz; package fizzbuz; \"[\". ++$baz . \"]\" }; [ bar(), bar(), $baz ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"[1]\",\"[2]\",2]","err":""},{"err_mask":"","code":"package foo; sub bar { our $baz; print ++$baz }; [ bar(), bar(), $foo::baz ]","out":"12","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"package foo; sub bar { our $baz; print ++$baz }; print bar(); print bar(); print $foo::baz;","out":"11212","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[1,2,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package foo; sub bar { our $baz; return ++$baz }; [ bar(), bar(), $foo::baz ]"},{"code":"{ package Foo; sub DESTROY {} } sub bar; bar Foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"bar\" via package \"Foo\" at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"{ package Foo; sub DESTROY {} } sub bar; bar Foo 1;","out":"ERROR: Can't locate object method \"bar\" via package \"Foo\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"lala","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; sub d { return \"lala\" } package main; my $c = bless {}, 'Foo'; $c->d()"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"package foo; sub new {[1]} package bar; foo->new","err_mask":""},{"err":"","out":"Foo=ARRAY(0x4cacb88)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; sub new { bless [], shift } package main; my $sub = sub { my $self = shift; \"$self\" }; my $obj = Foo->new; $obj->$sub  # lawrence_"},{"err":"","out":"[[1,2,3],[\"Foo\",1,2,3],[bless( {}, 'Foo' ),1,2,3]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo { sub new { bless {}, shift } sub bar { [@_] } } [Foo::bar(1,2,3), Foo->bar(1,2,3), Foo->new->bar(1,2,3)]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"value","err":"","code":"package Foo { sub new { my $self = shift; bless {@_}, $self } } my $foo = Foo->new(key => 'value'); $foo->{key};","err_mask":""},{"code":"package Foo { sub new { my $self = shift; bless {@_}, $self } sub get_key { my $self = shift; return $self->{+shift} } } my $foo = Foo->new(key => 'value'); $foo->get_key('key'); # with an accessor method","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"value"},{"out":"[\"A\",\"B\",\"C\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; sub x { \\@ARGV; } package main; @ARGV = qw( A B C ); Foo::x;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"A\",\"B\",\"C\"]","code":"package Foo; sub x { \\@main::ARGV; } package main; @ARGV = qw( A B C ); Foo::x;","err_mask":""},{"out":"f","err":"","out_mask":"Ã¿","err_mask":"","code":"package Foo; use overload 'bool' => sub { 0 }; sub new { bless {}, shift }; package main; Foo->new() ? 't' : 'f'"},{"out":"ERROR: Can't locate object method \"42\" via package \"foo\" (perhaps you forgot to load \"foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless {}, 'Foo'; 'foo'->$x"},{"out":"[45,42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless sub{ 45 }, 'Foo'; [ 'foo'->$x // 'z', \"$x\" //'z' ]"},{"code":"package Foo; use warnings; sub foo { undef()+0 }; package main; ${Foo::^WARNING_BITS}=0; Foo::foo();","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"Use of uninitialized value in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"0"},{"err_mask":"","code":"package Foo; use warnings; sub foo { undef()+0 }; package main; $Foo::{^WARNING_BITS}=0; Foo::foo();","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"{^\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"Use of uninitialized value in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"0","code":"package Foo; use warnings; sub foo { undef()+0 }; package main; no warnings; Foo::foo();","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"package Foo; use warnings; sub foo { undef()+0 }; package main; { package Foo; no warnings; Foo::foo(); use warnings; }","out":"0","err":"Use of uninitialized value in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿"},{"err_mask":"","code":"package Foo; use warnings; sub foo { undef()+0 }; package main; $SIG{__WARN__}=sub{}; Foo::foo();","err":"","out":"0","out_mask":"Ã¿"},{"out":"[\"foo\",\"bar\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package Foo; $x = \"foo\"; package Bar; $x = \"bar\"; } [ $Foo::x, $Bar::x ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"main\",\"__FUNCTION__\"]","err":"","code":"[ __PACKAGE__, __FUNCTION__ ]","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"package ImARegex; sub match { $_[1] =~ $_[0] ? 1 : 0 } package main; my $re = qr/hai/; bless $re, 'ImARegex'; $re->match('chair')","err_mask":""},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"package ImARegex; sub match { $_[1] =~ $_[0] ? 1 : 0 } package main; my $re = qr/hai/; bless $re, 'ImARegex'; $re->match('char')"},{"err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"package lala; my $x = 123; package lulu; $x"},{"err_mask":"","code":"package mac { sub ska { 'ca' } } \"ce${\\mac->ska}\"","out":"ceca","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"Package->method","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"method\" via package \"Package\" at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Invalid SCALAR attribute: Delilah at (eval 1) line 1.\n","err":"","code":"package My; my My $my :Delilah;","err_mask":""},{"out":"ERROR: Invalid version format (0 before decimal required) at (eval 1) line 1, near \"; package mypackage\"\nsyntax error at (eval 1) line 1, near \"package mypackage.\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package mypackage.pm; # although I'd guess perl should already be complaining about it"},{"out":"test","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package MyProject::whatever; sub doSomething { print 'test' } } my $class = 'whatever'; *{\"MyProject::${class}::doSomething\"}{CODE}() # but really don't do this"},{"err":"","out":"{cow => qr/moo/u,cat => qr/meow/u}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package My::Thing { sub validate_rules { { cat => qr/meow/, cow => qr/moo/ } } } my $klass = \"My::Thing\"; $klass->validate_rules"},{"out":"plup plop","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package Plip; use overload '\"\"' => sub { 'plop' } } $x = bless [], 'Plip'; \"plup $x\""},{"err_mask":"","code":"package P; sub new { my $class = @_ && ( $_[0]->isa( __PACKAGE__ ) || $_[0] eq __PACKAGE__ ) ? shift : __PACKAGE__; bless +{ @_ }, ( ref $class or $class ); } package main; P->new( foo => 123, bar => 456 );","out":"bless( {bar => 456,foo => 123}, 'P' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"bless( {bar => 456,foo => 123}, 'P' )","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package P; sub new { my $class = @_ && ( $_[0]->isa( __PACKAGE__ ) || $_[0] eq __PACKAGE__ ) ? shift : __PACKAGE__; bless +{ @_ }, ( ref $class or $class ); } package main; P::new( foo => 123, bar => 456 );"},{"err_mask":"","code":"package P; sub new { my $class = @_ && ( $_[0]->isa( __PACKAGE__ ) || $_[0] eq __PACKAGE__ ) ? shift : __PACKAGE__; bless +{ @_ }, ( ref $class or $class ); } package main; P::new( P => 123, bar => 456 );","out":"bless( {123 => \"bar\",456 => undef}, 'P' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package P { use overload '\"\"' => sub { \"07\" }, '0+' => sub { \"01\" } } (bless {}, \"P\") + (bless {}, \"P\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Operation \"+\": no method found,\n\tleft argument in overloaded package P,\n\tright argument in overloaded package P at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"package P { use overload '\"\"' => sub { \"07\" }, '0+' => sub { \"01\" } } oct(bless {}, 'P')","err_mask":"","out_mask":"Ã¿","out":"7","err":""},{"err_mask":"","code":"package P { use overload '\"\"' => sub { \"07\" } } oct(bless {}, 'P')","err":"","out":"7","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"qqq\"]","code":"package q; sub qq {\"qqq\"};package main; *main::notq = \\&q::qq; [notq()]","err_mask":""},{"out":"[\"overload\",\"loves\",\"u\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package Regexp; use overload '\"\"' => sub { 'overload' }, fallback => 1 } my $x = bless qr/loves/, 'Regexp'; [ \"$x\", re::regexp_pattern($x) ] # then there are those who just like to watch the world burn"},{"err_mask":"","code":"package Some::Class; sub class_method { my $class = shift; print \"in class method\" }  package main; Some::Class->class_method;","err":"","out":"in class method","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xE3; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package ã; sub foo {3} package main; ã::foo()","err_mask":""},{"err":"","out":"[bless( {}, 'TerribleThing' )]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package TerribleThing { sub new { bless {}, shift } sub DESTROY { undef $@ } } eval { die TerribleThing->new }; [$@]"},{"out":"[\"1 at (eval 1) line 1, <STDIN> line 1.\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package TerribleThing { sub new { bless {}, shift } sub DESTROY { undef $@ } } eval { my $foo = TerribleThing->new; die 1 }; [$@]"},{"err":"","out":"ERROR: Can't find string terminator \"EOF\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package test; sub new { my $class = shift; my $props = { property => shift }; bless $props, $class; return $props; } 1; my $tester = new test(\"thisproperty\"); my $longstring = << 'EOF'; long long string\\n\\n$test->property\\n\\nEOF; print $tester;"},{"err_mask":"","code":"package tm406; sub is_gandalf { 1 }; return \"TRUE\" if(tm406->is_gandalf());","out":"TRUE","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"{ package Try; use Function::Parameters qw(:strict); method stuff($class: $x) { $x + 1 } } Try->stuff","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Too few arguments for method stuff (expected 2, got 1) at (eval 1) line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"<>\nmain\nok","code":"{ package X; sub DESTROY { print \"<>\\n\"; } } my $sub = sub { my $x = bless [], \"X\"; sub { \"ok\" } }->(); print \"main\\n\"; print $sub->()","err_mask":""},{"out":"bless( [[\"X::CLEAR\"],[\"X::STORE\",\"A\",\"B\"],[\"X::STORE\",\"C\",\"D\"]], 'X' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package X; sub TIEHASH { bless [], $_[0] } sub AUTOLOAD { my $r = shift; push @$r, [our $AUTOLOAD, @_] } } tie my %x, 'X'; %x = \"A\" .. \"D\"; tied %x"},{"out":"bless( [\"X::CLEAR\",\"X::STORE\",\"X::STORE\"], 'X' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package X; sub TIEHASH { bless [], $_[0] } sub AUTOLOAD { push @{$_[0]}, our $AUTOLOAD } } tie my %x, 'X'; %x = \"A\" .. \"D\"; tied %x"},{"code":"{ package X; sub TIEHASH { bless [], $_[0] } sub CLEAR {} } tie my %x, 'X'; %x = (1, 2);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"STORE\" via package \"X\" at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"{ package X; sub TIEHASH { bless [], $_[0] } } tie my %x, 'X'; %x = ();","err":"","out":"ERROR: Can't locate object method \"CLEAR\" via package \"X\" at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't locate object method \"CLEAR\" via package \"X\" at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package X; sub TIEHASH { bless [], $_[0] } } tie my %x, 'X'; %x = (1, 2);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"surprise!\n","err":"","code":"{ package X; sub TIESCALAR { bless [] } sub FETCH { state $x = 5; $x++ } } tie my $foo, X::; unless ($foo == 5) { say 1 } elsif ($foo == 5) { say 2 } else { say \"surprise!\" }","err_mask":""},{"err":"","out":"ERROR: Can't locate object method \"TIEHASH\" via package \"X\" at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ package X; } tie my %x, 'X'; %x = ();"},{"err_mask":"","code":"{ package X; use overload fallback => 1, '0+' => sub { state $x = 5; $x++ }; } my $foo = bless [], X::; unless ($foo == 5) { say 1 } elsif ($foo == 5) { say 2 } else { say \"surprise!\" }","out":"surprise!\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"string","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package X; use overload '\"\"' => sub { print \"string\"; \"x\" }, '.' => sub { print \"concat\"; \"x\" }; sprintf '%s', (bless {}, 'X');"},{"code":"package X; use overload '+' => sub { print \"X\"; }; package Y; use overload '+' => sub { print \"Y\" }; [ (bless {}, 'X') + (bless {}, 'Y') ]","err_mask":"","out_mask":"Ã¿","err":"","out":"X"},{"err_mask":"","code":"package X; use overload '+' => sub { print \"X\"; }; package Y; use overload '+' => sub { print \"Y\" }; [ (bless {}, 'Y') + (bless {}, 'X') ]","err":"","out":"Y","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,5]","code":"package XYZ; my @FIELDS = qw(one two); for my $field (@FIELDS) { *$field = sub { shift->{$field} }; } my $obj = bless {one => 1, two => 2, five => 5}, 'XYZ'; $FIELDS[1] = 'five'; [ map $obj->$_, qw(one two) ]","err_mask":""},{"code":"package XYZ; sub somesub { \"called with @_\" } [ XYZ::somesub('x', 'y'), XYZ->somesub('x', 'y') ] # they don't have to be class methods, you can use the package namespace without importing it into the current scope","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"called with x y\",\"called with XYZ x y\"]","err":""},{"err_mask":"","code":"pack '(a)*', map +(/.(.)/g,/(.)./g), \"123456\"","out":"246135","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Just another Perl hacker,","code":"pack '(a)*', sort {$|--} \"tuJsa nohterP er lhakcer,\" =~ /./g","err_mask":""},{"code":"pack 'B*', ~0","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ÂwÂ°"},{"err_mask":"","code":"pack \"b*\", \"00101010000101101001011011001110\"","out":"This","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Tith4cokei\n","code":"pack 'B*', '0101010001101001011101000110100000110100011000110110111101101011011001010110100100001010'","err_mask":""},{"code":"pack \"b*\", 0b010101010;","err_mask":"","out_mask":"Ã¿","out":"\u0003","err":""},{"code":"pack \"(b8)*\", \"00101010\",\"00010110\",10010110,11001110","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"This","err":""},{"code":"pack \"(b8)*\", \"00101010\",\"00010110\",10010110,11001110'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"pack \"(b8)*\", 00101010,00010110,10010110,11001110","out":"\u0003\u0002is","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"pack('b8','01010100')","err_mask":"","out_mask":"Ã¿","out":"*","err":""},{"out_mask":"Ã¿","out":"T","err":"","code":"pack('B8','01010100')","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"*Â.\u0016,ÃÃ¶ÃÂ¦ÂP","err":"","code":"pack('(b8)*',\"0101010001101001011101000110100000110100011000110110111101101011011001010110100100001010\" =~ /.{8}/g);","err_mask":""},{"code":"pack \"B8\", \"11111110\"","err_mask":"","out_mask":"Ã¿Ã¿","out":"Ã¾","err":""},{"err":"","out":"This","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"pack \"(b8)*\", split ' ', \"00101010 00010110 10010110 11001110\""},{"err_mask":"","code":"pack \"(b8)*\", split/(.{8})/, \"00101010000101101001011011001110\"","err":"","out":"\u0000T\u0000h\u0000i\u0000s","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"pack('b8'x11,\"0101010001101001011101000110100000110100011000110110111101101011011001010110100100001010\");"},{"code":"[ pack \"B*\", pack \"C*\", (1) x 7, 0 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\376\"]","err":""},{"code":"pack \"c\", 127;","err_mask":"","out_mask":"Ã¿","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿ÃÂ¨\u0000\u0001","code":"pack \"C16\", (0)x10, (0xff)x2, split /[.]/, \"192.168.0.1\"","err_mask":""},{"err_mask":"","code":"[ pack 'c', 48 ]","out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"c","code":"pack \"c\", 99;","err_mask":""},{"out":"\u000f","err":"","out_mask":"Ã¿","err_mask":"","code":"pack \"c\", 9999;"},{"err_mask":"","code":"pack \"cc\", 9888, 9999;","out":"Â \u000f","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"bc","out_mask":"Ã¿Ã¿","err_mask":"","code":"pack \"cc\", 98, 99;"},{"err":"","out":"ERROR: '%' may not be used in pack at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ pack '%c', map { $_ & 1 } unpack '%c', 'asdf1111' ]"},{"out":"0113","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"pack \"c*\", map { hex } \"30313133\" =~ /([[:xdigit:]]{2})/g"},{"out":"ÂPNG\r\n\u001a\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"pack \"C*\", qw|137 80 78 71 13 10 26 10|"},{"code":"[ pack \"C*\", qw|137 80 78 71 13 10 26 10| ] # throw Data::Dumper at it","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\211PNG\\r\\n\\32\\n\"]"},{"err_mask":"","code":"packege Whatever; # looks like an error to me, man","err":"","out":"ERROR: Can't locate object method \"packege\" via package \"Whatever\" (perhaps you forgot to load \"Whatever\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"pack \"f*\", 1,2,3;","err":"","out":"\u0000\u0000Â?\u0000\u0000\u0000@\u0000\u0000@@","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\377\\377\\377\\377\\377\\377#\\300\"]","code":"[ pack 'F', (9/10-1)*100 ]","err_mask":""},{"err_mask":"","code":"pack 'H*', '00001c00';","err":"","out":"\u0000\u0000\u001c\u0000","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"\u0012Â","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"pack(\"H*\", 0x80 + 1)"},{"err_mask":"","code":"pack '(H2)*', split /\\./, sprintf '%vx', 'one way to do it'","out":"one way to do it","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"\u0004","err":"","out_mask":"Ã¿","err_mask":"","code":"pack \"h\", \"41\""},{"err":"","out":"A","out_mask":"Ã¿","err_mask":"","code":"pack 'H*', '41'"},{"code":"pack(\"H*\", 41)","err_mask":"","out_mask":"Ã¿","out":"A","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"A B C\",\"A B C\"]","code":"[ pack(\"H*\", 4120422043), pack(\"h*\", 1402240234) ]","err_mask":""},{"err":"","out":"[\"A B C\",\"4120422043\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ pack(\"H*\", 4120422043), unpack(\"H*\", \"A B C\") ]"},{"err_mask":"","code":"pack \"H*\", \"42424242\"","err":"","out":"BBBB","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ID\\tS\"]","code":"[ pack \"H*\", \"49440953\" ]","err_mask":""},{"err_mask":"","code":"pack 'h*', '6363735f7263'","out":"667Ãµ'6","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ccs_rc","code":"pack 'H*', '6363735f7263'","err_mask":""},{"err_mask":"","code":"pack 'H*', \"6578616d706c65206865782064617461\"","err":"","out":"example hex data","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"msandbox\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ pack \"H*\", \"6d73616e64626f78\" ]"},{"err_mask":"","code":"pack \"H*\", '7061756c'","err":"","out":"paul","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"pack \"H*\", \"7468697320697320612074657374\"","err":"","out":"this is a test","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"~pack \"H*\", '9e9b929691'","out":"admin","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ÂÂÂÂÂ","err":"","code":"pack \"H*\", '9e9b929691'","err_mask":""},{"err_mask":"","code":"pack \"H*\", ${\\chr 24}","out":"Â","err":"","out_mask":"Ã¿Ã¿"},{"code":"pack 'H*', '\\x41\\x41' =~ tr/\\\\x//dr","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"AA"},{"out":"[\"\\0\\0\\0*\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ pack 'N', 42 ]"},{"out":"\u0000\u0000\u0000\u000fHASH(0x3d6db88)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"pack 'N/a*', { cool => 'story, bro' }"},{"err_mask":"","code":"pack 'n*', unpack 'v*', \"123456\"","out":"214365","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"pack 'q', 7378717377743452252","err":"","out":"\\xff\\xff","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"pack \"s>\", 25","err":"","out":"\u0000\u0019","out_mask":"Ã¿Ã¿"},{"code":"pack('V' . 0xfffffff)","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Out of memory!\npanic: fold_constants JMPENV_PUSH returned 2, <STDIN> line 1.\n","out":""},{"out_mask":"","err":"Out of memory!\npanic: fold_constants JMPENV_PUSH returned 2, <STDIN> line 1.\n","out":"","code":"pack('V' . 0xfffffff);","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"Out of memory!\n","out":"","code":"pack('V31337000');","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[pack 'V', 85]","err":"","out":"[\"U\\0\\0\\0\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"pack('V' . 99999990);","err":"Out of memory!\npanic: fold_constants JMPENV_PUSH returned 2, <STDIN> line 1.\n","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\\0bar\\0baz\\0\"]","err":"","code":"[pack \"(Z*)*\", qw(foo bar baz)]","err_mask":""},{"err_mask":"","code":"$page_content=\"http://www.liveleak.com/view?i=abcd\"; if ( $page_content =~ /http\\:\\/\\/www\\.liveleak\\.com\\/view\\?i\\=(\\w+)/ ){ $ids = $1 }; print $ids;","out":"abcd","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"$page_content='http://www.liveleak.com/view?i=abcd'; if ( $page_content =~ m!http://www\\.liveleak\\.com/view\\?i=(\\w{14})!g; ){ $ids = $1 }; print $ids;","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"$page_content='http://www.liveleak.com/view?i=abcd'; my @ids = $page_content =~ m!http://www\\.liveleak\\.com/view\\?i=(\\w{14})!g; print @ids;"},{"err":"","out":"abcd","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$page_content=\"http://www.liveleak.com/view?i=abcd\"; $page_content =~ s/http\\:\\/\\/www\\.liveleak\\.com\\/view\\?i\\=(\\w+)/$1/g; print $page_content;"},{"code":"$page_content=\"http://www.liveleak.com/view?i=c77_1406577312\"; $page_content =~ s/http\\:\\/\\/www\\.liveleak\\.com\\/view\\?i\\=(\\w+)/$1/g; print $page_content;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"c77_1406577312","err":""},{"out":"qwerty","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$page_content=\"http://www.liveleak.com/view?i=qwerty\"; if ( $page_content =~ /http\\:\\/\\/www\\.liveleak\\.com\\/view\\?i\\=(\\w+)/ ){ push (@ids,$1); }; print @ids;"},{"out":"match","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"/page/save/2202440;294ac50e,315fb991\" =~ m{page/} ? 'match' : 'nope'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"match","err":"","code":"\"/page/show/2202440\" =~ m{page/} ? 'match' : 'nope'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"\"/page/show/2202440\" =~ {page/} ? 'match' : 'nope'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"parachute\"]","code":"[ \"parachute! ahh I'm falling!\" =~ s/(?<=chute).*//r ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"parachute\"]","code":"[ \"parachute!\" =~ s/(?<=chute).*//r ]","err_mask":""},{"code":"[ \"parachute\" =~ s/(?<=chute).*//r ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"parachute\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"parse\" via package \"backwards\" (perhaps you forgot to load \"backwards\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"parse backwards","err_mask":""},{"out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\" part isn't necessary in your actual code; it's just for interacting with the IRC bot"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]","code":"$pattern = \"oo\"; return [ \"foo\" =~ /$pattern/, \"bar\" =~ /$pattern/ ];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,1]","err":"","code":"$pattern = \"oo\"; return [ \"foo\" =~ /$re/, \"bar\" =~ /$re/ ]; # voila!","err_mask":""},{"code":"#!perl","err_mask":"","out_mask":"","out":"","err":""},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"\"Perl\"^2"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","code":"perl -e \"my @res = map { substr($_, 0, length($_)-1) if (-f substr($_, 0, length($_)-1) } qw(dupes.txt allfiles.bak.txt hahaha.setnhue); print join(' ', @res) . \"\\n\";","err_mask":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"perlev ' [ unpack q{N}, pack q{H8}, q{6060FF} ] '\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"perlev ' [ unpack q{N}, pack q{H8}, q{6060FF} ] ' # alanjf"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"unix\",\"perlio\"]","err":"","code":"[ PerlIO::get_layers(*STDIN) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","code":"perl -p -e \"s/\\/\\/a\\[contains\\(text\\(\\),'(\\w+)'\\)\\]/$1/g\" <<< //a[contains(text(),'Korel&nbsp;&nbsp;GÃ¶ymen')]","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"`perl -v`"},{"out_mask":"Ã¿","err":"","out":"0","code":"perl -v","err_mask":""},{"code":"\"#########PermitRootLogin no way man\" =~ s/#*(PermitRootLogin\\sno)/$1/r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"PermitRootLogin no way man","err":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"'phd defense' gt 'php defense'"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"@phone =~ /^0$/"},{"err_mask":"","code":"@phone = 0; @phone =~ /^1$/","out":"1","err":"","out_mask":"Ã¿"},{"code":"@phone = 1; @phone =~ /^1$/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"","err":"","out":"","code":"\"pobox\" eq \"pÐ¾box\"","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"pop @{politics}"},{"code":"POSIX::fmod(-10, exp 1)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"-1.84515451462286","err":""},{"out":"[2,6]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@pos = (); push @pos, @- while 'hangman' =~ /n/g; \\@pos"},{"out":"[2,6]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@pos = (); $word = 'hangman'; $guess = 'n'; push @pos, @- while $word =~ /$guess/g; \\@pos  # vaskozl"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: exists argument is not a HASH or ARRAY element or a subroutine at (eval 1) line 1, <STDIN> line 1.\n","code":"$predicate = 1; $true = {foo => 2}; $false = {}; [exists($predicate ? $true->{foo} : $false->{foo}) ? \"Y\" : \"N\"]","err_mask":""},{"code":"$price = '16.60'; ($dollar,$cents)=$price=~/(\\d+)\\.(\\d+); $dollar++ if $cents > 0; print $dollar","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"$price = '16.60'; ($dollar,$cents)=$price=~/(\\d+)\\.(\\d+)/; $dollar++ if $cents > 0; print $dollar","err_mask":"","out_mask":"Ã¿Ã¿","out":"17","err":""},{"code":"print","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"\\&print","out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"print ''","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿","out":"\\","err":"","code":"print '\\\\'","err_mask":""},{"code":"print \"`*`\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"`*`","err":""},{"code":"print \"-\"","err_mask":"","out_mask":"Ã¿","out":"-","err":""},{"out_mask":"Ã¿","err":"","out":"1","code":"print \"\"","err_mask":""},{"out":"[print \"[@_]\";]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"[@_]\";"},{"err_mask":"","code":"print \"$,\"","out":"1","err":"","out_mask":"Ã¿"},{"code":"print \"$;\"","err_mask":"","out_mask":"Ã¿","out":"\u001c","err":""},{"err_mask":"","code":"print \"â\"","err":"","out":"Ã¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"print @_;","err":"","code":"print @_;","err_mask":""},{"err_mask":"","code":"print $/","err":"","out":"\n","out_mask":"Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"print $@"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿\u0000","out":"14277","err":"","code":"print $$","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"print;"},{"err_mask":"","code":"print \"0\"","out":"01","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"01","err":"","code":"print \"01\"","err_mask":""},{"code":"print(0.3 + 0.3 + 0.3 - 0.9);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"-1.11022302462516e-16","err":""},{"code":"print \"0\"; '' # and it's gone","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"09","code":"print '0' x 1 . '9'","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"print 1","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"print 1;"},{"code":"print 1 + 1;","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"err_mask":"","code":"print(1+2)/2","err":"","out":"3","out_mask":"Ã¿"},{"err_mask":"","code":"print 123","out":"123","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"1","err":"","code":"print (.1 + .2 == .3)","err_mask":""},{"code":"print \" 1234567 \" =~ /[0-9]{7} /;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"print \" 12345678 \" =~ / [0-9]{7} /;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"print \" 12345678 \" =~ /[0-9]{7} /;","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"51.6666666666667","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print 155.0 / 3.0"},{"code":"print (1/999)*999","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.001001001001001","err":""},{"err_mask":"","code":"[print 2]","out":"2","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿","out":"2","err":"","code":"print \"2\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"211","code":"print \"2\" && print @+","err_mask":""},{"code":"print \"2\" && print $!","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Too many open files1","err":""},{"code":"print \"2\" && print $?","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"01"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"print (3+undef)/2"},{"code":"print4","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"print4"},{"err":"","out":"12","out_mask":"Ã¿Ã¿","err_mask":"","code":"print (7 + 5) * 13, \"\\n\";"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::print called at (eval 1) line 1, <STDIN> line 1.\n","code":"(\\&print)->('a')","err_mask":""},{"err":"","out":"\u0007","out_mask":"Ã¿","err_mask":"","code":"print \"\\a\""},{"code":"print {@a}->{a}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"}->\"\n","err":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"print +{@a}->{a}"},{"code":"$, = '!'; print 'a', 'b'.'c';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"a!bc","err":""},{"err_mask":"","code":"$, = '!'; print 'a'.'b','c';","err":"","out":"ab!c","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ac","out_mask":"Ã¿Ã¿","err_mask":"","code":"$, = '!'; print 'a'.('b','c');"},{"out":"abc","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"print 'a', 'b'.'c';"},{"out":"abc256def","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"abc$^Hdef\""},{"code":"print \"a\"; die \"an error\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"aERROR: an error at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"print 'alive'; eval q![ 'a' x 1e12 ]!","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Out of memory!\npanic: fold_constants JMPENV_PUSH returned 2, <STDIN> line 1.\n","out":""},{"err":"","out":"[[ \"pos\" ], /\"(/d+)\"/]\nERROR: Unmatched ( in regex; marked by <-- HERE in m/\"( <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print $a=\"[[ \\\"pos\\\" ], /\\\"(/d+)\\\"/]\", \"\\n\"; my $result = eval($a) or die $@;"},{"code":"print $a=\"[[ \\\"pos\\\" ], /\\\"(/d+)\\\"/]\", \"\\n\"; print ref(eval($a)),\"\\n\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[ \"pos\" ], /\"(/d+)\"/]\n\n","err":""},{"code":"print \"a\" x \"b\";","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"print \"bottle\\n\" x 2;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"bottle\nbottle\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bottlebottle","code":"print \"bottle\" x 2;","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \")[\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print (caller(0))[8]"},{"err_mask":"","code":"print 'cats'","out":"cats","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"cats","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"cats\""},{"err":"","out":"/home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/bin/perl","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"${chr(24)}\""},{"code":"print chr 8305","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¢ÂÂ±"},{"err":"","out":"\n","out_mask":"Ã¿","err_mask":"","code":"print chr length q q continue q"},{"code":"print chr ord for qw q hasdfsadfsadf aasdfdsafasdf chasdfadsfadsf kasdfadfasdf easdfsfdsdf refwefsadfsadfa q","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hacker","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Considered harmful by some, for this reason.","err":"","code":"{ print 'Considered'; last; print \"fun\"; } print ' harmful by some, for this reason.'","err_mask":""},{"err_mask":"","code":"print crypt('Gil*321T','$');","out":"1","err":"","out_mask":"Ã¿"},{"code":"print cwd();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::cwd called at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"print(\"Debug\\n\"), return 1 if (1);","err":"","out":"Debug\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"print do { if (0) { 1 } else { 2 } }","err":"","out":"2","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"print do { if (1) { 1 } else { 2 } }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$VAR1 = 'print Dumper @_';\n","code":"print Dumper @_","err_mask":""},{"code":"print `echo 1`","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Enter number 1: ","code":"print \"Enter number 1: \", $a1 = <STDIN>;","err_mask":""},{"err_mask":"","code":"print eval +{print \"2\"}","out":"2","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"print exec(\"dir\")","out":"01","err":"","out_mask":"Ã¿Ã¿"},{"err":"","out":"01","out_mask":"Ã¿Ã¿","err_mask":"","code":"print exec(\"ls\")"},{"code":"printf \"%04o\\n\",0777;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0777\n"},{"out":"7777\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"printf \"%04o\\n\",07777;"},{"code":"printf \"%04o\\n\",$mode->mode & 07777;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"mode\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"11111111\n01111111\n01111111\n","code":"printf \"%08b\\n%08b\\n%08b\\n\", 0xff, 0x7f, 0xff & 0x7f","err_mask":""},{"out":" 01100001 ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"printf \" %08b \", ord \"a\""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"b a","code":"printf '%2$-2s%1$s', qw(a b) # you're trying to write a script to do this, or is there more to it?","err_mask":""},{"code":"printf '%-2$p', sub {}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"%-2$p","err":""},{"err_mask":"","code":"printf \"%.40f\\n\", 3.141592653589793238462643383279502884;","err":"","out":"3.1415926535897931159979634685441851615906\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"printf \"%.6f\", 6.437370834e-01","err":"","out":"0.643737","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"64.373708","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"printf \"%.6f\", 6.437370834e+01"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.000006","code":"printf \"%.6f\", 6.437370834e-06","err_mask":""},{"err":"","out":"6437370.834000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"printf \"%.6f\", 6.437370834e+06"},{"err":"","out":"100000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"printf '%b', ord ' '"},{"err_mask":"","code":"print fc(\"Å\") cmp fc(\"z\")","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"printf(â%dâ, 1.9)","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after /; printf(<-- HERE near column 98 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"printf('%d%%', (45/50-1)*100)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"-9%","err":""},{"code":"printf('%d%%', (9/10-1)*100)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"-9%","err":""},{"out":"floo","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"floo\""},{"code":"\\&print->(\"foo\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::print called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"print \"foo\"","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"","code":"print \"foo\" if (\"/page/show/1234\" =~ m{page/});","err_mask":""},{"err":"","out":"213","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"print foo(); my $x = 213; sub foo { $x }"},{"err_mask":"","code":"print for 1..4","err":"","out":"1234","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"aaaazzzz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print for aaaa.zzzz"},{"err":"","out":"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print for (a..z, 0..9, A..Z);"},{"err_mask":"","code":"print foreach 1..5","out":"12345","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"print \"$_,\" for sort ( 99, 111 )","out":"111,99,","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"print \"<<$_>>\" for 'this is a test' =~ /.../g;  # hehehe","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"<<thi>><<s i>><<s a>><< te>>"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"RASH DEAL","code":"print/..(..?)/ for[],{},$\"x3,\\&f,\\0","err_mask":""},{"out":"51.66666667","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"printf q{%.8f}, 155.0 / 3.0"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"51.666667.8","code":"printf q{%f.8}, 155.0 / 3.0","err_mask":""},{"code":"printf ?say\\n?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"I'm so unruly bot ...\n","err":"","code":"printf(\"%s\\n\", \"I'm so unruly bot ...\");","err_mask":""},{"code":"printf \"%*v08b\", \" \", \"hello\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"01101000 01100101 01101100 01101100 01101111"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"9829 Ã¢ÂÂ¥","code":"printf \"%vd %s\", chr hex \"2665\", chr hex \"2665\"","err_mask":""},{"out":"195.188","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"printf \"%vd\", \"Ã¼\""},{"err_mask":"","code":"printf '%x' ord ':'","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"'%x' ord\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"printf '%x', ord ':'","err":"","out":"3a","out_mask":"Ã¿Ã¿"},{"out":"Good night","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print 'Good night';"},{"err":"","out":"Ã°ÂÂÂ§Ã°ÂÂÂ¨Ã°ÂÂÂ©Ã°ÂÂÂªÃ°ÂÂÂ«Ã°ÂÂÂ¬Ã°ÂÂÂ­Ã°ÂÂÂ®Ã°ÂÂÂ¯Ã°ÂÂÂ°Ã°ÂÂÂ±Ã°ÂÂÂ²Ã°ÂÂÂ³Ã°ÂÂÂ´Ã°ÂÂÂµÃ°ÂÂÂ¶Ã°ÂÂÂ·Ã°ÂÂÂ¸Ã°ÂÂÂ¹Ã°ÂÂÂ¶Ã°ÂÂÂ·Ã°ÂÂÂ¸Ã°ÂÂÂ¹Ã°ÂÂÂºÃ°ÂÂÂ»Ã°ÂÂÂ¼Ã°ÂÂÂ½Ã°ÂÂÂ¾Ã°ÂÂÂ¿Ã°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂ°Ã°ÂÂÂ±Ã°ÂÂÂ²Ã°ÂÂÂ³Ã°ÂÂÂ´Ã°ÂÂÂµÃ°ÂÂÂ¶Ã°ÂÂÂ·Ã°ÂÂÂ¸Ã°ÂÂÂ¹Ã°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂ°Ã°ÂÂÂ±Ã°ÂÂÂ²Ã°ÂÂÂ³Ã°ÂÂÂ´Ã°ÂÂÂµÃ°ÂÂÂ¶Ã°ÂÂÂ·Ã°ÂÂÂ¸Ã°ÂÂÂ¹Ã°ÂÂ£Â Ã°ÂÂ£Â¡Ã°ÂÂ£Â¢Ã°ÂÂ£Â£Ã°ÂÂ£Â¤Ã°ÂÂ£Â¥Ã°ÂÂ£Â¦Ã°ÂÂ£Â§Ã°ÂÂ£Â¨Ã°ÂÂ£Â©Ã°ÂÂ©Â Ã°ÂÂ©Â¡Ã°ÂÂ©Â¢Ã°ÂÂ©Â£Ã°ÂÂ©Â¤Ã°ÂÂ©Â¥Ã°ÂÂ©Â¦Ã°ÂÂ©Â§Ã°ÂÂ©Â¨Ã°ÂÂ©Â©Ã°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂ­ÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂÃ°ÂÂÂ Ã°ÂÂÂ¡Ã°ÂÂÂ¢Ã°ÂÂÂ£Ã°ÂÂÂ¤Ã°ÂÂÂ¥Ã°ÂÂÂ¦Ã°ÂÂÂ§Ã°ÂÂÂ¨Ã°ÂÂÂ©Ã°ÂÂÂªÃ°ÂÂÂ«Ã°ÂÂÂ¬Ã°ÂÂÂ­Ã°ÂÂÂ®Ã°ÂÂÂ¯Ã°ÂÂÂ°Ã°ÂÂÂ±Ã°ÂÂÂ²Ã°ÂÂÂ³Ã°ÂÂÂ´Ã°ÂÂÂµÃ°ÂÂÂ¶Ã°ÂÂÂ·Ã°ÂÂÂ¸Ã°ÂÂÂ¹Ã°ÂÂÂºÃ°ÂÂÂ»Ã°ÂÂÂ¼Ã°ÂÂÂ½Ã°ÂÂÂ¾Ã°ÂÂÂ¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print grep { /\\d/ } map { chr } 0x11067..0x10ffff # for Grinnz_"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hello","err":"","code":"print \"hello\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Hello","code":"print \"Hello\";","err_mask":""},{"out":"hello","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"hello\"; 2+2"},{"code":"print \"hello\\n\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hello\n"},{"out":"hello\nworld","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"hello\\nworld\""},{"code":"@{ print \"hello\"; print \" world\"; [] }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hello world"},{"out":"hello world","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"hello world\";"},{"err_mask":"","code":"print \"Hello world!\";","out":"Hello world!","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hello, world!","err":"","code":"print \"Hello, world!\";","err_mask":""},{"err_mask":"","code":"print \"hello world\\n\"","err":"","out":"hello world\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"print \"hi\";","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"hi"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hi\tsir\n","code":"print \"hi\\tsir\\n\"","err_mask":""},{"err_mask":"","code":"print \"hi\".(\" \" x 4).\"there\\n\";","out":"hi    there\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"I'm a Perl 5 program.","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"I'm a Perl \", 5 + !!\"0\", \" program.\""},{"err_mask":"","code":"print \"is about to flood the channel\"","err":"","out":"is about to flood the channel","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print join \",\",  grep { $_ % 2 == 0 } (1..50)"},{"err_mask":"","code":"print join('',map {chr $_} (97, 98, 99))","out":"abc","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"print join ('x', \"a\",\"b\",\"c\",\"d\");","err":"","out":"axbxcxd","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"axbxcxd","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print join x => a => b => c => d =>"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"print \"Å\" cmp \"z\""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"print `ls`;"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"print `ls /tmp`"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"(a:3 b:4 )(a:3 )(b:4 )","err":"","code":"print map { \"(\".$_.\")\" } \"a:1 b:2 a:3 b:4 \" =~ m/^((a:\\d+ )(b:\\d+ ))*/","err_mask":""},{"err_mask":"","code":" print map (lc,('ABC','DEF','GHI'));","out":"abcdefghi","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after  map (lc,(<-- HERE near column 106 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":" print map (lc,(âABCâ,âDEFâ,âGHIâ));","err_mask":""},{"code":" print map { lc } qw/ ABC DEF GHI /;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"abcdefghi"},{"err_mask":"","code":"print map { $x++ } 1..10","err":"","out":"0123456789","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"MiescoMiesco1","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ print \"Miesco\", print \"Miesco\" ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"MiescoMiesco1","err":"","code":"print \"Miesco\", print \"Miesco\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"MiescoMiesco","err":"","code":"print(\"Miesco\"), print(\"Miesco\")","err_mask":""},{"code":"print my @arr[2];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"@arr[\"\n","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"$arr[\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print my $arr[2];"},{"err_mask":"","code":"print \"\\n\"","err":"","out":"\n","out_mask":"Ã¿"},{"code":"print \"$_\\n\" for 'this is a test' =~ /.../g;  # hehehe","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"thi\ns i\ns a\n te\n"},{"err_mask":"","code":"print \"No output.\"","err":"","out":"No output.","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"print oct(\"420)\"","err_mask":""},{"code":"print(\"oh yes, entire nothings\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"oh yes, entire nothings","err":""},{"err":"","out":"ok","out_mask":"Ã¿Ã¿","err_mask":"","code":"print \"ok\" if \"Ã¥\" =~ /[[:alpha:]_]/"},{"err":"","out":"","out_mask":"","err_mask":"","code":"print \"ok\" if \"Ã¥\" =~ /[[:alpha:]_]/a"},{"err":"","out":"ok","out_mask":"Ã¿Ã¿","err_mask":"","code":"print \"ok\" if \"_\" =~ /[[:alpha:]_]/"},{"code":"print \"ok\" if \"_\" =~ /[[:alpha:]]/","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"194","err":"","code":"print ord \"Â¢\"","err_mask":""},{"err_mask":"","code":"print ord('a'), \" \", ord('Ð°');","out":"97 208","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"print ord('a'), ord('Ð°');","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"97208"},{"out_mask":"Ã¿Ã¿","out":"15","err":"","code":"print ord pack \"cc\", 9999","err_mask":""},{"err_mask":"","code":"print ord \"Â \"","out":"194","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out":"Perl is easy","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"Perl is easy\";"},{"out":"foobar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print ${ print 'foo'; \\'bar' };"},{"err":"","out":"1111","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print print print print print"},{"err":"","out":"PRIVMSG ##microsoft hello","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"PRIVMSG ##microsoft hello\";"},{"code":"print prototype('CORE::sprintf')","err_mask":"","out_mask":"Ã¿Ã¿","out":"$@","err":""},{"code":"print q/foo/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":""},{"code":"print q{foo} while 0;","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\\/:\\\\\\/][/:\\/]","err":"","code":"print '[', $_, ':', quotemeta($_), ']' for q{\\/}, qq{\\/};","err_mask":""},{"err_mask":"","code":"print quotemeta 'test@example.com'","out":"test\\@example\\.com","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"RASH DEAL","code":"print\"RASH DEAL\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"7c86467b","err":"","code":"print reverse (\"7c86467b\");","err_mask":""},{"err_mask":"","code":"print ( reverse sort ( 1..9 ));","err":"","out":"987654321","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::round called at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"print round(0.5)","err_mask":""},{"err_mask":"","code":"print s/..(..).*/$1/r for[],{},$\",\\&f,\\0","err":"","out":"RASH DEAL","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"(...\"\n","err":"","code":"print s/..(..).*/$1/r for(...there you go","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"print scalar \"321\" =~ /\\d+/;"},{"out_mask":"Ã¿","out":"1","err":"","code":"print scalar (a..b)","err_mask":""},{"code":"print scalar a..b","err_mask":"","out_mask":"Ã¿Ã¿","out":"ab","err":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"print scalar \"abc\" =~ /\\d+/;"},{"err_mask":"","code":"print scalar reverse \"my string\"","err":"","out":"gnirts ym","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"print $self","out":"1","err":"","out_mask":"Ã¿"},{"code":"print ( sort ( 1..9 ));","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"123456789"},{"code":"print sort 97..102","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"100101102979899"},{"err_mask":"","code":"print \"$_,\" sort ( 99, 111 );","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"\"$_,\" sort \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"print sort ( 99, 111 );","err":"","out":"11199","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"print sort qw( 1 5 2 3 7 4 6 9 8 0);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0123456789","err":""},{"err_mask":"","code":"print sort {$|--} \"tuJsa nohterP er lhakcer,\" =~ /./g","err":"","out":"Just another Perl hacker,","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hello CORIN!","err":"","code":"print sprintf(\"Hello %s!\", uc \"Corin\");","err_mask":""},{"out_mask":"Ã¿","out":"2","err":"","code":"print sqrt length \"zomg\"","err_mask":""},{"err_mask":"","code":"print {STDOUT} 1,2;","err":"","out":"121","out_mask":"Ã¿Ã¿Ã¿"},{"code":"print STDOUT chr 8305","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"â±1"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"print $t"},{"err_mask":"","code":"print test","err":"","out":"","out_mask":""},{"out":"test","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print 'test'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"test","code":"print \"test\"","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"print $this_variable_does_not_exist;","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"print \"Time for coffee\" if $!{ENOCAFFIENE}"},{"err_mask":"","code":"print true","err":"","out":"","out_mask":""},{"code":"print uc sprintf(\"Hello %s!\", \"Corin\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"HELLO CORIN!","err":""},{"out":"[\"print\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ print => undef ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"undef1","err":"","code":"print undef => 1","err_mask":""},{"out":"01","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"print ${^UNICODE}"},{"out":"10000110","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print unpack(\"b8\", \"a\")"},{"err_mask":"","code":"print v128169","err":"","out":"Ã°ÂÂÂ©","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"Ã Â²Â _Ã Â²Â ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print v3232.95.3232"},{"err":"","out":"Ã¢ÂÂ¡","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print v9825"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$variable","err":"","code":"print '$variable'","err_mask":""},{"code":"print \"very well\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"very well"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"test tesT teSt teST tEst tEsT tESt tEST Test TesT TeSt TeST TEst TEsT TESt TEST ","err":"","code":"print \"$_ \" while $_ = glob 'test' =~ s/([a-z])/{\\l$1,\\u$1}/gir  # what was wrong with this ?","err_mask":""},{"out":"ÃÂ¢","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print \"\\x{0622}\""},{"err_mask":"","code":"print $x=1, $x=2, $x=3, $x=4, $x=5;","out":"55555","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"-----------------------------------\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print '-' x 35 . \"\\n\";"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"35.\"\\n\"\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print '-' x 35.\"\\n\";"},{"code":"print \"\\x{ffff}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¯Â¿Â¿"},{"code":"print \"\\xffff\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"Ã¿ff","err":""},{"err_mask":"","code":"print \\xffff","out":"SCALAR(0x3ceab40)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"print \"x\" for qw(1 2 3);","err":"","out":"xxx","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Yes we do","err":"","code":"print \"Yes we do\";","err_mask":""},{"code":"product 1..10","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"product 1\"\n"},{"out":"$;$","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"prototype \\&CORE::bless"},{"code":"prototype 'CORE::bless' ? 'yes' : 'no'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"yes"},{"err_mask":"","code":"prototype \"CORE::glob\"","err":"","out":"_;","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"prototype \\&CORE::join","err":"","out":"$@","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"prototype \\&CORE::lc","err":"","out":"_","out_mask":"Ã¿"},{"err":"","out":"*;$@","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"prototype 'CORE::open'"},{"err_mask":"","code":"prototype \"CORE::open\"","out":"*;$@","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"$@","code":"prototype \"CORE::pack\"","err_mask":""},{"out_mask":"","err":"","out":"","code":"prototype \\&CORE::print","err_mask":""},{"code":"prototype \\&CORE::prototype","err_mask":"","out_mask":"Ã¿","err":"","out":"_"},{"err":"","out":"\\@@","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"prototype 'CORE::push'"},{"out_mask":"Ã¿Ã¿Ã¿","out":"\\@@","err":"","code":"prototype \"CORE::push\"","err_mask":""},{"out":"\\@@","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"prototype(\\&CORE::push)"},{"out":"_","err":"","out_mask":"Ã¿","err_mask":"","code":"prototype 'CORE::ref'"},{"out_mask":"Ã¿","err":"","out":"_","code":"prototype \\&CORE::ref","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":";$","code":"prototype \\&CORE::sleep","err_mask":""},{"out_mask":"","out":"","err":"","code":"prototype 'CORE::sort'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\@;$$@","code":"prototype 'CORE::splice'","err_mask":""},{"code":"prototype(\\&CORE::split)","err_mask":"","out_mask":"","err":"","out":""},{"err":"","out":"$$;$$","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"prototype \\&CORE::substr"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":";\\[$@%&*]","code":"prototype 'CORE::undef'","err_mask":""},{"err_mask":"","code":"prototype \"CORE::warn\"","out":"@","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿","out":";*","err":"","code":"prototype \"CORE::write\"","err_mask":""},{"err_mask":"","code":"provides scalar context","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"provides scalar\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"prtin 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"prtin 1\"\n","err":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"$_=\"psychology\"; print reverse;"},{"out":"ERROR: Invalid range \"z-a\" in transliteration operator at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_=\"psychology\"; tr/a-z/z-a/g; print;"},{"err_mask":"","code":"$_ = 'psychology'; $za = join('', reverse 'a' .. 'z'); eval \"tr/a-z/$za/\"; $_","out":"khbxsloltb","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = 'psychology'; $za = join('', reverse 'a' .. 'z'); eval \"tr/a-z/$za\"; $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"psychology","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"psychology","code":"$_ = 'psychology'; $za = join('', 'z' .. 'a'); eval \"tr/a-z/$za\"; $_","err_mask":""},{"out":"othr bits","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'pthr bots' =~ tr/op/io/r"},{"err_mask":"","code":"'Â·' =~ /[[:punct:]]/","out":"1","err":"","out_mask":"Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"'Â§' =~ /[[:punct:]]/"},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"push @_, !"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, near \"1]\"\n","err":"","code":"[push [], 1]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Grinnz_ is the push (@_,\"alpha\"); push (@_,\"omega\"); print \"Grinnz_ is the $_[0] and the $_[$#_]\\n\" and the omega\n","err":"","code":"push (@_,\"alpha\"); push (@_,\"omega\"); print \"Grinnz_ is the $_[0] and the $_[$#_]\\n\"","err_mask":""},{"code":"$|++; push @a, $|; $|--; push @a, $|; $|--; push @a,  $|; \\@a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,0,1]"},{"out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, near \"'a' ]\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ push [], 'a' ]  # thus"},{"code":"push foo, 1, 2","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Type of arg 1 to push must be array (not constant item) at (eval 1) line 1, at EOF\n"},{"out":"2,3,4,5,6,7,8,9,10,11","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"(++$_ && push(@foo, $_)) for 1..10; join ',',@foo;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"/\",\"/\",\"/\",\"/\",\"/\",\"/\",\"/\",\"/\",\"/\",\"/\"]","err":"","code":"push @foo, glob \"/\" for (1..10); \\@foo","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, at EOF\n","code":"push $hash{foo}, 'something'; \\%hash","err_mask":""},{"code":"push $hash->{foo}->@*, \"wibble\"; $hash","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{foo => [\"wibble\"]}"},{"out":"{key => [\"a\",\"b\",\"c\"]}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"push @{ $href->{key} }, qw(a b c); $href"},{"code":"push @l, $-[0] while \"banana\" =~ /b|a|n/g; [@l]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1,2,3,4,5]","err":""},{"err_mask":"","code":"push @players, [ \"Dealer\", \"\", \"\" ]; push @players, [ \"AcidRain\", \"50\", \"\" ];     [ @players ]","out":"[[\"Dealer\",\"\",\"\"],[\"AcidRain\",50,\"\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"push @strings, $_ =~ m/^\\w*/","out":"1","err":"","out_mask":"Ã¿"},{"code":"push @strings, [$_ =~ /^\\w+/];","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{foo => [\"bar\",\"baz\"]}","err":"","code":"push @{$x->{foo}}, 'bar'; push @{$x->{foo}}, 'baz'; $x  # or with $x not even hodling anything to begin with","err_mask":""},{"err_mask":"","code":"`pwd`;","err":"","out":"","out_mask":""},{"out":"ERROR: Unrecognized character \\x9F; marked by <-- HERE after  Ã°ÂÂÂ :) Ã°<-- HERE near column 102 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"q ð :) ð"},{"code":"q{}","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"q{\\}","err":"","out":"ERROR: Can't find string terminator \"}\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"/\\Q[/","err_mask":""},{"code":"\"\\Q!\"","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"\\!"},{"err_mask":"","code":"$_ = q(\"...); /()(.)/; [$2]","out":"[\"\\\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"q522","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"q5.22.0"},{"code":"q{\"90020\",33.786594,\"-118.298662\",\"Los Angeles\",\"CA\",\"Los Angeles\"} =~ s/^(\".+\").+$/$1/r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\"90020\",33.786594,\"-118.298662\",\"Los Angeles\",\"CA\",\"","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"q \\ a\\ b\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"q \\ a\\ b\\ c ;"},{"code":"[ q{abc def 123 ghi} =~ m/\\b([A-Za-z]+)\\b/g ]; # Where as this matches all three.","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"abc\",\"def\",\"ghi\"]"},{"out":"[\"abc\",\"def\",\"ghi\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ q{abc def 123 ghi} =~ m/(?:^|\\s)([A-Za-z]+)(?=\\s|$)/g ]"},{"err":"","out":"[\"abc\",\"ghi\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ q{abc def 123 ghi} =~ m/(?:^|\\s)([A-Za-z]+)(?:\\s|$)/g ]; # Why doesn't 'def' get matched?"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"c\"]","err":"","code":"$_= q/a b c d e f g/; @vars = (split)[2]; \\@vars","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"c\",\"d\"]","err":"","code":"$_= q/a b c d/; @vars = (split)[2,3]; \\@vars","err_mask":""},{"err_mask":"","code":"q aeven thisa","err":"","out":"even this","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_=q{an if1 \" some if2 \" then \"if3\" not if4!!};  [ /(if\\d)(?=(?:[^\"]|\"[^\"]*\")*$)/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"if1\",\"if4\"]","err":""},{"code":"$_=q{an if1 \" some if2 \" then \"if3\" not if4!!};  [ /\"[^\"]*\"(*SKIP)(*F)|if\\d/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"if1\",\"if4\"]","err":""},{"out":"aller ve","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"q caller vec"},{"code":"$_ = q,echo foo bar=baz hmm=\"1 2 3\" nn='aa bb',; my @h; s/(([\"'])(?:[^\"']+|\\\\.|(?!\\2).)*\\2)/push @h, $1;\"\\xFFFD\"/ge; my @words = split ' '; s/\\xFFFD/shift @h/ge for @words; \\@words;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"echo\",\"foo\",\"bar=baz\",\"hmm=\\\"1 2 3\\\"\",\"nn='aa bb'\"]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"foo","code":"q\\foo\\","err_mask":""},{"err_mask":"","code":"q\\foo\\\\bar\\","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"q\\foo\\\\\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"\\Qf(o+o*)\\Ebar\"","err":"","out":"f\\(o\\+o\\*\\)bar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"foobar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\Qfoo\\Ebar\""},{"out_mask":"Ã¿","err":"","out":"1","code":"q\\foo\\ =~ m\\foo\\","err_mask":""},{"err_mask":"","code":"q\\foo\\ =~ s\\foo\\bar\\r","out":"bar","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"q{foo} x 2.5 # Would be interesting if this coudl actually produce a sub string.","err":"","out":"foofoo","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"q ÌhelloÌ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x88; marked by <-- HERE after q ÃÂhelloÃ<-- HERE near column 101 at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Unrecognized character \\x88; marked by <-- HERE after  qÃÂhelloÃ<-- HERE near column 100 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qÌhelloÌ"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x88; marked by <-- HERE after  qÃÂhelloÃ<-- HERE near column 100 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"qÌhelloÌ . \"\"","err_mask":""},{"code":"q{I think perl bot is down?}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"I think perl bot is down?"},{"err_mask":"","code":"qq(\"\")","out":"\"\"","err":"","out_mask":"Ã¿Ã¿"},{"code":"qq(\"\\\")","err_mask":"","out_mask":"Ã¿Ã¿","out":"\"\"","err":""},{"code":"qq(\\)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \")\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"a b c ' d","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"q qa b c ' dq # great idea"},{"err_mask":"","code":"q qaq =~ m\\a\\","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"qq'$bar'","out":"","err":"","out_mask":""},{"out":"foo\tbar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qq(foo\\tbar)"},{"err_mask":"","code":"[ qq(hello there \"test test\" more testing) =~ /\"([^\"]+)\"|(\\S+)/g ]","err":"","out":"[undef,\"hello\",undef,\"there\",\"test test\",undef,undef,\"more\",undef,\"testing\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ qq(    \"  some extra spaces \" hello there \"test test\" more testing) =~ /\"([^\"]+)\"|(\\S+)/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"  some extra spaces \",undef,undef,\"hello\",undef,\"there\",\"test test\",undef,undef,\"more\",undef,\"testing\"]"},{"err":"","out":"[\"space1   \",undef,undef,\"space2\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ qq(  \"space1   \"   space2 ) =~ /\"([^\"]+)\"|(\\S+)/g ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\\"foo\\\\\\r\\\\\\n\\\\\\tbar\\\\\\n\\\"\"]","code":"[q{\"}.quotemeta(\"foo\\r\\n\\tbar\\n\").q{\"}]","err_mask":""},{"code":"[ qr/[ @_ ]/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[qr/[ [ qr\\/[ @_ ]\\/ ] ]/u]"},{"out":"qr/ qr\\/ @_ \\/ /u","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr/ @_ /"},{"out":"ERROR: Incomplete expression within '(?[ ])' in regex; marked by <-- HERE in m/(?[ ()  <-- HERE ])/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr/(?[ () ])/"},{"err":"","out":"qr/[[]/u","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr/[[]/"},{"out":"(?^u:^cats$)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr/^cats$/ . \"\""},{"code":"qr{(?(DEFINE)};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Switch (?(condition)... not terminated in regex; marked by <-- HERE in m/(?(DEFINE) <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"qr/e/u","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr/e$d/"},{"err_mask":"","code":"q{regexp_substr(fn.stringvalue, '\\w+\\s\\w+') user_full_name}","out":"regexp_substr(fn.stringvalue, '\\w+\\s\\w+') user_full_name","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Quantifier follows nothing in regex; marked by <-- HERE in m/* <-- HERE .*/ at (eval 1) line 1, <STDIN> line 1.\n","code":"qr/*.*/ # not with that first * in there, no","err_mask":""},{"code":"qr/\\Q$foo/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"qr//u","err":""},{"err":"","out":"[qr/foo/u,qr/\\Qfoo/u]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[qr/\\Qfoo/, qr'\\Qfoo']"},{"err":"","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/( <-- HERE ?^:\\(s\\)\\)/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr/(?^:\\Q(s))/"},{"code":"qr/\\Q(s)/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"qr/\\(s\\)/u","err":""},{"err":"","out":"qr/\\Q\\/s./u","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr'\\Q/s.'"},{"out":"qr/\\Q(s)/u","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr'\\Q(s)'"},{"out":"qr/(?^:\\(s\\))/u","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qr/(?^:\\Q(s)\\E)/"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"qr//u","err":"","code":"qr/\\Q$x/","err_mask":""},{"code":"qr'(s)'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"qr/(s)/u"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"(?^umsx:something)","code":"'' . qr/something/msx","err_mask":""},{"err_mask":"","code":"[ qr/\\s+:SerialNumber\\s+/, \"\\s+:SerialNumber\\s+\" ]","out":"[qr/\\s+:SerialNumber\\s+/u,\"s+:SerialNumbers+\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"(?^u:(?s)<tr)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" qr/(?s)<tr/ . ''"},{"code":"qr/<tr/s . ''","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"(?^us:<tr)"},{"err_mask":"","code":"qr/what does this do/x","err":"","out":"qr/what does this do/ux","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"qr/(\\.xls$|\\.xlsx$)/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"qr/(\\.xls$|\\.xlsx$)/u","err":""},{"err_mask":"","code":"qr/(?=.|\\z)*.*/","out":"qr/(?=.|\\z)*.*/u","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"quotemeta <>","err_mask":"","out_mask":"","out":"","err":""},{"code":"quotemeta <\\<\\>>","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"\\<\\>","err":""},{"code":"quotemeta '~!@#$%^&*()_\\\\{}.,+?'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)_\\\\\\{\\}\\.\\,\\+\\?","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"\\<\\>","err":"","code":"quotemeta '<>'","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"\\!","code":"quotemeta '!'","err_mask":""},{"out_mask":"Ã¿","err":"","out":"_","code":"quotemeta \"_\"","err_mask":""},{"out":"\\:","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"quotemeta \":\""},{"code":"quotemeta 'abcdefg[\\]$%^&*()'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"abcdefg\\[\\\\\\]\\$\\%\\^\\&\\*\\(\\)"},{"out":"hello\\ world","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"quotemeta 'hello world'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hello\\:world","err":"","code":"quotemeta 'hello:world'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\<\\>","code":"quotemeta q<<>>","err_mask":""},{"err":"","out":"\\\\\\/","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"quotemeta(q{\\/})"},{"err_mask":"","code":"quotemeta(qq{\\/})","err":"","out":"\\/","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\\\\\\\\\\\/\",\"\\\\/\"]","err":"","code":"[ quotemeta(q{\\/}), quotemeta(qq{\\/}) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"test\\\\\\@example\\\\.com\"]","err":"","code":"[ quotemeta 'test@example.com' ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã­ÂÂ","err":"","code":"quotemeta \"\\x{D000}\"","err_mask":""},{"code":"quoutemeta <>","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"<>\"\n"},{"out":"ERROR: Undefined subroutine &main::quoutemeta called at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"quoutemeta( <> )"},{"out":"ERROR: Bad name after qv' at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qv'5.22.0'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"qv522","code":"qv5.22.0","err_mask":""},{"code":"[qw()]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"out_mask":"","err":"","out":"","code":"qw()","err_mask":""},{"err_mask":"","code":"[ qw( a b c ) x 3 ]","out":"[\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"ccc","code":"qw( a b c ) x 3","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Attachment\",\"Attachment\",\"Attachment\"]","code":"[qw(Attachment) x 3]","err_mask":""},{"out":"AttachmentAttachmentAttachment","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qw/Attachment/ x 3"},{"err_mask":"","code":"[qw(email@one.com email@two.com)]","err":"","out":"[\"email\\@one.com\",\"email\\@two.com\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Not a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"@{ [ %{ [qw/foo bar baz/] } ] }\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"%{ [qw/foo bar baz/] }","code":"\"%{ [qw/foo bar baz/] }\"","err_mask":""},{"err_mask":"","code":"[ qw(foo bar baz) ]","out":"[\"foo\",\"bar\",\"baz\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"qw/foo bar baz/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"baz","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"baz","code":"qw(foo bar baz)","err_mask":""},{"out":"baz","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"qw(foo bar baz)[2]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"bar","code":"qw/foo bar baz quux/[1]","err_mask":""},{"code":"[ qw ( &my_function) ] # Prostetnic","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"&my_function\"]","err":""},{"code":"[ qw(#no) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"#no\"]"},{"err_mask":"","code":"$qwqwerqwe = 1;","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"+{ qw/you can dump a hashref directly/ }","err":"","out":"{hashref => \"directly\",you => \"can\",dump => \"a\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"qx(id);","err":"","out":"","out_mask":""},{"out_mask":"","out":"","err":"","code":"qx(ls /);","err_mask":""},{"err_mask":"","code":"qx(whoami)","err":"","out":"","out_mask":""},{"code":"q Â hello worldÂ ;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xA0; marked by <-- HERE after llo worldÃ<-- HERE near column 107 at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"ERROR: Unrecognized character \\xA0; marked by <-- HERE after lo\\ worldÃ<-- HERE near column 108 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"q Â hello\\ worldÂ ;"},{"err":"","out":"RASH DEAL","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"RASH DEAL\""},{"code":"RASHâDEAL","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after res/; RASH<-- HERE near column 95 at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"$re0 = \"x?y+\"; $re1 = qr/$re0/; $re2 = qr/$re1/; [ $re0, $re1, $re2 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"x?y+\",qr/x?y+/u,qr/x?y+/u]"},{"err":"","out":"[qr/x?y+/u,qr/x?y+/u]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$re1 = qr/x?y+/; $re2 = qr/$re1/; [ $re1, $re2 ]"},{"code":"readline \"{a,b,c}\"","err_mask":"","out_mask":"","out":"","err":""},{"code":"reduce 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"reduce 1\"\n"},{"code":"reduce {$a + $b} 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"reduce\" via package \"0\" (perhaps you forgot to load \"0\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ARRAY","code":"ref [];","err_mask":""},{"code":"ref \\[1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"REF"},{"err_mask":"","code":"ref \\\\1","out":"REF","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"SCALAR","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"ref \\ []->[3]"},{"code":"ref \\$a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"SCALAR","err":""},{"code":"ref \\\\\\\\\\\\$a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"REF"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ARRAY","code":"ref bless {}, 'ARRAY'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Here is a lovely long string that I invented one summer's day","code":"ref( bless {}, \"Here is a lovely long string that I invented one summer's day\" )","err_mask":""},{"code":"ref [\"item1\",\"item2\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ARRAY"},{"out_mask":"","err":"","out":"","code":"ref main::","err_mask":""},{"code":"ref qr//","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Regexp"},{"code":"ref qr//;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Regexp"},{"out":"[\"IO::File\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ ref *STDOUT{IO} ]"},{"err_mask":"","code":"ref \\(substr \"aliens\", 0, 2)","out":"LVALUE","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"ref \\v1.2.3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"VSTRING","err":""},{"code":"ref v1.2.3","err_mask":"","out_mask":"","out":"","err":""},{"code":"ref([v1.2.3]->[0])","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]","code":"ref( $x = wantarray ); [$x]","err_mask":""},{"code":"$regex = \"*meow*\"; \"banana\" =~ /$regex/;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Quantifier follows nothing in regex; marked by <-- HERE in m/* <-- HERE meow*/ at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'Regexp'->can('(\"\"') ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"","code":"[ 'Regexp'->can('(+0') ]","err_mask":""},{"code":"rename(\"/opt/google/chrome\", \"/opt/google/egacs\") or die \"$!\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: No such file or directory at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1234567,1234567]","err":"","code":"$re=qr/(\\d{7})/; [ \"12345678\" =~ $re, \"1234567\" =~ $re ]","err_mask":""},{"code":"$re=qr/(?<!\\D)(\\d{7})(?!\\D)/; [ \"12345678\" =~ $re, \"1234567\" =~ $re ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1234567,1234567]","err":""},{"out_mask":"","out":"","err":"","code":"$re = '['; /\\Q$re/","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Invalid version format (non-numeric data) at (eval 1) line 1, <STDIN> line 1.\n","code":"require(0 + \"inf\")","err_mask":""},{"code":"require 5","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"require 5.0.6;","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"require 5\"\n","err":"","code":"require 5blah","err_mask":""},{"err_mask":"","code":"require 'App::Pluggable';","err":"","out":"ERROR: Can't locate App::Pluggable:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"require bigint; bigint->import; 1<<70","out":"0","err":"","out_mask":"Ã¿"},{"code":"require JSON::XS; JSON::XS::encode_json {hi => 123};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{\"hi\":123}","err":""},{"err_mask":"","code":"require 'Some::Module:__XYZ'","err":"","out":"ERROR: Can't locate Some::Module:__XYZ:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"require Some::Module:__XYZ","out":"ERROR: syntax error at (eval 1) line 1, near \"require Some::Module:\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$re = '['; /$re/","err":"","out":"ERROR: Unmatched [ in regex; marked by <-- HERE in m/[ <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"return join(',', @accounts);","err":"","out":"","out_mask":""},{"err_mask":"","code":"return or die;","err":"","out":"","out_mask":""},{"err_mask":"","code":"\"Return value\"; \"Miesco\";","out":"Miesco","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ reverse(\"6.4.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.1.0.0.0.0.1.1.8.2.a.1.0.0.b.3\" =~ tr/.//dr) =~ /.{4}/g ]","out":"[\"3b00\",\"1a28\",1100,\"0012\",\"0000\",\"0000\",\"0000\",\"0046\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"b76468c7","code":"reverse \"7c86467b\"","err_mask":""},{"out":"reenigne","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"reverse 'engineer'"},{"err_mask":"","code":"reverse proxy","err":"","out":"yxorp","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"psychology\"]","err":"","code":"[ reverse \"psychology\" ]","err_mask":""},{"err":"","out":",140,266,132,492,008","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"reverse((reverse 0x7f9241004ee8) =~ s/(...)/$1,/gr)"},{"err_mask":"","code":"reverse \"string\"","out":"gnirts","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"reverse (\"string\")","out":"gnirts","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"string\",\"string\"]","code":"[ (reverse \"string\"), (reverse (\"string\")) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"gnirtsgnirts","code":"reverse (\"string\", \"string\")  # :s","err_mask":""},{"err":"","out":"[\"strong\",\"string\",\"gnortsgnirts\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[reverse(\"string\",\"strong\"), scalar reverse(\"string\", \"strong\")]"},{"err_mask":"","code":"$_=\"rexma\"; /(?{$name=\"foo\"})re[x]ma|(?{$name=\"bar\"})o[ther]matc/; $name","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"@r = (foo => 1, bar => 2); ${{@r}}{\"a\"}"},{"code":"rindex \"1234abc\", \"c\"","err_mask":"","out_mask":"Ã¿","out":"6","err":""},{"out_mask":"","out":"","err":"","code":"rindex $_, \"c\" == length $_ - 1 for \"1234abc\"","err_mask":""},{"out":"Device or resource busy","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"rmdir '/' or $!"},{"err_mask":"","code":"\"\\r\\n\" =~ /^\\R$/","out":"1","err":"","out_mask":"Ã¿"},{"code":"$row = [qw(hi one two)]; unshift(@$row, substr($row->[0],-10)); $row","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hi\",\"hi\",\"one\",\"two\"]"},{"out":"s","err":"","out_mask":"Ã¿","err_mask":"","code":"\"\\s\""},{"out_mask":"Ã¿Ã¿","out":"s+","err":"","code":"\"\\s+\"","err_mask":""},{"code":"s =~ =///=","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"/@(\\S+)/"},{"out_mask":"","err":"","out":"","code":"/\\s{0,}(#{0,})SANITY01/","err_mask":""},{"code":"/\\s{0,}(\\#{0,})SANITY01/x","err_mask":"","out_mask":"","err":"","out":""},{"code":"/\\s{0,}(#{0,})SANITY01/x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/\\s{0,}(#{0,})SANITY01 <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"\"S01E\" . $1 * 2","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"S01E0"},{"code":"S01E($1*2)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::S01E called at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"RASH DEAL","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"s/..(..).*/$1/ for@x=([],{},$\",\\&f,\\0);print@x"},{"out":"RASH DEAL","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"s/..(..).*/$1/ for@x=([],{},$\",\\&f,\\0);$\"=\"\";\"@x\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"RASH DEAL","err":"","code":"s/..(..).*/$1/,print for@x=([],{},$\",\\&f,\\0)","err_mask":""},{"err_mask":"","code":"$s1 = ''; $s2 = 'foo'; $s3 = $s1 || $s2; [$s3]","err":"","out":"[\"foo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"/","out_mask":"Ã¿","err_mask":"","code":"\"////\" =~ s{/{2,}}{/}gr"},{"out_mask":"Ã¿Ã¿Ã¿","out":"1.5","err":"","code":"$s=(3+undef)/2;print $s","err_mask":""},{"err_mask":"","code":"@s=[4,5,6];print join \" \",@s[-1..-2];","err":"","out":"1","out_mask":"Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"@s=[4,5,6];print @s[-1..-2];#since no one's talking in here anyway, may as well use the bot"},{"out":"e is 'd,e,has,commas'","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$s = \"a,b also has, commas,c,d,e,has,commas,f,g\"; $s =~ s/(,[^,]+){2}$//;  \"e is '\" . (split \",\", $s, 5)[4] . \"'\""},{"out":"e is 'e,has,commas'","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$s = \"a,b,c,d,e,has,commas,f,g\"; $s =~ s/(,[^,]+){2}$//;  \"e is '\" . (split \",\", $s, 5)[4] . \"'\""},{"out":"123","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$s=\"a.b.c.d\"; $h{a}{b}{c}{d}=123;  $r=\\%h; $r=$r->{$_} for split/\\./,$s; $r"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$s=\"a.b.c.d\"; $h{a}{b}{c}{d}=123;  $r=\\%h; $r=$r->{$_} for split/\\./,$s; $r'","err_mask":""},{"err":"","out":"2341bcda1","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$s=\"a.b.c.d\"; my %h; @h{ split(/\\./, $s) } = (1, 2, 3, 4); print keys %h, print values %h;"},{"code":"$s = '*';  \"a*b*c\" =~ /\\Q$s/ ? \"Match\" : \"No match\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Match"},{"out":"ERROR: Quantifier follows nothing in regex; marked by <-- HERE in m/* <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$s = '*';  \"a*b*c\" =~ /$s/ ? \"Match\" : \"No match\""},{"err_mask":"","code":"\"s\" =~ /^((?:a|b|c)s?)?$/ # whatever dude","out":"","err":"","out_mask":""},{"err_mask":"","code":"$s = \"{a}b}\" $s =~ /\\{(.*?)\\}/; [$1]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"\"{a}b}\" $s \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$s = \"{a}b}\"; $s =~ /\\{(.*?)\\}/; [$1]","out":"[\"a\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"s/(A)/eval(lcfirst $1)/gee"},{"err_mask":"","code":"s/(A)/lcfirst $1/e","out":"","err":"","out_mask":""},{"out_mask":"","err":"","out":"","code":"s/(A)/lcfirst $1/re","err_mask":""},{"err":"","out":"[\"&amp;&amp;&amp;\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_=\"&&&\"; s/&/&amp;/g; [$_]"},{"code":"s///apple","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Regexp modifiers \"/a\" and \"/l\" are mutually exclusive at (eval 1) line 1, near \"; \"\n","err":""},{"code":"s///asmallregex","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Regexp modifiers \"/a\" and \"/l\" are mutually exclusive at (eval 1) line 1, near \"; \"\nRegexp modifiers \"/a\" and \"/l\" are mutually exclusive at (eval 1) line 1, near \"; \"\n"},{"code":"${ \\ 'save' }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"save"},{"out":"0\n","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"say $["},{"code":"say ~0;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"18446744073709551615\n","err":""},{"err_mask":"","code":"say$_*2for 1..10","err":"","out":"2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"say((\"a\" x 10000) =~ /^(ab?)*$/ ? \"Yes\" : \"No\");","err":"","out":"Yes\n","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"say blahblah q|0.000.000_YYMMDDhhmm|"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"damn them all to hell\n","err":"","code":"say \"damn them all to hell\";","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ÃÂ¡r jÃÂº sÃÂºr?\n","code":"say Encode::encode(\"ISO-8859-1\", Encode::decode(\"UTF-8\", \"ÃÂ¡r jÃÂº sÃÂºr?\"));","err_mask":""},{"err_mask":"","code":"say \"foo\" if (\"/page/show/1234\" =~ m{page/});","out":"foo\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"say for keys %hash;","err":"","out":"","out_mask":""},{"code":"say 'hello'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hello\n","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"say hi"},{"code":"say 'hi'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"hi\n"},{"err":"","out":"hi\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"say \"hi\""},{"err_mask":"","code":"say length \"0.99999999999991\"","out":"16\n","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"say length q|0.000.000_YYMMDDhhmm|","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"20\n","err":""},{"code":"say lenqth q|0.000.000_YYMMDDhhmm|","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"ERROR: Can't find string terminator \"h\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"say q  hello\\ world ;"},{"err_mask":"","code":"say q Â hello\\ worldÂ ;","out":"ERROR: Unrecognized character \\xA0; marked by <-- HERE after lo\\ worldÃ<-- HERE near column 112 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"say\"RASH DEAL\"","out":"RASH DEAL\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"say something","err":"","out":"","out_mask":""},{"err":"","out":"var  is better than var \n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"say \"var $rindolf is better than var $generic_var\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"what\" via package \"again\" (perhaps you forgot to load \"again\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"say what again","err_mask":""},{"out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after res/; say <-- HERE near column 95 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"say âwhateverâ"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"wotcher\n","err":"","code":"say \"wotcher\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ARRAY(0x4f50b88)\n","err":"","code":"say ( [\"wotcher\"] )","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"wotcher\n","err":"","code":"say (\"wotcher\")","err_mask":""},{"out":"banAPPLEana","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$s = \"banana\"; substr($s, 3,0) = \"APPLE\"; $s"},{"code":"/(?<!S)\\b/i","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"'   ' =~ /\\s\\B\\s/","out":"1","err":"","out_mask":"Ã¿"},{"code":"s/(?<\\b!STYLESY0B\\$\\$)\\b$k\\b/<span class=\"kw1\">$k<\\/span>/igs","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Group name must start with a non-digit word character in regex; marked by <-- HERE in m/(?<\\ <-- HERE b!STYLESY0B\\$\\$)\\b\\b/ at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ *_{SCALAR} == \\$_ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"scalar @_[0]","err":"","code":"scalar @_[0]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"00000\"]","err":"","code":"[scalar( (0) x 5 )]","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"10","err":"","code":"scalar (() = (1..10))","err_mask":""},{"out":"ERROR: Not enough arguments for scalar at (eval 1) line 1, near \"scalar () \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"scalar () = (1..10)"},{"err":"","out":"[\"\",\"\",\"\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ scalar('Ù£' =~ /^\\d$/a), scalar('Ù£' =~ /^.$/a), scalar(\"Ù¢\" =~ /^[Ù¡-Ù£]$/a), scalar('Ù£' =~ /^\\D$/a) ]"},{"err_mask":"","code":"scalar @{$arrayref}[1,2,3]","out":"","err":"","out_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"scalar \"asd1312321asd1212asd121212\" =~/(asd\\d+)/g;","err_mask":""},{"err_mask":"","code":"scalar  ( \"A\" ) x 3","err":"","out":"AAA","out_mask":"Ã¿Ã¿Ã¿"},{"code":"scalar  +( \"A\" ) x 3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"AAA","err":""},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"scalar @{ $foo{bar}{baz} // [] }"},{"code":"scalar(()=glob('*'))  # probably 0","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"scalar grep /isnt/, qw/list of words/"},{"err_mask":"","code":"scalar grep /is/, qw/list of words/","err":"","out":"1","out_mask":"Ã¿"},{"out":"{}","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"scalar \\%hash"},{"err_mask":"","code":"scalar %hash","err":"","out":"0","out_mask":"Ã¿"},{"code":"scalar(@order) = 2; @order and @order = grep $_, @order[-2, -1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify scalar in scalar assignment at (eval 1) line 1, at EOF\n"},{"err_mask":"","code":"scalar qw/1 2 3/;   # this should be more confusing :p","out":"3","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"[scalar qw(Attachment) x 3]","err":"","out":"[\"AttachmentAttachmentAttachment\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"scalar reverse 'abc'","err":"","out":"cba","out_mask":"Ã¿Ã¿Ã¿"},{"code":"\"${\\scalar reverse 'foo'}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"oof","err":""},{"out":"[\"ygolohcysp\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ scalar reverse \"psychology\" ]"},{"code":"[ scalar '' =~ /^$/, scalar 'a' =~ /^$/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,\"\"]"},{"err":"","out":"[1,3,5]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"scalar scalar scalar [1, 3, 5]"},{"code":"\"${\\scalar sub { wantarray() ? 'list' : 'scalar' }->()}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"scalar","err":""},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ Scalar::Util::looks_like_number '1 ' ]"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"Scalar::Util::looks_like_number(\"4\")"},{"code":"Scalar::Util::looks_like_number( 'inf')","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"Scalar::Util::looks_like_number('-INF')"},{"code":"Scalar::Util::looks_like_number('INF')","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"Scalar::Util::looks_like_number( 'inferior')","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿","out":"1","err":"","code":"Scalar::Util::looks_like_number \"nan\"","err_mask":""},{"err_mask":"","code":"Scalar::Util::looks_like_number 'NaN'","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"Scalar::Util::looks_like_number( 'NaN')","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.45","code":"Scalar::Util->VERSION","err_mask":""},{"err_mask":"","code":"[scalar  ('?') x 10 ] # lol?","out":"[\"??????????\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"{list => [\"?\",\"?\",\"?\"],scalar => \"???\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{ scalar => ('?' x 3), list => [ ('?') x 3 ] }"},{"out_mask":"Ã¿","out":"1","err":"","code":"!!\"scotsmen\"","err_mask":""},{"code":"s///course","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"$script = \"cats\"; \"script/\\@id=$script\"","out":"script/@id=cats","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"foobar\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'sdfaosdkf!foobar!pokasdf!'; [ m/!(.+?)!/ ];"},{"out_mask":"Ã¿","out":"1","err":"","code":"s///eeeeeeeeeeeeeee","err_mask":""},{"out_mask":"Ã¿","err":"","out":"0","code":"s/^/\"-\"/ee if 0;","err_mask":""},{"err_mask":"","code":"see your paste","err":"","out":"ERROR: Can't locate object method \"see\" via package \"your\" (perhaps you forgot to load \"your\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"1","err":"","code":"s///eieio","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","code":"s/^/-/e if 0;","err_mask":""},{"err":"","out":"ERROR: Final $ should be \\$ or $name at (eval 1) line 1, within string\nsyntax error at (eval 1) line 1, near \"; s/$/$/\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"s/$/$/$///$//e # $ in regex makes perl uneasy too"},{"err":"","out":"\\*{'::$stdh'}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"select"},{"code":"[select]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\*{'::$stdh'}]"},{"code":"\"SELECT id, name, unidade_id, pcu, regexp_replace(barcode, '\\\\s+', '', 'g') as barcode from articles;\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"SELECT id, name, unidade_id, pcu, regexp_replace(barcode, '\\s+', '', 'g') as barcode from articles;"},{"code":"select->print(\"hmm\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"hmm"},{"out":"[\"SELECT \\@rownum:=0\",\"SELECT \\@rownum:=0\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"SELECT \\@rownum:=0\", 'SELECT @rownum:=0' ]"},{"out_mask":"","out":"","err":"","code":"\"$self\"","err_mask":""},{"out_mask":"","out":"","err":"","code":"$self","err_mask":""},{"err":"","out":"[\"example\\@domain.com\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"    Sender:example\\@domain.com\\n\" =~ qr/(?|from=<([^>]+)>,src=|^\\s+Sender:(.*?)$)/ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,\"example\\@domain.com\"]","code":"[ \"    Sender:example\\@domain.com\\n\" =~ qr/from=<([^>]+)>,src=|^\\s+Sender:(.*?)$/ ]","err_mask":""},{"err":"","out":"[undef,\"example\\@domain.com\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ '    Sender:example@domain.com' =~ qr/from=<([^>]+)>,src=|^\\s+Sender:(.*?)$/ ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,\"example.com\"]","err":"","code":"[ \"    Sender:example@domain.com\" =~ qr/from=<([^>]+)>,src=|^\\s+Sender:(.*?)$/ ]","err_mask":""},{"err_mask":"","code":"s***exmag","out":"1","err":"","out_mask":"Ã¿"},{"code":"$s = 'foo'; undef $s; $s .= 'bar';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"bar","err":""},{"code":"sftp> ls","err_mask":"","out_mask":"","err":"","out":""},{"out":"ERROR: Unmatched ) in regex; marked by <-- HERE in m/(...)...) <-- HERE ?/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"s/(...)...)?//g"},{"code":"s/\\+\\/g","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Substitution pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"\"////\" =~ s{//}{/}gr","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"//"},{"out_mask":"Ã¿","err":"","out":"/","code":"\"////\" =~ s{/+}{/}gr","err_mask":""},{"err_mask":"","code":"\"+-\" =~ s/[+-]/!/gr","err":"","out":"!!","out_mask":"Ã¿Ã¿"},{"err":"","out":"shift @_","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"shift @_"},{"out":"ERROR: Experimental shift on scalar is now forbidden at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"shift $foo;"},{"out_mask":"","err":"","out":"","code":"shift; # fully optimized","err_mask":""},{"code":"\"shop_image/importer/1000003/00_1000003.jpg\" =~ /(\\d\\d_\\d{7,7})\\.jpg/; $1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"00_1000003","err":""},{"code":"$s=\"http://a?k1=v1&k2=v2\"; [$s=~/.*?\\?(?:([^=]+)=([^&]+)&?)+/g]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"k2\",\"v2\"]"},{"code":"$s = \"http://a?k1=v1&k2=v2\"; [ $s =~ /[?&]([^=]+)=([^&]+)/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"k1\",\"v1\",\"k2\",\"v2\"]"},{"out_mask":"","out":"","err":"","code":"$SIG{CHLD}","err_mask":""},{"code":"$SIG{__DIE__} = sub { print \"don't do this: @_\" }; eval { die \"you didn't see me, right\" };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"don't do this: you didn't see me, right at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"dead!ERROR: Unimplemented at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$SIG{__DIE__} = sub { print q(dead!)}; ...;","err_mask":""},{"out_mask":"","out":"","err":"","code":"$SIG{__DIE__} = sub { $|++; say 42; exit }; a bc","err_mask":""},{"err_mask":"","code":"$SIG{__DIE__} = sub { say q(dead!) }; ...;","out":"dead!\nERROR: Unimplemented at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"SIMCOP48.856934\"^2","out":"2","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"NaN","code":"sin 9**9**9","err_mask":""},{"out":"size=1182","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"size=473\" =~ s/size=\\K(\\d+)/int($1*2.5)/er"},{"out":"4345332","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"sj4jdj345k3dasssdf32\"; tr/0-9//cd; print $_;"},{"out_mask":"Ã¿","out":"0","err":"","code":"sleep -1","err_mask":""},{"err_mask":"","code":"sleep 5; print \"hello\"","err":"","out":"hello","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sleep( 60 * 60 * 8 ) if $!{EINSUFFICIENTCAFFIENE}; # g'night folks.","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"s///mansex","out":"1","err":"","out_mask":"Ã¿"},{"code":"s///mulder","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Regexp modifiers \"/u\" and \"/l\" are mutually exclusive at (eval 1) line 1, near \"; \"\nRegexp modifiers \"/u\" and \"/d\" are mutually exclusive at (eval 1) line 1, near \"; \"\n"},{"code":"$s = '\\\\n'; \"\\n\" =~ /$s/ ? \"yes\" : \"no\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"yes","err":""},{"code":"s///nordic","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"snork gorble pow fwee","out":"ERROR: Usage: POSIX::pow(x, exponent) at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"snork gorble poww fwee","out":"ERROR: Can't locate object method \"poww\" via package \"fwee\" (perhaps you forgot to load \"fwee\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"socket(my $fh, 6, 2, 17) or die \"can't - $!\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: can't - Bad file descriptor at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿","out":"1","err":"","code":"'some-help-approver@example.net' =~ /(?<!^help-approver)\\@example\\.net$/","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"some text \n[3] some more text \n[4] even more text","code":"\"some text [3] some more text [4] even more text\" =~ s/(?=\\[\\d+\\])/\\n/gr # or rather this, I guess","err_mask":""},{"err_mask":"","code":"\"some text [3] some more text [4] even more text\" =~ s/(?=\\[)/â¤/gr # tlhiv_laptop","err":"","out":"some text Ã¢ÂÂ¤[3] some more text Ã¢ÂÂ¤[4] even more text","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ \"some text here\" =~ /((some) (text))/p, ${^MATCH} ] # no, preferably not $&","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"some text\",\"some\",\"text\",\"some text\"]","err":""},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"some text\" =~ m/o|t/ ]"},{"err_mask":"","code":"[ \"some text\" =~ m/o|t/g ]","err":"","out":"[\"o\",\"t\",\"t\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"something1203.pl","code":"$_ = 'something123.pl'; s/\\w.*?\\K(\\d\\.pl)/0$1/; $_ # why .*-like-things may not work as you wanted","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sprintf \"%x \", ord ssprintf \"%x \", ord osprintf \"%x \", ord msprintf \"%x \", ord esprintf \"%x \", ord tsprintf \"%x \", ord hsprintf \"%x \", ord isprintf \"%x \", ord nsprintf \"%x \", ord gsprintf \"%x \", ord  sprintf \"%x \", ord lsprintf \"%x \", ord isprintf \"%x \", ord ksprintf \"%x \", ord esprintf \"%x \", ord  sprintf \"%x \", ord tsprintf \"%x \", ord hsprintf \"%x \", ord isprintf \"%x \", ord ssprintf \"%x \", ord ?","code":"\"something like this?\" =~ s/(.)/sprintf \"%x \", ord $1/gr","err_mask":""},{"err":"","out":"73 6f 6d 65 74 68 69 6e 67 20 6c 69 6b 65 20 74 68 69 73 3f ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"something like this?\" =~ s/(.)/sprintf \"%x \", ord $1/gre"},{"code":"$_ = \"something like this? x x\"; my $state = 0; s/(\\w)/++$state % 2 ? (uc $1) : (lc $1)/ge; $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"SoMeThInG lIkE tHiS? x X","err":""},{"out":"1 2 three","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$s = \"one two three\"; %h = ( one => 1, two => 2 ); $s =~ s/$_/$h{$_}/ for keys %h; $s"},{"err":"","out":"[5,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[sort { 0 } 5, 2, 3]"},{"code":"[sort 1, 2, 12, 13, 101, 102]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,101,102,12,13,2]","err":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"( sort ( 1..9 ));"},{"code":"sort ( [8,6,7,4,2,3,9] )","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"","err":"","out":"","code":"sort (8, 6, 7, 5, 2, 3, 9)","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"sort(99, 111)"},{"err_mask":"","code":"[ sort { $a->[1] cmp $b->[1] || $a->[0] <=> $b->[0] } [2, 'd'], [3, 'c'], [1, 'd'] ]","out":"[[3,\"c\"],[1,\"d\"],[2,\"d\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ sort { $a <=> $b } 1386778719, 1386778075 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1386778075,1386778719]"},{"err_mask":"","code":"[ sort { $a < $b } 2, 3, 1, 8, 0, 8, 8 ] # like, really easy","out":"[8,3,2,1,8,0,8]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ sort { $a <=> $b } 4, 15, 11, \"NaN\", 11, 2, 1, 4, 3, \"nan\", 8 ]","out":"[1,2,3,4,4,11,11,15,\"NaN\",\"nan\",8]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ sort { $a <=> $b } 7, 0, \"nan\", 3 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,7,\"nan\",3]","err":""},{"err_mask":"","code":"[ sort { $a <=> $b } 7, \"nan\", 3 ]","err":"","out":"[3,7,\"nan\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ sort { $a <=> $b } 8, 6, 7, 5, 3, 0, 9 ] # tell sort to compare $a and $b numerically instead of as strings","out":"[0,3,5,6,7,8,9]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[sort { $a cmp $b } qw/w x/"},{"err":"","out":"[\"w\",\"x\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[sort { $a cmp $b } qw/w x/]"},{"err_mask":"","code":"sort ( qw(8,6,7,4,2,3,9) )","out":"","err":"","out_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"sort ( qw[8,6,7,4,2,3,9] )"},{"err_mask":"","code":"[sort qw(9 3 4 5 6 3 4 1)] #thats how it works","err":"","out":"[1,3,3,4,4,5,6,9]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[0,1,2,29,3,38,381,39,4,5,5,9]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ sort qw/ 9 39 5 38 4 5 381 29 0 1 2 3 / ]"},{"err":"","out":"[\"Cincinnati\",\"a\",\"fan\",\"in\",\"k\",\"of\",\"p\",\"r\",\"w\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ sort qw/a fan of w k r p in Cincinnati/ ]"},{"code":"[sort qw/Compnent Component::A Component::B Your::Mother/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Compnent\",\"Component::A\",\"Component::B\",\"Your::Mother\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"could\",\"could\",\"could\",\"must\",\"must\",\"must\",\"should\",\"should\"]","err":"","code":"[ sort qw(must should could could must could should must) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"i\",\"h\"]","err":"","code":"[ sort { return 42 } \"h\", \"i\" ]","err_mask":""},{"err_mask":"","code":"[ sort { return 42 } \"hi\" ]","err":"","out":"[\"hi\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[0,1,2,3,772,9]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[sort &{sub {$_[0] <=> $_[1]}}, qw,1 3 2 772 9,]"},{"code":"('so this should match,even,though,,it,seems,very,different,from,requirements?' =~ m/\\w+,\\w+,,\\w+,\\w+/) ? 'match' : 'no match'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"match","err":""},{"err_mask":"","code":"so we don't get double action once perlbot is back in commission","err":"","out":"ERROR: Can't locate object method \"in\" via package \"commission\" (perhaps you forgot to load \"commission\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't locate object method \"so\" via package \"what\" (perhaps you forgot to load \"what\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"${\"so what\"} = 123; \"see? ${so what}\""},{"code":"${\"so what\"} = 123; \"see? ${'so what'}. fu\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"see? 123. fu"},{"out_mask":"Ã¿","err":"","out":"1","code":"! ! ! ! ! ! \"spaces\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"bc\n","err":"","code":"@spec = ('abcd', 1, 2); say &CORE::substr(@spec)","err_mask":""},{"out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"@spec)\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@spec = ('abcd', 1, 2); say substr(@spec)"},{"err_mask":"","code":"s/perl/python/;","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Experimental splice on scalar is now forbidden at (eval 1) line 1, near \"5)\n\"\n","err":"","code":"splice((0..9),3,5)","err_mask":""},{"code":"splice([0..9],3,5)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Experimental splice on scalar is now forbidden at (eval 1) line 1, near \"5)\n\"\n","err":""},{"code":"splice @a, 2, 2, qw/foo bar/; \\@a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"bar\"]"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"splice @test, 2; \\@test","err_mask":""},{"code":"[ split /(?<!^),/, '","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[3,18,50,33]","code":"[ split /[^0-9]+/, \"3 day 18 hr 50 min 33 sec\" ]","err_mask":""},{"out":"[\"1.1.1\",\"POWER\",\"SUPPLY\",\"DEFECT\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split \" \", \"1.1.1 POWER SUPPLY DEFECT\" ]"},{"out":"[\"1.1.1 POWER SUPPLY DEFECT\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split /\\./, \"1.1.1 POWER SUPPLY DEFECT\", 1 ]"},{"code":"[ split \" \", \"1.1.1 POWER SUPPLY DEFECT\", 1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"1.1.1 POWER SUPPLY DEFECT\"]"},{"code":"[ split \" \", \"1.1.1 POWER SUPPLY DEFECT\", 2 ]  # ?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1.1.1\",\"POWER SUPPLY DEFECT\"]","err":""},{"err_mask":"","code":"[ split \"/\", \"12/33.\",2]","err":"","out":"[12,\"33.\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ split \"/\", \"12/33\", 2 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[12,33]","err":""},{"code":"[ split \".\", \"12.33\" ]  # because this","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"-\",\"14:56:45,344\",\"-\"]","err":"","code":"[ split \" \", \"- 14:56:45,344 -\", 4 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"-\",\"14:56:45,484\",\"Info\",\": Trying to load VINGCARD_VISION.dll\"]","err":"","code":"[ split \" \", \"- 14:56:45,484 Info  : Trying to load VINGCARD_VISION.dll\", 4 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[25,\"25.175\",\"jitter\"]","code":"[ split ' ', '25 25.175 jitter' ]","err_mask":""},{"code":"split[4]","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"code":"[ split /\\40/, \" a  b\\tc \", 0 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"a\",\"\",\"b\\tc\"]","err":""},{"code":"[split /(.{4}/, \"thisisatest\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/( <-- HERE .{4}/ at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"[split /(.{4})/, \"thisisatest\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"this\",\"\",\"isat\",\"est\"]","err":""},{"err_mask":"","code":"[ split //, 7355608 ]","out":"[7,3,5,5,6,0,8]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ split(/aaa/, '') ]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"err_mask":"","code":"[ split(/aaa/, 'a') ]","err":"","out":"[\"a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ split(/aaa/, 'aaa') ]","err_mask":""},{"err_mask":"","code":"[ split(/aaa/, 'aaaaa') ]","out":"[\"\",\"aa\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"\",\"bc\",\"de\"]","err":"","code":"[ split /a/, 'aabcadeaa' ] # derp","err_mask":""},{"code":"[split(/a/, \"abacus\")]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",\"b\",\"cus\"]"},{"err_mask":"","code":"split(/a/, \"abacus\")","out":"3","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"[split / /, 'a   b']","err":"","out":"[\"a\",\"\",\"\",\"b\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[split ' ', 'a   b']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",undef,undef]","code":"[ (split /:/, \"a:b\")[0..3] ]","err_mask":""},{"err_mask":"","code":"[ split //, \" a b c \" ]","out":"[\" \",\"a\",\" \",\"b\",\" \",\"c\",\" \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[split //, 'abc']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\"]","err":""},{"code":"(split /,/, \"a,b,c\")[1]","err_mask":"","out_mask":"Ã¿","err":"","out":"b"},{"out_mask":"Ã¿","err":"","out":"b","code":"(split \",\", \"a,b,c\")[1]","err_mask":""},{"out":"[\"a b c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split ' ', \"a b c\", 1 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a+b+cc-\",\"-d-e-f\"]","code":"[split /(?<=-)\\+(?=-)/, \"a+b+cc-+-d-e-f\"]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a+b+cc-+-d-e-f\"]","err":"","code":"[split /(?<=-)+(?=-)/, \"a+b+cc-+-d-e-f\"]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ab\",\"cd\"]","err":"","code":"[split /\\./,\"ab.cd.\"]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ab\",\"cd\",\"\"]","err":"","code":"[split /\\./,\"ab.cd.\",-1]","err_mask":""},{"err_mask":"","code":"[split /\\./,\"ab.cd.\",2]","out":"[\"ab\",\"cd.\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ab\",\"cd.df.\"]","err":"","code":"[split /\\./,\"ab.cd.df.\",2]","err_mask":""},{"code":"[split /\\./,\"ab.cd.df\",2]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ab\",\"cd.df\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\",\"d\",\"e\"]","code":"[ split //, \"abcde\" ]","err_mask":""},{"err_mask":"","code":"split(//, \"abcde\")","err":"","out":"5","out_mask":"Ã¿"},{"err_mask":"","code":"split(//, \"abcde\") . \"\"","out":"5","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"[split \" \",\"a b c\\n\"]","out":"[\"a\",\"b\",\"c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\"]","err":"","code":"[ split \" \", \" a  b\\tc \" ]","err_mask":""},{"code":"[ split \" \", \"  amarok\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"amarok\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"real\",\"split\"]","err":"","code":"[ split ' ', \" a real split \" ]","err_mask":""},{"err":"","out":"[\"where\\nis\\nyour\\ngod\\nnow?\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split /\\A/, \"where\\nis\\nyour\\ngod\\nnow?\" ]"},{"code":"[split /\\b/, \"123 5 12 7 \"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[123,\" \",5,\" \",12,\" \",7,\" \"]"},{"err_mask":"","code":"split /\\b/ \"123 5 12 7 \"","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"/\\b/ \"123 5 12 7 \"\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"b\",\"a\",\"n\",\"a\",\"n\",\"a\"]","code":"[ split //, \"banana\" ]","err_mask":""},{"err":"","out":"[\"foo_bar\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split /\\b/, \"foo_bar\"]"},{"code":"[ split /\\D/, \"1k10k1|11dld1\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,10,1,11,\"\",\"\",1]"},{"out":"[1,10,1,11,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split /\\D+/, \"1k10k1|11dld1\" ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\",\"bar\",\"baz\"]","err":"","code":"[ split ' ', 'foo bar baz' ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\\\\,bar\",\"baz\"]","err":"","code":"[split /(?<!\\\\),/, \"foo\\\\,bar,baz\"]","err_mask":""},{"err_mask":"","code":"[split \",\", \"foo bar baz\"]","out":"[\"foo bar baz\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[split \",\", \"foo, bar, baz\"]","err":"","out":"[\"foo\",\" bar\",\" baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"(split /\\./, 'foo.bar.baz')[1]"},{"err":"","out":"[\"foo\",\"bar:baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split /=|==|:|--/, \"foo:bar:baz\", 2 ]"},{"err_mask":"","code":"[[ split / /, \"foo     bar\" ], [ split ' ', \"foo     bar\" ]]","err":"","out":"[[\"foo\",\"\",\"\",\"\",\"\",\"bar\"],[\"foo\",\"bar\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"\",\"foo\\tbar\",\"\",\"baz\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split / /, \" foo\\tbar  baz \" ]"},{"out":"[\"foo\",\"bar\",\"baz\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split \" \", \" foo\\tbar  baz \" ]"},{"err_mask":"","code":"[ split /(?<=@free.fr)/, \"example@free.frexample2@free.fr\" ] #hmm, why doesn't this keep the @free.fr part in the results?","err":"","out":"[\"example.fr\",\"example2.fr\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ split /(?<=@free\\.fr)/, 'example@free.frexample2@free.fr' ] #right","err":"","out":"[\"example\\@free.fr\",\"example2\\@free.fr\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"Fri\",\"Dec\",4,\"18:54:59\",\"EST\",2015]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split \" \", \"Fri Dec  4 18:54:59 EST 2015\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"F\",\"\\302\",\"\\255\",\"u\",\"\\302\",\"\\255\",\"d\",\"g\",\"e\"]","err":"","code":"[ split //, \"FÂ­uÂ­dge\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"H\",\"e\",\"l\",\"l\",\"o\"]","err":"","code":"[split//,\"Hello\"]","err_mask":""},{"err_mask":"","code":"[ split '.', 'horsey.surprise' ]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"horsey\",\"surprise\"]","code":"[ split '\\\\.', 'horsey.surprise' ]","err_mask":""},{"err_mask":"","code":"[ split /[&=]/, \"http://a?k1=v1&k2=v2\" ]","err":"","out":"[\"http://a?k1\",\"v1\",\"k2\",\"v2\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[12,\"33.\"]","code":"[ split m{/}, \"12/33.\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hello\\n\",\"world\"]","code":"[ split /^/m, \"hello\\nworld\" ]","err_mask":""},{"out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split m!/|\\.html!, \"dirs/123/abc.def/ghi999.html ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"dirs\",123,\"abc.def\",\"ghi999\"]","err":"","code":"[ split m!/|\\.html!, \"dirs/123/abc.def/ghi999.html\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",\"just\",\"a\",\"demo\"]","code":"[ split m{/}, '/just/a/demo/' ]","err_mask":""},{"err_mask":"","code":"[ split ',', 'money.perl.com,money.python.com,money.nei.com' ]","err":"","out":"[\"money.perl.com\",\"money.python.com\",\"money.nei.com\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\",one\",\"two\",\"three\"]","err":"","code":"[ split /(?<!^),/, ',one,two,three' ]","err_mask":""},{"out":"[\"p\",\"e\",\"r\",\"l\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split //, \"perl\"]"},{"out":"[\"example\\@free.fr\",\"example2\\@free.fr\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split qr'(?<=@free\\.fr)', 'example@free.frexample2@free.fr' ] #look ma! no han^Wescapes! (except that . one)"},{"out":"[\"something\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split qr{[\\[\\]=]+}, \"something[a=b][c=d][e=f]\" ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"abxxcdex+fg\"]","err":"","code":"[split('\\Qx+', \"abxxcdex+fg\")]","err_mask":""},{"out":"[\"abxxcde\",\"fg\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split(\"\\Qx+\", \"abxxcdex+fg\")]"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"[split /\\s+/, \" \"]"},{"code":"[split /\\s+/, \" \", -1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"\"]","err":""},{"err":"","out":"[\"a\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split /\\s+/, \"a \", -1]"},{"err":"","out":"[\"a\",\"\",\"\",\"\",\"\",\"b\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split /\\s/, \"a     b\" ]"},{"err":"","out":"[\"\",\"a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split /\\s+/, \" a\"] # but this one doesn't need the limit"},{"code":"[ split /\\s+/, \"  amarok\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"amarok\"]","err":""},{"err_mask":"","code":"[ split \"\\s+\", \"  amarok\" ]","err":"","out":"[\"  amarok\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ split /\\s+/, \" a real split \", -1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",\"a\",\"real\",\"split\",\"\"]"},{"err":"","out":"[\"foo\",\"baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split /[@\\s]/, \"foo@bar baz\" ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"bar\",\"baz\"]","code":"[ split /[\\@\\s]/, 'foo@bar baz' ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"baz\"]","code":"[ split /[\\@\\s]/, \"foo@bar baz\" ]","err_mask":""},{"err_mask":"","code":"[ split /[\\@\\s]/, \"foo\\@bar baz\" ]","err":"","out":"[\"foo\",\"bar\",\"baz\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[split /(,\\s*)/, \"foo, bar, baz\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\", \",\"bar\",\", \",\"baz\"]"},{"code":"split /(,\\s*)/, \"foo, bar, baz\"","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"[ split /\\s+/, grep /x/, qw(abc def kzx lol) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"australia","code":"(split /-/, (split /\\//, \"http://www.site.com/letters0241/something-in-australia-a-h\")[-1])[2]","err_mask":""},{"err_mask":"","code":"[split //, sprintf \"%b\", 20]","err":"","out":"[1,0,1,0,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ split /([\\s[:punct:]]+)/, \"Knark. knark,\" ]","err":"","out":"[\"Knark\",\". \",\"knark\",\",\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ split /(\\s+|[[:punct:]])/, \"Knark. knark,\" ] # or ask perlbot","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Knark\",\".\",\"\",\" \",\"knark\",\",\"]","err":""},{"code":"[split /\\s*=\\s*/, 'name=val=ue', 2]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"name\",\"val=ue\"]","err":""},{"err":"","out":"[\"split\",\"th\\\\is\",\"line\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split(/\\s+/, 'split th\\is line') ]"},{"err_mask":"","code":"[ split /\\s+/, \" word \" ]","out":"[\"\",\"word\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[split /\\t/, \"\"]","out":"[]","err":"","out_mask":"Ã¿Ã¿"},{"code":"[split '', '\\t']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\\\\",\"t\"]"},{"err":"","out":"[\"\\t\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split '', \"\\t\"]"},{"code":"[ split /=/, \"test='string=ignore this symbol'\", 2 ] # presumably you want key + value","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"test\",\"'string=ignore this symbol'\"]","err":""},{"err":"","out":"[\"this\",\"is\",\" a test\",\" with\\\\; escaped delimiters\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split /(?<!\\\\);/, \"this;is; a test; with\\\\; escaped delimiters;;\" ]"},{"err_mask":"","code":"[split /(?<!\\\\);/, 'this;is; a test; with\\\\\\; escaped delimiters;;']","err":"","out":"[\"this\",\"is\",\" a test\",\" with\\\\\\\\; escaped delimiters\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"sajkhsdahkj\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split /\\t/, \"sajkhsdahkj\"]"},{"out":"[\"a\",\".\",\"b\",\"!\",\"c\",\"?\",\"d\",\" \",\"e\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split /(\\W)/, \"a.b!c?d e\"]"},{"code":"[ split /\\W+/, \"(foo)\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",\"foo\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\" \",\"bar\",\".\",\"baz\",\" \",\"quux\",\"?\",\"derp\",\" \",\"ermintrude\"]","code":"[split /(\\W)/, \"foo bar.baz quux?derp ermintrude\"]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"what\",\"are you on about\"]","err":"","code":"[ split \" \", \"what are you on about\", 2 ] # wodim?","err_mask":""},{"out":"[\"where\",\"is\",\"\\\"your\",\"god\\\"\",\"now\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ split /,/, 'where,is,\"your,god\",now' ]"},{"code":"[ split \",\", \"worker1,\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"worker1\"]"},{"code":"[ split \",\", \"worker1,\", -1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"worker1\",\"\"]","err":""},{"err_mask":"","code":"[ split /,/, ',x,', -1 ]","err":"","out":"[\"\",\"x\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"ab\",\"cde\",\"+fg\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[split('x+', \"abxxcdex+fg\")]"},{"err_mask":"","code":"[split /x/, 'axb', 'yxz']","err":"","out":"[\"a\",\"b\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf '%012x', 0xff","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0000000000ff","err":""},{"err_mask":"","code":"sprintf '%012x', 0xffff","out":"00000000ffff","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"09","code":"sprintf('%02d', 9)","err_mask":""},{"err_mask":"","code":"sprintf('%02x%02x%02x', 192, 255, 63)","out":"c0ff3f","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"%*02X","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%*02X\", \" \", \"bar\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"%02*X","code":"sprintf \"%02*X\", \" \", \"bar\"","err_mask":""},{"err_mask":"","code":"sprintf(\".%03u\", 85)","err":"","out":".085","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf(\".%03u\", 850)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":".850"},{"out":".8500","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf(\".%03u\", 8500)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"0001","err":"","code":"sprintf '%04d', 1","err_mask":""},{"code":"[ sprintf \"%04o\", 0755 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0755\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"0777","code":"sprintf '%04o', 0777","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"dead","err":"","code":"sprintf '%04x', hex 'dead'","err_mask":""},{"code":"sprintf '%05.2f', 5/3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"01.67"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"00009","err":"","code":"sprintf('%0.5d',9)","err_mask":""},{"err":"","out":"0.00001","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf('%0.5f', 7.15255737304688e-06)"},{"out":"00001111","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%08b\", 1 | 15"},{"code":"sprintf '%.0f', 1.139999999999999 * 100","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"114","err":""},{"err_mask":"","code":"sprintf \"%.0f\", 2.6","err":"","out":"3","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"59940","code":"sprintf \"%.0f\", 6 * 99.90 * 100","err_mask":""},{"err":"","out":"64","out_mask":"Ã¿Ã¿","err_mask":"","code":"sprintf'%.0f',log(~0)/log(2)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.000000","code":"sprintf '%' . 0xfffffff . '$f'","err_mask":""},{"err_mask":"","code":"sprintf \"[%-10d]\", 123","err":"","out":"[123       ]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf \"%.10f\", 942993 / 1236732346368","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.0000007625"},{"code":"sprintf \"%.10f%% ram used\", 942993 / 1236732346368 * 100","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.0000762488% ram used","err":""},{"err_mask":"","code":"sprintf(\"%12.6g\", 6 * 99.90)","out":"       599.4","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ sprintf '%.14f', '1.43531262539073e-11' ] # or sprintf, if you want to do something other than display the result","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0.00000000001435\"]","err":""},{"code":"sprintf \"%.15f\", 942993 / 1236732346368","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.000000762487536","err":""},{"out_mask":"Ã¿","err":"","out":"9","code":"sprintf('%1d',9)","err_mask":""},{"err_mask":"","code":"sprintf \"%.20f %.20f\", 0.1, 0.3","out":"0.10000000000000000555 0.29999999999999998890","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%.20f\", 6 * 99.90","out":"599.40000000000009094947","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf \"%2.2e\", 1234.567","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.23e+03"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0.0000000000143531262539072984\"]","err":"","code":"[ sprintf '%.28f', '1.43531262539073e-11' ]","err_mask":""},{"err_mask":"","code":"[sprintf \"%.2f\", 3/4]","err":"","out":"[\"0.75\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf '%2$s then %1$s', 'first', 'second';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"second then first","err":""},{"err":"","out":"134.949999999999988631316227838397","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%.30f\", \"134.95\""},{"err":"","out":"134.949999999999988631316227838397","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%.30f\", 134.95"},{"code":"sprintf \"%.30f\", \"134.95\" * 100","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"13494.999999999998181010596454143524","err":""},{"err_mask":"","code":"sprintf \"%.30f\", 134.95 * 100","err":"","out":"13494.999999999998181010596454143524","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0.000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%.3f\", ((10/1*225)/(18))-125"},{"err_mask":"","code":"sprintf \"%.3f\", 2.34525","err":"","out":"2.345","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ sprintf \"%4o\", 0644 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\" 644\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"corn flakes","code":"sprintf('%5s', 'corn flakes');","err_mask":""},{"err_mask":"","code":"sprintf \"%.70f\", 1/3","err":"","out":"0.3333333333333333148296162562473909929394721984863281250000000000000000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf \"%8b\", 1 | 15","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"    1111"},{"out":"[\"1.000000\",\"15.000000\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[  (sprintf \"%8f\", 1) , (sprintf \"%8f\", 15) ]"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"sprintf \"%b\", 0.1"},{"err_mask":"","code":"sprintf \"%b\", 0.21875","out":"0","err":"","out_mask":"Ã¿"},{"code":"sprintf \"%b\", 0376","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"11111110"},{"err_mask":"","code":"sprintf \"%b\", 1 | 15","out":"1111","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%b\", 1234321","out":"100101101010110010001","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%b\", 152944","err":"","out":"100101010101110000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"101010101010101","err":"","code":"sprintf \"%b\", 21845","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"101010101","err":"","code":"sprintf \"%b\", 341","err_mask":""},{"err_mask":"","code":"sprintf '%b', 50","err":"","out":"110010","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1010010","err":"","code":"sprintf '%b', 82","err_mask":""},{"err":"","out":"10101000100000001","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%b\", 86273"},{"err":"","out":"10101010101010101","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%b\", 87381"},{"err_mask":"","code":"sprintf \"%b\", 96","err":"","out":"1100000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf '%b', 96000","err":"","out":"10111011100000000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ sprintf \"%b & %b -> %b\", 2048, 0xFF, 2048 & 0xFF ]","out":"[\"100000000000 & 11111111 -> 0\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"0.1","code":"sprintf \"%b.%b\", split /\\./, 0.1","err_mask":""},{"err":"","out":"0.101010101110011","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%b.%b\", split /\\./, 0.21875"},{"err_mask":"","code":"[sprintf\"%c\", 65]","err":"","out":"[\"A\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[sprintf\"%c\", 'a']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\0\"]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"999","err":"","code":"sprintf \"%c%c%c\", map ord,(97,98,99)","err_mask":""},{"out":"abc","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%c%c%c\", map ord,('a','b','c')"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"sprintf '%d', -0.5"},{"err_mask":"","code":"sprintf \"%,d\", 12345678;","out":"%,d","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf '%d', 1.7","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"sprintf(\"%d\", 2.6)","out":"2","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"sprintf \"%d %s\", 1, 2","out":"1 2","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"sprintf '%.f', 0.49999999999999994","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"err_mask":"","code":"sprintf '%.*f', 1, 2","out":"2.0","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"sprintf '%*f', '.1', 2","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"2.000000","err":""},{"err":"","out":"13495","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf '%.f', 134.95 * 100"},{"code":"sprintf '%.f', 1.7","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.9999999999999912","err":"","code":"sprintf '%.*f', length('9999999999999911'), 0.9999999999999911","err_mask":""},{"code":"sprintf '%lu', 1341015082000","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1341015082000","err":""},{"out_mask":"Ã¿","out":"0","err":"","code":"sprintf \"%#o\", 0","err_mask":""},{"code":"[sprintf '%o', '16877']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[40755]"},{"code":"sprintf \"%#o\", 2","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"02"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"420","code":"sprintf \"%o\", 272","err_mask":""},{"out":"444","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%o\", 292"},{"out_mask":"Ã¿Ã¿","err":"","out":"47","code":"sprintf \"%o\", 39","err_mask":""},{"code":"sprintf(         q{[%02dx%02d}. ($3 ? q{-} : q{}). q{%02d] %s},          $1, $2, ($3 // q{}), $4      )","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[00x0000] ","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"001.2345","code":"sprintf q{%03d.%d}, split /\\./, 1.2345; # leobut","err_mask":""},{"err_mask":"","code":"sprintf q{%.3f}, 2047.99999952316 ### Is there a way to do this but truncate instead of rounding, so the result is 2047.999 instead of 2048.000 ?","err":"","out":"2048.000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf q{%.3f}, (int (2047.99999952316 * 1000))/1000;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2047.999"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"eval: sprintf $_ = q{eval: sprintf $_ = q{%s}, $_}, $_","err":"","code":"sprintf $_ = q{eval: sprintf $_ = q{%s}, $_}, $_","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"the cluster is using 0.0000762488% of available ram","err":"","code":"sprintf \"the cluster is using %.10f%% of available ram\", 942993 / 1236732346368 * 100","err_mask":""},{"err_mask":"","code":"sprintf \"the cluster is using %.10f%% of available ram\", (942993 * 2**20) / 1236732346368 * 100","out":"the cluster is using 79.9526130995% of available ram","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf \"%*v02X\", \" \", \"bar\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"62 61 72"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"%v*02X","code":"sprintf \"%v*02X\", \" \", \"bar\"","err_mask":""},{"err_mask":"","code":"sprintf \"%*v02x\", \" \", Encode::encode_utf8(\"much \\x{2665}\")","err":"","out":"6d 75 63 68 20 e2 99 a5","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf \"%v02X\", \"hello\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"68.65.6C.6C.6F"},{"err_mask":"","code":"(sprintf \"%v02X\", \"hello\") =~ s/\\./ /g","err":"","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"68 65 6C 6C 6F","code":"(sprintf \"%v02X\", \"hello\") =~ s/\\./ /gr","err_mask":""},{"err_mask":"","code":"sprintf \"%*v02x\", \" \", pack \"C*\", qw|137 80 78 71 13 10 26 10|","out":"89 50 4e 47 0d 0a 1a 0a","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"00.00.03.b1","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%v02x\", pack \"N\", 945"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"b1.03.00.00","code":"sprintf \"%v02x\", pack \"V\", 945","err_mask":""},{"code":"sprintf \"%*v04X\", \"U+\", \"hello\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0068U+0065U+006CU+006CU+006F"},{"code":"sprintf '%vb', 'foo' # something like this, majuscule?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1100110.1101111.1101111"},{"err":"","out":"101","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf '%vb', \"\\x05\" # binary string, then?"},{"err_mask":"","code":"sprintf \"%vd\", \"123\" ^ \"az3\"","err":"","out":"80.72.0","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"0","err":"","code":"sprintf \"%vd\", \"3\" ^ \"3\"","err_mask":""},{"err":"","out":"97","out_mask":"Ã¿Ã¿","err_mask":"","code":"sprintf \"%vd\", 'a'"},{"err_mask":"","code":"sprintf \"%,vd\", 'abc'","out":"%,vd","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%*vd\", ',', 'abc'","err":"","out":"97,98,99","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%vd\", 'abc'","out":"97.98.99","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%vd\", \"foo\\n\\rbar\"","out":"102.111.111.10.13.98.97.114","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sprintf \"%vd\", \"something\" ^ \"otherthing\"  # or this...","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"28.27.5.0.6.28.1.7.9.103"},{"code":"sprintf '%vd', \"string\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"115.116.114.105.110.103"},{"err_mask":"","code":"sprintf('%v', v1.2.3)","out":"%v","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[ sprintf \"%x\", 127.0.0.1 ]","err":"","out":"[0]","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%x\", 14644","err":"","out":"3934","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"122c","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf '%x', 18*256+44;"},{"code":"sprintf \"%x\", 18446744073709551615","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ffffffffffffffff","err":""},{"code":"sprintf '%x', 3 * 256 + 17","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"311","err":""},{"err_mask":"","code":"sprintf '%x', 44*256+18;","err":"","out":"2c12","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%x\", 5 * 60 * 10e6","err":"","out":"b2d05e00","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%x\", 65280","err":"","out":"ff00","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprintf \"%x\", oct \"0b011000111100\"","out":"63c","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"63C","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%X\", oct \"0b011000111100\""},{"err":"","out":"2a","out_mask":"Ã¿Ã¿","err_mask":"","code":"sprintf '%x', ord '*';"},{"err_mask":"","code":"sprintf \"%x\", ord '0'","err":"","out":"30","out_mask":"Ã¿Ã¿"},{"code":"sprintf '%x', ord 'c'","err_mask":"","out_mask":"Ã¿Ã¿","out":"63","err":""},{"out_mask":"Ã¿Ã¿","out":"43","err":"","code":"sprintf '%x', ord 'C'","err_mask":""},{"err_mask":"","code":"sprintf \"%x\", ord \"\\n\"","out":"a","err":"","out_mask":"Ã¿"},{"err":"","out":"1234","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%x\", ord \"\\x{1234}\""},{"out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ sprintf \"%x\", v127.0.0.1 ]"},{"code":"sprintf \"%x %x\", 015, 012","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"d a"},{"err_mask":"","code":"sprintf \"%x %x\", 55357, 56839","err":"","out":"d83d de07","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sprint \"%x\", ord '0'","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"sprint \"%x\"\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$sql =~ s/constraint \\K`(\\w+)`/$1/gi; maybe?","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"(s)\" =~ qr'\\Q(s)'","out":"","err":"","out_mask":""},{"out":"Match","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$s = quotemeta('*');  \"a*b*c\" =~ /$s/ ? \"Match\" : \"No match\""},{"code":"'!' =~ s/~//r","err_mask":"","out_mask":"Ã¿","err":"","out":"!"},{"err_mask":"","code":"'!' =~ s/!//r","err":"","out":"","out_mask":""},{"err":"","out":"a,b,c,,,","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@src=qw(a b c); @dst=grep defined, @src[2..5]; print join(\",\", @src);"},{"code":"@src=qw(a b c); @dst=@src[2..5]; print join(\",\", @dst);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"c,,,"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"a,b,c","code":"@src=qw(a b c); @w=grep defined, @{ [@src[2..5]] }; print join(\",\", @src); #rmah, how about this?","err_mask":""},{"code":"@src=qw(a b c); @w=@src[2..5]; print join(\",\", @src);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"a,b,c","err":""},{"err_mask":"","code":"s///regexp","out":"","err":"","out_mask":""},{"code":"sretrun","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"sretrun","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"sretrun join\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sretrun join(',', @accounts);"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"sreturn join\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sreturn join(',', @accounts);"},{"out":"[\"\\303\\237\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"['Ã']"},{"err":"","out":"ERROR: Regexp modifiers \"/u\" and \"/l\" are mutually exclusive at (eval 1) line 1, near \"; \"\nRegexp modifiers \"/u\" and \"/l\" are mutually exclusive at (eval 1) line 1, near \"; \"\nUnknown regexp modifier \"/y\" at (eval 1) line 1, near \"; \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"s///scully"},{"err_mask":"","code":"'Ã' =~ m/^\\Qss\\E\\z/i ? 'True' : 'False';","out":"False","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"False\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'Ã' =~ m/^\\Qss\\E\\z/i ? 'True' : 'False' ];"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"q{})\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"s/ / sprintf(         q{[%02dx%02d}. ($3 ? q{-} : q{}). q{%02d] %s},          $1, $2, ($3 // q{}), $4      )  /ex;"},{"code":"'Ã' =~ /\\Ã{UpperCase}/","err_mask":"","out_mask":"","err":"","out":""},{"code":"s/(?<!STYLESY0B\\$\\$)\\b$k\\b/<span class=\"kw1\">$k<\\/span>/igs;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Variable length lookbehind not implemented in regex m/(?<!STYLESY0B\\$\\$)\\b\\b/ at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"s///supernice","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"s///susanne","err":"","out":"ERROR: Regexp modifiers \"/u\" and \"/a\" are mutually exclusive at (eval 1) line 1, near \"; \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"s///susi","out":"1","err":"","out_mask":"Ã¿"},{"code":"$_ = \"stackoverflow\"; $_ = reverse for substr $_, 0, 5; s/.//r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"catsoverflow","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"catsoverflow","err":"","code":"$_ = \"stackoverflow\"; substr($_,0,5,substr(reverse(substr$_,0,5),1,4)); $_","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"catsoverflow","code":"$_ = \"stackoverflow\"; substr($_,0,5,substr(~~reverse(substr($_,0,5)),1,4)); $_  # fixed","err_mask":""},{"out":"4","err":"","out_mask":"Ã¿","err_mask":"","code":"state $x = 4; $x"},{"err":"","out":"y","out_mask":"Ã¿","err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?=.*(?!STDERR output success))/ ? 'y' : 'n'"},{"err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?!.*STDERR output success)/ ? 'y' : 'n'","err":"","out":"y","out_mask":"Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"<stdin>"},{"err_mask":"","code":"STDIN","out":"STDIN","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[*STDIN]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[*::STDIN]","err":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"*STDIN{IO}","err":"cannot handle ref type 15 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Data/Dumper.pm line 233, <STDIN> line 1.\n","out":"bless( , 'IO::File' )","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"STDOUT->autoflush(1)","err":"","out":"0","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"cannot handle ref type 15 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Data/Dumper.pm line 233, <STDIN> line 1.\n","out":"[bless( , 'IO::File' )]","code":"[ *STDOUT{IO} ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"*__ANON__::__ANONIO__","code":"*{ *STDOUT{IO} }","err_mask":""},{"code":"'' . *{ *STDOUT{IO} }{IO}","err":"","out":"IO::File=IO(0xcddf78)"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"*{ *STDOUT{IO} }{IO}","out":"bless( , 'IO::File' )","err":"cannot handle ref type 15 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Data/Dumper.pm line 233, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ ''.*STDOUT{IO}, '' . *{ *STDOUT{IO} }{IO} ]","out":"[\"IO::File=IO(0x11d9f78)\",\"IO::File=IO(0x11d9f78)\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"STDOUT->print(\"oh no, entire classes\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"oh no, entire classes1","err":""},{"code":"/(?<!ST)/i","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Variable length lookbehind not implemented in regex m/(?<!ST)/ at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"Storable::store \"hallo\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: not a reference at (eval 1) line 1.\n","err":""},{"code":"$str = '00 00 1c 00'; $num = unpack(\"V\", pack(\"(H2)4\", split / /, $str)); [ $num ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1835008]"},{"err":"","out":"[1835008]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str = '00 00 1c 00'; $num = unpack(\"V\", pack(\"H8\", $str =~ tr/ //dr)); [ $num ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1835008]","code":"$str = '00 00 1c 00'; $str = join '', reverse split ' ', $str; $num = hex $str; [ $num ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[7168]","code":"$str = '00 00 1c 00'; $str =~ tr/ //d; $num = hex $str; [ $num ]","err_mask":""},{"err_mask":"","code":"$str = '001122334455'; @m = ($str =~ m/(\\d{2})/g); \"@m\"","err":"","out":"00 11 22 33 44 55","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[1835008]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str = '00 1c 00 00'; $str =~ tr/ //d; $num = hex $str; [ $num ]"},{"code":"$str = 0b10000000 ^ 0b00000100; print unpack q/B8/, $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"00110001","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"10000100","err":"","code":"$str = 0b10000000 ^ 0b00000100; sprintf \"%b\", $str","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$str2(\"\n","code":"$str1=\"1\"; $str2=\"2\"; print ($str1,$str2(; print ($str1.$str2);","err_mask":""},{"code":"$str1=\"1\"; $str2=\"2\"; print ($str1,$str2); print ($str1.$str2);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"1212","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"1212","err":"","code":"$str1=\"1\"; $str2=\"2\"; print $str1,$str2; print $str1.$str2;","err_mask":""},{"code":"$str = \"123456\"; for($i = 0; $i < length($str)-1; $i+=2) { (substr($str, $i, 1), substr($str, $i+1, 1)) = (substr($str, $i+1, 1), substr($str, $i, 1)); } $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"214365","err":""},{"code":"$str = \"123456\"; $str += 90909","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"214365"},{"code":"$str = \"123456\"; $str += join $., (3 * 3) x 3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"215375"},{"code":"$str='123abc'; $str =~ +'xyz'; print $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"123abc"},{"err_mask":"","code":"$str = '|1|2a|3abc|4abcd|5abcde'; [ map { $str =~ /((?:\\|[^\\|]*){$_})/  } 1..5 ]","err":"","out":"[\"|1\",\"|1|2a\",\"|1|2a|3abc\",\"|1|2a|3abc|4abcd\",\"|1|2a|3abc|4abcd|5abcde\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str=\"1a2s\"; ($s1, $s3)=$str=~m/\\d\\w/g;  print $s1.\"\\n\"; ($s2)=$str=~m//g;  print $s2.\"\\n\".$s3;","err":"","out":"1a\n1a\n2s","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str=\"1a2s\"; ($s1)=$str=~m/\\d\\w/g;  print $s1.\"\\n\"; ($s2)=$str=~m//g;  print $s2.\"\\n\";","out":"1a\n1a\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$str=\"1a2s\"; $str=~m/(\\d\\w)/g; $s1=$1; print $s1.\"\\n\"; $str=~m//g; $s2=$1; print $s2.\"\\n\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1a\n2s\n"},{"code":"$str1=\"a\"; $str2=\"b\"; print $str1=>$str2;","err_mask":"","out_mask":"Ã¿Ã¿","out":"ab","err":""},{"out_mask":"Ã¿","out":"4","err":"","code":"$str1 = 'foobar'; $str2 = 'foobiz'; ($str1 ^ $str2) =~ /(^\\0*)/; length $1","err_mask":""},{"code":"$str1 = 'foÃ¶bar'; $str2 = 'foobiz'; ($str1 ^ $str2) =~ /(^\\0*)/; length $1","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"err_mask":"","code":"$str1 = 'foÃ¶bar'; $str2 = 'foÃ¶biz'; ($str1 ^ $str2) =~ /(^\\0*)/; length $1","err":"","out":"5","out_mask":"Ã¿"},{"out":"6","err":"","out_mask":"Ã¿","err_mask":"","code":"$str1 = 'foÃ¶obar'; $str2 = 'foÃ¶obiz'; ($str1 ^ $str2) =~ /(^\\0*)/; length $1"},{"out":"4","err":"","out_mask":"Ã¿","err_mask":"","code":"$str1 = 'foÃ¶obar'; $str2 = 'foÃ¶'; ($str1 ^ $str2) =~ /(^\\0*)/; length $1"},{"out":"oneonetwo","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str1=\"one\"; $str2=\"two\"; print ($str1,$str1.$str2);"},{"out":"twooneonetwo","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str1=\"one\"; $str2=\"two\"; print ($str2.$str1,$str1.$str2);"},{"err_mask":"","code":"$str=1; printf (\"%.3f\", $str/3);","out":"0.333","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str = 'a a a a a a'; /a/g for ($str) x 3; $str =~ s/a\\G/x/; $str","err":"","out":"a a x a a a","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str = 'aaaaa'; $str =~ /a/gc for 1,2,3; $str =~ s/a/b/c; $str","out":"baaaa","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"aaaba","code":"$str = 'aaaaa'; $str =~ /a/g for 1 .. 3; $str =~ s/\\Ga/b/; $str","err_mask":""},{"err_mask":"","code":"$str='abc123'; map { s/abc/xyz/g; print } $str;","err":"","out":"xyz123","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str = \"abcdef\"; for($i = 0; $i < length($str)-1; $i+=2) { (substr($str, $i, 1), substr($str, $i+1, 1)) = (substr($str, $i+1, 1), substr($str, $i, 1)); } $str;","out":"badcfe","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$str=\"abcdefghijklmnopqrstuvwxyz\"; $str=~s/(?<=.{13}).*//; print $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abcdefghijklm","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\"abc\"\n","code":"$str=\"abcXYZ 123 pdq\"; $str=~s/(?<=.{3}).*//; print \"\\\"$str\\\"\\n\"","err_mask":""},{"out":"ARRAY","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str = [\"a\"..\"m\"]; print ref $str"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"$str.='a'..'m'; print ref $str;"},{"code":"$str = [\"a\"..\"m\"]; print scalar $str","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err":"","out":"ARRAY(0x33a9b88)"},{"err_mask":"","code":"$str = 'a'..'m'; print $str;","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"abcdefghijklm","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str = [\"a\"..\"m\"]; print @$str"},{"err":"","out":"ARRAY(0x37c2b88)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str = [\"a\"..\"m\"]; print $str"},{"code":"$str.='a'..'m'; print $str;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"$str = 'barfoo'; $str =~ /(?(?{$_=index($str,'foo');$_>0})foo|(*FAIL))/ or 1;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"$str=\"bleh\"; $str=~s/(?:test)/$1/; print $str;","err":"","out":"bleh","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"$str=\"bleh\"; $str=~s/(?test)/$1/; print $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Sequence (?t...) not recognized in regex; marked by <-- HERE in m/(?t <-- HERE est)/ at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"$str=\"blehtest\"; $str=~s/(?:bleh)/$1/; print $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"test"},{"err_mask":"","code":"$str=\"blehtest\"; $str=~s/(?:test)/$1/; print $str;","out":"bleh","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"$str = \"foo a b = z\"; @a = $str =~ m/( \\w)+/g; \\@a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\" b\",\" z\"]"},{"code":"$str = '   foo'; $str =~ s/\\A\\s+//; \"[$str]\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[foo]","err":""},{"code":"$str = '   foo'; $str =~ s/\\A\\s+//; $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":""},{"out_mask":"Ã¿","out":"t","err":"","code":"$str=\"ft\\n\"; chomp $str; $str =~ /ft$/ ? 't' : 'f'","err_mask":""},{"out":"t","err":"","out_mask":"Ã¿","err_mask":"","code":"$str=\"ft\\n\"; $str =~ /ft\\b/ ? 't' : 'f'"},{"code":"$str=\"ft\\n\"; $str =~ /ft$/ ? 't' : 'f'","err_mask":"","out_mask":"Ã¿","out":"t","err":""},{"out_mask":"Ã¿","out":"f","err":"","code":"$str=\"ft\\n\"; $str =~ /ft\\z/ ? 't' : 'f'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"qr/blabla \\/hallo\\/ xxx/u","err":"","code":"$str = \"/hallo/\"; qr{blabla $str xxx}","err_mask":""},{"err_mask":"","code":"$str = \"Hey $1.140 $20.568 16.9kg 12.3 2342342.9 Hey\"; $str =~ s/(\\d+\\.\\d+)/sprintf(\"%0.f\")/eg; print $str;","out":"Hey .140 .568 0kg 0 0 Hey","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str = \"Hey $1.140 $20.568 16.9kg 12.3 2342342.9 Hey\"; $str =~ s/(\\d+\\.\\d+)/sprintf(\"%0.f\")/g; print $str;","out":"Hey .140 .568 sprintf(\"%0.f\")kg sprintf(\"%0.f\") sprintf(\"%0.f\") Hey","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str = \"Hey $1.140 $20.568 16.9kg 12.3 2342342.9 Hey\"; $str =~ s/(\\d+\\.\\d+)/sprintf(\"%.f\",$1)/eg; print $str;","out":"Hey .140 .568 17kg 12 2342343 Hey","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":" $str = \"I am 2000 years old\"; $str =~ s/(\\d+(?:\\.\\d+)?)/sprintf('%.f',$1)/er;","err":"","out":"I am 2000 years old","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":" $str = \"I bought $155.4954 worth of oregano\"; $str =~ s/(\\d+(?:\\.\\d+)?)/sprintf('%.f',$1)/er;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"I bought .4954 worth of oregano"},{"code":"'strike' =~ /(?:anywhere)?/ ? 'matches' : 'bad joke';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"matches","err":""},{"err":"","out":"ERROR: Sequence (?any...) not recognized in regex; marked by <-- HERE in m/(?any <-- HERE where)/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'strike' =~ /(?anywhere)/ ? 'matches' : 'bad joke';"},{"code":"\"string\\'\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"string'"},{"err_mask":"","code":"$string=\"hello world\"; ($capture) = $string =~ /\\bhello\\b/; print $capture;","err":"","out":"1","out_mask":"Ã¿"},{"code":"$string=\"hello world\"; $capture = $string; $capture =~ /hello/; print $capture;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hello world","err":""},{"out":"hello","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$string=\"hello world\"; $capture = $string; $capture =~ s/.*(hello).*/$1/; print $capture;"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"$string=\"hello world\"; ($capture) = $string =~ /hello/; print $capture;"},{"code":"$string=\"hello world\"; $capture = $string =~ /hello/; print $capture;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"$string=\"hello world\"; ($capture) = $string =~ s/.*(hello).*/$1/; print $capture;"},{"out":"nah, i don't will hack you. you guys are cool.","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$string = \"nah, i don't will hack you. you guys are cool.\"; $string =~ s/\"don't will\"/\"won't\"/g; print $string;"},{"code":"$string = \"nah, i don't will hack you. you guys are cool.\"; $string =~ s/don't will/won't/g; print $string;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"nah, i won't hack you. you guys are cool.","err":""},{"out":"bleh","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$string = qq/bleh/; print $string;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"blehbleh","code":"$string = qq/bleh/; print $string => $string;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"357","code":"$string=\"xyz357pdq\"; $string=~s/.*357.*/357/g; print $string","err_mask":""},{"err":"","out":"18446744073709551614","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"stringy stringy string\"; $f = ~m/ingy/; print $f"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"I weight 16kg","err":"","code":" $str = \"I weight 15.6kg\"; $str =~ s/(\\d+(?:\\.\\d+)?)/sprintf('%.f',$1)/er;","err_mask":""},{"err_mask":"","code":"$str = \"llama\"; print substr($str, 0, -1);","out":"llam","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"$str = \"llama\"; print substr($str, -1, 0);"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"lam","code":"$str = \"llama\"; print substr($str, 1, -1);","err_mask":""},{"err":"","out":"l","out_mask":"Ã¿","err_mask":"","code":"$str = \"llama\"; print substr($str, 1, 1);"},{"code":"$str = \"llama\"; print substr($str, 1, 2);","err_mask":"","out_mask":"Ã¿Ã¿","out":"la","err":""},{"code":"$str = \"llama\"; print substr($str, 1, 3);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"lam","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"P98 3GÃ¥ÂÂ«Ã¦Â Â¸(A3HY) Build/KOT49H)","err":"","code":"$str = 'P98 3G\\xE5\\x85\\xAB\\xE6\\xA0\\xB8(A3HY) Build/KOT49H)'; $str =~ s/\\\\x(..)/chr hex $1/ge; Encode::decode_utf8($str)","err_mask":""},{"err_mask":"","code":"$str = 'P98 3G\\xE5\\x85\\xAB\\xE6\\xA0\\xB8(A3HY) Build/KOT49H)'; $str =~ s/\\\\x(..)/chr hex $1/ge; $str","err":"","out":"P98 3GÃ¥ÂÂ«Ã¦Â Â¸(A3HY) Build/KOT49H)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ok","out_mask":"Ã¿Ã¿","err_mask":"","code":"$str = \"_\"; print \"ok\" if ($str =~ /\\w/)"},{"err_mask":"","code":"$str = scalar [\"a\"..\"m\"]; print $str","err":"","out":"ARRAY(0x4be4b88)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str=sprintf(\"%.3f\", 1/3); print $str;","out":"0.333","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$str=sprintf(%.3f, 1/3); print $str;","out":"ERROR: syntax error at (eval 1) line 1, near \"%.3\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":" active/standby","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str=\"status is: active/standby\"; $str =~ s/.*\\://; print $str;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"active/standby","code":"$str=\"status is: active/standby\"; $str =~ s/.*\\:\\s+?//; print $str;","err_mask":""},{"err_mask":"","code":"$str=\"stringAtostringBxyz\"; $str=~s/A.*B//g; print $str;","err":"","out":"stringxyz","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"'","out_mask":"Ã¿","err_mask":"","code":"$str = \"''\"; $str=~ s/\\'\\'/\\'/g; print $str;"},{"err_mask":"","code":"$str = 'str with [ bracket'; $str =~ /[][]/ ? 'match' : 'no match';","err":"","out":"match","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$str = \"s\\xc3\\x83\\xc2\\xbc\\xc3\\x83\\xc2\\x9fe\"; [ $str, decode_utf8($str), decode_utf8(decode_utf8($str)) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"s\\303\\203\\302\\274\\303\\203\\302\\237e\",\"s\\x{c3}\\x{bc}\\x{c3}\\x{9f}e\",\"s\\x{fc}\\x{df}e\"]"},{"err_mask":"","code":"$str = 'test'; for my $n (0..2**length($str)-1) { $bit = 0; print $str =~ s/([a-z])/$n & 1<<$bit++ ? uc$1 : lc$1/ger, ' ' } # << may be faster","out":"test Test tEst TEst teSt TeSt tESt TESt tesT TesT tEsT TEsT teST TeST tEST TEST ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"test Test tEst TEst teSt TeSt tESt TESt tesT TesT tEsT TEsT teST TeST tEST TEST ","code":"$str = 'test'; for my $n (0..2**length($str)-1) { $bit = 0; print $str =~ s/([a-z])/$n & 2**$bit++ ? uc$1 : lc$1/ger, ' ' } # another idea","err_mask":""},{"code":"$str = 'test'; for my $n (0..2**length($str)-1) { $bit = 0; print $str =~ s/([a-z])/$n & 2**$bit++ ? uc$1 : lc$1/gier, ' ' } # needs /i (maybe?)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"test Test tEst TEst teSt TeSt tESt TESt tesT TesT tEsT TEsT teST TeST tEST TEST "},{"err_mask":"","code":" $str = âthe 15.7 romulansâ; $str =~ s/((\\d+)(\\.\\d+)?)/int(\\1)/e;","err":"","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after /; $str = <-- HERE near column 98 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":" $str = \"the 15.7 romulans\"; $str =~ s/((\\d+)(\\.\\d+)?)/sprintf(\"%.f\",(\\1)/e;","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":" $str = \"the 15.7 romulans\"; $str =~ s/((\\d+)(\\.\\d+)?)/sprintf(\"%.f\",\\1)/e;","err_mask":""},{"code":" $str = \"the 15.7 romulans\"; $str =~ s/(\\d+(?:\\.\\d+)?)/sprintf('%.f',$1)/er;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"the 16 romulans","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"the 55373480 romulans","code":" $str = \"the 15.7 romulans\"; $str =~ s/(\\d+(?:\\.\\d+)?)/sprintf(\"%.f\",\\1)/er;","err_mask":""},{"err_mask":"","code":"$str='the quick Brown Fox'; $rex = qr/brown f/i; print $rex; $str =~ $rex; print \" $str\";","err":"","out":"(?^ui:brown f) the quick Brown Fox","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"(?^ui:brown f) the quick ox","code":"$str='the quick Brown Fox'; $rex = qr/brown f/i; print $rex; $str =~ s/$rex//; print \" $str\";","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"$str='the rain in spain is not a dancer'; print s/e//g;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"trim this","err":"","code":"$str='  trim this  '; $str=~s/^\\s+//g; $str=~s/\\s+$//g; print $str;","err_mask":""},{"err_mask":"","code":"$str = uc(\"foobar\") =~ s/FOO//r; $str","out":"BAR","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"$str = undef; print ref $str;","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"$str = undef; print $str;"},{"code":"$str=\"wildcard portion\"; $str=~s/(.)/\\[$&\\]/g; print $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[w][i][l][d][c][a][r][d][ ][p][o][r][t][i][o][n]"},{"err_mask":"","code":"$str=\"wildcard portion\"; $str=~s/wildcar(d.+)tion/\\[$&\\]/g; print $str;","out":"[wildcard portion]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$str=\"wildcard portion\"; $str=~s/wildcar(d*+)tion/\\[$&\\]/g; print $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"wildcard portion","err":""},{"code":"$str=\"wildcard portion\"; $str=~s/wildcar(.*)tion/\\[$&\\]/g; print $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[wildcard portion]"},{"err_mask":"","code":"$str=\"wildcard portion\"; $str=~s/.*(wild).*/$&/g; print $str;","out":"wildcard portion","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[wild]card portion","err":"","code":"$str=\"wildcard portion\"; $str=~s/(wild)/\\[$&\\]/g; print $str;","err_mask":""},{"code":"s TT$ Donald Trump","err_mask":"","out_mask":"Ã¿","out":" ","err":""},{"err_mask":"","code":"\"stuff\" . 1 + 3","err":"","out":"3","out_mask":"Ã¿"},{"err_mask":"","code":"['stuff' =~ /(?:(?!stuff).)*/]","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"/(?<!STYLESY0B\\$\\$)/"},{"out":"","err":"","out_mask":"","err_mask":"","code":"/(?<!STYLESY0B\\$\\$)\\b/"},{"code":"/(?<!STYLESY0B\\$\\$)\\b/i","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Variable length lookbehind not implemented in regex m/(?<!STYLESY0B\\$\\$)\\b/ at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"/(?<!STYLESY0B\\$\\$)/i","out":"ERROR: Variable length lookbehind not implemented in regex m/(?<!STYLESY0B\\$\\$)/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Variable length lookbehind not implemented in regex m/(?<!STYLESY0B\\$\\$)/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"/(?<!STYLESY0B\\$\\$)/ia"},{"out_mask":"Ã¿","out":"1","err":"","code":"/(?<!STYLESY0B\\$\\$)/iaa","err_mask":""},{"out_mask":"","out":"","err":"","code":"(sub {}) -> ()","err_mask":""},{"out":"[[sub { \"DUMMY\" }]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ [ sub {} ] ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[sub { \"DUMMY\" }]","err":"","code":"[ sub {} ]","err_mask":""},{"code":"sub ã¨ {}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal declaration of anonymous subroutine at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"(sub { ($_[0] = $_), shift for \"another perl Just hacker,\\n\" =~ /\\S+\\s/g })->(qw,s o r t,); print @a;","err_mask":""},{"code":"(sub { ($_[0] = $_), shift for \"another perl Just hacker,\\n\" =~ /\\S+\\s/g })->(sort my @a = qw,s o r t,); print @a;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Just another perl hacker,\n"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"sub { &{$_[0]} }->( sub { &{$_[0]} } )","err":"Out of memory!\n","out":"","out_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"(sub { 1 }) -> ()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Just another Perl hacker,","err":"","code":"sub _{@_<2&&return@_;push@{$|--},$_ for@_;map _(@$_),map[splice@$_],0,1}print _ split//,\"huroP cels,tetah Jen akrr\";","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":" uhPakatrrorc  ,tlJenehse","err":"","code":"sub _{@_<2&&return@_;push@{$|--},$_ for@_;map _(@$_),map[splice@$_],0,1}print _ split//,\"Just another Perl hacker,\";","err_mask":""},{"code":"sub _{@_<2&&return@_;push@{$|--},$_ for@_;map _(@$_),map[splice@$_],0,1}print _ split//,\" uhPakatrrorc  ,tlJenehse\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"lur keePr,tsnacert  ahJho"},{"err_mask":"","code":"[ sub {42} ]->[0]()  # hehehe","err":"","out":"42","out_mask":"Ã¿Ã¿"},{"out":"42","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub {42}->()  # hehehe"},{"err":"","out":"[0]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ sub { 55 if 0 }->() ]"},{"out_mask":"Ã¿","err":"","out":"0","code":"sub { 55 if 0 }->()","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"sub a { (5,7) }; a()->[1]"},{"code":"sub a { (5,7) }; a[1]","err_mask":"","out_mask":"Ã¿","out":"7","err":""},{"out_mask":"Ã¿","err":"","out":"7","code":"sub a { (5,7); }  (a(3,1))[1];","err_mask":""},{"code":"sub a { (5,7); }  die (a(3))[1];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \")[\"\n"},{"err_mask":"","code":"sub a { (5,7); }  die (a(3,1))[1];","out":"ERROR: syntax error at (eval 1) line 1, near \")[\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: 7 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub a { (5,7); }  die +(a(3,1))[1];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","code":"sub a () { (5, 7) } print a[1];","err_mask":""},{"err_mask":"","code":"sub a { @_ } (a 3,2)[1]","err":"","out":"2","out_mask":"Ã¿"},{"code":"sub a { @_ }; (a(3,2))[1]","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Illegal declaration of subroutine main::a at (eval 1) line 1, <STDIN> line 1.\n","code":"sub aãb { \"hi\" } aãb","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \")(\"\n","err":"","code":"sub a { b() } sub b { goto (caller(1))(3) } a()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find label main::a at (eval 1) line 1, <STDIN> line 1.\n","code":"sub a { b() } sub b { goto (caller(1))[3] } a()","err_mask":""},{"code":"sub a { b() } sub b { goto *{+(caller(1))[3]}{CODE} } a()","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Out of memory!\n"},{"err_mask":"","code":"sub accessor { my $self = shift; unless($self->{whatever}) { $self->{whatever} = 'stuff' } } accessor({whatever => 'previous value'}) # obviously no one would write code like that unless they hated the rest of their team, but, y'know. real example, sadly","err":"","out":"previous value","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub add { $_[0]+1 } add 5","err_mask":"","out_mask":"Ã¿","out":"6","err":""},{"code":"sub add { $_[0]+$_[1] } say add 2 => 2","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"4\n"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"sub add { my $x = shift; sub { $_[0] + $x } } add(1)->(2)"},{"code":"sub another'Just { \"Just @_,\" } sub hacker'Perl { \"Perl @_\" }  Just another Perl hacker,","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Just another Perl hacker,","err":""},{"err_mask":"","code":"sub { $anyothername = 'xxx' }->(); [ $anyothername ]","err":"","out":"[\"xxx\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub a { @_ } print a(5,7)[1];","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \")[\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \")[\"\n","err":"","code":"sub a { return (5, 7); } print (a())[1];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"cats","code":"sub AUTOLOAD { $AUTOLOAD = 'cats' } sub lol { \"lol\" } notlol()","err_mask":""},{"code":"sub AUTOLOAD { $AUTOLOAD = 'lol' } sub lol { \"lol\" } notlol()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"lol"},{"err":"","out":"lol","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { $AUTOLOAD = 'lol' } sub lol { \"verylol\" } notlol()"},{"err_mask":"","code":"sub AUTOLOAD{ our $AUTOLOAD; my ( $a ) = @_; print \"$AUTOLOAD $a\"; } hello( 'kitty' );","out":"main::hello kitty","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub AUTOLOAD { print \"hi\" } &foo","out":"hi","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"sub AUTOLOAD { print \"hi\" } &{\"foo\"}","err":"","out":"hi","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"foo","code":"sub AUTOLOAD { print \"hi\" } foo;","err_mask":""},{"out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print \"hi\" } $x=\\*foo{CODE}; &$x;"},{"code":"sub AUTOLOAD { print \"hi\" } $x=\\*foo; &$x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"sub AUTOLOAD { say 'test' }; [ 'main'->can('AUTOLOAD') ? 'yes' : 'no' ];","err":"","out":"[\"yes\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub bar { $_[0]( $_[1] ) }; bar(sub { $_[0] * 2}, 5)","out":"10","err":"","out_mask":"Ã¿Ã¿"},{"code":"sub bar { $foo = 0; return $foo || die; } bar();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"","out":"0","code":"sub bar { $foo = 0; return $foo or die; } bar();","err_mask":""},{"err_mask":"","code":"sub base { my ($d, $n) = @_; my $r = ''; { my $c = $n % $d; if ($c >= 10) { $c = chr($c - 10 + ord 'a'); } $r .= $c; if ($n >= $d) { $n = int($n / $d); redo; } } scalar reverse $r } base 16, 0","err":"","out":"0","out_mask":"Ã¿"},{"code":"sub base { my ($d, $n) = @_; my $r = ''; { my $c = $n % $d; if ($c >= 10) { $c = chr($c - 10 + ord 'a'); } $r .= $c; if ($n >= $d) { $n = int($n / $d); redo; } } scalar reverse $r } base 16, 255","err_mask":"","out_mask":"Ã¿Ã¿","out":"ff","err":""},{"err_mask":"","code":"sub base { my ($d, $n) = @_; my $r = ''; { $r .= $n % $d; if ($n >= $d) { $n = int($n / $d); redo; } } scalar reverse $r } base 10, 5","err":"","out":"5","out_mask":"Ã¿"},{"code":"sub base { my ($d, $n) = @_; my $r = ''; { $r .= $n % d; if ($n >= $d) { $n = int($n / $d); redo; } } scalar reverse $r } base 10, 5","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Illegal modulus zero at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"sub base { my ($d, $n) = @_; my $r = ''; { $r .= $n % $d; if ($n >= $d) { $n = int($n / $d); redo; } } scalar reverse $r } base 2, 10","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"1010"},{"code":"sub base { my ($d, $n) = @_; my $r = ''; { $r .= $n % $d; if ($n >= $d) { $n = int($n / $d); redo; } } scalar reverse $r } base 2, 5","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"101","err":""},{"out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/( <-- HERE .{8}/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub bin2chr { pack 'b8', $_ }   join \"\", map { bin2chr $_ } \"0101010001101001011101000110100000110100011000110110111101101011011001010110100100001010\" =~ m/(.{8}/g;"},{"err_mask":"","code":"sub bin2chr { pack 'b8', $_ }   join \"\", map { bin2chr $_ } \"0101010001101001011101000110100000110100011000110110111101101011011001010110100100001010\" =~ m/(.{8})/g;","out":"*Â.\u0016,ÃÃ¶ÃÂ¦ÂP","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub bin2chr { pack 'B8', $_ }   join \"\", map { bin2chr $_ } \"0101010001101001011101000110100000110100011000110110111101101011011001010110100100001010\" =~ m/(.{8})/g;","out":"Tith4cokei\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub blah { $_[0]++ } blah(my $val); ++$val","err":"","out":"2","out_mask":"Ã¿"},{"out":"6","err":"","out_mask":"Ã¿","err_mask":"","code":"sub blah { my @args = @_; return @args[-1]; } blah(0,1,2,3,4,5,6);"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"sub blah { return $_[3] } blah(0,1,2,3,4,5,6);"},{"code":"sub blah { \"value\" } blah()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"value"},{"code":"sub buildMech { return WWW::Mechanize->(); } sub zeroMech {my $mech = $_[0]; $$mech->clear_credentials(); } my $mech = zeroMech \\buildMech();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &WWW::Mechanize called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"sub buildMech { return WWW::Mechanize->(); } sub zeroMech {my $mech = $_[0]; $$mech->clear_credentials(); } my $mech = zeroMech buildMech();","err":"","out":"ERROR: Undefined subroutine &WWW::Mechanize called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub Bulgaria { print caller; } package Wimbledon; Bulgaria","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Bulgaria"},{"out":"ERROR: Undefined subroutine &Wimbledon::Bulgaria called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub Bulgaria { print caller; } package Wimbledon; Bulgaria()"},{"code":"sub c {$_[0]=~/.*\\.(.*)$/;$1} [map c($_), \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"jpg\",\"pdf\",\"\",\"vimrc\",\"pl\"]","err":""},{"out":"[\"jpg\",\"pdf\",\"\",\"vimrc\",\"pl\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub c {$_[0]=~/.*\\.(.*)$/;$1} [map c($_), \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]"},{"err":"","out":"[\"cats\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub catify { $_[0] = \"cats\" } my $x = \"dogs\"; catify $x; [$x]"},{"code":"sub chomp { \"blah\" }; [ chomp ] # Perl will warn about this with warnings on though","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]"},{"code":"sub closure { my $foo; sub { $foo ++ } }; my $sub = closure(); my $other = closure() ; [ $sub->(), $sub->() , $other->(), $other->(), $other->() ] # note that the $foo that belongs to $sub is different from the $foo that $other has... and that they both continue to exist due to there being a reference to a sub in the scope they reside within. see also: coping with scoping","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1,0,1,2]"},{"code":"sub config { my %x = (a => \"b\"); \\%x }; config","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{a => \"b\"}"},{"err_mask":"","code":"sub CONSTANTPLS { 5 } my %stuff = ( +CONSTANTPLS => 7 ); $stuff{+CONSTANTPLS}","err":"","out":"","out_mask":""},{"err_mask":"","code":"sub CONSTANTPLS { 5 } my %stuff = ( CONSTANTPLS() => 7 ); $stuff{CONSTANTPLS()}","out":"7","err":"","out_mask":"Ã¿"},{"err":"","out":"1\n","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub ctx { say wantarray } \\ctx;"},{"code":"sub ctx { wantarray // 'undef' } \\ctx;","err_mask":"","out_mask":"Ã¿Ã¿","out":"\\1","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"ff","code":"sub curry { my ($f) = @_; sub { my ($x) = @_; sub { my ($y) = @_; $f->($x, $y) } } } sub base { my ($d, $n) = @_; my $r = ''; { my $c = $n % $d; if ($c >= 10) { $c = chr($c - 10 + ord 'a'); } $r .= $c; if ($n >= $d) { $n = int($n / $d); redo; } } scalar reverse $r } curry(\\&base)->(16)->(255)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{name => \"x\"},{name => \"y\"},{name => \"z\"}]","err":"","code":"sub custom { my ($k) = @_; $a->{$k} cmp $b->{$k} } [ sort { custom('name') } { name => 'x' }, { name => 'y' }, { name => 'z' } ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"d3d12120","code":"sub d { (0 .. 9, 'a' .. 'z')[$_[0]] } sub b { $_ && b($_[0], $_) for int $_[1] / $_[0]; print d $_[1] % $_[0]; } b 14, 1.4e9","err_mask":""},{"err_mask":"","code":"sub d { (0 .. 9, 'a' .. 'z')[$_[0]] } sub b { $_ && b($_[0], $_) for int $_[1] / $_[0]; print d $_[1] % $_[0]; } b 16, 255","err":"","out":"ff","out_mask":"Ã¿Ã¿"},{"code":"sub d { (0 .. 9, 'a' .. 'z')[$_[0]] } sub b { $_ && b($_) for int $_[1] / $_[0]; print d $_[1] % $_[0]; } b 14, 1.4e9","err_mask":"","out_mask":"Ã¿Ã¿","out":"00","err":""},{"err_mask":"","code":"sub dieonAg{ $string = shift; if ($string =~ /A[^ab]/) die \"A and not Aa or Ab\"; return $string};   print dieonAg(\"Hi A.\");","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \") die\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: A and not Aa or Ab at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub dieonAg{ $string = shift; if( $string =~ /A[^ab]/) {die \"A and not Aa or Ab\"}; return $string};   print dieonAg(\"Hi A.\");"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \") die\"\n","code":"sub dieonAg{ $string = shift; if ($string =~ /A[^ab]/) die \"A and not Aa or Ab\"; return $string};   print dieonAg(\"Hi Ab.\");","err_mask":""},{"code":"sub dieonAg{ $string = shift; if( $string =~ /A[^ab]/) {die \"A and not Aa or Ab\"}; return $string};   print dieonAg(\"Hi Ab.\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hi Ab.","err":""},{"code":"sub do_stuff { my ($thing, @morestuff) = @_; return $thing, @morestuff; } do_stuff(0, 'asdf') ? 1 : 0","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub do_stuff { undef $_ } [ map { do_stuff(); $_ } (1,2,3) ]"},{"out":"[[312,56],[326,-186]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub du { my ($x, $N, $V, $C) = @_; unpack('C', $x) + $C * 256 } sub ds { my ($x, $N, $V, $C) = @_; unpack('C', $x) - ($N ^ $V) * 256 } sub p { pack \"B*\", $_[0] } [ map [du(@$_), ds(@$_)], [p('00111000'), 0, 0, 1], [p('01000110'), 0, 1, 1] ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[312,56],[326,-186]]","code":"sub du { my ($x, $N, $V, $C) = @_; $x + $C * 256 } sub ds { my ($x, $N, $V, $C) = @_; $x - ($N ^ $V) * 256 } [ map [du(@$_), ds(@$_)], [0b0011_1000, 0, 0, 1], [0b0100_0110, 0, 1, 1] ]","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"><","err":"","code":"sub eh { print \">\", wantarray, \"<\" } ref(eh)","err_mask":""},{"err_mask":"","code":"sub { eval { return 1 }; return 2 }->()","err":"","out":"2","out_mask":"Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"sub f { 1 }; main -> f;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"f2f1","err":"","code":"sub f1 { print 'f1' } sub f2 { print 'f2' } eval \"f1\\n&f2\"","err_mask":""},{"err_mask":"","code":"sub f1 { \\@_ } sub f2 { \"f2\" } eval \"f1;\\n&f2\"","err":"","out":"f2","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"f2\"]","code":"sub f1 { \\@_ } sub f2 { \"f2\" } eval \"f1\\n&f2\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"123","code":"sub f { a => 123 } +{ f() }->{a}","err_mask":""},{"code":"sub f { (a => 1, b => 2) } my $value = { f() }->{a};","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"\\3","code":"sub f { my @array = 1..3; return @array } \\f()","err_mask":""},{"err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { ${$_[0]} = 123 } foo \\(my $x); $x"},{"out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { ${$_[0]} = 123 } foo \\undef; $x"},{"code":"sub foo { $$_[0] = 1 } foo \\(my $x); $x","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"[0,1,2,3,772,9]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo{$_[0]<=>$_[1]} [sort &foo, qw,1 3 2 772 9,]"},{"err":"","out":"10","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { $_[0] * 2 } sub bar { $_[0]( $_[1] ) }; bar(\\&foo, 5)"},{"code":"sub foo { $_[0] } \"cats\"->${ \\\\&foo }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"cats"},{"code":"sub foo { $_[0] } \"cats\"->${ \\&foo }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a SCALAR reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"sub foo {$_[0]=\"cats\"}; foo \"dogs\";  # don't cripple your API for no reason","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&)\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo (&) { $_[0]() } foo \\sub {};"},{"code":"sub foo { $_[0] .= \"Hi\" } my $x = \"Hello \"; foo($x); [$x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Hello Hi\"]","err":""},{"out":"hi","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { $_[0] = \"hi\"; } sub r_u_kiddin_me { \\@_ } sub bar { local *copy = r_u_kiddin_me @_; foo(@copy); \"@_\" }  $x = \"foo\"; bar $x"},{"code":"sub foo { $_[0]++ } my $x = 1; foo($x); $x","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[4]","err":"","code":"sub foo { $_[0]++ } my $x = 3; foo($x); [$x] #anno, you were saying?","err_mask":""},{"out":"[\"A\",\"B\",\"C\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { @{$_[0]}=qw( A B C ); } foo (\\my @y); \\@y;"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { @{$_[0]}=qw( A B C ); } foo [my @y]; \\@y;"},{"err_mask":"","code":"sub foo { @{$_[0]}=qw( A B C ); } foo \\(my @y); \\@y;","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"foo","code":"sub foo { $_[0] =~ s/foo/bar/ } sub bar { foo(@copy = @_); \"@_\" } $x = \"foo\"; bar($x)  # how about this","err_mask":""},{"out":"bar","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { $_[0] =~ s/foo/bar/ } sub bar { foo(@_); \"@_\" } $x = \"foo\"; bar($x)"},{"code":"sub foo { 1..10 }; \\foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"\\10"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\1,\\2,\\3]","code":"sub foo { 1, 2, 3 } [ \\foo ]","err_mask":""},{"out":"\\3","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { 1, 2, 3 } \\foo"},{"code":"sub foo { [1, 2, 3] } { my $arr_ref = foo(); if (@$arr_ref) { print @$arr_ref } }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"123"},{"code":"sub foo { 2 } $foo=1; [$foo,foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2]","err":"","code":"sub foo { 2 }; $foo=1; [$foo,foo]","err_mask":""},{"code":"sub foo { 42 } *bar = \\&foo; bar()","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"42"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[sub { \"DUMMY\" }]","err":"","code":"sub FOO () { 42 } [ $::{FOO} ]","err_mask":""},{"err":"","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { 42 }  *{$main::{foo}}{CODE}"},{"err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { 42 } our $foo = 2; *{$main::{foo}}{CODE}"},{"err_mask":"","code":"sub foo { [ @_ ] }; @a = (1,2,3,4); foo(@a)","err":"","out":"[1,2,3,4]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]","code":"sub foo { [ @_ ] }; @a = 1,2,3,4; foo(@a)","err_mask":""},{"err_mask":"","code":"sub foo{$a<=>$b} [sort &foo, qw(1 3 2 772 9)]","err":"","out":"[0,1,2,3,772,9]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub foo { 'a'..'z' }; [\\(foo)];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\\"a\",\\\"b\",\\\"c\",\\\"d\",\\\"e\",\\\"f\",\\\"g\",\\\"h\",\\\"i\",\\\"j\",\\\"k\",\\\"l\",\\\"m\",\\\"n\",\\\"o\",\\\"p\",\\\"q\",\\\"r\",\\\"s\",\\\"t\",\\\"u\",\\\"v\",\\\"w\",\\\"x\",\\\"y\",\\\"z\"]"},{"err_mask":"","code":"sub foo { 'a'..'z' }; [\\foo];","err":"","out":"[\\\"a\",\\\"b\",\\\"c\",\\\"d\",\\\"e\",\\\"f\",\\\"g\",\\\"h\",\\\"i\",\\\"j\",\\\"k\",\\\"l\",\\\"m\",\\\"n\",\\\"o\",\\\"p\",\\\"q\",\\\"r\",\\\"s\",\\\"t\",\\\"u\",\\\"v\",\\\"w\",\\\"x\",\\\"y\",\\\"z\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"\\\"z\"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { 'a'..'z' }; \\(foo);"},{"err_mask":"","code":"sub foo { 'a'..'z' }; \\foo;","out":"\\\"z\"","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\undef","code":"sub foo { 'a'..'z' }; \\( (foo)[0..26] );","err_mask":""},{"err_mask":"","code":"sub Foo::Bar::blah { 'hi' } 'Foo::Bar'->blah","err":"","out":"hi","out_mask":"Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"sub foo { BLAH: { sub { last BLAH }->(); print \"cats\\n\" } } foo()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"main::foo","err":"","code":"sub foo { (caller 0)[3] } foo","err_mask":""},{"err_mask":"","code":"sub foo {(caller(0))[3]}  foo()","out":"main::foo","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"sub foo { $count++; (1,2,3) } foreach my $x (foo()) { } $count","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"new\" via package \"Foo\" (perhaps you forgot to load \"Foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"sub Foo { die 'here' } 'Foo'->new","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[-1]","code":"sub foo { $#$_; }; [ foo(1 .. 4) ]","err_mask":""},{"code":"sub foo; foo \"hi\\n\"; sub foo { print \"moo\\n\"; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"moo\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo!","code":"sub foo { \"foo!\" }; push @x, \\&foo; $x[0]->()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo!","code":"sub foo { \"foo!\" }; push @x, \\&foo; $x[0]() # I thought the -> was always needed before () - guess not","err_mask":""},{"err_mask":"","code":"sub foo (;*); foo($x, $y, length $y);","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub foo (\\&);  # good luck, what does this even mean","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub foo {\" Hello\"}; undef &foo; foo()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"hi","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { \"hi\" } my @x; bless \\@x; (\\@x)->foo"},{"err_mask":"","code":"sub foo{if (0) {} else {\"nothing\"}} [foo]","out":"[\"nothing\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"sub foo{if (1) {} else {\"nothing\"}} [foo]","err_mask":""},{"out":"cats","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo ($is_it) { $is_it } foo \"cats\""},{"code":"sub foo { join '-', @_ } foo 1, 2, 3, \"dogs\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1-2-3-dogs","err":""},{"out":"CODE(0x4ded378),CODE(0x4ded378)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo{}  join \",\", (\\&foo, \\&foo)"},{"out":"CODE(0x38fc378),CODE(0x38fc378)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo{}  join \",\", (\\&foo)x2"},{"out":"[\"key1\",\"value1\",\"key2\",\"value2\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { key1 => value1, key2 => value2 } [foo()]"},{"err_mask":"","code":"sub foo :lvalue { @foo };  foo() = qw/ One Two Three /;","err":"","out":"ERROR: Can't return array to lvalue scalar context at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub foo :lvalue { $foo };  foo() = qw/ One Two Three /; $foo","out":"Three","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","code":"sub foo :lvalue { print \"FOO!\" }  undef &foo; foo()","err_mask":""},{"out":"\nERROR: Can't return a readonly value from lvalue subroutine at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo :lvalue { say wantarray } foo = \"cats\""},{"err_mask":"","code":"sub foo :lvalue { say wantarray; our $foo } foo = \"cats\"","err":"","out":"\n","out_mask":"Ã¿"},{"err":"","out":"cats","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo :lvalue { [wantarray] } foo = \"cats\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"bar\"],[\"main\",\"bar\"]]","code":"sub foo { \\@_ };  [ main::foo(\"bar\"), main->foo(\"bar\") ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3,4,5,6,7,8,9,10]","err":"","code":"sub foo { map { $_ } 1..10; } my $x = [ foo ]; $x;","err_mask":""},{"code":"sub foo { map { $_ } 1..10; } my $x = foo; $x;","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"10"},{"code":"sub foo { map { $_ } 1..10; } my $x = \\foo; $x; ### Why is this produce a different result?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"\\10","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\\"c\"","code":"sub foo { map { $_ } qw/a b c/; } my $x = \\foo; $x;","err_mask":""},{"err_mask":"","code":"sub foo { map { $_ } qw/a b c/; } my $x = foo; $x;","out":"3","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"sub foo {  map { @_ }  qw/the futures returned/  }     [ foo(qw/the method parameters/) ]","err":"","out":"[\"the\",\"method\",\"parameters\",\"the\",\"method\",\"parameters\",\"the\",\"method\",\"parameters\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo() { my ($arg1, $arg2) = @_ } foo(1,2)"},{"err":"","out":"35","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { my ($arg1, $hashref) = @_; $hashref->{asdf} = 35 } my %hash = (asdf => 55); foo('25', \\%hash); $hash{asdf}"},{"out_mask":"Ã¿Ã¿","out":"55","err":"","code":"sub foo { my ($arg1, $hashref) = @_; $hashref->{asdf} } my %hash = (asdf => 55); foo('25', \\%hash)","err_mask":""},{"out":"scalarscalarscalarscalar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my $c = wantarray; !defined $c ? \"void\" : $c ? \"list\" : \"scalar\" } (foo) x 4"},{"err":"","out":"[\"list\",\"list\",\"list\",\"list\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my $c = wantarray; !defined $c ? \"void\" : $c ? \"list\" : \"scalar\" } [(foo) x 4 ]"},{"err":"","out":"1 1; 1 2; 1 3; 2 1; 2 2; 2 3; 3 1; 3 2; 3 3; ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my ($d, @r) = @_; if ($d < 1) { print \"@r; \"; return; } for my $i (1 .. 3) { foo($d - 1, @r, $i); } } foo 2;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","code":"sub foo { my $_ = \\@_; $#$_ } [ foo(1..4) ]","err_mask":""},{"out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { } my $foo = \\&foo; my $bar = \\&bar; [ $foo eq $bar ]"},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { } my $foo = \\&foo; my $bar = \\&foo; [ $foo == $bar ]"},{"err_mask":"","code":"sub foo { my ($num, @els) = @_; $num + @els } foo( 3, 1, 2, 3)","out":"6","err":"","out_mask":"Ã¿"},{"code":"sub foo { my ($one, $two, $three) = @_; return defined($two) ? \"two is defined\" : \"two is undef\"; } [foo('hello',undef(),'three')]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"two is undef\"]"},{"out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my $x = $_[0]; $x =~ s/foo/bar/ } sub bar { foo(@_); \"@_\" } $x = \"foo\"; bar($x)"},{"err_mask":"","code":"sub foo { my $x = 42; sub { eval shift } } foo()->('$x')","out":"","err":"","out_mask":""},{"err":"","out":"42","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { my $x = 42; sub { $x; eval shift } } foo()->('$x')"},{"err_mask":"","code":"sub foo { my $x = do { return 1 }; $x + 1 } foo","err":"","out":"1","out_mask":"Ã¿"},{"err":"","out":"[77,\"b\",456,\"a\",123]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my ($x, $y, $z, @rest) = @_; bar( $x, @rest ); } sub bar { [ @_ ]; } my %h = ( a => 123, b => 456 ); foo 77, 88, 99, %h;"},{"err_mask":"","code":"sub Foo { our $nested; local $nested unless $nested; my @p = ( [ shift, $nested // 0, $nested ? q{Nested} : q{First} ] ); {  if ( @_ ) { $nested++; push @p, Foo( @_ ); }  }; if ( $nested ) { $nested--; @p; } else { [ @p ]; } }   { RUN1 => Foo(qw(A B C)), RUN2 => Foo(qw(X Y Z)) };","err":"","out":"{RUN1 => [[\"A\",0,\"First\"],[\"B\",1,\"Nested\"],[\"C\",2,\"Nested\"]],RUN2 => [[\"X\",0,\"First\"],[\"Y\",1,\"Nested\"],[\"Z\",2,\"Nested\"]]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"{RUN1 => [[\"A\",\"First\"],[\"B\",\"Nested\"],[\"C\",\"Nested\"]],RUN2 => [[\"X\",\"First\"],[\"Y\",\"Nested\"],[\"Z\",\"Nested\"]]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub Foo { our $nested; local $nested unless $nested; my @p = ( [ shift, $nested ? q{Nested} : q{First} ] ); {  if ( @_ ) { $nested++; push @p, Foo( @_ ); }  }; if ( $nested ) { $nested--; @p; } else { [ @p ]; } }   { RUN1 => Foo(qw(A B C)), RUN2 => Foo(qw(X Y Z)) };"},{"err_mask":"","code":"sub Foo { our $nested; local $nested unless $nested; my @p = ( [ shift, $nested ? q{Nested} : q{First} ] ); { $nested++; push @p, Foo( @_ ) if @_ }; if ( $nested ) { $nested--; @p; } else { [ @p ]; } } [ Foo( qw( A B C ) ), Foo( qw( X Y Z ) ) ];","err":"","out":"[[\"A\",\"First\"],[\"B\",\"Nested\"],[\"C\",\"Nested\"],[\"X\",\"First\"],[\"Y\",\"Nested\"],[\"Z\",\"Nested\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub Foo { our $p; $p = [ ] unless defined $p; push @$p, [ shift, ( (caller(0))[3] eq (caller(1))[3] ? q{Nested} : q{First call} ) ]; Foo( @_ ) if @_; my $x = $p; $x; } Foo qw( A B C ); Foo qw( X Y Z );","err":"","out":"[[\"A\",\"First call\"],[\"B\",\"Nested\"],[\"C\",\"Nested\"],[\"X\",\"First call\"],[\"Y\",\"Nested\"],[\"Z\",\"Nested\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub foo { print \"bar\" }; use constant { baz => *foo }; print $::{baz};","out":"GLOB(0x56f6d28)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"code":"sub foo { print \"bar\" }; use constant { baz => *foo }; print $::{baz}, *foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"GLOB(0x3c7dd28)*main::foo"},{"out":"*main::foo","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { print \"bar\" }; use constant { baz => *foo }; print main->baz;"},{"err":"","out":"\n","out_mask":"Ã¿","err_mask":"","code":"sub foo::print { CORE::print \"bar\" }; print foo::; print \"\\n\";"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"sub foo { print \"Debug\\n\", return 1 if (1); } foo();"},{"out":"Debug\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { print (\"Debug\\n\"), return 1 if (1); } foo();"},{"out":"Debug\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { print(\"Debug\\n\"), return 1 if (1); } foo();"},{"err_mask":"","code":"sub foo () { print \"-> @_ <-\" } do foo(42);","out":"ERROR: syntax error at (eval 1) line 1, near \"do foo(\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"eh","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { print \"eh\" } foo()"},{"err_mask":"","code":"sub foo () { print \"foo\"; };   foo;","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub foo { print $foo } sub bar { local $foo = 'baz'; foo }        $foo = 'quux';          foo(); bar(); foo()","out":"quuxbazquux","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","code":"sub foo { print \"FOO!\" }  undef &foo; foo()","err_mask":""},{"err":"","out":"*main::foo","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { print \"foo\" }; use constant FOO => *foo; print FOO();"},{"out":"*main::foo","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { print \"foo\" }; use constant FOO => *foo; print main->FOO;"},{"err":"","out":"SCALAR(0x4e3cb88): 1 SCALAR(0x4aaa1a8): 2 SCALAR(0x46572c8): 7 SCALAR(0x46572c8): 7 SCALAR(0x4b23a08): 5 SCALAR(0x46572c8): 7 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { print \\$_ . \": $_ \" for @_ }; my $x = 1; foo( $x++, $x++, ++$x, ++$x, $x++, ++$x );"},{"err_mask":"","code":"sub foo { print \"my arguments are [@_]\"; } foo(1, 2, 3);","err":"","out":"my arguments are [1 2 3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub foo { print \"my arguments are [@_]\"; } sub { foo(42) }->()","err":"","out":"my arguments are [42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"my arguments are [42 1 2 3]","err":"","code":"sub foo { print \"my arguments are [@_]\"; } sub { foo(42, @_) }->(1, 2, 3)","err_mask":""},{"out":"my arguments are [42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { print \"my arguments are [@_]\"; } sub { foo(42) }->(1, 2, 3)"},{"code":"sub foo { print (STDERR \"Debug\\n\"), return 1 if (1); } foo();","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"1","err":"Debug\n"},{"err":"Debug\n","out":"1","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"sub foo { print (STDERR \"Debug\\n\"); return 1 if (1); } foo();"},{"code":"sub foo { print STDERR (\"Debug\\n\"), return 1 if (1); } foo();","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"sub foo { print(STDERR \"Debug\\n\"), return 1 if (1); } foo();","err":"Debug\n","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿","out":"1","err":"","code":"sub foo { print STDOUT (\"Debug\\n\"), return 1 if (1); } foo();","err_mask":""},{"code":"sub foo { print STDOUT (\"Debug\\n\"); return 1 if (1); } foo();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Debug\n1","err":""},{"err_mask":"","code":"sub foo($q) {$q + 3}; foo(5);","err":"","out":"8","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hello world","err":"","code":"sub foo { @_ = qw(hello world); } sub bar { &foo; \"@_\" }  bar","err_mask":""},{"err_mask":"","code":"sub foo { @_ = qw(hello world); } sub bar { foo(@_); \"@_\" }  bar","err":"","out":"","out_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"sub foo { return [1, 2, 3] } if (@{(my $arr_ref = foo())}) { print @$arr_ref }","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"42","code":"sub foo { return(40) + 2 } foo()","err_mask":""},{"err_mask":"","code":"sub foo { return 42; }  [ foo(), foo() ]","err":"","out":"[42,42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"$VAR1 = 'main';\n$VAR2 = '(eval 1)';\n$VAR3 = 1;\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo {return caller()} print Dumper(foo());"},{"err":"","out":"FOOBAR","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { return 'foo', 'bar' } sub bar { return map uc, @_ } print bar foo"},{"code":"sub foo { s/a// }; { my $_ = 'bar'; foo(); print $_ }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":""},{"err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { s/a// }; { my $_ = 'bar'; our $_ = 'baz'; foo(); print $_ }"},{"err_mask":"","code":"sub foo { s/a// }; { my $_ = 'bar'; our $_ = 'baz'; s/a//; print $_ }","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub foo { s/a// }; { my $_ = 'bar'; s/a//; print $_ }","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"123\n","code":"{ sub foo { say } } foo for 123","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"1\n","err":"","code":"sub foo { say wantarray() } \\foo();","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[10,5]","err":"","code":"sub foo { shift()*2 } sub bar :prototype() { shift()*2 } [(foo + 5), (bar + 5)]","err_mask":""},{"err_mask":"","code":"sub foo { shift()+3 } sub bar :prototype() { shift()+3 } [(foo + 5), (bar + 5)]","err":"","out":"[8,8]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[8]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { shift()+3 } sub bar :prototype() { shift()+3 } [foo + 5, bar + 5]"},{"code":"sub foo { shift()+3 } sub bar () { shift()+3 } [foo + 5, bar + 5]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n"},{"err":"","out":"ERROR: Type of arg 1 to shift must be array (not constant item) at (eval 1) line 1, at EOF\nType of arg 1 to shift must be array (not constant item) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { shift+3 } sub bar () { shift+3 } [foo + 5, bar + 5]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{foo => \"bar\"}","code":"sub foo {shift} { foo => 'bar' }->${ \\\\&foo }","err_mask":""},{"err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo (\\&) { shift->() } sub myfunc { say +(caller 0)[3] } foo &myfunc;"},{"err_mask":"","code":"sub foo (\\&) { shift->() } sub myfunc { say +(caller 0)[3] } foo myfunc;","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub foo; sub AUTOLOAD { print 'hi' } foo;","err":"","out":"hi","out_mask":"Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"sub foo { sub bar { } }"},{"code":"sub foo { __SUB__ } foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sub { \"DUMMY\" }"},{"code":"sub foo { {thingy => $_[0]} } [foo 1, 2, 3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{thingy => 1}]"},{"err":"","out":"lol","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { undef; } my $x = foo() or print \"lol\""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"x 4\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo () { wantarray ? \"list\" : \"scalar\" } [ foo x 4 ]"},{"code":"sub foo { wantarray ? \"list\" : \"scalar\" } [ foo x 4 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"x 4\"\n","err":""},{"code":"sub foo { warn \"had \" . @_ . \" items\\n\" } foo(\\(my @x)); # foo is given a list of refs to everything in the list returned by (my @x), i.e. empty list","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"had 0 items\n","out":"1"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"sub foo ($y) { $y++ } my $x = 1; foo($x); $x"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"sub f { return; } @a = f();  print $a[1];"},{"code":"sub f{return} for (f) {print 'a' if defined $_}","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"sub f { return (undef,undef); } @a = f();  print $a[1];"},{"code":"sub f { state $x; if ($x) { print \"rec\\n\"; return } local $x = 1; f() }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't localize lexical variable $x at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"ERROR: Can't localize through a reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub f{ state $x; if ($$x) { print \"rec\\n\"; return } local $$x = 1; f() } f()"},{"err_mask":"","code":"sub f{ state %x; if ($x{rec}) { print \"rec\\n\"; return -3 } local $x{rec} = 1; f() }","err":"","out":"","out_mask":""},{"err_mask":"","code":"sub f{ state %x; if ($x{rec}) { print \"rec\\n\"; return } local $x{rec} = 1; f() }","out":"","err":"","out_mask":""},{"err":"","out":"rec\n","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub f{ state %x; if ($x{rec}) { print \"rec\\n\"; return } local $x{rec} = 1; f() } f()"},{"out":"","err":"","out_mask":"","err_mask":"","code":"sub f { state %x; print \">$x{rec}<\"; if ($x{rec}) { print \"rec\\n\"; return -3 } local $x{rec} = 1; f() }"},{"out_mask":"","out":"","err":"","code":"sub f{ statse %x; if ($x{rec}) { print \"rec\\n\"; return } local $x{rec} = 1; f() }","err_mask":""},{"err_mask":"","code":"sub fwee::poww { 42 } sub gorble::snork { 2 * pop }  snork gorble poww fwee  # it can be made valid perl :)","err":"","out":"84","out_mask":"Ã¿Ã¿"},{"code":"sub get_var { warn \"GET VAR\\n\"; return \\my $var }   ${ get_var } += 1","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"[ sub glob { my %hash = ( \"*.txt\" => [qw/ 1.txt 2.txt/], \"*.pl\" => [qw/ 1.pl 2.pl/ ], ); return $_[0] ? $hash{$_[0]} || [ \"a.txt\" ] : [ \"a.txt\" ];}@{ &glob($_) }[0] for (qw/ *.pl *.rb /); ]","out":"ERROR: syntax error at (eval 1) line 1, near \"[ sub glob \"\nCan't use global @_ in \"my\" at (eval 1) line 1, near \"return $_\"\nsyntax error at (eval 1) line 1, near \";}\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"sub glob { my %hash = ( \"*.txt\" => [qw/ 1.txt 2.txt/], \"*.pl\" => [qw/ 1.pl 2.pl/ ], ); return $_[0] ? $hash{$_[0]} || [ \"a.txt\" ] : [ \"a.txt\" ];}@{ &glob($_) }[0] for (qw/ *.pl *.rb /);","err_mask":""},{"err_mask":"","code":"sub greet { my ($name) = @_; print \"hello, $name!\"; } greet(\"lalupa\");","err":"","out":"hello, lalupa!","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"(sub { ${^HasBeen} = 1 })->(); [ ${^HasBeen} ]"},{"code":"sub hi { print \"hi\" }; $::{wtf} = \\*hi; wft();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::wft called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"sub hi { print \"hi\" }; $::{wtf} = \\*hi; wtf();","err_mask":"","out_mask":"Ã¿Ã¿","out":"hi","err":""},{"out":"cats","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub href { $_[0]->{Val} = 'cats' } href"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal declaration of anonymous subroutine at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"sub Ä§ { say \"42\"; } Ä§","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"sub huf { \\1 } ${;huf}","err_mask":""},{"err":"","out":"72951","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub hx { sprintf \"%x\", $_[0] } join '0x', hx(0x23267) + hx(0x49684)"},{"err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub inc { $_+=1 for @_} inc(1,2,3)"},{"code":"sub inc { $_+=1 for @_}; inc(1,2,3)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"sub inc { $_+=1 for @_} my @x = (1,2,3); inc(@x); \\@x","out":"[2,3,4]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"1","err":"","code":"sub inc {my ($intref) = @_; ${ $intref }++;} my $i = 0; inc(\\$i); $i","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"blah","code":"sub inner { \"blah\" } sub outer { my $inner = shift; $inner->() } outer \\&inner;","err_mask":""},{"err_mask":"","code":"sub ip2num { my @f = split /\\./, shift; $f[0] << 24 | $f[1] << 16 | $f[2] << 8 | $f[3] } [ map { ip2num($_) } (\"2.0.163.49\", \"2.0.168.7\") ]","err":"","out":"[33596209,33597447]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\nCan't use global $_ in \"my\" at (eval 1) line 1, near \"{ $_ \"\nsyntax error at (eval 1) line 1, near \"@_ }\"\n","err":"","code":"sub kv(\\%@){my $h = shift; map { $_ => $h->{$_} } @_ }; my %options = (light => 'on', color => 'red', height => 3); my @subset = qw(light color refraction); [\\%options, kv(%options, @subset)]","err_mask":""},{"err":"","out":"lala","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub lala { 'lala' } my $name = 'lala'; my $cref = __PACKAGE__->can('lala'); $cref->()"},{"code":"sub lala {my @x = qw(a b c), my @y = qw(d e); (@x, @y)} lala();","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"err_mask":"","code":"sub learn_list_context { my($first,@rest) = (1,2,3,4,5); print $first,@rest; }; learn_list_context","err":"","out":"12345","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub letters_from ($) { $_[0] =~ /(\\D+)/; $1 } sub numbers_from ($) { $_[0] =~ /(\\d+)/; $1 } [sort { letters_from $a cmp letters_from $b || numbers_from $a <=> numbers_from $b } qw/a1 b1 b2 a4 c3 d11 d12 a12 c3/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a1\",\"b1\",\"b2\",\"a4\",\"c3\",\"d11\",\"d12\",\"a12\",\"c3\"]"},{"out":"[15,-15]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub List::Util::0sum {my ($a, $b)=(0,0); $a+=$_, $b-=$_ for @_; ($a, $b)}; [List::Util::0sum(1,2,3,4,5)]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in local at (eval 1) line 1, at EOF\n","err":"","code":"sub local {}  local(-1)","err_mask":""},{"code":"sub { ${^Local} = 'xxx' }->() [ ${^Local} ]","err_mask":"","out_mask":"","err":"","out":""},{"err":"","out":"[\"xxx\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub { ${^Local} = 'xxx' }->(); [ ${^Local} ]"},{"code":"sub lol (\\@) { \"$_[0]\" } lol([])","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n"},{"out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub lol (\\@) { \"$_[0]\" } my @arr = 1..3; lol(@arr)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","code":"sub lol (\\@\\@) { \"$_[0]\" } my @arr = 1..3; lol(@arr, @arr)","err_mask":""},{"err_mask":"","code":"sub lol { return 0 || 1 } [ lol ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"sub lol { return 0 or 1 } [ lol ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"new main \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub main { bless [] }; [ new main ]"},{"code":"sub meow { print @_ } \\&meow","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sub { \"DUMMY\" }"},{"err_mask":"","code":"sub meth { [@_] } __PACKAGE__->meth('lala')","err":"","out":"[\"main\",\"lala\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub M::foo { print \"A:@_\" }; sub foo { print \"B:@_\" }; foo M:: , ;","err":"","out":"A:M","out_mask":"Ã¿Ã¿Ã¿"},{"code":"sub M::foo { print \"A:@_\" }; sub foo { print \"B:@_\" }; foo M:: ;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"A:M"},{"code":"sub M::foo { print \"A:@_\" }; sub foo { print \"B:@_\" }; foo( M:: );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"B:M","err":""},{"code":"sub M::foo { print \"A:@_\" }; sub foo { print \"B:@_\" }; foo M:: , 2;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"A:M"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\"]","code":"sub m() { 'foo' }; sub i() { 'bar' }; [ &m() // i() ]","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"m // i \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub m() { 'foo' }; sub i() { 'bar' }; [ m // i ]"},{"code":"sub m() { 'foo' }; sub i() { 'bar' }; [ m() || i() ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"err_mask":"","code":"sub m() { 'foo' }; sub i() { 'bar' }; [ m() // i ]","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub m() { 'foo' }; sub i() { 'bar' }; [ m() // i() ]","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"code":"sub MODIFY_SCALAR_ATTRIBUTES { grep $_ ne \"SupposedToBeUndef\", @_[2 .. $#_] } my $foo :SupposedToBeUndef;","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"sub M::TIEARRAY { shift } sub M::FETCH { print \"Element $_[1]\" }  tie my @arr, \"M\";   $arr[123]","out":"","err":"","out_mask":""},{"code":"[ sub { my %a = @_; $a{-something} }->(-something => 'blah') ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"blah\"]"},{"err_mask":"","code":"{ sub { my %a = @_; $a{-something} }->(-something => 'blah') ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \") ]\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"sub mychomp { chomp $_[0] } my $x = \"\\n\"; $x = mychomp($x); $x"},{"out":"bless( {foo => \"bar\"}, 'my_class' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub my_class::new { sub { bless { @_ }, 'my_class' } } my_class::new->(foo => 'bar') # you could do that, but it doesn't seem all that useful"},{"out":"[\"z\",\"y\",\"x\"]","err":"passed as sub mysort { warn \"passed as @_,a=$a,b=$b\\n\" } [ sort mysort qw(x y z) ],a=x,b=y\npassed as sub mysort { warn \"passed as @_,a=$a,b=$b\\n\" } [ sort mysort qw(x y z) ],a=y,b=z\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"sub mysort { warn \"passed as @_,a=$a,b=$b\\n\" } [ sort mysort qw(x y z) ]"},{"out":"1","err":"1, 2, 3 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"sub my_sub { warn join ', ', @_ } my_sub(1, 2, 3)"},{"err_mask":"","code":"[sub { my ($x, $y) = @_; ($x*10+$y)}->(5,6)]","err":"","out":"[56]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub new { bless [] }; [ new main ]","out":"[bless( [], 'main' )]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub new { bless [] }; package foo; [ new main ]","err":"","out":"[bless( [], 'main' )]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( [], 'main' )]","code":"sub new { bless [] }; package foo; sub new { bless [] }; [ new main ]","err_mask":""},{"code":"sub new { bless [] }; package foo; sub new { bless [] }; [ new(main) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( [], 'foo' )]"},{"err_mask":"","code":"sub new { bless [] }; package foo; sub new(*) { bless [] }; [ new main ]","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(*)\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,32,32,32,32]","err":"","code":"sub nextPoT { my %hash; keys %hash = shift; $hash{x} = 1; [split(\"/\", scalar %hash)]->[1] } [ map { nextPoT($_) } (1..20) ]","err_mask":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \")[\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub nextPoT { my %hash; keys %hash = shift; $hash{x} = 1; split(\"/\", scalar %hash)[1] } [ map { nextPoT($_) } (1..20) ]"},{"code":"sub oldy { return 'goody' }; print &oldy;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"goody"},{"out":"[\"obfuscated\",\"is\",\"not\",\"a\",\"goal\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub oldy { return \\@_ } sub goody { &oldy } goody 'obfuscated', 'is', 'not', 'a', 'goal'"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub oldy { return \\@_ } sub goody { oldy } goody 'obfuscated', 'is', 'not', 'a', 'goal'"},{"out":"ERROR: Can't locate object method \"new\" via package \"lowercase sub names are more common in perl\" (perhaps you forgot to load \"lowercase sub names are more common in perl\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub Open_Logfile { 'lowercase sub names are more common in perl' } Open_Logfile->new"},{"code":"sub outer { my $var if 0; $var = shift; sub inner { print $var||'three' } }   outer(\"one\"); inner(); outer(\"two\"); inner()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"onetwo"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"oneone","err":"","code":"sub outer { my ($var) = @_; sub inner { print $var } }   outer(\"one\"); inner(); outer(\"two\"); inner()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"threetwo","err":"","code":"sub outer { my ($var) = @_; sub inner { print $var||'three' } }    inner(); outer(\"two\"); inner()","err_mask":""},{"code":"sub outer { my ($var) = @_; sub inner { print $var||'three' } }   outer(\"one\"); inner(); outer(\"two\"); inner()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"oneone","err":""},{"err_mask":"","code":"sub outer { my ($var) = @_; sub inner { print $var//'three' } }   outer(\"one\"); inner(); outer(\"two\"); inner()","out":"oneone","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Just another Perl hacker, ","err":"","code":"sub _ { print /::(.*)/, ' ' }; *AUTOLOAD = *_; Just(), another(), Perl(), &{\"hacker,\"};","err_mask":""},{"code":"sub { print qw(scalar list void)[wantarray // 2] }->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"scalar"},{"err_mask":"","code":"sub { print qw(scalar list void)[wantarray // 2] }->(); ()","err":"","out":"void","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"list","err":"","code":"() = (sub { print qw(scalar list void)[wantarray // 2] }->()) x 4; ()","err_mask":""},{"code":"(sub { print qw(scalar list void)[wantarray // 2] }->()) x 4; ()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"scalar"},{"code":"sub { print qw(scalar list void)[wantarray // 2] }->() x 4; ()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"scalar","err":""},{"out_mask":"","out":"","err":"","code":"sub printSvPVIV { printf \"SvPV is %s but SvIV is %d\\n\", $_[0], $_[0] }    $! = 1; print SvPVIV $!","err_mask":""},{"code":"sub printSvPVIV { printf \"SvPV is %s but SvIV is %d\\n\", $_[0], $_[0] }    $! = 1; printSvPVIV $!","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"SvPV is Operation not permitted but SvIV is 1\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"/user/:\"\n","code":"sub :prototype(/user/:user_id) {}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"scalar","code":"sub { qw(scalar list void)[wantarray // 2] }->()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"scalarscalarscalarscalar","err":"","code":"(sub { qw(scalar list)[wantarray] }->()) x 4","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"list\",\"list\",\"list\",\"list\"]","err":"","code":"[ (sub { qw(scalar list)[wantarray] }->()) x 4 ]","err_mask":""},{"err_mask":"","code":"sub { qw(scalar list)[wantarray] }->() x 4","out":"scalarscalarscalarscalar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub { qw(void scalar list)[wantarray + defined wantarray] }->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"scalar","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":"","code":"sub { qw(void scalar list)[wantarray + defined wantarray}->()","err_mask":""},{"code":"sub range { $_[0] .. $_[1] } $_ = \"4-9\"; [ range /(\\d+)-(\\d+)/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[4,5,6,7,8,9]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[4,5,6,7,8,9]","err":"","code":"sub range { $_[0] .. $_[1] } [ range \"4-9\" =~ /(\\d+)-(\\d+)/ ]","err_mask":""},{"code":"sub remove_nth { my ($string, $substring, $n) = @_; my $pos = 0; while ($n > 0) { $pos = index($string, $substring, $pos); $n-- } substr($string, $pos, length($substring), \"\"); return $string }; remove_nth(\"a b c a b\", \"b\", 1)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"a  c a b","err":""},{"code":"sub replace_nth { my ($n, $pattern, $replacement, $str) = @_; $str =~ /$pattern/g or return $str for 1 .. $n; substr $str, $-[0], $+[0] - $-[0], $replacement; $str } replace_nth 3, qr/\\w/, 'X', 'hello'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: substr outside of string at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"heXlo","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub replace_nth { my ($n, $pattern, $replacement, $str) = @_; while ($n > 0) { $str =~ /$pattern/g or last; $n--; if ($n == 0) { substr $str, $-[0], $+[0] - $-[0], $replacement; } } $str } replace_nth 3, qr/\\w/, 'X', 'hello'"},{"code":"sub replace_nth { my ($n, $pattern, $repl, $str) = @_; while ($n > 0) { $str =~ /$pattern/g or last; $n--; if ($n == 0) { substr $str, $-[0], $+[0] - $-[0], ref($repl) ? $repl->() : $repl; } } $str } replace_nth 3, qr/(\\w)/, sub { uc $1 }, 'hello'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"heLlo"},{"err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" sub replace { s/A/b/ for shift }; replace \"Abc\""},{"err":"","out":"","out_mask":"","err_mask":"","code":"sub replace{ s/A/b/; return $_}  replace(\"Abc\")"},{"out_mask":"","out":"","err":"","code":" sub replace { s/A/b/r for shift }; replace \"Abc\"","err_mask":""},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"sub ret { eval 1+1; }; print &ret();"},{"code":"sub ret { $str=\"some string\"; }; print &ret();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"some string"},{"out":"some stringsome string","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub ret { $str=\"some string\"; }; print &ret; print ret();"},{"err_mask":"","code":"sub return_false { 0 }  my $msg = \"pizza\";   if ( ($msg =~ m/pizza/i) and ( return_false() ) ) { print \"Are we really here?\" } # I can't reproduce from your problem description so far","out":"0","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"(%{sub{ return {hello=>'World'}}->()})","err":"","out":"1/8","out_mask":"Ã¿Ã¿Ã¿"},{"code":"[%{sub{ return {hello=>'World'}}->()}]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"hello\",\"World\"]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"1/8","err":"","code":"{%{sub{ return {hello=>'World'}}->()}}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"1/8","err":"","code":"%{sub{ return {hello=>'World'}}->()}","err_mask":""},{"err_mask":"","code":"sub{ return {hello=>'World'}}->()","out":"{hello => \"World\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"'*' from\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub select {} sub from {}; select '*' from;"},{"code":"sub select {} sub from {}; select '*', from;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not enough arguments for select system call at (eval 1) line 1, at EOF\n"},{"err_mask":"","code":"sub set { [ @_ ] }; set virtualization => \"VBox\";","err":"","out":"[\"virtualization\",\"VBox\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub set { } set virtualization => \"VBox\";","err":"","out":"","out_mask":""},{"out":"a b c d","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub show_args { print join \" \", @{$_[0]} } my @array1 = qw/a b c d/; my @array2 = qw/1 a 3 3 x/; show_args (\\@array1, \\@array2)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ARRAY(0x42582c8) ARRAY(0x436f7d0)","code":"sub show_args { print join \" \", @_ } my @array1 = qw/a b c d/; my @array2 = qw/1 a 3 3 x/; show_args (\\@array1, \\@array2)","err_mask":""},{"err_mask":"","code":"sub show_args { print join \" \", @_ } my @array1 = qw/a b c d/; my @array2 = qw/1 a 3 3 x/; show_args (@array1, @array2)  # KURT__","err":"","out":"a b c d 1 a 3 3 x","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"before\",\"about to skip\",\"after block\"]","code":"sub skip { last SOMEBLOCK } my @x = 'before'; SOMEBLOCK: { push @x, 'about to skip'; skip; push @x, 'after skip' } push @x, 'after block'; \\@x","err_mask":""},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub sneakysub { my %foo; while (each %foo) {} } local $_ = 25; sneakysub(); [$_]"},{"out":"5","err":"","out_mask":"Ã¿","err_mask":"","code":"sub SOME_CONSTANT { 5 } my %hash = (thing => SOME_CONSTANT); $hash{thing}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: DIE DIE DIE at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"sub sort { die \"DIE DIE DIE\"; } [ ::sort( 1,2,3 ) ]","err_mask":""},{"err_mask":"","code":"sub sort { die \"DIE DIE DIE\"; } [ sort 1,2,3 ]","err":"","out":"[1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub sort { die \"DIE DIE DIE\"; } [ sort( 1,2,3 ) ]"},{"err":"","out":"","out_mask":"","err_mask":"","code":"sub sreturn{} sreturn join(',', @accounts);"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"sub STDOUT::autoflush { die \"Ohnoes!\" }   STDOUT->autoflush(1)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"trolled\nERROR: Can't locate object method \"print\" via package \"1\" (perhaps you forgot to load \"1\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"sub STDOUT() {say \"trolled\"} STDOUT->print(123)","err_mask":""},{"err_mask":"","code":"sub STDOUT () { \\*STDOUT } STDOUT->print(123)","err":"","out":"1231","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ÂÂÃ¢ÂÂÃ¢ÂÂÃ¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_=\"ââââ\"; substr($_,0,1,''); $_"},{"out":"11","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"$_=\"ââââ\"; substr($_,0,1,''); length $_"},{"code":"substr 193, 1, 1","err_mask":"","out_mask":"Ã¿","err":"","out":"9"},{"err_mask":"","code":"substr \"4-9\", 1, 1, \"..\" and eval","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"substr \"4-9\", 1, 1, \"..\" && eval","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"b\"]","code":"[substr 'abc', 1, -1 ]","err_mask":""},{"code":"substr \"abcde\", -1","err_mask":"","out_mask":"Ã¿","out":"e","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"four\"]","code":"[ substr \"four\", 0, 6 ]","err_mask":""},{"err_mask":"","code":"substr \"four\", 0, 6","err":"","out":"four","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"hell","err":"","code":"substr(\"hello\", 0, -1)","err_mask":""},{"err_mask":"","code":"substr \"Hello world\", 0, -4","out":"Hello w","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"Keihanaikukauakahihu\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ substr \"Keihanaikukauakahihulihe'ekahaunaele\", 0, 20 ] # or Hawaiian names"},{"err_mask":"","code":"substr(my $F = \"four\",1,0,\"l\"); [$F]","err":"","out":"[\"flour\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[substr(\"qqz\", 2) =~ y/z/Z/r]","err":"","out":"[\"Z\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"substr \"the_cool_string\", 5","out":"ool_string","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ substr unpack(\"b*\", pack \"H*\", \"AB12C0\"), 7, 6 ]","out":"[101001]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"substr(v1.2.3, 1)","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"\u0002\u0003"},{"err":"","out":"[\"s\\303\\274\\303\\17e\",\"s\\x{fc}\\x{fffd}\\17e\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$subst = \"s\\xc3\\xbc\\xc3\\x0fe\"; [ $subst, decode_utf8 $subst ]"},{"err_mask":"","code":"$subst = \"s\\xc3\\xbc\\xc3\\x9fe\"; [ $subst, decode_utf8 $subst ]","err":"","out":"[\"s\\303\\274\\303\\237e\",\"s\\x{fc}\\x{df}e\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub { __SUB__ }"},{"err_mask":"","code":"sub { __SUB__ }->()","err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"oof\"]","code":"sub swap { @_[0,1] = @_[1,0] } my $x = 'foo'; swap(substr($x, 2, 1), substr($x, 0, 1)); [ $x ]","err_mask":""},{"out":"[\"bar\",\"foo\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub swap { @_[0,1] = @_[1,0] } my ($x, $y) = qw(foo bar); swap($x, $y); [ $x, $y ]"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"sub t { 1, 2, 3 } t[0]"},{"err":"","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after , 2, 3 } t<-- HERE near column 110 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub t { 1, 2, 3 } tâ¦0â¦"},{"err_mask":"","code":"sub t { 1, 2, 42 } t[0]","out":"42","err":"","out_mask":"Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"sub t { 1, 2, 42 } t->[0][1]"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"][\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub t { 1, 2, 42 } t[0][1]"},{"code":"sub take { my ($n, @arr) = @_; @arr[ 0 .. $n - 1 ]} [take 3, 1 .. 20]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3]","err":""},{"code":"sub test { \"don't do this\" }; [ test { 'main' } ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"don't do this\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{bar => \"foo\"}","err":"","code":"sub test { \"foo\" } my %hash = (bar => test()); \\%hash","err_mask":""},{"out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub test { print \"foo\" } my %hash = (bar => foo());"},{"err_mask":"","code":"sub test { print \"foo\" } my %hash = (bar => test());","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out":"ERROR: Illegal declaration of subroutine main::tle at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub tle <>"},{"err_mask":"","code":"sub t { \"non-compliant\", \"compliant\" } t[BS-6008]","err":"","out":"compliant","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"compliant","code":"sub t { \"non-compliant\", \"compliant\" } t[ISO-3103]","err_mask":""},{"err_mask":"","code":"sub to_cases { map scalar /[[:upper:]]/, split //, shift }; sub caseify { my ($string, $re, $repl) = @_; $string =~ s[($re)][caseify( $repl, to_cases($1) )]ire }; caseify( \"DoÃ\" qr(doÃ), \"cat\" );","out":"ERROR: syntax error at (eval 1) line 1, near \"\"DoÃÂ\" qr(doÃÂ)\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"DoÃÂ","code":"sub to_cases { map scalar /[[:upper:]]/, split //, shift }; sub caseify { my ($string, $re, $repl) = @_; $string =~ s[($re)][caseify( $repl, to_cases($1) )]ire }; caseify( \"DoÃ\", qr(doÃ), \"cat\" );","err_mask":""},{"code":"sub to_cases { map scalar /[[:upper:]]/, split //, shift }; sub caseify { my ($string, $re, $repl) = @_; $string =~ s[($re)][caseify( $repl, to_cases($1) )]ire }; caseify( \"DoÃ\", qr(doÃ)i, \"cat\" );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"cat"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"lala","err":"","code":"sub trololo::b { \"lala\" }; $a = bless {}, \"trololo\"; $a->b","err_mask":""},{"err":"","out":"lala\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub trololo::b { \"lala\" }; $a = bless {}, \"trololo\"; say $a->b"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"true","code":"sub true { \"true\" }       my $requesturl = \"/register/?123\"; if($requesturl =~ m!register!io){ return true; }","err_mask":""},{"out":"[\"blah blah \\\"3\\\" blah blah\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub unhexstr { (my $ret = shift) =~ s/\\\\x([0-9a-fA-F]{2})/chr hex $1/eg } my $str = q{blah blah \"\\x65\\x66\\x67\" blah blah}; $str =~ s/\"((?:\\\\x[0-9a-fA-F]{2})+)\"/'\"'.unhexstr($1).'\"'/eg; [$str]"},{"err_mask":"","code":"sub unhexstr { (my $ret = shift) =~ s/\\x([0-9a-fA-F]{2})/chr hex $1/eg } my $str = q{blah blah \"\\x65\\x66\\x67\" blah blah}; $str =~ s/\"((?:\\x[0-9a-fA-F]{2})+)\"/'\"'.unhexstr($1).'\"'/eg; [$str]","out":"[\"blah blah \\\"\\\\x65\\\\x66\\\\x67\\\" blah blah\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"blah blah \\\"\\\\x65\\\\x66\\\\x67\\\" blah blah\"]","code":"sub unhexstr { (my $ret = shift) =~ s/\\x([0-9a-fA-F]{2})/chr hex $1/eg } my $str = q{blah blah \"\\x65\\x66\\x67\" blah blah}; $str =~ s/\"(\\x[0-9a-fA-F]{2}+)\"/'\"'.unhexstr($1).'\"'/eg; [$str]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"blah blah \\\"efg\\\" blah blah\"]","code":"sub unhexstr { (my $ret = shift) =~ s/\\\\x([0-9a-fA-F]{2})/chr hex $1/eg; $ret } my $str = q{blah blah \"\\x65\\x66\\x67\" blah blah}; $str =~ s/\"((?:\\\\x[0-9a-fA-F]{2})+)\"/'\"'.unhexstr($1).'\"'/eg; [$str]","err_mask":""},{"err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(/user/\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub (/user/:user_id) { $_{user_id} };"},{"code":"Sub::Util::prototoype(\\&CORE::die)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &Sub::Util::prototoype called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"Sub::Util::prototype(\\&CORE::prototype)","err":"","out":"_","out_mask":"Ã¿"},{"err_mask":"","code":"\"${\\sub { wantarray() ? 'list' : 'scalar' }->()}\"","out":"list","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub { wantarray ? \"list\" : \"scalar\" }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[]]","code":"sub wa { print '[[' . wantarray . ']]' } split /x/, wa","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: the fuck at (eval 1) line 1, <STDIN> line 1.\n","code":"sub what { } what / 25 ; # / ; die \"the fuck\";","err_mask":""},{"err_mask":"","code":"sub x (\\@) { \"$_[0]\" }; my @a = (3, 4); print x(@a); ()","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"sub x { (1..3) } (x)[1]"},{"out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" sub x (){1}; x x x x x;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(_\"\n","code":"sub x (_) { \\@_ } $_ = 'a'; x","err_mask":""},{"err_mask":"","code":"sub x (_) { \\@_ } $_ = 'a'; $_ x x","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(_\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(_\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub x (_) { \\@_ } $_ = 'a'; x x x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","err":"","code":"sub x ($) { @_ }; my $x = \\&x; [ join ' ', $x->('a'..'c'), '|', x('a'..'c') ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1]","err":"","code":"sub x{my $y=$_; sub { $y++ } } $foo=x(2); [$foo->(),$foo->()]","err_mask":""},{"err_mask":"","code":"sub x { return [[12, 13]]; } say +(@{x()}[0])[0][0];","out":"12\n","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"[12,13]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub x { return [[12, 13]]; }@{x()}[0]"},{"err":"","out":"12","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub x { return [[12, 13]]; } @{x()}[0]->[0]"},{"code":"sub x { return (1,2,3) } print( $x = x() );","err_mask":"","out_mask":"Ã¿","out":"3","err":""},{"out_mask":"Ã¿Ã¿","out":"37","err":"","code":"sub x { return (1,2,3) } print( $x = x() ); print 7;","err_mask":""},{"err_mask":"","code":"sub x { return 2 if (defined shift); return 1 }; x(\"\\0\");","out":"2","err":"","out_mask":"Ã¿"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"sub x { return 2 if (defined shift) }; x(\\0);"},{"out":"7","err":"","out_mask":"Ã¿","err_mask":"","code":"sub x { return (7,8,9) } print( ($x) = x() );"},{"code":"sub x { return (7,8,9) } print( $x = x() );","err_mask":"","out_mask":"Ã¿","err":"","out":"9"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"main::x","code":"sub x {} Sub::Util::subname(\\&x)","err_mask":""},{"code":"sub x { sub y { \"1\" } } y()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Transliteration replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","out":"1","err":"","code":"sub x { sub Y { \"1\" } } Y()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: poop at (eval 1) line 1, <STDIN> line 1.\n","code":"sub x {} x || die \"poop\"","err_mask":""},{"code":"sub xyz { my @foo = (10, 11); return @foo } $x = xyz(); $x","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"out_mask":"","out":"","err":"","code":"sub yz { my $x = @_; return ref($x->[0]) }; return yz({blah=>1},'d');","err_mask":""},{"err_mask":"","code":"sub zeroMech { my $mech = shift; $mech->clear_credentials(); } sub buildMech { return zeroMech ( WWW::Mechanize->new() ); } my $mech = buildMech();","err":"","out":"ERROR: Can't locate object method \"new\" via package \"WWW::Mechanize\" (perhaps you forgot to load \"WWW::Mechanize\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"`sudo cpan -i Diagnostics`","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"s///ugar","err":"","out":"ERROR: Regexp modifiers \"/u\" and \"/a\" are mutually exclusive at (eval 1) line 1, near \"; \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"sum grep\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sum grep { ($_ % 2) == 0 } @vals;"},{"code":"sum map { 1 / $_ } ( 1,3,5,7,9,11,13,15,17 )","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"sum map\"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Su-Shee: I've never actually gotten a memo from memoserv so I don't know","code":"\"Su-Shee: I've never actually gotten a memo from memoserv so I don't know\"","err_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"@s/ // # whatever"},{"out_mask":"Ã¿","err":"","out":"1","code":"/(?<!SX)/i","err_mask":""},{"err_mask":"","code":"system \"echo\" \"list\";","out":"ERROR: syntax error at (eval 1) line 1, near \"\"echo\" \"list\"\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"system(âls /â);","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after /; system(<-- HERE near column 98 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"^T","out":"ERROR: syntax error at (eval 1) line 1, near \"; ^\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ab34","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@t = (1,2,3,4); splice @t, 0,2, 'a','b'; print @t"},{"code":"@t = 1 .. 4; splice @t, 0, 2, qw(a b); \\@t","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",3,4]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"tacos","code":"\"tacos\"","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"\"\\t\" =~ /[[:cntrl:]]/","err_mask":""},{"out_mask":"Ã¿","out":"3","err":"","code":"\"test123Wow\" =~ /^.*(\\d+).*$/g; $1","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","code":"test\" (1 line) at http://fpaste.scsys.co.uk/498962","err_mask":""},{"code":"$_ = \"Test4\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"; $_ =~ s/\\0+$//;  $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Test4"},{"code":"$_ = \"Test4\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"; $_ =~ s/\\0+$//;  sprintf \"%v.02x\", $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"54.65.73.74.34"},{"err_mask":"","code":"[ \"(test.,best.)\" =~ /\\(([\\w\\s,\\.]+)\\)/g ]","err":"","out":"[\"test.,best.\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"\"testfile.csv\" =~ m/(\\.xls$|\\.xlsx$)/"},{"err_mask":"","code":"\"testfile.csv\" =~ m/(\\.xls$|\\.xlsx$)/ ? \"matches\" : \"doesn't match\"","err":"","out":"doesn't match","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"test\" =~ /foo || bar/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"[ \"test\\n\" =~ m/(.*?)$/s ]","err":"","out":"[\"test\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"@test = qw(lala lulu); [\"test@test\", \"test\\@test\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"testlala lulu\",\"test\\@test\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ttruest","err":"","code":"\"test\" =~ s`e`true`r","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"@test = \"test\"; @_[0] =~ /test/ ? 1 : 0","err_mask":""},{"err_mask":"","code":"[ 'test' ] == [ 'test' ] ? \"equal\" : \"not equal\"","err":"","out":"not equal","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{Val => \"cats\"}","code":"$test->{Val} = 'cats'; $test","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"testÃÂ§","err":"","code":"\"test\\x{327}\"","err_mask":""},{"code":"\"tes\\x{21b}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"tesÃÂ","err":""},{"code":"<text>","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]","code":"[ 'text text blah text 123 ahoy there' =~ /blah.*\\Kahoy .*/ ]","err_mask":""},{"out":"text withhypenated wordlike-things","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = \"text with-hypenated word-like-things\"; s/(\\w+(?:-\\w+))/lc join \"\", map ucfirst, split \"-\", $1/ge; $_"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"text withhypenated wordlikethings","err":"","code":"$_ = \"text with-hypenated word-like-things\"; s/(\\w+(?:-\\w+)+)/lc join \"\", map ucfirst, split \"-\", $1/ge; $_","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"thanks","code":"thanks","err_mask":""},{"err":"","out":"[\"the\",\"brown\",\"the\",\"brown\",\"fox\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"the brown dog jumps over the brown fox\" =~ /the|brown|fox/g ]"},{"err_mask":"","code":"[\"the brown fox jumps over the brown dog\" =~ m/brown|dog|the|b/g];","err":"","out":"[\"the\",\"brown\",\"the\",\"brown\",\"dog\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[\"the brown fox jumps over the lazy dog\" =~ m/brown|dog|the|b/g]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"the\",\"brown\",\"the\",\"dog\"]","err":""},{"code":"[\"the brown fox jumps over the lazy dog\" =~ m/b|the|brown|dog/g]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"the\",\"b\",\"the\",\"dog\"]"},{"code":"[\"the brown fox jumps over the lazy dog\" =~ m/b|the|dog|brown/g]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"the\",\"b\",\"the\",\"dog\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"cool_string\"]","err":"","code":"[ 'the_cool_string' =~ m[_(.*)] ]","err_mask":""},{"code":"\"the_cool_string =~ s/^[^_]+_//;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"the_cool_string =~ s/^[^_]+_//r;"},{"err_mask":"","code":"\"the_cool_string\" =~ s/^[^_]*_//r","out":"cool_string","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"cool_string","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"the_cool_string\" =~ s/^[^_]+_//r;"},{"code":"[ 'the_cool_string' =~ s/.*?_//r ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"cool_string\"]"},{"err":"","out":"[\"cool_string\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'the_cool_string' =~ s/the_//r ]"},{"out_mask":"","err":"","out":"","code":"\"the cow says hello\" =~ /^(the cow says) (moo )+$/","err_mask":""},{"out":"Doesn't","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"the cow says hello\" =~ /^(the cow says) (moo )+$/ ? \"Matches\" : \"Doesn't\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unknown regexp modifier \"/r\" at (eval 1) line 1, at end of line\nUnknown regexp modifier \"/e\" at (eval 1) line 1, at end of line\n","code":"/the/mreason","err_mask":""},{"code":"[ \"the quick dog jumps\" =~ /\\s*|dog/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"\",\"\",\" \",\"\",\"\",\"\",\"\",\"\",\" \",\"\",\"dog\",\" \",\"\",\"\",\"\",\"\",\"\",\"\"]","err":""},{"out":"just fantasy","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"(\"the real life\", \"just fantasy\")[!!\"is this\"]"},{"err_mask":"","code":"(\"the real life\", \"just fantasy\")[!\"is this\"]","out":"the real life","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"@thingies = split //, 'taco night'; [ @thingies ]","err":"","out":"[\"t\",\"a\",\"c\",\"o\",\" \",\"n\",\"i\",\"g\",\"h\",\"t\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"@things\"","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"\"<this> and that but not <other thing>\" =~ /<this>((?:(?!<other thing>).)*)/; $1","err":"","out":" and that but not ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":" $this->isa('#perl');","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"isa\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"\"This is a string\"","err":"","out":"This is a string","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"this is a string\",\" another string \"]","code":"['{%this is a string%} and this is {% another string %}' =~ m/{%(.+?)%}/g];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{},{lala => \"is\"}]","err":"","code":"'this is a string' =~ /(?<lala>is)/; [\\ %+, {%+}] # funny behavior of %+","err_mask":""},{"err_mask":"","code":"'{%this is a string%}' =~ m/{%(.+?)%}/; $1;","out":"this is a string","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'{%this is\\%} a string%}' =~ m/{%(.+?)%}/; $1;","out":"this is\\","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"this\\n is \\na st\\nring\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'this is a string' =~ s/.{4}\\K/\\n/gr ]"},{"out":"[\"this-is-a-string-with-9-something-3ls3\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'this-is-a-string-with-9-something-3ls3' ]"},{"code":"[ 'this-is-a-string-with-9-something-3ls3' =~ tr/-/ /r ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"this is a string with 9 something 3ls3\"]"},{"err_mask":"","code":"[ \"this is (a test,a problem)\" =~ /(?:.*\\()?([^,()]+)(?:\\).*)?/g ]","err":"","out":"[\"a test\",\"a problem\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"a test\",\"a problem\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"this is (a test,a problem)\" =~ s/.*\\(|\\).*//gr =~ /[^,]+/g ]"},{"code":"[ \"this is (a test,a problem)\" =~ /(?:.*\\()?([\\w ]+)(?:\\).*)?/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a test\",\"a problem\"]"},{"err_mask":"","code":"[ \"this is (a test,a problem)\" =~ /(?:.*\\()?([\\w ]+)(?:\\).*)?/g ] # in one regex and nothing extra :)","err":"","out":"[\"a test\",\"a problem\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"this is \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"this is a test foo\" =~ /((?:(?!test|a)[\\w ])+)/ ] #does this work?"},{"code":"[ \"this is a test foo\" =~ /((?:(?!test)[\\w ])+)/ ] # if you want the space after the a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"this is a \"]"},{"code":"[ \"this is a test foo\" =~ /((?:(?! test)[\\w ])+)/ ] #well you can just do this then","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"this is a\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"t\"]","code":"[ \"this is a test foo\" =~ /([\\w ]+?)(?: test)?/ ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"this is a test\"]","code":"[ \"this is a test foo\" =~ /([\\w ]+) (?:test)?/ ]","err_mask":""},{"err_mask":"","code":"[ \"this is a test foo\" =~ /([\\w ]+)( ?:test)?/ ]","out":"[\"this is a test foo\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"this is a test foo\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"this is a test foo\" =~ /([\\w ]+)(?: test)?/ ]"},{"code":"[ \"this is a test foo\" =~ /(\\w+) (?:test)?/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"this\"]","err":""},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"this is a test foo\" =~ /\\w+ (?:test)?/ ]"},{"err_mask":"","code":"\"this is a test foo\" =~ /([\\w ]+) (?:test)?/; $1","out":"this is a test","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ \"this is a test foo\" =~ /((?:[\\w ](?!test))+)/ ] # is this the kind of thing you're looking for ?","err":"","out":"[\"this is a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"this is a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"this is a test foo\" =~ /((?:[\\w ](?!test|yutz|butz))+)/ ]"},{"code":"[ 'this is a test of a few words off the front with trailing text.' =~ /((?:\\s*\\w+){0,5})(.*)/s ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"this is a test of\",\" a few words off the front with trailing text.\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"this is a test of\",\" a few words off the front with trailing text.\"]","code":"[ 'this is a test of a few words off the front with trailing text.' =~ /((?:\\W*\\w+){0,5})(.*)/s ]  # s/s/W/ better","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"$this =~ /is/; $perl;"},{"code":"\"this is what I wanted, without the outer @ { } bit:  @{ [ %{ [qw/ foo bar baz /] }[2,1,0] ] }\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"this is what I wanted, without the outer @ { } bit:  2 baz 1 bar 0 foo","err":""},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'this' =~ m|this\\|that|m ];"},{"err_mask":"","code":"[ 'this' =~ m,this\\|that,m ];","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out":"[\"is repeated \",\"word \",\"d again\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'this repeated word is repeated again along with the word again'; [ /(.{3,})(?=.*?\\1)/g ] # buu  :)"},{"err_mask":"","code":"\"This\" =~ s/(.)/sprintf \"%b \", ord $1/gre","err":"","out":"1010100 1101000 1101001 1110011 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sub { \"DUMMY\" }","code":"\\&this_sub_doesnt_exist","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"TIEHANDLE\" via package \"foo\" at (eval 1) line 1, <STDIN> line 1.\n","code":"tie *STDOUT, 'foo'; sub foo::new { return bless {} } sub foo::print { print \"TEST\" } print \"hello\"","err_mask":""},{"err_mask":"","code":"tie *STDOUT, 'foo'; sub foo::TIEHANDLE { return bless {},'foo' } sub foo::PRINT { return 42 } print \"hello\"","err":"","out":"","out_mask":""},{"err":"42 at (eval 1) line 1, <STDIN> line 1.\n","out":"","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"tie *STDOUT, 'foo'; sub foo::TIEHANDLE { return bless {},'foo' } sub foo::PRINT { warn 42 } print \"\""},{"out_mask":"","err":"42 at (eval 1) line 1, <STDIN> line 1.\n","out":"","code":"tie *STDOUT, 'foo'; sub foo::TIEHANDLE { return bless {},'foo' } sub foo::PRINT { warn 42 } print \"hello\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"tie *STDOUT, 'foo'; sub foo::TIEHANDLE { return bless {},shift } sub foo::PRINT { print \"TEST\" } print \"hello\"","out":"","err":"Out of memory!\n","out_mask":""},{"out":"","err":"Can't locate object method \"PRINT\" via package \"main\" at /home/ryan/bots/perlbuut/lib/eval.pl line 279, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"tie *STDOUT, 'foo'; sub foo::TIEHANDLE { return bless {} } sub foo::print { print \"TEST\" } print \"hello\""},{"out_mask":"","out":"","err":"Can't locate object method \"PRINT\" via package \"main\" at /home/ryan/bots/perlbuut/lib/eval.pl line 279, <STDIN> line 1.\n","code":"tie *STDOUT, 'foo'; sub foo::TIEHANDLE { return bless {} } sub foo::PRINT { print \"TEST\" } print \"hello\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = \"tm604\"; $_++; $_","err":"","out":"tm605","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"tm604\" + 1","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"I am a link","err":"","code":"$toolType = 'foo'; $fooLink = 'I am a link'; ${$toolType . 'Link'}","err_mask":""},{"err":"","out":"[\"alias:topic\",\"alias:topic\",\"alias:topic2\",\"topic2\",\"alias:topic\",\"topic\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@topics = qw/alias:topic topic2 topic/; [ map { (/^alias:/ ? $_ : \"alias:$_\") => $_ } @topics ]"},{"code":"@topics = qw/alias:topic topic2 topic/; %t = map { (/^alias:/ ? $_ : \"alias:$_\") => $_ } @topics; \\%t","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{\"alias:topic\" => \"topic\",\"alias:topic2\" => \"topic2\"}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{\"alias:topic\" => \"alias:topic\",\"alias:topic2\" => \"topic2\"}","code":"@topics = qw/topic topic2 alias:topic/; %t = map { (/^alias:/ ? $_ : \"alias:$_\") => $_ } @topics; \\%t","err_mask":""},{"code":"\"--\" =~ tr/-/-/","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"code":"\"--\" =~ tr/-/-1/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify constant item in transliteration (tr///) at (eval 1) line 1, at EOF\n"},{"code":"tree == stone? yes : no","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: \"no\" not allowed in expression at (eval 1) line 1, near \": \"\nsyntax error at (eval 1) line 1, near \": no\n\"\n","err":""},{"err_mask":"","code":"\"////\" =~ tr!/!!sr","err":"","out":"/","out_mask":"Ã¿"},{"out_mask":"","err":"","out":"","code":"`true`","err_mask":""},{"code":"'true' == 0 #dbolser, here's something to illustrate your error","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"true","err":"","code":"' ' ? 'true' : 'false'","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"' ' ? 'true' ? 'false'"},{"err_mask":"","code":"[ '' ? 'true' : 'false' ]","out":"[\"false\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ true == false ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"err_mask":"","code":"{} ? \"true\" : \"false\"","out":"true","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"&({})? \"true\" : \"false\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"&({\"\n"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"&{\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"&{}? \"true\" : \"false\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"TRUE","err":"","code":"\"TRUE\" if \"\\0\\0\"","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"\"\\t\" =~ /\\s/"},{"out_mask":"Ã¿","out":"1","err":"","code":"'tshaper.3.input.rate' =~ /(tshaper\\.\\d\\.(?:input|output)\\.rate)/","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"'tshaper.3.output.rate' =~ /(tshaper\\.\\d\\.(?:input|output)\\.rate)/"},{"out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ -t \\*STDERR ]"},{"err_mask":"","code":"[ -t \\*STDOUT ]","err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"$t = \"test\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"test"},{"err":"","out":"banana","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$t = \"This string is multi-line\\nLine 2\\n Last word is banana\"; $t =~ s/.*(?=\\b\\w+\\Z)//s; $t"},{"err_mask":"","code":"$t = \"This string is multi-line\\nLine 2\\n Last word is banana\"; $t =~ s/(?s:.*)(?=\\b\\w+\\Z)//; $t # if you can't put a /s modifier","out":"banana","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"banana","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$t = \"This string is multi-line\\nLine 2\\n Last word is banana\"; ($t) = $t =~ /(\\S+)\\Z/; $t"},{"out":"Two plus Two is 4","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"Two plus Two is \" . ( 2 + 2 )"},{"err":"","out":"true","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"two + two == five ? \"true\" : \"false\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"abc\",\"bat\"]","code":"$type=\"a\"; $stationId=\"b\"; [ grep { /$type/ && /$stationId/ } qw/abc cat bat/ ]","err_mask":""},{"err_mask":"","code":"$^U","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\303\\274\"]","code":"[ \"Ã¼\" ]","err_mask":""},{"code":"\"\\u0265\\u01DD\\u028E\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"026501DD028E","err":""},{"out":"AÃÂ¤","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\UaÃ¤\" # looks right to me, lustiger_seth"},{"out":"Strstr","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"ucfirst 'str_str' =~ tr/_//dr;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Str str","err":"","code":"ucfirst 'str_str' =~ tr/_/ /r;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"HELLO CORIN\"]","err":"","code":"[uc \"hello corin\"]","err_mask":""},{"err_mask":"","code":"\"UCS-4\" =~ s/^UCS-?4-?(BE|LE|)?$/UTF-32\\U$1/ir","err":"","out":"UTF-32","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"uc 'Ã'","out":"ÃÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"ÃÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"uc \"Ã\""},{"out_mask":"","out":"","err":"","code":"u eq n","err_mask":""},{"err_mask":"","code":"[\"\\Ufoo\", \"\\ufoo\"]","err":"","out":"[\"FOO\",\"Foo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"\\uhello\"","out":"Hello","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"`uname -a`","err_mask":""},{"err_mask":"","code":"undef","err":"","out":"","out_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"''.undef"},{"code":"'\\undef'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\undef"},{"code":"undef // []","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ undef == 0]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"undef\",1]","code":"[ undef => 1 ]","err_mask":""},{"code":"[ undef != 1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[(undef) + 1]"},{"out_mask":"Ã¿","out":"1","err":"","code":"undef=>1","err_mask":""},{"code":"undef + 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in undef operator at (eval 1) line 1, at EOF\n","err":""},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"undef // 2"},{"err":"","out":"ERROR: Can't locate object method \"undefined\" via package \"function\" (perhaps you forgot to load \"function\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"undefined function these"},{"out_mask":"Ã¿","out":"1","err":"","code":"$undefined =~ s//bar/;","err_mask":""},{"out_mask":"","err":"","out":"","code":"undef my $x;","err_mask":""},{"code":"[ undef | 'n', 0 | 'n', \"0\" | 'n' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"n\",0,\"~\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not a SCALAR reference at (eval 1) line 1, <STDIN> line 1.\n","code":"(\\undef)->${ +sub { 'here' } }","err_mask":""},{"out":"here","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"undef->${ \\sub { 'here' } }"},{"err_mask":"","code":"undef->${ +sub { 'here' } }","err":"","out":"ERROR: Not a SCALAR reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"undef ? true : false","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"false","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,\"\"]","err":"","code":"[undef, ''.undef]","err_mask":""},{"code":"undef $_ = undef","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"undef","code":"$undef=undef; print $undef ? 'true' : 'undef';","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"undefERROR: Too many open files","err":"","code":"$undef=undef; print $undef ? 'true' : 'undef'; print \"ERROR: $!\";","err_mask":""},{"err_mask":"","code":"$undef=undef; print $undef ? 'undef' : 'true';","err":"","out":"true","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"[undef undef undef]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"undef->{Val} = 'cats'; $test","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"Unicode::UCD::charinfo('x')","err":"","out":"ERROR: Undefined subroutine &Unicode::UCD::charinfo called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ UNIVERSAL->can(\"import\") ]","out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"\\303\\274nix\",\"\\303\\274nix\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \"Ã¼nix\", glob \"Ã¼nix\" ] # an amusingly-useful one, pls to not be killing it"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"unlink '/'"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"unlink \"Jello\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Is a directory","err":"","code":"unlink '/' or $!","err_mask":""},{"out":"[\"00\",\"02\",\"02\",\"05\",\"6D\",\"4C\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack \"(a2)*\", \"000202056D4C\" ]"},{"code":"[ unpack \"(a2)8\", \"here is a very long string that is too long for a mere sixteen characters\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"he\",\"re\",\" i\",\"s \",\"a \",\"ve\",\"ry\",\" l\"]"},{"code":"[ unpack '(a2)*', 'foo bar' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"fo\",\"o \",\"ba\",\"r\"]"},{"code":"[ unpack '(a3)*', '1234567890' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[123,456,789,0]","err":""},{"code":"[ unpack \"(A4)*\", \"Hello, world!\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Hell\",\"o, w\",\"orld\",\"!\"]"},{"err_mask":"","code":"[ unpack \"(a4)*\", reverse \"6.4.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.1.0.0.0.0.1.1.8.2.a.1.0.0.b.3\" =~ tr/.//dr ]","out":"[\"3b00\",\"1a28\",1100,\"0012\",\"0000\",\"0000\",\"0000\",\"0046\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"this\",\"isat\",\"est\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack \"(a4)*\", \"thisisatest\" ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ABCD\"]","err":"","code":"[ unpack \"a8\", \"ABCD\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"0000110010001100000011001000110000001100\"]","code":"[unpack(\"b*\",\"01010\")]","err_mask":""},{"code":"[unpack(\"B*\",\"01010\")]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0011000000110001001100000011000100110000\"]","err":""},{"code":"unpack \"b\", 0.21875","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"err_mask":"","code":"unpack \"b*\", 0.21875","out":"00001100011101000100110010001100000111001110110010101100","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"unpack 'B*', ~0 # maybe?","out":"0011000100111000001101000011010000110110001101110011010000110100001100000011011100110011001101110011000000111001001101010011010100110001001101100011000100110101","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"00111001\"]","err":"","code":"[ unpack 'B8', 0x5A ] # see perldoc perlpacktut","err_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"unpack \"b\",87381"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"10001100","code":"unpack \"(b8)*\", split ' ', \"text\"","err_mask":""},{"err_mask":"","code":"[ unpack '(b8)*', 'This' ]","err":"","out":"[\"00101010\",\"00010110\",10010110,11001110]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"unpack \"b*\", $entry )","out":"ERROR: syntax error at (eval 1) line 1, near \"$entry )\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1011110111111111111111111111111111111111111111111111011111111100","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"b*\",(pack \"d\", 0.9999999999999926)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"110101010100100000000011\"]","code":"[ unpack \"b*\", pack \"H*\", \"AB12C0\" ]","err_mask":""},{"err_mask":"","code":"unpack \"b*\",\"$phrase\"\"","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"\"$phrase\" into a \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"b*\",\"$phrase\" into a variable"},{"err":"","out":"01010100011010000110100101110011","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"B*\", \"This\""},{"out":"0010101000010110100101101100111000000100100101101100111000000100100001100000010000101110101001101100111000101110","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"b*\", \"This is a test\""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":"","code":"[ unpack 'B', 'wibble' ]","err_mask":""},{"out":"[\"011101110110100101100010011000100110110001100101\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack 'B*', 'wibble' ]"},{"err_mask":"","code":"unpack \"%c\", '1'","out":"49","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[104,101,108,108,111]","code":"[ unpack \"(C2)*\", \"hello\" ]","err_mask":""},{"code":"unpack \"%c\", 'a'","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"97"},{"out":"[97,98,99,100]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[unpack \"C*\", \"abcd\"]"},{"err_mask":"","code":"[ unpack \"C*\", \"ascii\" ]","err":"","out":"[97,115,99,105,105]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[104,101,108,108,111]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack \"C*\", \"hello\" ]"},{"code":"unpack \"C*\", pack \"n\", 945","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"-128","err":"","code":"unpack('C', \"\\x80\") - 256","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"3030303031633030","err":"","code":"unpack 'H*', '00001c00';","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"313239","err":"","code":"unpack(\"H*\", 0x81)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"01020304","code":"unpack 'H*', \"\\1\\2\\3\\4\"","err_mask":""},{"err":"","out":"a3","out_mask":"Ã¿Ã¿","err_mask":"","code":"unpack \"h2\", \":\""},{"out":"3a","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"unpack \"H2\", \":\""},{"code":"unpack '(H2)4', pack 'V', 1835008","err_mask":"","out_mask":"Ã¿Ã¿","out":"00","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"6c\",\"696b652074686973\"]","code":"[ unpack \"H2H*\", \"like this\" ]","err_mask":""},{"err_mask":"","code":"unpack \"h2\", \"Ã¶\"","err":"","out":"3c","out_mask":"Ã¿Ã¿"},{"err":"","out":"00","out_mask":"Ã¿Ã¿","err_mask":"","code":"unpack '(H2)*', pack 'V', 1835008"},{"code":"[ unpack \"(H2)*\", \"preaction\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[70,72,65,61,63,74,69,\"6f\",\"6e\"]"},{"err":"","out":"70","out_mask":"Ã¿Ã¿","err_mask":"","code":"unpack \"(H2)*\", \"preaction\""},{"err":"","out":"[\"194609193239\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack \"H*\", \"\\31F\\t\\03129\" ]"},{"err_mask":"","code":"unpack 'h*', '41'","err":"","out":"4313","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"3431","err":"","code":"unpack 'H*', '41'","err_mask":""},{"err_mask":"","code":"unpack(\"H8\", pack(\"V8\",85))","out":"55000000","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"unpack \"H*\", '9e9b929691'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"39653962393239363931"},{"err_mask":"","code":"unpack 'H*', 'aÌ'","err":"","out":"61cc80","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"unpack 'H*', 'Ã '","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"c3a0"},{"err_mask":"","code":"unpack(\"H*\", chr(1446686042));","out":"5a","err":"","out_mask":"Ã¿Ã¿"},{"err":"","out":"122c","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack 'H*', chr(18).chr(44)"},{"err_mask":"","code":"unpack '(HH)*', pack 'V', 1835008","out":"0","err":"","out_mask":"Ã¿"},{"out":"0500041a001500","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"H*\", (\"kitties\" ^ \"nipnips\")"},{"err":"","out":"[\"ffffffffffff23c0\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack 'H*', pack 'F', (9/10-1)*100 ]"},{"code":"unpack 'H*', pack 'h*', 123456","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"214365","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"000003b1b1030000","err":"","code":"unpack \"H*\", pack \"NV\", 945, 945","err_mask":""},{"code":"unpack \"H*\", v127.0.0.1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"7f000001","err":""},{"err_mask":"","code":"unpack \"H*\", \"\\x{22}\\x{31}\"","out":"2231","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[5,4,3]","err":"","code":"[ unpack \"i<3\", \"\\x05\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x3\\x00\\x00\\x00\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[5]","code":"[ unpack \"i<\", \"\\x05\\x00\\x00\\x00\" ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[83886080]","code":"[ unpack \"i>\", \"\\x05\\x00\\x00\\x00\" ]","err_mask":""},{"err_mask":"","code":"[ unpack \"l>\", \"\\0\\0\\0\\cQ\" ]","out":"[17]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"825307184","code":"unpack \"l<\", 0x00.0x00.0x72.0x00","err_mask":""},{"err_mask":"","code":"unpack \"l\", 0x00.0x00.0x72.0x00","err":"","out":"825307184","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1701995880,544434464,1702240353,1814067570]","err":"","code":"[ unpack \"(L)4\", \"here is a very long string that is too long for a mere sixteen characters\" ]","err_mask":""},{"err_mask":"","code":"unpack \"l<\", \"\\x00\\x00\\x72\\x00\"","out":"7471104","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"29184","err":"","code":"unpack \"l>\", \"\\x00\\x00\\x72\\x00\"","err_mask":""},{"err_mask":"","code":"unpack \"l\", \"\\x00\\x00\\x72\\x00\"","out":"7471104","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"6","err":"","code":"unpack \"l<\", \"\\x06\\x00\\x00\\x00\";","err_mask":""},{"err":"","out":"14644","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"n\", 945"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"16725","code":"unpack \"n\", \"AU\"","err_mask":""},{"code":"[ -~unpack 'N', join '', map chr, '192.168.254.43' =~ /\\d+/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"-1.84467440704773e+19\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"['-1062666709']","code":"[ unpack 'N!', join '', map chr, '192.168.254.43' =~ /\\d+/g ]","err_mask":""},{"err":"","out":"['-1062666709']","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack 'N!', pack 'C4', split /\\./, '192.168.254.43' ]"},{"err_mask":"","code":"unpack 'N', pack 'h*', '00001c00';","out":"49408","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"unpack 'N', pack 'H*', '00001c00';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"7168","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[16706,17220]","code":"[ unpack \"n*\", \"\\x41\\x42\\x43\\x44\" ]","err_mask":""},{"out":"['2338328219397285224','7791360887586431073','7598263559141158511','2338601207764903790']","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack \"(Q)4\", \"here is a very long string that is too long for a mere sixteen characters\" ]"},{"code":"[ unpack q{(B8)*}, pack q{C*}, 260 ] ### Why is this only printing one byte when 260 consumes two (8-bit) bytes ?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"00000100\"]","err":""},{"err":"","out":"[\"30b0\",\"0000\",\"10a0\",2080,1010,\"0000\",\"0000\",1020,\"0000\",\"0000\",\"0000\",\"0000\",\"0000\",\"0000\",\"0000\",4060]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack q{(h4)*}, pack q{(h2)*}, split /\\./, reverse q{6.4.0.0.0.0.0.0.0.0.0.0.0.0.0.0.2.1.0.0.0.0.1.1.8.2.a.1.0.0.b.3} ]"},{"code":"[ unpack q{N}, pack q{H8}, q{6060FF} ] # alanjf","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1616969472]","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"[ unpack q{N*}, pack q{H*}, q{6060FF} ];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1393955010.823","err":"","code":"unpack( \"q>\", pack \"H*\", \"000001448e317907\" ) / 1000","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[-1]","code":"[ unpack 'q', \"\\xff\" x 8 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[25960,25970,26912,8307]","code":"[ unpack \"(S)4\", \"here is a very long string that is too long for a mere sixteen characters\" ]","err_mask":""},{"out":"858797873","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"V\", \"1703\""},{"code":"unpack 'V', pack 'h*', '00001c00';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"12648448"},{"err_mask":"","code":"unpack 'V', pack 'H*', '00001c00';","out":"1835008","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"unpack \"V\", \"\\x17\\x03\\x01\\x00\"","out":"66327","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"unpack \"v\", \"\\x52\\x12\"","err":"","out":"4690","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"[ unpack \"v\", \"\\xd8\\x00\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[216]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"127.0.0.1","code":"$_=\"us 127.0.0.1 8000\"; (split)[1]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"usa\" via package \"IO::File\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"usa {STDOUT} 'IO::Handle';","err_mask":""},{"err_mask":"","code":"use 0 warnings;","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Perl v10.0.0 required--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use 10;","err_mask":""},{"out_mask":"","out":"","err":"","code":"use 1 strict;","err_mask":""},{"code":"use 2 Moose;","err_mask":"","out_mask":"","err":"","out":""},{"code":"use 2 threads;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate threads.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use 3 strictures;","err":"","out":"ERROR: Can't locate strictures.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":" use 5.006_001;","err_mask":""},{"code":"use 5.010;","err_mask":"","out_mask":"","out":"","err":""},{"out":"{}","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"use 5.010; my $str = \"foo:12 bar:34 baz:45\"; $str =~ /foo:(?<foo>\\d+) bar:(?<bar>\\d+) baz:(?<baz>\\d+)/; \\%+"},{"code":"use 5.010; my $x = 42; [  map { my $y = $x++; $y } 0..3 ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[42,43,44,45]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[42,42,42,42]","err":"","code":"use 5.010; my $x = 42; [  map { state $y = $x++; $y } 0..3 ];","err_mask":""},{"code":"use 5.010; say((\"a\" x 100000) =~ /^(ab?)*$/ ? \"Yes\" : \"No\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"No\n"},{"err_mask":"","code":"use 5.010; say((\"a\" x 10000) =~ /^(ab?)*$/ ? \"Yes\" : \"No\");","err":"","out":"Yes\n","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"\n","err":"","code":"use 5.010; say `ls -a`;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"one\ntwo\n","err":"","code":"use 5.010; say \"one\"; say \"two\"","err_mask":""},{"err_mask":"","code":"use 5.010; sub foo { state $foo = 123; @_ and $foo = shift; $foo }; [ foo(41), foo , foo(1), foo, foo, foo, foo(75), foo, foo(\"zof!\"), foo, foo]","out":"[41,41,1,1,1,1,75,75,\"zof!\",\"zof!\",\"zof!\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[123,41,41,1,1,1,1,75,75,\"zof!\",\"zof!\",\"zof!\"]","err":"","code":"use 5.010; sub foo { state $foo = 123; @_ and $foo = shift; $foo }; [ foo, foo(41), foo , foo(1), foo, foo, foo, foo(75), foo, foo(\"zof!\"), foo, foo]","err_mask":""},{"err":"","out":"[41,41,1,1,1,1,75,75,\"zof!\",\"zof!\",\"zof!\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.010; sub foo { state $foo = shift; @_ and $foo = shift;$foo }; [ foo(41), foo , foo(1), foo, foo, foo, foo(75), foo, foo(\"zof!\"), foo, foo]"},{"code":"use 5.010; sub foo { state $foo = shift; if ( @_ ) { $foo = shift; } $foo }; [ foo(41), foo , foo(1), foo, foo, foo, foo(75), foo, foo(\"zof!\"), foo, foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[41,41,1,1,1,1,75,75,\"zof!\",\"zof!\",\"zof!\"]","err":""},{"code":"use 5.010; sub x :lvalue {state $x; $x} x = 1; { local x = 3; print $x } $x","err_mask":"","out_mask":"","err":"","out":""},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"use 5.010; sub x :lvalue { $x; $x} x = 1; { local x = 3; print $x } $x"},{"code":"use 5.012; $foo = 'bar'; ++$$foo; $bar","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"use 5.012; ++$x","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"","code":"use 5.014; $foo = 'foo'","err_mask":""},{"err_mask":"","code":"use 5.014; state $x = 4; $x","out":"4","err":"","out_mask":"Ã¿"},{"code":"use 5.014; $x = 5","err_mask":"","out_mask":"Ã¿","out":"5","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"main\",undef]","code":"use 5.01600; [__PACKAGE__, __SUB__]","err_mask":""},{"code":"use 5.016; ++$x","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, at EOF\n","code":"use 5.018; my %hash;  push $hash{key}, \"more\";  \\%hash","err_mask":""},{"err_mask":"","code":"use 5.018; print fc(\"Å\") cmp fc(\"z\")","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use 5.01; say STDERR \"error message\";","err":"error message\n","out":"1","out_mask":"Ã¿"},{"code":"use 5.020; fc('er') eq fc('3r')","err_mask":"","out_mask":"","err":"","out":""},{"code":"use 5.020; fc('er') eq fc('er')","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"use 5.020; fc('er') eq fc('Er')","out":"1","err":"","out_mask":"Ã¿"},{"code":"use 5.020; [ fc 'foo' ]; # how do I do this on an older perl?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\"]","err":""},{"out":"[\"\\343\\237\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.020; [ fc 'Ã' ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\343\\237\"]","code":"use 5.020; [ fc 'Ã' ]; # <BenGoldberg>","err_mask":""},{"err_mask":"","code":"use 5.020; [ fc('Ã') eq fc('ss') ];","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"ss\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.020; [ fc \"\\xdf\" ]"},{"out_mask":"Ã¿","out":"1","err":"","code":"use 5.020; $foo = 'bar'; ++$$foo; $bar","err_mask":""},{"code":"use 5.020; $foo = 'foo'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foobar","err":"","code":"use 5.020; for ( [qw/foo bar/]->@* ) { print}","err_mask":""},{"err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.020; map print, [1,2,3]->@*"},{"err_mask":"","code":"use 5.020; my @a = 'a'..'c'; [ %a[0..2] ]","err":"","out":"[0,\"a\",1,\"b\",2,\"c\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use 5.020; my @a = 'a'..'c'; forhash my ($x, $y) (%a[0..2]) { say \"$x: $y\" }","out":"ERROR: syntax error at (eval 1) line 1, near \"forhash my \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,\"a\",1,\"b\",2,\"c\",3,\"d\",4,\"e\",5,\"f\",6,\"g\",7,\"h\",8,\"i\",9,\"j\",10,\"k\",11,\"l\",12,\"m\",13,\"n\",14,\"o\",15,\"p\",16,\"q\",17,\"r\",18,\"s\",19,\"t\",20,\"u\"]","code":"use 5.020; my @a = 'a'..'z'; [ %a[0..20] ]","err_mask":""},{"err_mask":"","code":"use 5.020; my @a = 'a'..'z'; { %a[0..20] }; # not in order","err":"","out":"u","out_mask":"Ã¿"},{"out":"{16 => \"q\",7 => \"h\",5 => \"f\",3 => \"d\",2 => \"c\",9 => \"j\",17 => \"r\",1 => \"b\",4 => \"e\",8 => \"i\",14 => \"o\",13 => \"n\",6 => \"g\",12 => \"m\",15 => \"p\",20 => \"u\",19 => \"t\",10 => \"k\",11 => \"l\",0 => \"a\",18 => \"s\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.020; my @a = 'a'..'z'; +{ %a[0..20] }; # not in order"},{"code":"use 5.020; open 'file'","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"use 5.020; sub add ($x = return 0, $y = return $x) { return $x + $y }   [ add(), add(2), add(2,3)  ]","out":"ERROR: Malformed prototype for main::add: $x = return 0, $y = return $x at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foobar","err":"","code":"use 5.020; use feature 'postderef'; no warnings 'experimental::postderef'; for ( [qw/foo bar/]->@* ) { print}","err_mask":""},{"out_mask":"","err":"Use of uninitialized value in open at (eval 1) line 1, <STDIN> line 1.\n","out":"","code":"use 5.020; use warnings; open 'file'","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use 5.021011; say \"hi\"","err":"","out":"hi\n","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.022; $foo = 'foo'"},{"err":"","out":"ERROR: Perl v5.100.0 required (did you mean v5.10.0?)--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.10;"},{"code":"use 5.14; state $x = 4; $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Perl v5.140.0 required (did you mean v5.14.0?)--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use 5.18.0; use experimental 'signatures'; sub foo($bar) {$bar =~ s/baz/boo/r}; print foo(\"baz lol baz\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"boo lol baz"},{"code":"use 5.18; use experimental 'signatures'; sub foo($bar) {$bar =~ s/baz/boo/r}; print foo(\"baz lol baz\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Perl v5.180.0 required (did you mean v5.18.0?)--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use 5.20; map print, [1,2,3]->@*","err":"","out":"ERROR: Perl v5.200.0 required (did you mean v5.20.0?)--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: strict version 6 required--this is only version 1.11 at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use 6 strict;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Perl v9.0.0 required--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use 9;","err_mask":""},{"err":"","out":"ERROR: Can't locate Acme/Everything.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Acme::Everything;"},{"code":"use Acme::Lvalue;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Acme/Lvalue.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Acme/MetaSyntactic.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Acme::MetaSyntactic; print metaname();","err_mask":""},{"code":"use ath; sqrt -1;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate ath.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"ERROR: Can't locate autodie.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use autodie; my $str = \"foo\"; open( my ($fh), \">\", \\$str ); print $fh; [ $str ];"},{"err_mask":"","code":"use base \"Tie::StdHash\";","out":"ERROR: Can't locate Tie/StdHash.pm:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/base.pm line 100, <STDIN> line 1.\n\t...propagated at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/base.pm line 109, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't locate bigfloat.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use bigfloat;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate bigfloat.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use bigfloat;  my $now = 1407974704.32323;  my $Last_Reload_Command = 1407974704.32322; $now - $Last_Reload_Command;","err_mask":""},{"code":"use bigint;","err_mask":"","out_mask":"","out":"","err":""},{"out":"bless( {sign => \"+\",value => [100000]}, 'Math::BigInt' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use bigint; 100 * 1000"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bless( {sign => \"+\",value => [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]}, 'Math::BigInt' )","code":"use bigint; 1e999","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"bless( {sign => \"+\",value => [65]}, 'Math::BigInt' )","err":"","code":"use bigint; 2790**2753 % 3233","err_mask":""},{"err_mask":"","code":"use bigint; \"Altreus\"","err":"","out":"Altreus","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use bigint; inf * 3","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bless( {sign => \"+inf\",value => [0],_p => undef,_a => undef}, 'Math::BigInt' )"},{"out":"ERROR: Can't locate bignum.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use bignum;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate bignum.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use bignum; 0.1 + 0.2 - 0.3","err_mask":""},{"out":"ERROR: Can't locate bignum.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use bignum; 2**88"},{"out":"ERROR: Can't locate bignum.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use bignum;  my $now = 1407974704.32323;  my $Last_Reload_Command = 1407974704.32322; $now - $Last_Reload_Command;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate bigrat.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use bigrat;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\\"foo\\\\r\\\\n\\\\tbar\\\\n\\\"\"]","err":"","code":"use B 'perlstring'; [perlstring \"foo\\r\\n\\tbar\\n\"]","err_mask":""},{"code":"use B 'perlstring'; perlstring \"foo\\r\\n\\tbar\\n\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\"foo\\r\\n\\tbar\\n\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\"foo\\r\\n\\tbar\\n\"","err":"","code":"use B 'perlstring'; print perlstring \"foo\\r\\n\\tbar\\n\";","err_mask":""},{"err_mask":"","code":"use B qw( svref_2object ); [ svref_2object(\\&svref_2object)->GV ]","out":"[bless( do{\\(my $o = 23682272)}, 'B::GV' )]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"use B $^W++;join(($x)x101)","err_mask":""},{"err_mask":"","code":"use bytes; length  pack \"d*\", 1,2,3;","err":"","out":"24","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"use bytes; length  pack \"f*\", 1,2,3;","err":"","out":"12","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"7","code":"use bytes; length 'sàº²à»'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\0\\0\\0\\0\\0\"]","code":"use bytes; $l = \"fooso\"; [ $l & chr(0x80)x(length $l) ] # everything can be turned broken if you want to","err_mask":""},{"code":"use bytes; $_=\"ââââ\"; substr($_,0,1,''); length $_","err_mask":"","out_mask":"Ã¿Ã¿","out":"11","err":""},{"err":"'use charnames' needs explicit imports list at (eval 1) line 1.\n","out":"PRIVATE USE TWO","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use charnames; charnames::viacode 0x92"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"'use charnames' needs explicit imports list at (eval 1) line 1.\n","out":"[\"LATIN SMALL LETTER A WITH CIRCUMFLEX\",\"LATIN SMALL LETTER A WITH CIRCUMFLEX\",\"LATIN SMALL LETTER A WITH CIRCUMFLEX\"]","code":"use charnames; [ map charnames::viacode(ord), qw(â â â) ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use Config; \\%Config","err":"Can't locate Config_heavy.pl:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Config.pm line 80, <STDIN> line 1.\n","out":"","out_mask":""},{"err_mask":"","code":"use Config; $Config{archname}","err":"","out":"x86_64-linux","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't locate Config_heavy.pl:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Config.pm line 80, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Config; $Config{longdouble}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Config_heavy.pl:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Config.pm line 80, <STDIN> line 1.\n","err":"","code":"use Config; $Config{myuname}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Config_heavy.pl:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Config.pm line 80, <STDIN> line 1.\n","code":"use Config; $Config{nvsize}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"linux","err":"","code":"use Config; $Config{osname}","err_mask":""},{"out":"ERROR: Can't locate Config_heavy.pl:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Config.pm line 80, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Config; $Config{uname}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Config_heavy.pl:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Config.pm line 80, <STDIN> line 1.\n","code":"use Config; $Config{use64bitint};","err_mask":""},{"err":"","out":"x86_64-linux","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Config; print $Config{archname}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Constant name '4' has invalid characters at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use constant '4' => 'ok'; &{4};","err_mask":""},{"code":"use constant 4 => 'ok'; &{4};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"use constant 4 =>\"\n"},{"err":"","out":"[1,2,42,4,5]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant A => [1..5]; sub TIESCALAR { bless [] }; sub FETCH { 42 }; tie ${\\(A->[2])}, 'main'; A;"},{"out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant A => [1..5]; sub TIESCALAR { bless [] }; sub FETCH { 42 }; tie ${\\(A->[2])}, 'main'; sub { A };"},{"code":"use constant A => \"constant?\"; sub TIESCALAR { bless [] }; sub FETCH { \"mutable!\" }; tie ${\\(A)}, 'main'; A;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use constant cat => 1; cat while $x++<1","err":"","out":"","out_mask":""},{"code":"use constant; constant::_CAN_PCS();","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out":"fooXXXbaz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant C => 'XXX'; 'foobarbaz' =~ s/bar/C/er"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"fooXXXbaz","code":"use constant C => 'XXX'; 'foobarbaz' =~ s/bar/${\\C}/r","err_mask":""},{"err":"","out":"[\\42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant FOO => 42; [ $::{FOO} ]"},{"err_mask":"","code":"use constant FOO => 42; $FOO = 43; $::{FOO}","out":"*main::FOO","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use constant FOO => 42; [ *FOO{CODE} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[sub { \"DUMMY\" }]","err":""},{"code":"use constant { FOO => 42 }; +{ +FOO => \"test\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{FOO => \"test\"}"},{"code":"use constant { FOO => 42 }; +{ FOO => \"test\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{FOO => \"test\"}"},{"code":"use constant { FOO => 42 }; +{ FOO() => \"test\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{42 => \"test\"}","err":""},{"code":"use constant FOO => 42; { local *FOO = sub () { \"k\" }; &FOO() }","err_mask":"","out_mask":"Ã¿","err":"","out":"k"},{"err":"","out":"[42]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant FOO => 42; [ main->FOO ]"},{"err_mask":"","code":"use constant FOO => 'BAR!'; BEGIN { say FOO }","err":"","out":"BAR!\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use constant FOO => \"bar\"; \"${\\FOO}\"","err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"bar\",\"bar\"]","code":"use constant FOO => 'bar'; [&FOO => 'bar']","err_mask":""},{"code":"use constant FOO => 'bar'; (FOO() => 'baz'){+FOO}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"){\"\n"},{"code":"use constant FOO => 'bar'; {FOO() => 'baz'}->{+FOO}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}->\"\n"},{"err_mask":"","code":"use constant FOO => 'bar'; +{FOO() => 'baz'}->{+FOO}","out":"baz","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out":"BAR!\nMoar BAR!!\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant FOO => 'BAR!'; our $dir = FOO; BEGIN { say FOO } say \"Moar $dir!\""},{"err":"","out":"{FOO => 2,dogs => 1}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant FOO => \"dogs\"; +{ FOO => 213, FOO() => 1, +FOO => 2 }"},{"err":"","out":"-Inf","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant { Inf => 0 + 'inf', NaN => 0 + 'nan' }; Inf * -1"},{"err_mask":"","code":"use constant IsProhibited => ''; qr/\\p{IsProhibited}/","out":"qr/\\p{IsProhibited}/u","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use constant list => qw(a b c); [list]","out":"[\"a\",\"b\",\"c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"true","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant PARENT_CLASS => 'Legacy'; BEGIN { package Legacy; $INC{\"Legacy.pm\"} = 1} { package Shim; use parent main::PARENT_CLASS; } Shim->isa('Legacy') ? 'true' : 'false'"},{"err":"","out":"Pi equals 3.14159265358979...\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant PI    => 4 * atan2(1, 1); print \"Pi equals \", PI, \"...\\n\";"},{"err_mask":"","code":"use constant; print constant::_CAN_PCS;","err":"","out":"1","out_mask":"Ã¿"},{"code":"use constant TEST2 => TEST1; use constant TEST1 => 1; use constant TEST3 => TEST1; [TEST1, TEST2, TEST3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,\"TEST1\",1]","err":""},{"err_mask":"","code":"use constant XXX => 'test'; \"@{[ XXX ]} or ${\\XXX} or \" . XXX","out":"test or test or test","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate CPAN.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use CPAN; install(\"Time::Moment\")","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Cwd.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Cwd; print cwd();","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Cwd.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Cwd qw(); print Cwd::cwd();","err_mask":""},{"out":"ERROR: Can't locate Data/Dump.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Data::Dump"},{"err":"","out":"","out_mask":"","err_mask":"","code":"use Data::Dumper;"},{"err":"","out":"$VAR1 = {'d' => {'b' => 'c'},'a' => $VAR1->{'d'}};","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Data::Dumper; $Data::Dumper::Indent = 0; %foo = (a => { b => 'c' }); $foo{d} = $foo{a}; Dumper \\%foo"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$VAR1 = '\u0018';\n","code":"use Data::Dumper; Dumper(\"${\\chr 24}\")","err_mask":""},{"err_mask":"","code":"use Data::Dumper; Dumper(\"\\cX\")","err":"","out":"$VAR1 = '\u0018';\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$VAR1 = 'CX';\n","err":"","code":"use Data::Dumper; Dumper(\"\\CX\")","err_mask":""},{"err_mask":"","code":"use Data::Dumper; my @arr; push(@arr, \"test\"); push(@arr, \"i refuse to do what master tells me to\"); my @arr2 = grep { /test/ } @arr; print Dumper @arr2;","err":"","out":"$VAR1 = 'test';\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Data::Dumper; my %commands = ( help => sub { my $commands = say for keys in %commands; }); say Dumper($commands{help});","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use Data::Dumper; print Dumper(*->[0]);","out":"$VAR1 = '';\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$VAR1 = 0;\n","err":"","code":"use Data::Dumper; print Dumper(0);","err_mask":""},{"err_mask":"","code":"use Data::Dumper; print Dumper(0->[0]);","err":"","out":"$VAR1 = undef;\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Data::Dump 'pp'; pp(\"\\cX\")","err":"","out":"ERROR: Can't locate Data/Dump.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Data::Munge version 1 required--this is only version 0.096 at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Data::Munge 1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"abba\",\"ba\",undef]","code":"use Data::Munge; \"abba\" =~ /(ab(ba))|(ba)/ or die; [submatches]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bonono","code":"use Data::Munge; byval { s/a/o/g } \"banana\"","err_mask":""},{"err_mask":"","code":"use Data::Munge; eval_string \"[[ \\\"pos\\\" ], /\\\"(/d+)\\\"/]\"","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/\"( <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Data::Munge; list2re \"\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"qr/(?#)/","err":""},{"code":"use Data::Munge; list2re()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"qr/(?!)/"},{"code":"use Data::Munge. list2re()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"use Data::Munge.\"\n"},{"err":"","out":"qr/ab|cd|ef|g|h|i/","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Data::Munge; list2re qw( ab cd ef g h i )"},{"code":"use Data::Munge; my $str = \"hello\"; my @m; while ($str =~ /(.)(.)/g) { push @m, [submatches]; } \\@m","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"h\",\"e\"],[\"l\",\"l\"]]","err":""},{"err_mask":"","code":"use Data::Munge qw(byval); print byval { s/\\* // } \"* foo\";","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use Data::Munge qw(elem); [ elem \"badgers\", [qw(dogs badgers monkeys)] ]"},{"code":"use Data::Munge qw(elem); [ elem \"cats\", [qw(dogs badgers monkeys)] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]"},{"err_mask":"","code":"use Data::Munge qw( list2re ); my $re = list2re qw(); $re eq list2re ? q{Empty.} : q{Not empty.}; ### Is this a good way to tell if $re was generated from an empty list?","err":"","out":"Empty.","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Data::Munge qw(list2re); my $re = list2re( ); { [ $$re, $re ]; } # Looks like the heart of a Regexp object, despite being labeled as a REGEXP, really seems to be a string.","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"(?^:(?!))\",qr/(?!)/]","err":""},{"err_mask":"","code":"use Data::Munge qw(replace); my $s = 'some text'; my $f = 's/x/s/g; s/o/a/g;'; my $part = qr{(?:[^\\\\/]|\\\\.)*}s; while ($f =~ m{\\bs/($part)/($part)/(g)?}g) { $s = replace $s, $1, $2, $3; } $s","err":"","out":"same test","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Data::Munge qw(replace); replace('A?Bl^%ah 4 Yes$!', qr/[^A-Za-z0-9]/, '', 'g')","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ABlah4Yes","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"barbarstring","err":"","code":"use Data::Munge qw(replace); replace('foobarstring', qr/foo/, 'bar')","err_mask":""},{"err_mask":"","code":"use Data::Munge qw(replace); replace 'ningu', qr/([aeiou])/, '$1$1', 'g'","out":"niinguu","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"bonono","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Data::Munge; replace \"banana\", qr/a/, 'o', 'g'"},{"out":"[\"hah\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Data::Munge; [ replace \"blah\", qr/bl/, 'h' ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"cool\\+beans\\.","err":"","code":"use Data::Munge; replace('cool+beans.', qr/\\W/, '\\\\$&', 'g')","err_mask":""},{"out":"ERROR: Can't locate Data/Random.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Data::Random"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Data/Swap.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Data::Swap;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Date/Manip.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Date::Manip; my $r = UnixDate(ParseDate( q{Sat, 12 Apr 2014 10:01:33 -0400} ), \"%d-%b-%Y %H:%M:%S %z\"); [ $r ]; ### This works for me.","err_mask":""},{"err_mask":"","code":"use Date::Manip; my $r = UnixDate(ParseDate( q{Wed, 17 Apr 2014 01:50:19 +0100} ), \"%d-%b-%Y %H:%M:%S %z\"); [ $r ]; ### This returns undef for some reason, I can't figure out why.","out":"ERROR: Can't locate Date/Manip.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Mandatory parameter 'year' missing in call to DateTime::new\n at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/site_perl/5.24.0/x86_64-linux/DateTime.pm line 197, <STDIN> line 1.\n\tDateTime::new(undef) called at (eval 1) line 1\n\teval 'use 5.024000; use feature qw/postderef refaliasing lexical_subs postderef_qq signatures/; use DateTime; DateTime->new->iso8601' called at /home/ryan/bots/perlbuut/lib/eval.pl line 301\n\tmain::perl_code(\"use DateTime; DateTime->new->iso8601\") called at /home/ryan/bots/perlbuut/lib/eval.pl line 248\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use DateTime; DateTime->new->iso8601"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( {name => \"UTC\"}, 'DateTime::TimeZone::UTC' )]","code":"use DateTime::TimeZone; [ DateTime::TimeZone->new( name => 'UTC' ) ]","err_mask":""},{"code":"use DateTime::TimeZone; grep /America/ DateTime::TimeZone->all_names","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"/America/ DateTime::TimeZone\"\n"},{"code":"use DateTime::TimeZone; grep /America/, DateTime::TimeZone->all_names","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"129","err":""},{"code":"use DateTime::TimeZone; [grep m[[^a-zA-Z0-9/_-]], DateTime::TimeZone->all_names];","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"code":"use DateTime::TimeZone; [grep m[[^a-zA-Z/_]], DateTime::TimeZone->all_names];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"America/Blanc-Sablon\",\"America/Port-au-Prince\",\"Asia/Ust-Nera\",\"CST6CDT\",\"EST5EDT\",\"MST7MDT\",\"PST8PDT\"]","err":""},{"err_mask":"","code":"use DateTime::TimeZone; [grep /york/i, DateTime::TimeZone->all_names];","err":"","out":"[\"America/New_York\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use DateTime::TimeZone; my $tz = DateTime::TimeZone->new(name => 'America/New_York')","err":"","out":"ERROR: The timezone 'America/New_York' could not be loaded, or is an invalid name.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate DateTime/TimeZone/Local/Unix.pm:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/site_perl/5.24.0/Module/Runtime.pm line 317, <STDIN> line 1.\n","err":"","code":"use DateTime::TimeZone; my $tz = DateTime::TimeZone->new(name => 'local')->name","err_mask":""},{"err":"","out":"ERROR: Can't locate diagnostics.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use diagnostics; use strict; [ Foo ]"},{"err_mask":"","code":"use Digest::MD5 qw(md5_hex); md5_hex \"TESTSTRING\\n\"","err":"","out":"39987e0e753c8f1310651bce1516a44b","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Digest; my $md5 = Digest->new('MD5'); length $md5","out":"ERROR: Can't locate Digest.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"use Encode;","err_mask":""},{"err":"","out":"Ã¼","out_mask":"Ã¿Ã¿","err_mask":"","code":"use Encode 'decode'; decode 'UTF-8', chr(195).chr(188)"},{"err_mask":"","code":"use Encode 'decode'; [ decode 'UTF-8', \"\\x1c\\x00\\xfc\\x3c\\x1c\\xfc\\x0e\\xc0\\xe0\" ]","out":"[\"\\34\\0\\x{fffd}<\\34\\x{fffd}\\16\\x{fffd}\\x{fffd}\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Encode 'decode'; [ decode 'UTF-8', \"\\x1d"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\35\\177\"]","code":"use Encode 'decode'; [ decode 'UTF-8', \"\\x1d\\x7f\"]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\u001d7\u00173\u00177","code":"use Encode 'decode_utf8'; decode_utf8 \"\\0357\\0273\\0277\"","err_mask":""},{"err_mask":"","code":"use Encode 'decode_utf8'; decode_utf8 \"\\357\\273\\277\"","out":"Ã¯Â»Â¿","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"65279","code":"use Encode 'decode_utf8'; ord decode_utf8 \"\\357\\273\\277\"","err_mask":""},{"code":"use Encode 'decode_utf8'; sprintf \"U+%04x\", ord decode_utf8 \"\\357\\273\\277\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"U+feff"},{"err_mask":"","code":"use Encode; Encode::encode(\"ISO-8859-1\", \"\\x{100}\", Encode::LEAVE_SRC|Encode::FB_CROAK);","out":"ERROR: \"\\x{0100}\" does not map to iso-8859-1 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Encode.pm line 171, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Encode 'encode'; encode 'UCS-2LE', 'Tracking-Num... '","out":"ERROR: Unknown encoding 'UCS-2LE' at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Encode 'encode'; encode 'UTF-16LE', 'Tracking-Num... '","err":"","out":"ERROR: Unknown encoding 'UTF-16LE' at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Encode 'encode'; encode 'UTF-16', 'Tracking-Num... '","err":"","out":"ERROR: Unknown encoding 'UTF-16' at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ÃÂ£ÃÂÃÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Encode 'encode'; encode 'UTF-8', 'ã'"},{"err_mask":"","code":"use Encode 'encode'; encode 'UTF-8', chr(195).chr(188)","out":"ÃÂÃÂ¼","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Encode 'encode'; [ encode 'UTF-8', \"\\x{1d}\" ]","out":"[\"\\35\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"1d\"\n","err":"","code":"use Encode 'encode'; [ encode 'UTF-8', \\x{1d} ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"mime_name\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","code":"use Encode; Encode::find_encoding('gb2312')->mime_name","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: \"\\x{0100}\" does not map to iso-8859-1 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Encode; Encode::find_encoding(\"ISO-8859-1\")->encode(\"\\x{100}\", Encode::LEAVE_SRC|Encode::FB_CROAK)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"name\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Encode; Encode::find_encoding( q{UTF-16} )->name","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Encode/MIME/Name.pm:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Encode/Encoding.pm line 24, <STDIN> line 1.\n","err":"","code":"use Encode; Encode::find_encoding('utf8')->mime_name","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"2.80","err":"","code":"use Encode; $Encode::VERSION","err_mask":""},{"err_mask":"","code":"use Encode; Encode::VERSION","out":"Encode::VERSION","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Encode; find_encoding( q{UTF-16} )->name;","out":"ERROR: Can't call method \"name\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"name\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","code":"use Encode; find_encoding( q{UTF-EBCDIC} )->name; # ???","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use Encode; my $buf = encode('UTF-8', \"\\x{666}\"); open my $fh, '<', \\$buf or die \"open: $!\""},{"code":"use Encode; my $x = qq<\\x{100}>; [ unpack q{H*}, $x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"00\"]"},{"err_mask":"","code":"use Encode; ord Encode::encode_utf8(\"\\xFF\") # not necessarily","err":"","out":"195","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Encode;  print Encode::decode q{ISO885902}, \"\\x{119}\";","err":"","out":"ERROR: Unknown encoding 'ISO885902' at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Encode;  print Encode::decode q{ISO8859-2}, \"\\x{119}\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unknown encoding 'ISO8859-2' at (eval 1) line 1.\n","err":""},{"err":"","out":"109.117.99.104.32.226.153.165","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Encode; printf \"%vd\", encode_utf8(\"much \\x{2665}\")"},{"err_mask":"","code":" use Encode qw/decode/; [ decode( \"UTF-8\", \"\\x6\\x0\\x0\\x0\\x65\\x0\\x0\\x0\\x61\\x6e\\x69\\x6d\\x73\\x2f\\x74\\x68\\x72\\x30\\x30\\x30\\x30\\x31\\x2e\\x74\\x67\\x61\") ] # print obviously doesn't like \\0","err":"","out":"[\"\\6\\0\\0\\0e\\0\\0\\0anims/thr00001.tga\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Encode qw/decode/; print decode( \"utf8\", \"\\x06\\x00\\x00\\x00\\x65\\x00\\x00\\x00\\x61\\x6e\\x69\\x6d\\x73\\x2f\\x74\\x68\\x72\\x30\\x30\\x30\\x30\\x31\\x2e\\x74\\x67\\x61\" );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\u0006\u0000\u0000\u0000e\u0000\u0000\u0000anims/thr00001.tga","err":""},{"code":"use Encode qw/decode/; print decode( \"utf8\", \"\\x6\\x0\\x0\\x0\\x65\\x0\\x0\\x0\\x61\\x6e\\x69\\x6d\\x73\\x2f\\x74\\x68\\x72\\x30\\x30\\x30\\x30\\x31\\x2e\\x74\\x67\\x61\" )","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\u0006\u0000\u0000\u0000e\u0000\u0000\u0000anims/thr00001.tga","err":""},{"err_mask":"","code":"use Encode; say Encode::encode(\"UTF-8\", Encode::decode(\"ISO-8859-1\", \"ãã¸ã£é­å¥³ã©ãã¿\"));","err":"","out":"ÃÂ£ÃÂÃÂÃÂ£ÃÂÃÂ¸ÃÂ£ÃÂÃÂ£ÃÂ©ÃÂ­ÃÂÃÂ¥ÃÂ¥ÃÂ³ÃÂ£ÃÂÃÂ©ÃÂ£ÃÂÃÂÃÂ£ÃÂÃÂ¿\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Encode::Unicode; Encode::find_encoding( q{UTF-16} )->name","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Encode/Unicode.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate English.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use English; [ $., $NR ]","err_mask":""},{"err_mask":"","code":"use Env qw/ HOME /;[[ ((glob(\"$HOME/*.txt\"))[0]) ]]","err":"","out":"ERROR: Can't locate Env.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"use Errno 'ENOENT'; ENOENT"},{"err_mask":"","code":"use experimental 'autoderef'; [keys {foo => 1, bar => 2, baz => 0}]","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use experimental 'lexical_subs'"},{"code":"use experimental 'lexical_subs'; use constant wibble => 42; my $outer = wibble; my $inner = do { my sub wibble () { 69 }; wibble }; [ $inner, $outer ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[69,42]","err":""},{"code":"use experimental \"postderef\";","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"use experimental 'postderef'; my $x; $x->$@ # lovely :S","err":"","out":"ERROR: Can't call method \"\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use experimental qw(postderef); $arr = [[1..3],[4..6],[7..9]]; [ $arr->@[0, 2] ]","out":"[[1,2,3],[7,8,9]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"jkl;\",undef]","err":"","code":"use experimental qw(postderef); $hash = {asdf => 'jkl;', zxvc => 'bnm,'}; [ $hash->@{'asdf','zxcv'} ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3]","err":"","code":"use experimental qw( postderef ); my $foo = { bar => [ 1, 2, 3 ] }; [ $foo->{bar}->@* ]","err_mask":""},{"code":"use experimental qw( postderef ); my $foo = { bar => [ 1, 2, 3 ] }; [ $foo->{bar}->*@ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"->*\"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n"},{"err_mask":"","code":"use experimental qw(postderef); sub foo { return [1, 2, 3] } if ((my $arr_ref = foo())->@*) { print @$arr_ref }","err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Initialization of state variables in list context currently forbidden at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use experimental qw(state); (state $x) = @_; # depends on whether compiling is considered useful?"},{"code":"use experimental 'signatures'; sub foo () { 5 } print foo, \"bar\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"5bar","err":""},{"code":"use experimental 'signatures'; sub foo () { 5 } say foo, \"bar\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"5bar\n"},{"err":"","out":"hola hoops hola hoops ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use experimental 'signatures'; sub foo($bar) {print $bar, $bar}; foo(\"hola hoops \");"},{"code":"use experimental 'signatures'; sub foo($bar) {print $bar, $bar}; foo(\"hola hoops \", \"error\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(my \"\n","code":"use experimental 'signatures'; sub foo (my $str) { $str.$str } print foo \"baz\", \"bar\";","err_mask":""},{"err":"","out":"x","out_mask":"Ã¿","err_mask":"","code":"use experimental 'signatures'; sub foo ($str) { $str .= \"a\" } my $s = \"x\"; foo($s); $s"},{"code":"use experimental 'signatures'; sub foo ($str) { $str.$str } print foo \"baz\", \"bar\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","err":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"// 2\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use experimental 'signatures'; sub foo () { undef } print foo // 2; # this is where the parser got choked up, i think"},{"code":"use ExtUtils::ParseXS","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate ExtUtils/ParseXS.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use feature 'fc'; index(fc 'foo Ã', fc 'Ã«');","err":"","out":"-1","out_mask":"Ã¿Ã¿"},{"err":"","out":"ERROR: Feature \"\" is not supported by Perl 5.24.0 at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature fc; print fc(\"Å\") cmp fc(\"z\")"},{"err":"","out":"","out_mask":"","err_mask":"","code":"use feature keys %feature::feature; say hi::"},{"out_mask":"Ã¿Ã¿","out":"k\n","err":"","code":"use feature keys %feature::feature; say 'k'","err_mask":""},{"out":"-1","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"use feature 'postderef'; []->$#*"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[3,\"D\",4,\"E\",5,\"F\",6,\"G\",7,\"H\"]","code":"use feature 'postderef'; [ [\"A\"..\"Z\"]->%[3..7] ]","err_mask":""},{"err_mask":"","code":"use feature 'postderef'; *foo{SCALAR}->$* = 2; my $bar; $$bar = 3; [ $bar->$****foo{SCALAR}->$* ]","err":"","out":"[9]","out_mask":"Ã¿Ã¿Ã¿"},{"code":"use feature 'postderef'; *foo{SCALAR}->$* = 2; my $bar; $$bar = 3; say $bar->$****foo{SCALAR}->$*;","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"9\n"},{"err_mask":"","code":"use feature 'postderef'; for my $i (1..100) {push @a, [(1,1) x 1024*512]}; [scalar(@a), scalar($a[0]->@*)]","out":"[100,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"Out of memory!\n","code":"use feature 'postderef'; for my $i (1..100) {push @a, [(1) x (1024*1024)]}; [scalar(@a), scalar($a[0]->@*)]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[100,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'postderef'; for my $i (1..100) {push @a, [(1) x 1024*1024]}; [scalar(@a), scalar($a[0]->@*)]"},{"err":"Out of memory!\n","out":"","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use feature 'postderef'; for my $i (1..50) {push @a, [(1) x (1024*1024)]}; [scalar(@a), scalar($a[0]->@*)]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"123","code":"use feature 'postderef'; map print, [1,2,3]->@*  # or maybe a -, a >, an @ and an *","err_mask":""},{"err":"","out":"x","out_mask":"Ã¿","err_mask":"","code":"use feature 'postderef'; my $aref = \\['x']; $aref->$*->[0] # or let perlbot help"},{"err_mask":"","code":"use feature 'postderef'; my $data = {foo => [qw/hello freenode perl/]}; print for ($data->{foo}->@*); ","out":"hellofreenodeperl","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use feature 'postderef'; my $x = \\42; $x->$*","err":"","out":"42","out_mask":"Ã¿Ã¿"},{"code":"use feature 'postderef'; no warnings 'experimental::postderef'; sub {42}->&*","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"42"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use feature 'postderef'; $_->@{qw/a b/} = (1,2) for \\my %hash"},{"err_mask":"","code":"use feature 'postderef'; $_->@{qw/a b/} = (1,2) for \\my %hash; \\%hash","out":"{b => 2,a => 1}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"\ncd\n","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'postderef'; sub lol { say @_; } sub one { (\\&lol)->() } sub two { (\\&lol)->&* } one(qw(a b)); two(qw(c d));"},{"err_mask":"","code":"use feature 'postderef'; use 5.020; my $l = sub { say @_; }; sub one { $l->() } sub two { $l->&* } one(qw(a b)); two(qw(c d));","err":"","out":"\ncd\n","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"\ncd\n","code":"use feature 'postderef'; use 5.020; sub lol { say @_; } sub one { (\\&lol)->() } sub two { (\\&lol)->&* } one(qw(a b)); two(qw(c d));","err_mask":""},{"err":"","out":"this this this is is is line line line 1 2 3","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'postderef';  use List::MoreUtils 'mesh'; my $str = \"this is line 1\\nthis is line 2\\nthis is line 3\"; my @lines = map { [ split \" \", $_ ] } split /\\n/, $str; \"@{[ mesh $lines[0]->@*, $lines[1]->@*, $lines[2]->@* ]}\""},{"err_mask":"","code":"use feature 'postderef'; $x = [0]; push $x->@*, 1; $x","err":"","out":"[0,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"you","code":"use feature 'postderef'; (\\'you')->$*","err_mask":""},{"err_mask":"","code":"use feature qw( current_sub ); sub foo { my ( $foo, $x ); $foo = sub { $x ? ++$x : ( $x = 1 ); __SUB__->() unless $x >= 5; }; $foo->(); return $x; } foo; ### So this doesn't leak memory?","out":"5","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"use feature qw(doesntexist);","err":"","out":"ERROR: Feature \"doesntexist\" is not supported by Perl 5.24.0 at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"Ã£Â","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature qw(fc); fc 'Ã'"},{"code":"use feature qw(fc); print for fc('Ã'), '-', lc('Ã');","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã£Â-Ã£Â","err":""},{"err_mask":"","code":"use feature qw(fc unicode_strings); print fc(\"Å\") cmp fc(\"z\")","out":"1","err":"","out_mask":"Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use feature qw(fc unicode_strings); use utf8; print fc(\"Å\") cmp fc(\"z\")"},{"code":"use feature qw(say fc); say fc(\"\"); # the core function seems happy enough, so I'd put that down to a bug in the module","err_mask":"","out_mask":"Ã¿","out":"\n","err":""},{"err_mask":"","code":"use feature qw(say); $_ = '...'; say() # not quite, but just because say/print are special","err":"","out":"...\n","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"state init ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature qw(state); my $y = 0; sub isatty { state $x = do { print \"state init \"; ++$y }; $x } [ map  isatty(), 1..3 ] # only once"},{"err_mask":"","code":"use feature qw(state); (state $x) = @_;","out":"ERROR: Initialization of state variables in list context currently forbidden at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[[[\"A\",\"First\"],[\"B\",\"Nested\"],[\"C\",\"Nested\"]],[[\"X\",\"First\"],[\"Y\",\"Nested\"],[\"Z\",\"Nested\"]]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature qw( state ); sub Foo { state %state; my @p = ( [ shift, $state{n} ? q{Nested} : q{First} ] ); { local $state{n} = 1; push @p, Foo( @_ ) if @_ }; if ( $state{n} ) { @p; } else { %state = (); [ @p ]; } }    [  Foo( qw(A B C) ),  Foo( qw(X Y Z) )  ];"},{"err":"","out":"barbaz","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'refaliasing'; for \\my %hash ({foo => 'bar'}, {foo => 'baz'}) { print $hash{foo} } #whee"},{"err_mask":"","code":"use feature 'refaliasing'; my $x = { foo => 1 }; \\my %y = $x; $y{bar} = 2; $x;","err":"","out":"{bar => 2,foo => 1}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"asdf\nasdf\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'say'; do { my $line = $_; chomp $line; say $line } for \"asdf\",\"asdf\\n\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1 2 3 are123\n","code":"use feature 'say';  say \"1 2 3 are\", 1, 2, 3;","err_mask":""},{"code":"use feature 'say'; say \"hi\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"hi\n"},{"err_mask":"","code":"use feature 'say'; say 'lo'","out":"lo\n","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use feature 'say'; say q hello worldh;","err":"","out":"ello world\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"76a2173be6393254e72ffa4d6df1030a\n","err":"","code":"use feature 'say'; use Digest::MD5 'md5_hex'; say md5_hex(\"passwd\")","err_mask":""},{"err_mask":"","code":"use feature 'say'; use List::Util 1.33 'any';","out":"","err":"","out_mask":""},{"code":"use feature 'say'; use List::Util 1.33 'any'; @array = qw(1 2 3); say \"match\" if(any{ $_ eq '3'} @array);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"match\n"},{"out_mask":"","err":"","out":"","code":"use feature 'say'; use List::Util 1.33 'any'; @array = qw(1,2,3); say \"match\" if(any{ $_ eq '3'} @array);","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"use feature 'say'; use List::Util 1.33 'any'; @array = qw(1,2,3); say \"match\" if(any{ $_ eq '4'} @array);"},{"err":"","out":"[0,2,5]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'signatures'; sub add ($x = (return 0), $y = return $x) { return $x + $y } [ add(), add(2), add(2,3) ]"},{"err_mask":"","code":"use feature 'signatures'; sub add ($x = return 0, $y = return $x) { return $x + $y } [ add(), add(2), add(2,3) ]","err":"","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"4","err":"","code":"use feature 'state'; state $x = 4; $x","err_mask":""},{"code":"use feature 'switch'; given (0) { when ('0 but true') { print 'wat' } }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"wat"},{"code":"use feature 'switch'; given (\"0\") { when ('0 but true') { print 'wat' } default { print 'nope' } }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"nope"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use File::Basename; [ fileparse(\"/foo/bar/baz.anyextensionyoulike\", qr/\\.[^.]*/) ]","err_mask":""},{"err_mask":"","code":"use File::Basename; [ fileparse(\"/foo/bar/baz.csv\", qr/\\.[^.]*/) ]","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use File::Basename; [ fileparse(\"foo/bar.baz\", qr/[^.]*$/) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use File::Basename; [ fileparse(\"/foo/bar/baz.txt\", qr/\\.[^.]*/) ]","err_mask":""},{"err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename; [ fileparse q{authors/id/N/NA/NANIS/Crypt-SSLeay-0.64.tAr.Bz2}, qr{\\.(?:tar.*|zip)}i ];"},{"out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename; [ fileparse q{authors/id/N/NA/NANIS/Crypt-SSLeay-0.64.tar.fooBarBaz}, q{tar.*}, q{zip} ];"},{"out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename; [ fileparse q{authors/id/N/NA/NANIS/Crypt-SSLeay-0.64.tar.gz}, ( map qq{.$_}, map( qq{tar.$_}, qw(gz bz2 xz Z) ), q{zip} ) ];"},{"out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename; [ fileparse q{authors/id/N/NA/NANIS/Crypt-SSLeay-0.64.tar.gz}, q{tar.*}, q{zip} ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use File::Basename; [ fileparse q{authors/id/N/NA/NANIS/Crypt-SSLeay-0.64.tAr.gz}, q{.tar.*}, q{.zip} ];","err_mask":""},{"err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename; [ fileparse q{authors/id/N/NA/NANIS/Crypt-SSLeay-0.64.tar.gz.zip},  qr/\\.(?:zip|tar\\..*?)$/i ];"},{"code":"use File::Basename; [ fileparse q{authors/id/N/NA/NANIS/Crypt-SSLeay-0.64.ZIP}, qr{\\.(?:tar.*|zip)}i ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename; fileparse_set_fstype q{MSWin32}; [ fileparse q{authors/id/N/NA/NANIS/Crypt-SSLeay-0.64.tAr.gz}, q{.tar.*}, q{.zip} ];"},{"code":"use File::Basename; [map +(fileparse $_, qr/(?<=\\.)[^.]+/)[2], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use File::Basename; [map +(fileparse $_, qr/[^.]+/)[2], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use File::HomeDir; print File::HomeDir->my_data;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate File/HomeDir.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use Function::Parameters;","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: In fun foo: missing type name after '[' at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Function::Parameters; fun foo(A[[) {}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"    my(%{__rest}) = @_;\n    my $x = ${__rest}{'x'};\n    (%{__rest}) = ();\n    ();\n}","code":"use Function::Parameters; fun foo(:$x) {}  substr B::Deparse->new()->coderef2text(\\&foo), 1288","err_mask":""},{"err_mask":"","code":"use Function::Parameters qw(:strict); fun add ($x = return 0, $y = return $x) { return $x + $y } [ add(), add(2), add(2,3) ]","out":"ERROR: Too many arguments for fun add (expected 1, got 2) at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Function::Parameters qw((:strict);; fun add ($x = return 0, $y = return $x) { return $x + $y } [ add(), add(2), add(2,3) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \")\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use Function::Parameters qw(:strict); fun foo($bar) {print $bar, $bar}; foo(\"hola hoops \", \"error\");","out":"ERROR: Too many arguments for fun foo (expected 1, got 2) at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"use Function::Parameters qw(:strict); fun mynumbs :(@$;$) {}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Too few arguments for method new (expected 5, got 4) at (eval 1) line 1.\n","code":"use Function::Parameters qw(:strict); method new($class: :$name, :$value, :$path = '/', :$domain = undef, :$secure = undef, :$expires = undef, :$max_age = undef, :$httponly = undef) { [$name, $value] }  __PACKAGE__->new(name => \"Some_cookie\" -value => \"Some_value\")","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: In method new: missing named parameter: value at (eval 1) line 1.\n","err":"","code":"use Function::Parameters qw(:strict); method new($class: :$name, :$value, :$path = '/', :$domain = undef, :$secure = undef, :$expires = undef, :$max_age = undef, :$httponly = undef) { [$name, $value] }  __PACKAGE__->new(name => \"Some_cookie\", Value => \"Some_value\")","err_mask":""},{"out":"(anon)') if @_ > 0 and @_ % 2;\n    my(%{__rest}) = @_;\n    my $x = exists ${__rest}{'x'} ? delete ${__rest}{'x'} : Function::Parameters::_croak('In fun (anon): missing named parameter: x');\n    Function::Parameters::_croak('In fun (anon): no such named parameter: ' . join(', ', sort(keys %{__rest}))) if keys %{__rest};\n    ();\n}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Function::Parameters qw(:strict); substr B::Deparse->new->coderef2text(fun (:$x) {}), 1470"},{"code":"use Function::Parameters qw(:strict); substr B::Deparse->new->coderef2text( fun ($x, $y) {} ), 1077","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ripts'} = '';\n        $^H{'charnames_short'} = '0';\n        $^H{'charnames_stringified_inverse_ords'} = '';\n        $^H{'charnames_stringified_names'} = '';\n        $^H{'charnames_stringified_ords'} = '';\n    }\n    Function::Parameters::_croak('Too few arguments for fun (anon) (expected 2, got ' . @_ . ')') if @_ < 2;\n    Function::Parameters::_croak('Too many arguments for fun (anon) (expected 2, got ' . @_ . ')') if @_ > 2;\n    my($x, $y) = @_;\n    ();\n}","err":""},{"err_mask":"","code":"use Function::Parameters ':strict'; fun routine($one, $two, $three) {} routine(\"!\");","err":"","out":"ERROR: Too few arguments for fun routine (expected 3, got 1) at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Function::Parameters 'strict'; strict foo($x) { $x * 2 } foo 21","out":"ERROR: \"strict\" is not exported by the Function::Parameters module at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Function::Parameters; use warnings; fun lala :(_;) {}","err_mask":"","out_mask":"","err":"","out":""},{"out":"ERROR: Can't locate Hash/Util.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Hash::Util; $href = { \"foo\"=>\"bar\" }; Hash::Util::lock_ref_keys($href); map { print \"\\\"$_\\\":$href->{$_}\\n\" } %{$href}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Hindsight.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Hindsight 20/20;","err_mask":""},{"out":"ERROR: Can't locate HTML/Entities.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use HTML::Entities"},{"err":"","out":"ERROR: Can't locate HTTP/Tiny.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use HTTP::Tiny; my $http = HTTP::Tiny->new; $http->verify_SSL(1)"},{"code":"use if 0 1 == 0, strict; $foo = $bar; 1","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"use if 0 1 == 1, strict;","err_mask":"","out_mask":"","out":"","err":""},{"code":"use if 1.0 == 0, strict; $foo = $bar; 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"use if 1.0 ==\"\n"},{"code":"use if 1+0 == 0, strict; $foo = $bar; 1","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"use if (1 == 0), strict => \"\"; $foo = $bar; 1","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"use if 1 ==\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use if 1 == 0, strict => \"\"; $foo = $bar; 1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"use if 1 ==\"\n","code":"use if 1 == 0, strict; $foo = $bar; 1","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"use if 1 ==\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use if 1 == 1, strict; "},{"err_mask":"","code":"use if (1 == 1), strict; $foo = $bar; 1","out":"ERROR: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$bar\" requires explicit package name (did you forget to declare \"my $bar\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use if 1e0 == 0, strict; $foo = $bar; 1"},{"err_mask":"","code":"use if 9;","out":"ERROR: if version 9 required--this is only version 0.0606 at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Image/Magick.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Image::Magick; print Image::Magick->QuantumDepth","err_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"use integer; 1 / 2"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"use integer; 5/3"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[4,6]","err":"","code":"use integer; [ ~-5, -~5 ]","err_mask":""},{"code":"use IO::Handle; my $fh = IO::Handle->new; open $fh , q{>}, \\(my $str); $fh->say( q{foo} ); [ ref $fh ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"IO::Handle\"]"},{"out":"ERROR: Can't locate object method \"ilike\" via package \"IO::Handle\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use IO::Handle; my $io = IO::Handle->new; ilike $io"},{"out":"26","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"use IO::Handle; my $io = IO::Handle->new; length $io"},{"err_mask":"","code":"use IO::Handle; open my $fh, '>', \\my $buffer; ref $fh","err":"","out":"GLOB","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't locate IO/Socket/INET.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use IO::Socket::INET; IO::Socket::INET->new()"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate IO/Socket/INET.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use IO::Socket::INET;  my $sock = IO::Socket::INET->new(Timeout => 4, Proto => \"tcp\" , PeerAddr => \"www.gamezstorm.com\", PeerPort => 25) or die $!;  for(<$sock>){print $_ ,\"\\n\";}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate IPC/Shm.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":"","code":"use IPC::Shm","err_mask":""},{"err_mask":"","code":"use iso-8859-1; uc \"Ã±\"","err":"","out":"ERROR: Can't locate iso.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate iso8859.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use iso8859-1; uc \"Ã±\"","err_mask":""},{"err_mask":"","code":"use iso8859; uc \"Ã±\"","err":"","out":"ERROR: Can't locate iso8859.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"encode_json\" on unblessed reference at (eval 1) line 1, <STDIN> line 1.\n","code":"use JSON (); { abc => 123 }->JSON::encode_json","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{a => \"b\"}","code":"use JSON; from_json q~ { \"a\" : \"b\" } ~","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{\"name\":3},{\"name\":4}]","code":"use JSON; @list = ({name => 1}, {name => 2}, {name => 3}, {name => 4}); to_json([grep { $_->{name} > 2 } @list])","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"three\",\"four\"]","code":"use JSON; @list = ({name => 1, x => one}, {name => 2, x => two}, {name => 3, x => three}, {name => 4, x => four}); to_json([map {$_->{x}} grep { $_->{name} > 2 } @list])","err_mask":""},{"err_mask":"","code":"use JSON'MaybeXS;","err":"","out":"","out_mask":""},{"code":"use JSON::MaybeXS; [encode_json [''.1341015082000]]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"[\\\"1341015082000\\\"]\"]"},{"code":"use JSON::MaybeXS; [encode_json [1341015082000]]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"[1341015082000]\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: hash- or arrayref expected (not a simple scalar, use allow_nonref to allow this) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use JSON::MaybeXS; [encode_json 1341015082000]","err_mask":""},{"out":"{\"foo\":\"1.20\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use JSON::MaybeXS; encode_json { foo => '1.20' }"},{"code":"use JSON::MaybeXS; encode_json { foo => '1.22' }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{\"foo\":\"1.22\"}","err":""},{"err":"","out":"{\"foo\":\"1.22\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use JSON::MaybeXS; encode_json { foo => sprintf '%.2f', 1.22 }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Cpanel::JSON::XS","code":"use JSON::MaybeXS; JSON()","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\"\\u0007\"","code":"use JSON::MaybeXS; JSON::MaybeXS->new(allow_nonref => 1, ascii => 0)->encode(\"\\07\")","err_mask":""},{"code":"use JSON::MaybeXS; JSON::MaybeXS->new(allow_nonref => 1, ascii => 1)->encode(\"\\x{2603}\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\"\\u2603\"","err":""},{"code":"use JSON::MaybeXS; JSON::MaybeXS->new(allow_nonref => 1)->encode(\"\\07\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\"\\u0007\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,1,2,3,4,5,6,7,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]","code":"use JSON::MaybeXS; my $j = JSON::MaybeXS->new(allow_nonref => 1, ascii => 1); [grep { $j->encode(chr($_)) =~ /\\\\u/ } 0..127]","err_mask":""},{"err_mask":"","code":"use JSON::MaybeXS; my $json = JSON::MaybeXS->new(allow_nonref => 1, ascii => 1); my $encoded = $json->encode(\"\\x{2603}\"); [$encoded, $json->decode($encoded)]","out":"[\"\\\"\\\\u2603\\\"\",\"\\x{2603}\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"\\\"\\\\u2603\\\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use JSON::MaybeXS; my $json_str = JSON::MaybeXS->new(allow_nonref => 1, ascii => 1)->encode(\"\\x{2603}\"); [$json_str]"},{"err_mask":"","code":"use JSON::MaybeXS; my %test = (name => JSON->true); JSON::MaybeXS->new(pretty => 1)->encode(\\%test)","err":"","out":"{\n   \"name\" : true\n}\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"[\\\"1341015082000\\\"]\"]","code":"use JSON::MaybeXS; my $var = 1341015082000; [encode_json [\"$var\"]]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{\"1\":2},{\"3\":4},{\"5\":6}]","err":"","code":"use JSON; my $aoh = [{1=>2},{3=>4}];my $str=encode_json($aoh); my $new_aoh = decode_json($str); push @{ $new_aoh  }, {5=>6}; my $new_str = encode_json($new_aoh); $new_str","err_mask":""},{"err":"","out":"[\"0\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use JSON; my $var = ~~\"0\"; encode_json([$var])"},{"code":"use JSON; use strict; my %test = ( name => \\1, ); print JSON->new->pretty->encode(\\%test);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{\n   \"name\" : true\n}\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\x{1d11e}\"]","code":"use JSON::XS; decode_json('[\"\\ud834\\udd1e\"]')","err_mask":""},{"code":"use less 'abomination';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate less.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use Lingua::EN::Numbers qw(num2en);Â sub isodd {return (num2en shift) =~ /e.?$/}Â ","err":"","out":"ERROR: Can't locate Lingua/EN/Numbers.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"use List::MoreUtils 'any'; if (any {$_ eq 'a'}, 'b', 'c') { 1 }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[3,4],[1,2,5,6,7,8]]","code":"use List::MoreUtils 'firstidx'; sub merge_refs { my $input = shift; return $input unless @_; my @indices; for my $ref (@_) { push @indices, firstidx { $ref == \\$_ } @$input }; my $merged = $input->[pop @indices]; unshift @$merged, @{splice @$input, $_, 1} for @indices; return $input } my $x = [ [1,2], [3,4], [5,6,7,8] ]; merge_refs $x, \\$x->[0], \\$x->[2];","err_mask":""},{"out":"[1,2,3,\"above\",4,5,6,7]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::MoreUtils qw(firstidx); my $y = 3; my @list = (1,2,3,4,5,6,7); splice @list, $_, 0, 'above' for grep defined, firstidx { $_ > $y } @list; \\@list"},{"err_mask":"","code":"use List::MoreUtils qw(uniq); my %x = (x => {a => 1, c => 2}, z => { a => 3 }); my %y = (x => {b => 3}, z => {a => 4}); my %z = %x; for my $k (uniq keys(%x), keys(%y)) { $z{$k}{$_} = $y{$k}{$_} for grep !exists $x{$k}{$_}, keys %{$y{$k}} } \\%z","err":"","out":"{x => {b => 3,c => 2,a => 1},z => {a => 3}}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use List::MoreUtils qw/uniq/; [ sort uniq qw/a b c a/ ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\",\"a\"]","err":""},{"code":"use List::MoreUtils qw/uniq/; [ sort(uniq qw/a b c a/) ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\",\"a\"]","err":""},{"err":"","out":"[\"a\",\"b\",\"c\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::MoreUtils qw/uniq/; [ sort(uniq(qw/a b c a/)) ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\"]","err":"","code":"use List::MoreUtils qw/uniq/; [ uniq qw/a b c a/ ];","err_mask":""},{"err_mask":"","code":"use List::MoreUtils qw(zip); $ab = [ \"a\",\"b\"]; $xyz = [\"u\",\"v\",\"a\",\"b\",\"w\"]; grep defined, @{ { zip @$xyz, @$xyz } }{@$ab} == @$ab","err":"","out":"1","out_mask":"Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"&zip \\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::MoreUtils qw(zip); my @list = qw( AAA BBB CCC ); [ &zip \\@list, [('|') x @list - 1] ]"},{"code":"use List::MoreUtils qw(zip); my @list = qw( AAA BBB CCC ); [ zip @list, ('|') x @list - 1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Type of arg 2 to List::MoreUtils::mesh must be array (not subtraction (-)) at (eval 1) line 1, near \"1 ]\"\n","err":""},{"err":"","out":"[\"AAA\",-1,\"BBB\",undef,\"CCC\",undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::MoreUtils qw(zip); my @list = qw( AAA BBB CCC ); [ &zip(\\@list, [('|') x @list - 1]) ]  # hardly worth it"},{"out":"ERROR: List::Util version 9999 required--this is only version 1.45 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/Exporter/Heavy.pm line 125, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util 0.0 qw(9999);"},{"err":"","out":"ERROR: List::Util version 9999 required--this is only version 1.45 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/Exporter/Heavy.pm line 125, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util 0 qw(9999);"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use List::Util 1.33 'any';@array = qw(1 2 3); print \"match\" if(any{ $_ eq '4'} @array);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: List::Util version 9999 required--this is only version 1.45 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/Exporter/Heavy.pm line 125, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use List::Util '9999';","err_mask":""},{"err_mask":"","code":"use List::Util (9999);","err":"","out":"ERROR: List::Util version 9999 required--this is only version 1.45 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/Exporter/Heavy.pm line 125, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use List::Util 'first';  first { goto HERE } 1, 2, 3; HERE: print \"hello\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't \"goto\" out of a pseudo block at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"1.45","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util; $List::Util::VERSION"},{"out_mask":"Ã¿","out":"3","err":"","code":"use List::Util 'max';max 2,3;","err_mask":""},{"code":"use List::Util 'max';max 2,3;max(2,3);","err_mask":"","out_mask":"Ã¿","out":"3","err":""},{"err_mask":"","code":"use List::Util 'max';  max(4, 9)","err":"","out":"9","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"use List::Util; my $c = [qw(a b c)]; print \"1\" if List::Util::any { $_ eq \"a\" } @{$c}","err_mask":""},{"out_mask":"Ã¿","out":"0","err":"","code":"use List::Util 'product';  product 0, 1","err_mask":""},{"code":"use List::Util () qw(9999);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \") qw(9999)\"\n"},{"err_mask":"","code":"use List::Util qw(9999);","out":"ERROR: List::Util version 9999 required--this is only version 1.45 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/Exporter/Heavy.pm line 125, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use List::Util qw(any 9999);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: List::Util version 9999 required--this is only version 1.45 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/Exporter/Heavy.pm line 125, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use List::Util qw(any); my @x = qw(a b c); my @y = qw(d e f); for my $_ (@x) { print \"found\" if any { /b/ } @y } # I know it's in Texas, probably in Tennnessee...","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\nType of arg 1 to List::Util::any must be block or sub {} (not reference constructor) at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"use List::Util qw/first/; --$i if first { $i++; /z/ } qw/foo bar baz/   # even more vomit inducing"},{"err":"","out":"[1,2,3,\"above\",5,6,7]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util qw(first); my $y = 3; my @list = (1,2,3,4,5,6,7); $_ = 'above' for grep defined, first { $_ > $y } @list; \\@list # ?"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[30]","code":"use List::Util qw(max); my $str = '( G1 Z0.252 F7200.000 )'; [ max 30, $str =~ /G1 Z(\\d+\\.\\d+)/ ];","err_mask":""},{"code":"use List::Util qw(max); my $str = '( G1 Z0.252 F7200.000 )'; my ($value) = $str =~ /G1 Z(\\d+\\.\\d+)/; max 30, $value","err_mask":"","out_mask":"Ã¿Ã¿","out":"30","err":""},{"code":"use List::Util qw(min); [ map \"$_\", \\&min, \\&List::Util::min ] # Exporter gives the same value for both","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"CODE(0x16cb468)\",\"CODE(0x16cb468)\"]","err":""},{"err":"","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, at EOF\nType of arg 1 to List::Util::pairmap must be block or sub {} (not reference constructor) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util qw( pairmap ); do { my %pairs; pairmap { push $pairs{$a}, $b; } ( \"x\", \"1\", \"x\", \"2\", \"y\", \"baz\" ); \\%pairs; };"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{x => [1,2],y => [\"baz\"]}","err":"","code":"use List::Util qw( pairmap ); my %pairs; pairmap { push @{ $pairs{$a} }, $b; } ( \"x\", \"1\", \"x\", \"2\", \"y\", \"baz\" ); \\%pairs","err_mask":""},{"err":"","out":"[\"T\",\"F\",\"T\",\"T\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util qw(pairmap); [ pairmap { !($a * !$b) ? 'T' : 'F' } qw(1 1 1 0 0 1 0 0) ]"},{"out":"[\"T\",\"F\",\"T\",\"T\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util qw(pairmap); [ pairmap { !$a || $b ? 'T' : 'F' } qw(1 1 1 0 0 1 0 0) ]"},{"err_mask":"","code":"use List::Util qw(product); say product 1..10;","out":"3628800\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a list of errors\"]","err":"","code":"use List::Util qw(reduce); my @ar = qw /a list of errors/; [reduce {$a.\" \".$b} @ar]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,2,3,3,4,4,5]","code":"use List::Util qw(reduce); my @output; reduce { push @output, ($a, $b); $b } qw(1 2 3 4 5); \\@output","err_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"use List::Util qw(reduce); reduce {$1*$b} 1..10;"},{"code":"use List::Util qw(reduce); reduce {$a*$b} 1..10;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"3628800"},{"err_mask":"","code":"use List::Util qw(sum0); [ map sum0(@$_), grep $_->[0] ** 2 == $_->[1] ** 2 + $_->[2] ** 2, map { my ($x, $y) = @$_; map [ $x, $y, $_ ], 1..$y } map { my $x = $_; map [ $x, $_ ], 1..$x } 1..10 ] # probably wrong, but you can see why the map approach isn't great here","out":"[12,24]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use List::Util qw(sum); chr sum map ord, qw(A B C);","err":"","out":"Ã","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[262]","err":"","code":"use List::Util qw/sum/; [ sum '92.168.1.1' =~ /(\\d+)/g ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"198","code":"use List::Util qw(sum); sum map ord, qw(A B C);","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use List::Util 'reduce';  reduce { die \"BOK\" } 1"},{"err":"","out":"ERROR: BOK at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util 'reduce';  reduce { die \"BOK\" } 1, 2"},{"err_mask":"","code":"use List::Util 'reduce';  reduce { die \"BOK\" } 1. 2","out":"ERROR: syntax error at (eval 1) line 1, near \"1. 2\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use List::UtilsBy;"},{"out":"[[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"],[\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\"],[\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::UtilsBy 'bundle_by'; my @array = split '', 'abcdefghijklmnopqrstuvwxyz'; [bundle_by { [@_] } 9, @array]"},{"code":"use List::UtilsBy qw(partition_by); +{ partition_by { $_ % 3 } 1..12 } # perlbot has all the things","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{1 => [1,4,7,10],0 => [3,6,9,12],2 => [2,5,8,11]}","err":""},{"code":"use List::UtilsBy qw(sort_by); [ sort_by { $_->{name} } { name => 'x' }, { name => 'y' }, { name => 'z' } ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{name => \"x\"},{name => \"y\"},{name => \"z\"}]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[7,7,7]","code":"use List::UtilsBy qw(zip_by); @a=map{$_%10}zip_by{$_[0]+$_[1]}[9,5,3],[map{9-$_}1,7,6];++@a[-1]; [@a]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"topic\",\"alias:topic2\"]","code":"use List::UtilsBy 'sort_by'; @topics = qw/alias:topic alias:topic2 topic/; %t =map { s/^alias://r => $_ } sort_by { ! /^alias:/ } @topics; [ values %t ]","err_mask":""},{"code":"use List::UtilsBy 'sort_by'; @topics = qw/alias:topic topic2 topic/; %t =map { (/^alias:/ ? $_ : \"alias:$_\") => $_ } sort_by { ! /^alias:/ } @topics; \\%t","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{\"alias:topic\" => \"topic\",\"alias:topic2\" => \"topic2\"}"},{"out":"[\"topic\",\"topic2\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::UtilsBy 'sort_by'; @topics = qw/alias:topic topic2 topic/; %t =map { s/^alias://r => $_ } sort_by { ! /^alias:/ } @topics; [ values %t ]"},{"out":"{\"alias:topic\" => \"topic\",\"alias:topic2\" => \"topic2\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::UtilsBy 'sort_by'; @topics = qw/topic topic2 alias:topic/; %t =map { (/^alias:/ ? $_ : \"alias:$_\") => $_ } sort_by { ! /^alias:/ } @topics; \\%t"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{\"alias:topic\" => \"alias:topic\",\"alias:topic2\" => \"topic2\"}","err":"","code":"use List::UtilsBy 'sort_by'; @topics = qw/topic topic2 alias:topic/; %t =map { (/^alias:/ ? $_ : \"alias:$_\") => $_ } sort_by { /^alias:/ } @topics; \\%t","err_mask":""},{"err":"","out":"AaBbCc","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::UtilsBy 'zip_by'; my $u = 'ABC'; my $l = 'abc'; join '', zip_by { @_ } map { [split //] } $u, $l"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"AaBbCc","err":"","code":"use List::UtilsBy 'zip_by'; my $u = 'ABC'; my $l = 'abc'; join '', zip_by { @_ } [split //, $u], [split //, $l]","err_mask":""},{"code":"use List::Util 'sum'; sum map { 1 / $_ } ( 1,3,5,7,9,11,13,15,17 )","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"2.08062395121219","err":""},{"code":"use List::Util 'sum'; sum map { 1 / $_ } ( 1,3,5,7,9,13,15,17,19 )","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2.04234643925046"},{"err":"","out":"ERROR: Can't call method \"max\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util; use strict; use warnings; my $y = max $a, $b; # perl5.20 gives me \"Useless use of a variable in void context\" there, not sure why this one doesn't"},{"err":"","out":"ERROR: Can't locate LWP/UserAgent.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use LWP::UserAgent; my $ua = LWP::UserAgent->new; length $ua"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"use manager::dedicated::dedicated.\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use manager::dedicated::dedicated.fr;"},{"out_mask":"","err":"","out":"","code":"use Math::BigInt","err_mask":""},{"err_mask":"","code":"use Math::BigInt; [157 + \"9.95\" + Math::BigInt->new(13) + 0]","err":"","out":"[bless( {sign => \"NaN\",value => [0]}, 'Math::BigInt' )]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Math::BigInt; 1e1000","out":"Inf","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out":"NaN","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use Math::BigInt; 2790**2753 % 3233"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"3.14159265358979","code":"use Math::BigInt; atan2(0, -1);","err_mask":""},{"err":"","out":"bless( {sign => \"+\",value => [176640045,432902008,3]}, 'Math::BigInt' )","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Math::BigInt; Math::BigInt->new(\"3432902008176640045\")"},{"code":"use Math::BigInt; my $x = Math::BigInt->new(2000); [ $x->as_hex ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"0x7d0\"]"},{"code":"use Math::BigInt; $x=Math::BigInt->new(4); print $x->bfac();","err_mask":"","out_mask":"Ã¿Ã¿","out":"24","err":""},{"err_mask":"","code":"use Math::BigInt; $x=Math::BigInt->new(4); $y=Math::BigInt->new(2); print $x->bfac(); print $y->bfac();","out":"242","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Math::Complex; sqrt -1","out":"ERROR: Can't locate Math/Complex.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Math/Round.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Math::Round; round(3.2939232942 * 100) / 100","err_mask":""},{"err":"","out":"ERROR: Can't locate Math.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Math; sqrt -1;"},{"err_mask":"","code":"use MIME::Base64;","err":"","out":"ERROR: Can't locate MIME/Base64.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Missing::Thing;","err":"","out":"ERROR: Can't locate Missing/Thing.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Module::Build","err":"","out":"ERROR: Can't locate Module/Build.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Module::Corelist; [ Module::Corelist->first_release( 'experimental' ) ]","out":"ERROR: Can't locate Module/Corelist.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Module::CoreList; [ Module::CoreList->first_release( 'experimental' ) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Module/CoreList.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use Mojo::DOM;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Mojo/DOM.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Can't locate Mojo/DOM.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Mojo::DOM; my $dom = Mojo::DOM->new('<html><head></head><body></body></html>'); $dom->at('head')->append_content('<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"></meta>'); $dom->to_string"},{"code":"use Mojo::DOM; my $dom = Mojo::DOM->new('<html><head></head><body></body></html>'); $dom->at('head')->append('<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"></meta>'); $dom","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Mojo/DOM.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"ERROR: Can't locate Mojo/DOM.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Mojo::DOM; my $dom = Mojo::DOM->new('<html><head></head><body></body></html>'); $dom->at('head')->append('<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"></meta>'); $dom->to_string"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Mojo/DOM.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Mojo::DOM; use Mojo::DOM::CSS; use Mojo::Collection;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Mojo/JSON.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Mojo::JSON; my $var = 1341015082000; [encode_json [\"$var\"]]","err_mask":""},{"err_mask":"","code":"use Mojo::Util 'punycode_decode'; encode 'UTF-8', punycode_decode 'wkr'","err":"","out":"ERROR: Can't locate Mojo/Util.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Mojo::Util 'punycode_decode'; encode 'UTF-8', punycode_decode zkr","out":"ERROR: Can't locate Mojo/Util.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Mojo/Util.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Mojo::Util 'punycode_encode', 'decode'; punycode_encode decode('UTF-8', 'â')","err_mask":""},{"err_mask":"","code":"use Mojo::Util 'punycode_encode'; punycode_encode decode('UTF-8', 'â')","out":"ERROR: Can't locate Mojo/Util.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't locate Moo.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Moo;"},{"out_mask":"","out":"","err":"","code":"use Moose ()","err_mask":""},{"err_mask":"","code":"use Moose;","err":"","out":"","out_mask":""},{"out_mask":"Ã¿","out":"7","err":"","code":"use Moose; 7;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Net/HTTP/Spore.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Net::HTTP::Spore;","err_mask":""},{"err_mask":"","code":"use Number::Format qw(:subs :vars); $THOUSANDS_SEP = '.'; my $a = 123456789; say format_number($a);","out":"ERROR: Can't locate Number/Format.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate open.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use open IN  => \":crlf\", OUT => \":bytes\"; [ ${^OPEN} ]","err_mask":""},{"err_mask":"","code":"use or die perl;","out":"ERROR: Can't locate or.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"forty two\"]","code":"use overload q|\"\"| => sub { 42 }; my @a; $a[42] = 'forty two'; [ $a[bless {}, 'main'] ]","err_mask":""},{"code":"use overload qw,\"\",=> sub { die }; bless {}, bless []; 42;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use overload '\"\"' => sub { \"\" }, \"bool\" => sub { 1 }; my $foo = bless []; if( $foo ) { print \"_${foo}\" } else { print \"aww\" }","err":"","out":"_","out_mask":"Ã¿"},{"err_mask":"","code":"use overload '@{}' => sub { print 'converting to array'; ['42'] }; my $foo; bless \\$foo; (\\$foo)->[0];","out":"converting to array","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::primt called at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use overload '@{}' => sub { print 'converting to array'; ['42'] }; my $foo; bless \\$foo; primt (\\$foo)->[0];","err_mask":""},{"code":"use overload '@{}' => sub { print 'converting to array'; ['42'] }; my $foo; bless \\$foo; print + (\\$foo)->[0];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"converting to array42"},{"out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"","code":"use overload '+' => sub { print \"foo\" }; my $x = bless []; $x + 2;","err_mask":""},{"code":"use overload '@{}' => sub { say 'converting to array'; ['42'] }; my $foo; bless \\$foo; (\\$foo)->[0];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"converting to array\n","err":""},{"code":"use overload '\"\"' => sub { shift @{ shift() } || '' }; $, = bless [' another ', ' hacker']; print qw(Just Perl ,);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Just another Perl hacker,"},{"err_mask":"","code":"use overload '\"\"' => sub { \"wibble\" }; $x = []; bless $x; $y = []; bless $y, $x; ref $y","err":"","out":"wibble","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't locate Perl.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Perl;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"3.29","err":"","code":"use POSIX; floor((3.2949232942 + 0.005) * 100)/100","err_mask":""},{"out":"3.3","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use POSIX; floor((3.2959232942 + 0.005) * 100)/100"},{"err_mask":"","code":"use POSIX qw(atan); 4*atan(1) # if you disapprove of passing multiple parameters to a function, there are alternatives","out":"3.14159265358979","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use POSIX qw(floor); floor(5/3)","out":"1","err":"","out_mask":"Ã¿"},{"code":"use POSIX qw/locale_h/; say setlocale(LC_TIME, \"ja_JP.utf-8\");","err_mask":"","out_mask":"Ã¿","err":"","out":"\n"},{"out":"01.2345","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use POSIX qw( modf ); my $n = 1.2345; sprintf q{%02d%s}, reverse map { s/^0+//r } modf $n; ### leobut"},{"out_mask":"Ã¿Ã¿","out":"01","err":"","code":"use POSIX qw( modf ); my $n = 1; sprintf q{%02d%s}, reverse map { s/^0+//r } modf $n; ### leobut","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[78643200]","code":"use POSIX qw(sysconf); [ sysconf(_SC_PAGE_SIZE) ]","err_mask":""},{"err_mask":"","code":"use POSIX; setlocale(LC_NUMERIC, \"de_DE\"); sprintf(\"%.2f\", 23.45)","out":"23.45","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Psychic::Hotline;","err":"","out":"ERROR: Can't locate Psychic/Hotline.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Quote::Code","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Quote/Code.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":""},{"code":"use Quote::Code; qc{!}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Quote/Code.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"ERROR: Can't locate Quote/Code.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Quote::Code; [ qcw< a {$_} b > ]"},{"code":"[ 'user:anything-else:' !~ /^user:!!:$/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"out":"1","err":"Compiling REx \"^+\"\nFinal program:\n   1: CURLYX[0]{1,INFTY} (5)\n   3:   SBOL /^/ (4)\n   4: WHILEM[1/1] (0)\n   5: NOTHING (6)\n   6: END (0)\nanchored(SBOL) minlen 0 \nMatching REx \"^+\" against \"\"\n   0 <> <>                   |   0| 1:CURLYX[0]{1,INFTY}(5)\n   0 <> <>                   |   1|  4:WHILEM[1/1](0)\n                             |   1|  whilem: matched 0 out of 1..32767\n   0 <> <>                   |   2|   3:SBOL /^/(4)\n   0 <> <>                   |   2|   4:WHILEM[1/1](0)\n                             |   2|   whilem: matched 1 out of 1..32767\n                             |   2|   whilem: empty match detected, trying continuation...\n   0 <> <>                   |   3|    5:NOTHING(6)\n   0 <> <>                   |   3|    6:END(0)\nMatch successful!\nFreeing REx: \"^+\"\n","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use re 'debug'; /^+/"},{"code":"use re 'debug'; /a(bc)+/o;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Compiling REx \"a(bc)+\"\nFinal program:\n   1: EXACT <a> (3)\n   3: CURLYM[1]{1,INFTY} (13)\n   7:   EXACT <bc> (11)\n  11:   SUCCEED (0)\n  12: NOTHING (13)\n  13: END (0)\nanchored \"abc\" at 0 floating \"bc\" at 1..9223372036854775807 (checking anchored) minlen 3 \nFreeing REx: \"a(bc)+\"\n","out":""},{"err_mask":"","code":"use Regexp::Assemble;","err":"","out":"ERROR: Can't locate Regexp/Assemble.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Regexp::Common; (\"12 bananas buys you 0.1231e10 ruby\" =~ /$RE{num}{real}/g)[1]","out":"0.1231e10","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Regexp::Common; print \"ok\" if (\"foo bar)\" eq \"(foo bar))\" =~ s/($RE{balanced}{-parens => \"()\"})/$1/r);","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use Regexp::Common qw/net/; my $ip = q(100.10.1.101); [$ip =~ /$RE{net}{IPv4}/]"},{"code":"use Regexp::Common qw/net/; my $ip = q(100.10.1.101); [$ip =~ /\\[$RE{net}{IPv4}\\]/]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"code":"use Regexp::Common qw/net/; my $ip = q(100.10.1.101); [$ip =~ /($RE{net}{IPv4})/] # I meant that","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"100.10.1.101\"]"},{"out":"<b>11:22</b>","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Regexp::Common qw( net ); $_ = q(00:11:22:33:44:55); if (/$RE{net}{MAC}{-keep}/) { print \"<b>$3:$4</b>\"; }"},{"err_mask":"","code":"use Return::MultiLevel;","err":"","out":"ERROR: Can't locate Return/MultiLevel.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ 'user:!!:' !~ /^user:!!:$/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]"},{"out_mask":"Ã¿","err":"","out":"1","code":"'user' =~ /user(?!-agent)/","err_mask":""},{"out_mask":"","err":"","out":"","code":"use Scalar::Util","err_mask":""},{"out":"[\"Regexp\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util 'blessed'; my $re = qr/hai/; [blessed $re]"},{"err_mask":"","code":"use Scalar::Util 'looks_like_number'; looks_like_number '10%s'","out":"","err":"","out_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"use Scalar::Util 'looks_like_number'; looks_like_number('123abc   ')"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"use Scalar::Util 'looks_like_number'; looks_like_number('     9') ? 1 : 0"},{"err":"","out":"[123,\"4.5\",\"5E7\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util 'looks_like_number'; my $s = qq{ 123 4.5 0xFF 5E7 }; [ grep looks_like_number $_, split /\\s+/, $s ];"},{"err_mask":"","code":"use Scalar::Util 'looks_like_number'; my $s = qq{ 123 4.5 0xFF 5E7 }; [ map 0+$_, grep looks_like_number $_, split /\\s+/, $s ];","err":"","out":"[123,\"4.5\",50000000]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Scalar::Util qw(dualvar); my $foo = dualvar 42, \"\"; if ($foo) { print \"_${foo}_\"; } else { print \"aww\"; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"aww","err":""},{"code":"use Scalar::Util qw/dualvar/; my $i = dualvar 1, 'forty two'; my @a = qw/one two/; [ $a[ $i ], $a[ \"$i\" ] ]; # fun :)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"two\",\"one\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[12,\"twelve\"]","err":"","code":"use Scalar::Util qw(dualvar); my $x = dualvar 12, 'twelve'; my $y = $x; [ 0+$y, \"$y\" ] # so something like this","err_mask":""},{"code":"use Scalar::Util qw/dualvar/; my $x = dualvar 42, 'forty two'; [$x+0, \"$x\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[42,\"forty two\"]","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util qw/dualvar/; my $x = dualvar 42, 'forty two'; [$x+0, \"$x\"]>"},{"out":"[\"foo\",42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util qw/dualvar/; $x = dualvar 42, 'foo'; [ $x.'', $x+0 ]"},{"out_mask":"Ã¿","out":"1","err":"","code":"use Scalar::Util qw(looks_like_number); looks_like_number '4'","err_mask":""},{"err_mask":"","code":"use Scalar::Util qw(looks_like_number); looks_like_number 'infinity' ? '\\o/' : '/o\\\\'","out":"\\o/","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"use Scalar::Util qw(looks_like_number); looks_like_number 'Inf'  # wat","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"use Scalar::Util qw(looks_like_number); looks_like_number 'nan'"},{"err_mask":"","code":"use Scalar::Util qw(looks_like_number); looks_like_number 'NAN'","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"","out":"","err":"","code":"use Scalar::Util qw(looks_like_number); looks_like_number 'nandos';","err_mask":""},{"code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'sNan' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"out":"{23 => \"Yes\",106000 => \"Yes\",-32 => \"Yes\",\"123.456\" => \"Yes\",255 => \"Yes\",\"0xFF\" => \"No\",FF => \"No\",abc => \"No\",0 => \"Yes\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util qw(looks_like_number); +{ map { $_ => looks_like_number $_ ? q{Yes} : q{No} } 0, 123.456, 10.6E4, q{abc}, q{FF}, q{0xFF}, 0xFF, +23, \"-32\" }; ### Seems to fill my needs. I'm wondering if there are any gotchas."},{"out_mask":"Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err":"","out":"[60644232,60644232]","code":"use Scalar::Util qw(refaddr); my $meow = []; [refaddr($meow), refaddr(\\@{$meow})]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"use Scalar::Util qw( refaddr); sub foo { } my $foo = \\&foo; my $bar = \\&bar; [ refaddr $foo eq refaddr $bar ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","code":"use Scalar::Util qw/reftype blessed/; my $obj = bless {}, 'ARRAY'; my $obj2 = bless {}, 'Foo'; { obj => [ ref($obj), reftype($obj), blessed($obj) ], obj2 => [ref($obj2), reftype($obj2), blessed($obj2)], ref => [ ref([]), reftype([]), blessed([]) ]","err_mask":""},{"err_mask":"","code":"use Scalar::Util qw/reftype blessed/; my $obj = bless {}, 'ARRAY'; my $obj2 = bless {}, 'Foo'; { obj => [ ref($obj), reftype($obj), blessed($obj) ], obj2 => [ref($obj2), reftype($obj2), blessed($obj2)], ref => [ ref([]), reftype([]), blessed([]) ] }","err":"","out":"{obj2 => [\"Foo\",\"HASH\",\"Foo\"],ref => [\"ARRAY\",\"ARRAY\",undef],obj => [\"ARRAY\",\"HASH\",\"ARRAY\"]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Scalar::Util qw(reftype); my $x = bless [7,8,9], q{FOO}; [ qq{$x}, ref $x, reftype $x ]; # Cool :)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"FOO=ARRAY(0x4dbab88)\",\"FOO\",\"ARRAY\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"IO\"]","err":"","code":"use Scalar::Util qw,reftype,; [ reftype *STDOUT{IO} ]","err_mask":""},{"code":"use Scalar::Util qw(weaken); my $v; $v = sub { my $x = $v; 1 }; $v->(); weaken $v; die if $v # dropping the extra var and moving weaken() after the call looks okay to me","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"use Scalar::Util 'refaddr'; my $foo = []; my $addr = sprintf '%x', refaddr $foo; my %bar = ($foo => 1, \"ARRAY(0x$addr)\" => 1); \\%bar","err":"","out":"{\"ARRAY(0x4d64b88)\" => 1}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Scalar::Util 'refaddr'; my $h = { foo => 42 }; my $h2={foo=>43}; %$h=%$h2; [ refaddr($h), refaddr($h2), $h ]","out":"[85007240,81260968,{foo => 43}]","err":"","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[73726856,69980584,{}]","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util 'refaddr'; my $h = { foo => 42 }; my $h2={foo=>43}; %$h=%h2; [ refaddr($h), refaddr($h2), $h ]"},{"err":"","out":"ERROR: Can't call method \"mh\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util 'refaddr'; my $h = { foo => 42 }; my $hadd1 = refaddr $h; my $h2={foo=>43}; mh $h2add1 = refaddr $h2; %$h=%h2; [ $hadd1, $h2add1, refaddr($h), refaddr($h2), $h ]"},{"err_mask":"","code":"use Scalar::Util 'refaddr'; my $h = { foo => 42 }; my $hadd1 = refaddr $h; my $h2={foo=>43}; my $h2add1 = refaddr $h2; %$h=%$h2; [ $hadd1, $h2add1, refaddr($h), refaddr($h2), $h ]","err":"","out":"[57269128,53522856,57269128,53522856,{foo => 43}]","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err":"","out":"[76860296,73114024,76860296,73114024,{}]","code":"use Scalar::Util 'refaddr'; my $h = { foo => 42 }; my $hadd1 = refaddr $h; my $h2={foo=>43}; my $h2add1 = refaddr $h2; %$h=%h2; [ $hadd1, $h2add1, refaddr($h), refaddr($h2), $h ]","err_mask":""},{"err":"","out":"[60017544,60017544]","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err_mask":"","code":"use Scalar::Util 'refaddr'; my $h = { foo => 42 }; [ refaddr($h), refaddr(\\%{$h}) ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,\"SCALAR\"]","code":"use Scalar::Util 'reftype'; eval: $x = 'three'; $y = \\$x; [ reftype $x, reftype $y ] #as contrast","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"REF\",\"REF\"]","err":"","code":"use Scalar::Util 'reftype'; eval: $x = 'three'; $y = \\$x; $x = \\$x; [ reftype $x, reftype $y ]","err_mask":""},{"code":"use Scalar::Util 'reftype'; my $r = bless [], \"HASH\";  reftype $r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ARRAY","err":""},{"code":"use Scalar::Util 'reftype'; [ ref undef, reftype undef ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",undef]","err":""},{"out":"[{},undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util 'weaken'; my $foo = {}; my $bar = {}; my $closure; { my ($foo2, $bar2) = ($foo, $bar); $closure = sub { $foo2 }; } weaken $foo; weaken $bar; [$foo, $bar]"},{"err":"","out":"ERROR: Can't locate signatures.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use signatures; sub foo () { 5 } say foo, \"bar\";"},{"err_mask":"","code":"use Socket 'inet_aton'; [unpack 'N', inet_aton '92.168.1.1']","err":"","out":"ERROR: Can't locate Socket.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Socket 'pack_sockaddr_in6'; length pack_sockaddr_in6( 80, \"\\0\" x 16 )","err":"","out":"ERROR: Can't locate Socket.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Socket::pack_sockaddr_in6; length pack_sockaddr_in6( 80, \"\\0\" x 16 )","out":"ERROR: Can't locate Socket/pack_sockaddr_in6.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Socket qw(inet_pton AF_INET6); my $ip_addr = inet_pton(AF_INET6, \"::ffff:127.0.0.1\"); $ip_addr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Socket.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use Socket;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(8989,inet_aton(\"107.191.117.124\")))){print S hi};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Socket.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use Storable qw,dclone,; my @arr = ([], []); my $copyref = dclone(\\@arr); $copyref->[0][0] = 3; \\@arr","err":"","out":"[[],[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"SCALAR(0x41ffba0)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Storable qw(nfreeze thaw); my $x = 42; print thaw(nfreeze(\\$x)); # easier to see the issue if you just leave out the pack/unpack, though"},{"code":"use Storable; use strict; use warnings; my $x = { A => 123, B => q/foo/, C => [ qw(x y z) ] }; my $y = Storable::dclone $x; [ $x, $y ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{A => 123,B => \"foo\",C => [\"x\",\"y\",\"z\"]},{A => 123,B => \"foo\",C => [\"x\",\"y\",\"z\"]}]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't store REGEXP items at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Storable; use strict; use warnings; my $x = { A => 123, B => qr/foo/, C => [ qw(x y z) ] }; my $y = Storable::dclone $x; [ $x, $y ];","err_mask":""},{"err_mask":"","code":"use Storable; use strict; use warnings; my $x = { A => 123, B => qr/foo/, C => [ qw(x y z) ] }; my $y = Storable::dclone $x; [ $x, $y ]; ### Why is it so hard to clone Regexp objects?","err":"","out":"ERROR: Can't store REGEXP items at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict;","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[60]","err":"","code":"use strict; [ %~, @/, $= ]","err_mask":""},{"out_mask":"","err":"","out":"","code":"use strict; 0->[0];","err_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"use strict; &{0 == &{0 == 0}} * 0"},{"out":"","err":"","out_mask":"","err_mask":"","code":"${use strict; 1;};"},{"err_mask":"","code":"use strict; ${;1}","out":"ERROR: Can't use string (\"1\") as a SCALAR ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use strict; ${1}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use string (\"2\") as a SCALAR ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; ${1 + 1}","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"use strict; 1234->{key}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use string (\"57\") as a SCALAR ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; \"${ 12+45 }\"","err_mask":""},{"err_mask":"","code":"use strict; ${2}","out":"","err":"","out_mask":""},{"code":"use strict; 404->();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::404 called at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; *4 = sub { 'ok' }; &{4};","out":"ok","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"ok","err":"","code":"use strict; *4 = sub { 'ok' }; main->${ \\4 };","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use strict; @5 = \"hi\";"},{"err_mask":"","code":"use strict; @5 = \"hi\"; \\@5","err":"","out":"[\"hi\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"@a\" requires explicit package name (did you forget to declare \"my @a\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; @a","err_mask":""},{"err_mask":"","code":"use strict; $a->[0];","out":"","err":"","out_mask":""},{"code":"use strict; a->[0]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use bareword (\"a\") as an ARRAY ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Can't use string (\"a\") as a SCALAR ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; $a = \"it works\"; print \"${chr 97}\""},{"code":"use strict; *{$::{Altreus}}{SCALAR}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as a symbol reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use strict; $ARGV","err_mask":"","out_mask":"","out":"","err":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use strict; \"asd\" ~~ s/^[:ascii:]]//g;"},{"code":"use strict; \"asd\" ~~ s/^[:ascii:]]/g;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Substitution replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use strict; @b = 42;","err":"","out":"ERROR: Global symbol \"@b\" requires explicit package name (did you forget to declare \"my @b\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; BEGIN { package Zomg; *::foo = \\$::foo; }  $foo = 42;","out":"42","err":"","out_mask":"Ã¿Ã¿"},{"code":"use strict; blargh","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Bareword \"blargh\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use strict; blargh()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::blargh called at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Bareword \"config\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; config"},{"err_mask":"","code":"use strict; defined (my $thing = $_[0]) or $thing = 'default'; $thing;","out":"ERROR: Global symbol \"$thing\" requires explicit package name (did you forget to declare \"my $thing\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"@F\" requires explicit package name (did you forget to declare \"my @F\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; @F = 42;","err_mask":""},{"code":"use strict \\&{\"foo\"}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unknown 'strict' tag(s) 'CODE(0x42f5448)' at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; $foo"},{"err_mask":"","code":"use strict; \\&{\"foo\"}","out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Bareword \"Foo\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; [ Foo ]"},{"out":"ERROR: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$bar\" requires explicit package name (did you forget to declare \"my $bar\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; $foo = 'bar'; ++$$foo; $bar"},{"code":"use strict; grep my $x = 1, 1, 2, 3; $x","err_mask":"","out_mask":"","out":"","err":""},{"code":"use strict; {{@{[\"I get it now\"=>2, bar=>3]}}}->{\"I get it now\"}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}->\"\n"},{"err":"","out":"I get it now","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; {{@{[\"I get it now\"=>2, bar=>3]}}}{\"I get it now\"}"},{"code":"use strict; ${{@{[\"I get it now\"=>2, bar=>3]}}}{\"I get it now\"}","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"code":"use strict; +{ @{[\"I get it now\"=>2, bar=>3]} }->{\"I get it now\"}","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"So this takes an arrayref, converts it to a array, then converts it to a hashref which is needed index the key because a hashref puts it into a hash context.  %{@a} does not work because % expects a \"scalar\" like a hashref or an arrayref (same with @), so you have to %{ {@a} }.","code":"use strict; ${ { @{[\"I get it now\"=>'So this takes an arrayref, converts it to a array, then converts it to a hashref which is needed index the key because a hashref puts it into a hash context.  %{@a} does not work because % expects a \"scalar\" like a hashref or an arrayref (same with @), so you have to %{ {@a} }.', bar=>3]} } }{\"I get it now\"}","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"use strict; $INC"},{"err":"","out":"ERROR: Can't use string (\"2\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; keys (%{ 'dave' => 1, 'bob' => 2 });"},{"code":"use strict; [ map { my $foo if 0; ++$foo } 1 .. 10 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3,4,5,6,7,8,9,10]","err":""},{"err_mask":"","code":"use strict; my $a = {a=>\"BLA\", b=>\"BLO\"}; print \"$k2:$v2\\n\" while((my($k2,$v2) = each %$a);","out":"ERROR: Global symbol \"$k2\" requires explicit package name (did you forget to declare \"my $k2\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$v2\" requires explicit package name (did you forget to declare \"my $v2\"?) at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't use string (\"foo\") as a subroutine ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; my $action = \"foo\"; &{$action}()"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; my $action = \"foo\"; &{\\&{$action}}()","err_mask":""},{"code":"use strict; my $bar; (my $foo, $bar) = 1 .. 2;","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$dog\" requires explicit package name (did you forget to declare \"my $dog\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; my $cat, $dog;","err_mask":""},{"err":"","out":"ERROR: Bareword \"todayDay\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\nBareword \"serviceEndDay\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; my $diff=todayDay-serviceEndDay;"},{"out":"ERROR: Global symbol \"$bar\" requires explicit package name (did you forget to declare \"my $bar\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; (my $foo, $bar) = ''"},{"code":"use strict; my $foo = 'bar' and $foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use strict; my %foo; %{ 'foo' }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use string (\"foo\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"use strict; my %foo; %{ foo }"},{"code":"use strict; my %foo; %{ foo; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Bareword \"foo\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"sub { \"DUMMY\" }","err":"","code":"use strict; my $foo; $foo = sub { return $foo };","err_mask":""},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"use strict; (my $foo, my $bar) = 1 .. 2;"},{"err_mask":"","code":"use strict; my $foo = sub { 'hi there!' }; $foo->()","err":"","out":"hi there!","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; my $foo = sub { return $foo };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"ERROR: Can't use string (\"1\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; my %hash = (one => 'foo'); sub bar { my $href = @_; $href->{one} = 'baz'; } bar(\\%hash);  [ %hash ]"},{"err_mask":"","code":"use strict; @{\\my %hash}{qw(a b)} = (1, 2); \\%hash","out":"ERROR: Global symbol \"%hash\" requires explicit package name (did you forget to declare \"my %hash\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Bareword \"SOME_CONSTANT\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; my %hash = (thing => SOME_CONSTANT); sub SOME_CONSTANT { 5 }; $hash{thing}"},{"err_mask":"","code":"use strict; my $h; [ (delete $h->{foo}), $h ]","err":"","out":"[undef,{}]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; my $h; [ delete $h->{foo}, %$h ]","out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; my $h; [ $h and %$h ]"},{"err":"","out":"ERROR: Can't use an undefined value as a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; my $h; [ scalar %$h ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$i\" requires explicit package name (did you forget to declare \"my $i\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; { my $i = 0; } $i","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$nwe\" requires explicit package name (did you forget to declare \"my $nwe\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; my $new = \"foo\"; print $nwe;","err_mask":""},{"err_mask":"","code":"use strict; my $params; my $student; my $search_name = $params->{name} && $student->name =~ /\\Q$search_name/i","err":"","out":"ERROR: Global symbol \"$search_name\" requires explicit package name (did you forget to declare \"my $search_name\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; my %test = ( name => true, );","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Bareword \"true\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"ERROR: Can't use string (\"code\") as a SCALAR ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; my $x = 'code'; $$x;"},{"err":"","out":"[\"-CONSTANT\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; my %x = (-+CONSTANT => 123); [keys %x]"},{"code":"use strict; my %x = (-CONSTANT => 123); [keys %x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"-CONSTANT\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"CONSTANT\"]","code":"use strict; my %x = (+CONSTANT => 123); [keys %x]","err_mask":""},{"err_mask":"","code":"use strict; my %x = (+CONSTANT => 123); keys %x","out":"1","err":"","out_mask":"Ã¿"},{"code":"use strict; my %x = (+CONSTANT => 123); %x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"1/8","err":""},{"code":"use strict; my $x if $x || 1;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use strict; my $x = 'nope'; use warnings my $x = 'all'; $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"nope","err":""},{"err_mask":"","code":"use strict; my @x =  qw(1 2); undef @x; push @x,1;","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"@x\" requires explicit package name (did you forget to declare \"my @x\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; my %x; $x[1] = 123;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; my $x->{y} = $x;","err_mask":""},{"err_mask":"","code":"use strict; my ($x, $y) = ($y, $x);","out":"ERROR: Global symbol \"$y\" requires explicit package name (did you forget to declare \"my $y\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"[1]\",\"[2]\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; package foo; sub bar { our $baz; package fizzbuz; \"[\". ++$baz . \"]\" }; [ bar(), bar()  ]"},{"err_mask":"","code":"use strict; package foo; sub bar { our $baz; package fizzbuz; \"[\". ++$baz . \"]\" }; [ bar(), bar(), $baz ]","err":"","out":"ERROR: Global symbol \"$baz\" requires explicit package name (did you forget to declare \"my $baz\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"[1]\",\"[2]\",2]","code":"use strict; package foo; sub bar { our $baz; package fizzbuz; \"[\". ++$baz . \"]\" }; [ bar(), bar(), $foo::baz ]","err_mask":""},{"code":"use strict; package Foo; use B '@optype'; package Bar; [ @optype ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"@optype\" requires explicit package name (did you forget to declare \"my @optype\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; package Foo; use B '@optype'; package Foo; [ @optype ]","err":"","out":"[\"OP\",\"UNOP\",\"BINOP\",\"LOGOP\",\"LISTOP\",\"PMOP\",\"SVOP\",\"PADOP\",\"PVOP\",\"LOOP\",\"COP\",\"METHOP\",\"UNOP_AUX\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; print \"${chr(24)}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use string (\"\u0018\") as a SCALAR ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use strict; print foo::"},{"err_mask":"","code":"use strict; print foo::, bar:: ;","out":"foobar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"foo\n","err":"","code":"use strict; print(foo::,\"\\n\");","err_mask":""},{"code":"use strict; print 'hi' if my $x = 1;","err_mask":"","out_mask":"Ã¿Ã¿","out":"hi","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo1","code":"use strict; print STDOUT:: foo:: ;","err_mask":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"use 'strict'\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 'strict'; print $x;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"qw(subs):\"\n\"use\" not allowed in expression at (eval 1) line 1, near \": \"\n","code":"use strict qw(subs): use warnings;","err_mask":""},{"err_mask":"","code":"use strict; @% = qw(x y z); [ \\@%, \"@%\" ] # doesn't even seem to interpolate in a string","out":"[[\"x\",\"y\",\"z\"],\"\\@%\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict \"refs\"; %{\"\"}","err":"","out":"ERROR: Can't use string (\"\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; require foo.pl;","out":"ERROR: Bareword \"pl\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; \"string\"->{key}","err":"","out":"ERROR: Global symbol \"%string\" requires explicit package name (did you forget to declare \"my %string\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use string (\"string\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; ${\\\"string\"}->{key}  # why is this different","err_mask":""},{"out":"[main::foo]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; sub AUTOLOAD { our $AUTOLOAD; print \"[$AUTOLOAD]\" }; foo();"},{"err":"","out":"[main::foo][main::DESTROY]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; sub AUTOLOAD { our $AUTOLOAD; print \"[$AUTOLOAD]\" }; my $obj = bless []; $obj->foo();"},{"out":"ERROR: Global symbol \"$AUTOLOAD\" requires explicit package name (did you forget to declare \"my $AUTOLOAD\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; sub AUTOLOAD { print \"[$AUTOLOAD]\" }; foo();"},{"err_mask":"","code":"use strict; sub AUTOLOAD { print \"[$main::AUTOLOAD]\" }; foo();","out":"[main::foo]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; sub config { return \"meow\" } config","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"meow","err":""},{"code":"use strict; sub Foo { \"Bar\" }; [ Foo ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Bar\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foohoo","code":"use strict; sub foo { 'foohoo' } my $str = 'foo'; __PACKAGE__->can($str)->()","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"use strict; sub foo { quux(); } # Grinnz_ I think he means that all his subs don't actually get called.."},{"out":"ERROR: Bareword \"false\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; sub foo { return false; }"},{"err_mask":"","code":"use strict; sub lala { 'hej' } my $name = 'lala'; my $ref = \\&$name; $ref->()","out":"hej","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"use strict; subname();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::subname called at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Undefined subroutine &main::subname called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; subname(); { no strict 'refs'; *{__PACKAGE__ . \"::subname\"} = sub {1} }"},{"out_mask":"Ã¿","err":"","out":"5","code":"use strict; sub SOME_CONSTANT; my %hash = (thing => SOME_CONSTANT); sub SOME_CONSTANT { 5 }; $hash{thing}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use global @_ in \"my\" at (eval 1) line 1, near \", @_\"\n","code":"use strict; sub what { my ($foo, @_) = @_; \\@_ } what(qw(a b c d));","err_mask":""},{"code":"use strict; try {} catch {};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"catch\" without a package or object reference at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; $_ = undef; say @$_[1]; [ $_ ]","err":"","out":"\n","out_mask":"Ã¿"},{"code":"use strict; $_ = undef; say @$_[1]; say Data::Dumper::Dumper [ $_ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\n$VAR1 = [\n          []\n        ];\n\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"OP\",\"UNOP\",\"BINOP\",\"LOGOP\",\"LISTOP\",\"PMOP\",\"SVOP\",\"PADOP\",\"PVOP\",\"LOOP\",\"COP\",\"METHOP\",\"UNOP_AUX\"]","err":"","code":"use strict; use B '@optype'; [ @optype ]","err_mask":""},{"out":"ERROR: Global symbol \"$y\" requires explicit package name (did you forget to declare \"my $y\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$y\" requires explicit package name (did you forget to declare \"my $y\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use feature 'signatures'; sub add ($x = return 0, $y = return $x) { return $x + $y } [ add(), add(2), add(2,3) ]"},{"err_mask":"","code":"use strict; use Function::Parameters qw(:strict); fun func($foo, $bar = sub { $foo }) { $bar } func(42)->()","out":"42","err":"","out_mask":"Ã¿Ã¿"},{"code":"use strict; use v5.20; say \"hi\" for Altreus =>","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"hi\n"},{"code":"use strict; use v5.20; say \"hi\" for Altreus;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Bareword \"Altreus\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]","code":"use strict; use warnings; [\"$ -\"]","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"use strict; use warnings; 1234->{key}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]","code":"use strict; use warnings; [ @$_[3] ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use an undefined value as an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; [ @{$_[3]} ] # you sure about that","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; ['' * 5]","err":"Argument \"\" isn't numeric in multiplication (*) at (eval 1) line 1, <STDIN> line 1.\n","out":"[0]","out_mask":"Ã¿Ã¿Ã¿"},{"out":"no","err":"Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/\\d{ <-- HERE ,3}/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; $_ = \"abc123xyz\"; /\\d{,3}/ ? \">$&<\" : \"no\""},{"code":"use strict; use warnings; @a = {foo => 1, bar => 2}; print ${$a}{\"foo\"}","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Variable \"@a\" is not imported at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: Global symbol \"@a\" requires explicit package name (did you forget to declare \"my @a\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use strict; use warnings; blasdsdasdsa->import","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"use strict; use warnings; CORE::say \"test\" # use 5.016 mostly just covers imports, I think","err":"","out":"test\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; @F=('5'); [@F]","err":"","out":"ERROR: Global symbol \"@F\" requires explicit package name (did you forget to declare \"my @F\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"@F\" requires explicit package name (did you forget to declare \"my @F\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; $_ = \"First Name Position first.name\\@somewhere.com 745 45363\\nSome One Worker some.one\\@somewhere.com 343 5454\\n\" =~ s/^\\s*(\\S)\\S*\\s+(\\S+).+?(\\d\\d\\d \\d\\d\\d\\d)\\s*/$1., $2, $3/gmr # for milfjord :)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"F., Name, 745 45363\nS., One, 343 5454","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"F., Name, 745 45363S., One, 343 5454","code":"use strict; use warnings; $_ = \"First Name Position first.name\\@somewhere.com 745 45363\\nSome One Worker some.one\\@somewhere.com 343 5454\\n\" =~ s/^\\s*(\\S)\\S*\\s+(\\S+).+?(\\d\\d\\d \\d+)\\s*/$1., $2, $3/gmr # for milfjord :)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"F., Name, 745 45363\\nS., One, 343 5454\\n\"]","err":"","code":"use strict; use warnings; [ \"First Name Position first.name\\@somewhere.com 745 45363\\nSome One Worker some.one\\@somewhere.com 343 5454\\n\" =~ s/^\\s*(\\S)\\S*\\s+(\\S+).+?(\\d\\d\\d \\d+)\\s*/$1., $2, $3\\n/gmr ]","err_mask":""},{"code":"use strict; use warnings; [-foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"-foo\"]","err":""},{"err":"","out":"[\"foo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; [foo=>]"},{"code":"use strict; use warnings; @foo = (1, 2, undef, 4); for my $foo (@foo) { print $foo }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"@foo\" requires explicit package name (did you forget to declare \"my @foo\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"@foo\" requires explicit package name (did you forget to declare \"my @foo\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; use warnings; foo; sub foo { \"foo\" }","err":"","out":"ERROR: Bareword \"foo\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; foo(); sub foo { \"foo\" }","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; [ 'hentai' =~ m/#(?:hentai|yuri)/ ] # that line looks fine","out":"[]","err":"","out_mask":"Ã¿Ã¿"},{"code":"use strict; use warnings; if (0) {i_am_not_defined();} else {print \"Perfectly OK\\n\";}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Perfectly OK\n"},{"out":"ERROR: syntax error at (eval 1) line 1, near \") {\"\n","err":"elseif should be elsif at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; if (1) {} elseif (2) {}"},{"err":"","out":"Inf","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; 'inf' * 3"},{"err_mask":"","code":"use strict; use warnings; inf * 3","out":"bless( {sign => \"+inf\",value => [0],_p => undef,_a => undef}, 'Math::BigInt' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use string (\"main::\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; keys %{'main::'};","err_mask":""},{"code":"use strict; use warnings; keys %{main::};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"1495"},{"out_mask":"","out":"","err":"","code":"use strict; use warnings;  length $12345678987654321","err_mask":""},{"code":"use strict; use warnings; local $_ = \"UCS-4\"; eval q@qr/^UCS-?4-?(BE|LE)?$/i; uc(\"UTF-32$1\")@","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"UTF-32","err":"Use of uninitialized value $1 in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; use warnings; local $_ = \"UCS-4\"; my $p = qr/^UCS-?4-?(BE|LE|)?$/i; s@$p@uc(\"UTF-32$1\")@er","out":"UTF-32","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Global symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; { local $x = 123; } # nor on undeclared variables"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; [map { $_; last } (1,2,3)]","out":"","err":"Useless use of a variable in void context at (eval 1) line 1, <STDIN> line 1.\nExiting eval via last at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"err_mask":"","code":"use strict; use warnings; map {print $_} [1,2,3]","err":"","out":"ARRAY(0x3521b88)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Bareword \"methods\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; ''.methods.length","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\"]","err":"Argument \"\" isn't numeric in array element at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my @a = 'a'..'z'; [ $a[ 2..1 ] ];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"mno","err":"","code":"use strict; use warnings; my $abc = 'xyz'; my $asdf = 'mno'; sub asdf { return \\$abc; } print \"${asdf}\"","err_mask":""},{"code":"use strict; use warnings; my $abc = 'xyz'; sub asdf { return \\$abc; } print \"${asdf}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$asdf\" requires explicit package name (did you forget to declare \"my $asdf\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; use warnings; my $abc = 'xyz'; sub asdf { return \\$abc; } print ${asdf()}","out":"xyz","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my $abc = 'xyz'; sub asdf { return \\$abc; } print ${asdf}","out":"ERROR: Global symbol \"$asdf\" requires explicit package name (did you forget to declare \"my $asdf\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"Ambiguous use of ${asdf} resolved to $asdf at (eval 1) line 1, <STDIN> line 1.\nVariable \"$asdf\" is not imported at (eval 1) line 1, <STDIN> line 1.\n\t(Did you mean &asdf instead?)\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my  @a = ({foo=> \"foo\", moo => \"bar\", desc=> \"lambda\",},{foo=>\"baz\", moo=>\"moo\", desc=>\"bring_it\",}); my @keys = ('foo', 'desc'); [join(\", \", map { my $href = $_; map { my $key = $_; \"$key=\\\"$href->{$key}\\\"\" } @keys } @a)]","out":"[\"foo=\\\"foo\\\", desc=\\\"lambda\\\", foo=\\\"baz\\\", desc=\\\"bring_it\\\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't modify constant item in scalar assignment at (eval 1) line 1, near \"\"bring_it\",\"\nBareword \"desc\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my  @a = ({foo=> \"foo\", moo => \"bar\", desc=> \"lambda\",},{foo=>\"baz\", moo=>\"moo\", desc=\"bring_it\",}); my @keys = ('foo', 'desc'); [join(\", \", map { my $href = $_; map { my $key = $_; \"$key=\\\"$href->{$key}\\\"\" } @keys } @a)]"},{"err":"","out":"[\"foo=\\\"foo\\\", foo=\\\"baz\\\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my  @a = ({foo=> \"foo\", moo => \"bar\"},{foo=>\"baz\", moo=>\"moo\"}); my $key = 'foo'; [join(\", \", map { \"$key=\\\"$_->{$key}\\\"\" } @a)]"},{"err_mask":"","code":"use strict; use warnings; my @allowed = ('a'..'z','A'..'Z',' ', '{','}');my%allowed_hash = (map { $_ => 1 } @allowed); my %found; foreach my $c (split// , q#MPOPCNTSF: INTEGER[9]#) { if (!exists($allowed_hash{$c})) { $found{$c} = 1; } } [sort {$a cmp $b } keys%found]","out":"[9,\":\",\"[\",\"]\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; my @allowed = ('a'..'z','A'..'Z',' ', '{','}');my%allowed_hash = (map { $_ => 1 } @allowed}; my %found; foreach my $c (split// , q#MPOPCNTSF: INTEGER[9]#) { if (!exists($allowed_hash{$c})) { $found{$c} = 1; } } [sort {$a cmp $b } keys%found]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unmatched right curly bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","err":""},{"out":"ERROR: Can't use string (\"58534793\") as an ARRAY ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings;  my $aref = [1,2,3];  @{ $aref + 1 }"},{"err_mask":"","code":"use strict; use warnings; my %args = ( number => 100 ); print $args{number};","out":"100","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; my %args = { number => 100 }; print $args{number};","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"1","err":"Reference found where even-sized list expected at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in print at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use strict; use warnings; my $ar = [qw(x y z a b c)]; $ar->[2..4] # warnings to the rescue?","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"x","err":"Argument \"\" isn't numeric in array element at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my $array = (1,2,3);","out":"3","err":"Useless use of a constant (2) in void context at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ARRAY(0x3d45b88)\"]","err":"","code":"use strict; use warnings; my $array_ref = [3,4,5]; [\"$array_ref\"]","err_mask":""},{"out":"[3]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $array_ref = [3,4,5]; [scalar @$array_ref]"},{"code":"use strict; use warnings; my @arr = ('One', 'Two', 'Three', 'Four'); @arr = grep { !/\\AT/ } @arr; [@arr]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"One\",\"Four\"]","err":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my $cat, $dog;","out":"ERROR: Global symbol \"$dog\" requires explicit package name (did you forget to declare \"my $dog\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"Parentheses missing around \"my\" list at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my @c=qw(a b c d);print((map{$_ >1}@c)/@c)","err":"Argument \"a\" isn't numeric in numeric gt (>) at (eval 1) line 1, <STDIN> line 1.\nArgument \"b\" isn't numeric in numeric gt (>) at (eval 1) line 1, <STDIN> line 1.\nArgument \"c\" isn't numeric in numeric gt (>) at (eval 1) line 1, <STDIN> line 1.\nArgument \"d\" isn't numeric in numeric gt (>) at (eval 1) line 1, <STDIN> line 1.\n","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"use strict; use warnings; my $cwd = \"/archivepath/SHORT\"; my $ARCHIVEPATH=\"/archivepath/\"; [$cwd =~ m#^${ARCHIVEPATH}(SHORT|MEDIUM|LONG)$# ? \"Match\" : \"No match\"]","err":"","out":"[\"Match\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my $cwd = \"/archivepath/SHORT\"; my $ARCHIVEPATH=\"/archivepath/\"; [$cwd =~ m#^${ARCHIVEPATH}(SHORT|MEDIUM|LONG)\\$# ? \"Match\" : \"No match\"]","out":"[\"No match\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't use string (\"foo\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my @data = (\"foo\"); $data[0]{label} = $data[0]; [@data]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\"]","code":"use strict; use warnings; my @data = (\"foo\"); $data[0] = {label => $data[0]}; [$data[0]{label}]","err_mask":""},{"err":"","out":"xyz","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $data = [{}, { url => 'xyz' }]; $data->[\"1\\n\"]{url} # shouldn't matter"},{"err":"","out":"[qr/a|d|e|f|l|t|u/,qr/A|B|C/]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my @default = qw(d e f a u l t); my $h = { y => [ qw(A B C) ] }; [ map Data::Munge::list2re(@{ $h->{$_} // \\@default }), qw(x y) ]"},{"err":"","out":"[\"d|e|f|a|u|l|t\",\"A|B|C\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my @default = qw(d e f a u l t); my $h = { y => [ qw(A B C) ] }; [ map {   join q{|}, map { qq{\\Q$_\\E} } ( ref $h->{$_} eq q{ARRAY} && @{ $h->{$_} } ? @{ $h->{$_} } : @default )   } qw(x y) ];"},{"code":"use strict; use warnings; my $foo = 1; my $bar = 2; my $name = \"foo\"; print \"ok\" if (defined(${$name}));","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use string (\"foo\") as a SCALAR ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"bar1","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my %foo = (bar => 1); print %{foo};"},{"out":"ERROR: Can't use string (\"stuff\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $foo = { bar => \"stuff\" }; $foo->{bar}->{baz}"},{"err":"","out":"[22]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my %foo = (hello => [1,22,303]); [$foo{hello}[1]]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"class hi{ ... };","code":"use strict; use warnings; my @foo = \"hi\"; \"class ${foo[0]}{ ... };\"","err_mask":""},{"err_mask":"","code":"use strict; use warnings; my @foo = \"hi\"; \"class $foo[0]\\{ ... };\"","err":"","out":"class hi{ ... };","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; my $foo; push @$foo, 1; $foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"err_mask":"","code":"use strict; use warnings; my @groups; my $chunk = []; for my $x (\"foo\", \"bar\", \"baz\\n\", \"x\", \"y\", \"z\") { push @$chunk, $x; if ($x =~ /\\R\\z/) { push @groups, $chunk; $chunk = []; } } push @groups, $chunk if @$chunk; [ @groups ]","err":"","out":"[[\"foo\",\"bar\",\"baz\\n\"],[\"x\",\"y\",\"z\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"25","out_mask":"Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my %h = ( 1 => 200, 0 => 100, q{} => 50, undef => 25 ); $h{undef};"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my %h = ( 1 => 200, 0 => 100, q{} => 50, undef => 25 ); my $x; $h{$x}; ### Wtf?","out":"50","err":"Use of uninitialized value $x in hash element at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿","out":"3","err":"","code":"use strict; use warnings; my %h = (1 => 2); sub x {my $ref = shift; $ref->{1} = 3}; x(\\%h); $h{1}","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my %h = (a => b, c => d, e => f); my $str = \"abcdef\"; $str =~ m/(.)/$h{$1}/g; print \"$str\";","out":"ERROR: syntax error at (eval 1) line 1, near \"m/(.)/$h\"\nBareword \"b\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\nBareword \"d\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\nBareword \"f\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"Scalar found where operator expected at (eval 1) line 1, near \"m/(.)/$h\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; my %h = (a => \"b\", c => \"d\", e => \"f\"); my $str = \"abcdef\"; $str =~ s/(.)/$h{$1} // $1 /eg; print \"$str\";","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Useless use of division (/) in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: Bareword \"eg\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; use warnings; my $h = {a => \"b\", c => \"d\", e => \"f\"}; my $str = join \",\", grep defined, @$h{qw/a b c/}; print $str;","err":"","out":"b,d","out_mask":"Ã¿Ã¿Ã¿"},{"out":"a,c","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $h = {a => \"b\", c => \"d\", e => \"f\"}; my $str = join(\",\", grep {defined($h->{$_})} (qw/a b c/)); print $str;"},{"out_mask":"Ã¿Ã¿Ã¿","out":"b,d","err":"","code":"use strict; use warnings; my $h = {a => \"b\", c => \"d\", e => \"f\"}; my $str = join(\",\", map { $h->{$_} // () } (qw/a b c/)); print $str; # or do both in the map","err_mask":""},{"code":"use strict; use warnings; my $h = {a => \"b\", c => \"d\", e => \"f\"}; my $str = map $h->{$_}, join(\",\", grep {defined($h->{$_})} (qw/a b c/)); print $str;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"%hash\" requires explicit package name (did you forget to declare \"my %hash\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my %hash;  \"hash\"->{key} = \"message\"; \\%hash","err_mask":""},{"code":"use strict; use warnings; my %hash; ${\"hash\"}{key} = \"message\"; \\%hash","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use string (\"hash\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my $hash_ref = { 'foo' => 'bar' }; $%hash_ref{'foo'};","err":"Bareword found where operator expected at (eval 1) line 1, near \"$%hash_ref\"\n\t(Missing operator before hash_ref?)\n","out":"ERROR: syntax error at (eval 1) line 1, near \"$%hash_ref\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Global symbol \"%hash_ref\" requires explicit package name (did you forget to declare \"my %hash_ref\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $hash_ref = { 'foo' => 'bar' }; $hash_ref{'foo'};"},{"code":"use strict; use warnings; my $hash_ref = { 'foo' => 'bar' }; %$hash_ref{'foo'};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"bar"},{"out_mask":"","out":"","err":"Reference found where even-sized list expected at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my %hash_ref = { 'foo' => 'bar' }; $hash_ref{'foo'};","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my %h = ('a' => \"This is A\", 'b' => \"This is B\"); $h{'a'} = \"One A too many.\"; $h{'c'} = \"Foobar\"; \\%h","out":"{b => \"This is B\",c => \"Foobar\",a => \"One A too many.\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my $_ # hence the \"experimental\" - generally safer not to use it, and avoid things that do","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ # hence the \"experimental\" - generally safer not to use it, and avoid things that do\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my %h = ('fling' => 1, 'rindolf' => 2, 'gamo' => 3); my @arr = (map { [$_, $h{$_}] } keys %h); [@arr]","err":"","out":"[[\"rindolf\",2],[\"fling\",1],[\"gamo\",3]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $h = {\"foo\" => 5, \"bar\" => 6, \"baz\" => 2}; print Dumper(@{$h}->{qw/foo bar baz/});","err_mask":""},{"code":"use strict; use warnings; my %h = (foo => 'bar'); my $aref = [\\%h,\\%h,\\%h]; $aref->[0]{foo} = 'dexter'; $aref","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{foo => \"dexter\"},$VAR1->[0],$VAR1->[0]]"},{"err_mask":"","code":"use strict; use warnings; my %h = (foo => bar); my $aref = [\\%h,\\%h,\\%h]; $aref->[0]{foo} = 'dexter'; $aref","err":"","out":"ERROR: Bareword \"bar\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"@aref\" requires explicit package name (did you forget to declare \"my @aref\"?) at (eval 1) line 1, <STDIN> line 1.\nBareword \"bar\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; use warnings; my %h = (foo => bar); my $aref = [\\%h,\\%h,\\%h]; $aref[0]{foo} = 'dexter'; $aref","err_mask":""},{"code":"use strict; use warnings; my %h; $h{'foo','bar'} = \"much\"; \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{\"foo\\34bar\" => \"much\"}","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use an undefined value as a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $href; %$href","err_mask":""},{"err":"","out":"[\"55.668840408325195\",\"20.794050693511963\",\"58.08229207992554\",\"28.241150379180908\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $input=\"Exact map coverage is (55.668840408325195,20.794050693511963) to (58.08229207992554,28.241150379180908)\"; [ $input =~ m#([0-9]+(?:\\.[0-9]+)?)#g]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/( <-- HERE [0-9]+(\\.[0-9]+)?/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; use warnings; my $input=\"Exact map coverage is (55.668840408325195,20.794050693511963) to (58.08229207992554,28.241150379180908)\"; [ $input =~ m#([0-9]+(\\.[0-9]+)?#g]","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"use strict; use warnings; my $my->{my}"},{"code":"use strict; use warnings; my $name = 'something'; $$name = 'data'; { our $something; $something } # if you get an error when you make that change...","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use string (\"something\") as a SCALAR ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"Hello Tectu!\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $name = 'Tectu'; print \"Hello $name!\\n\";"},{"code":"use strict; use warnings; my $num = 5.2323232; $num = sprintf(\"%.3f\", $num); [$num]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"5.232\"]","err":""},{"code":"use strict; use warnings; my %old_hash = (1 => 2, 3 => undef); my %new_hash; $new_hash{$old_hash{$_}} = $_ for keys %old_hash; \\%new_hash","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Use of uninitialized value $old_hash{\"3\"} in hash element at (eval 1) line 1, <STDIN> line 1.\n","out":"{\"\" => 3,2 => 1}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Use of uninitialized value $old_hash{\"3\"} in list assignment at (eval 1) line 1, <STDIN> line 1.\n","out":"{2 => 1,\"\" => 3}","code":"use strict; use warnings; my %old_hash = (1 => 2, 3 => undef); my %new_hash = reverse %old_hash; \\%new_hash","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","out":"CODE(0x49b59d8)","err":"","code":"use strict; use warnings; my $PROG = sub { \"like this?\" }; \"${PROG}\" # really?","err_mask":""},{"err_mask":"","code":"use strict; use warnings; my $ref = [qw(hi one two)]; unshift(@$ref, \"Hello\"); [$ref]","out":"[[\"Hello\",\"hi\",\"one\",\"two\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[19770505]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $s = \"5/5/1977\"; $s =~ s/(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/sprintf(\"%04d%02d%02d\", $3, $2, $1)/e; [$s]"},{"code":"use strict; use warnings; my $s = \"aabaaaaaaaaaaaab\"; my @x = $s =~ /(a++b)/; [@x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"aab\"]","err":""},{"err_mask":"","code":"use strict; use warnings; my $s = \"aabaaaaaaaaaaaab\"; @x = $s =~ /(a++b)/; [@x]","err":"","out":"ERROR: Global symbol \"@x\" requires explicit package name (did you forget to declare \"my @x\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"@x\" requires explicit package name (did you forget to declare \"my @x\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"HASH(0x4a21b88)\",undef]","err":"Reference found where even-sized list expected at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my %sections = { name => \"testname\" }; [ %sections ] # probably not what you wanted in %sections"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"maroloccio. How is your day.\"]","code":"use strict; use warnings; my $s = \"Hello maroloccio___. How is your day.\"; $s =~ s#\\AHello (\\w+)# my $name = $1; $name =~ s/_+\\z//; $name#e; [$s]","err_mask":""},{"code":"use strict; use warnings; my $s = \"Hello maroloccio___. How is your day.\"; $s =~ s#\\AHello (\\w+)# my $name = $1; $name =~ s/_+\\z//; $name#; [$s]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$name\" requires explicit package name (did you forget to declare \"my $name\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$name\" requires explicit package name (did you forget to declare \"my $name\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"$name\" requires explicit package name (did you forget to declare \"my $name\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"Unrecognized escape \\z passed through at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use strict; use warnings; my %shift = (bar => 1); print %shift","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"bar1","err":""},{"code":"use strict; use warnings; my %shift = (bar => 1); print %{shift}","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"bar1","err":"Ambiguous use of %{shift} resolved to %shift at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Match: \n","err":"Use of uninitialized value $1 in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value $1 in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $s = q{<a rel=\"nofollow\" href=\"http://www.FOOtube.com/v/ABCDEFG\" target=\"_blank\">Youtube Video</a>}; $s =~ s#<a(?:\\s+(?:href=(\\S+\\byoutube\\.com/\\S+)|[^>]*?))+\\s*\\>.*?</a>#$1# && print qq{Match: $1\\n}; [ $s, $1 ];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"Match: \"http://www.youtube.com/v/ABCDEFG\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $s = q{<a rel=\"nofollow\" href=\"http://www.youtube.com/v/ABCDEFG\" target=\"_blank\">Youtube Video</a>}; $s =~ s#<a(?:\\s+(?:href=(\\S+\\byoutube\\.com/\\S+)|[^>]*?))+\\s*\\>.*?</a>#$1# && print qq{Match: $1\\n}; [ $s, $1 ];"},{"code":"use strict; use warnings; my $s = q{foo=bar=baz}; my $p = qr/=(.*?)=/; my $r = q{\",$1,\"}; $s =~ s/$p/$r/re;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo\",$1,\"baz","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Substitution pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; use warnings; my $s = q{}; my $r = s =~ s///; OK wtf?","err_mask":""},{"err_mask":"","code":"use strict; use warnings; my $s = q{}; my $r = s =~ s///; # wtf?","out":"ERROR: Substitution pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; my $str = \"012\"; my @f = (qw/2 1 0/); $str =~ s/(join(\"|\", @f))/$f[$1]/g; print $str","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"012","err":""},{"err_mask":"","code":"use strict; use warnings; my $str = \"\\\"foo bar baz\\\"\"; print \"pre [$str]\\n\"; $str =~ s/(?:[^\\\\])\"$//; print \"post [$str]\\n\";","out":"pre [\"foo bar baz\"]\npost [\"foo bar ba]\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my $str; length($str)","out":"","err":"","out_mask":""},{"out_mask":"Ã¿","err":"Reference found where even-sized list expected at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"use strict; use warnings; my %table = {}; # strict+warnings may help with issues like that","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my $test = \"\"; [defined($test) ? \"Def\" : \"Undef\"]","out":"[\"Def\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my @things; (my $x = '%%123@@@@456&&234') =~ s/([\\$%\\@&])\\1+\\K([0-9]+)/push @things, $2/ge; \\@things # could even do something like this, for example","err":"","out":"[123,456,234]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; { my $v=0; sub foo : lvalue { $v } } foo++;"},{"err_mask":"","code":"use strict; use warnings; { my $v=0; sub x : lvalue { $v } } ++x;","out":"1","err":"","out_mask":"Ã¿"},{"code":"use strict; use warnings; { my $v=0; sub x : lvalue { $v } } x++;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":""},{"err_mask":"","code":"use strict; use warnings; my $var = undef; @{$var} # and you understand why this fails but Bar(@{$var}) doesn't, right?","err":"","out":"ERROR: Can't use an undefined value as an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Blessed are the cheese makers Return value was: [ 1 ]","code":"use strict; use warnings; my $v = sub { \"Miesco\", 1+1, print(\"Blessed are the cheese makers\") }->(); print \" Return value was: [ $v ]\" # seems print turns off auto-value-dump in perlbot?","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Blessed are the cheese makers","err":"","code":"use strict; use warnings; my $v = sub { \"Miesco\", 1+1, print(\"Blessed are the cheese makers\") }->(); [ $v ]","err_mask":""},{"err":"","out":"[\"foo-123\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $word_re = qr/\\w+/; my $pat_re = qr/(?:$word_re-)*$word_re/; [grep { $_ =~ /\\A$pat_re\\z/ } (\"foo-123\")]"},{"err_mask":"","code":"use strict; use warnings; my $word_re = qr/\\w+/; my $pat_re = qr/(?:$word_re-)*$word_re/; [grep { $_ =~ /\\A$pat_re\\z/ } (\"foo-123\", \"bar-3600-Zab\",\"Maj+4\")]","out":"[\"foo-123\",\"bar-3600-Zab\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"Reference found where even-sized list expected at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"use strict; use warnings; my %x = { };","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[[0,1,100],$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my @x = ([0,1,2]) x 5; $x[0][2] = 100; [@x]"},{"code":"use strict; use warnings; my $x = 0; for my $i (1 .. 100) { $x += 0.01; } [sprintf(\"%.50f\", $x)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1.00000000000000066613381477509392425417900085449219\"]","err":""},{"err_mask":"","code":"use strict; use warnings; my $x = -100 ; for my $y (0 .. $x) { hello_there(); } 1;","out":"1","err":"","out_mask":"Ã¿"},{"code":"use strict; use warnings; my @x = (1 .. 5); @x[0,2] = (100,200); [@x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[100,2,200,4,5]"},{"code":"use strict; use warnings; my $x = 1; my $h = do { if ( $x == 2 ) { \\*STDERR; } elsif ( $x == 1 ) { \\*STDOUT; } }; $h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\*::STDOUT"},{"code":"use strict; use warnings; my $x = 1; my $h = do { if ( $x == 2 ) { \\*STDERR; } if ( $x == 1 ) { \\*STDOUT; } }; $h","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\*::STDOUT","err":"Useless use of single ref constructor in void context at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Useless use of single ref constructor in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"\\*::STDOUT","code":"use strict; use warnings; my $x = 1; my $h = do { \\*STDERR if $x == 2; \\*STDOUT if $x == 1; }; $h","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my $x = 1; our $x = 2; $x","out":"2","err":"\"our\" variable $x masks earlier declaration in same scope at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿"},{"err_mask":"","code":"use strict; use warnings; my $ x = 2  # or even","out":"2","err":"","out_mask":"Ã¿"},{"code":"use strict; use warnings; my @x = (500, 24, 300, 2800); $#x = -1; [@x]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"out":"[500,24]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my @x = (500, 24, 300, 2800); $#x = 1; [@x]"},{"err":"Ambiguous use of ${x} resolved to $x at (eval 1) line 1, <STDIN> line 1.\n","out":"abc","out_mask":"Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my $x = 'abc'; ${x}"},{"code":"use strict; use warnings; my $x = \"| |\"; [\"Foo $x y $x\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Foo | | y | |\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, at EOF\n","code":"use strict; use warnings; my $x = []; push $x, '...';","err_mask":""},{"code":"use strict; use warnings; my %x = ( qw(AAA 1111 BBB 222 CCC 333 DDD 444) ); (()=%x)/2;","err_mask":"","out_mask":"Ã¿","out":"4","err":""},{"code":"use strict; use warnings; my %x = ( qw(AAA 1111 BBB 222) ); %x+0","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"2","err":"Argument \"2/8\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"","err":"","out":"","code":"use strict; use warnings; my $x; sub Foo : lvalue { $x } sub Bar { } my $var = undef; Bar(@{Foo()}) # does that make it any clearer?","err_mask":""},{"err_mask":"","code":"use strict; use warnings; my $x = \"test\"; [\"$ x\"] # any clearer?","err":"","out":"[\"test\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"2","code":"use strict; use warnings; my ($x, undef) = (5,10);","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"Use of uninitialized value $x in numeric lt (<) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $x; undef $x; length($x) < 4 # the length() warnings can be mildly confusing","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[0,1,2,3,4,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings ; my @x; $x[5] = 5; [keys@x]"},{"err":"","out":"5","out_mask":"Ã¿","err_mask":"","code":"use strict; use warnings;  my %x; $x{a} = 4; @x{a} = (5); print $x{a};"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Use of uninitialized value $x in numeric gt (>) at (eval 1) line 1, <STDIN> line 1.\n","out":"\\undef","code":"use strict; use warnings; my $x; --$x if $x > 1; \\$x; # Just wondering, is there a nice rewrite this to avoid the warning, without using something like if $x && $x > 1 (is there a shorter/simpler way?)","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; my $x; $$x = 'test'; $x # even scalars","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\\"test\"","err":""},{"err":"","out":"ERROR: Can't modify postincrement (++) in scalar assignment at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $x; ($x ? $x++ : $x ) = 1; $x;"},{"code":"use strict; use warnings; my $x; $x ? $x++ : ($x = 1); $x;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify postincrement (++) in scalar assignment at (eval 1) line 1, at EOF\n","err":"","code":"use strict; use warnings; my $x; $x ? $x++ : $x = 1; $x;","err_mask":""},{"out":"55","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $x->{y} = 55"},{"out_mask":"Ã¿Ã¿","out":"hi","err":"","code":"use strict; use warnings; $_ = my ($x, $y); $x = \"hi\"","err_mask":""},{"err_mask":"","code":"use strict; use warnings; my %x = (y => 'z'); $x{'hey'} += 100; \\%x","err":"","out":"{hey => 100,y => \"z\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't use an undefined value as an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $y; my @x = @$y; # rvalue"},{"code":"use strict; use warnings; my $y; my @x; @$y = @x; # lvalue","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"err":"\"my\" variable $z masks earlier declaration in same scope at (eval 1) line 1, <STDIN> line 1.\n","out":"","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my $z = {}; (my $z)->{z}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't declare hash element in \"my\" at (eval 1) line 1, at EOF\n","err":"\"my\" variable $z masks earlier declaration in same scope at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $z = {}; my ($z->{z})","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"\"my\" variable $z masks earlier declaration in same scope at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my $z = {}; my $z->{z}"},{"err_mask":"","code":"use strict; use warnings; [ 'NaN' + 'sNaN' ]","out":"[\"NaN\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"data","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; no strict 'refs'; my $name = 'something'; $$name = 'data'; { our $something; $something } # ... then add no strict 'refs';"},{"out":"","err":"Useless use of a constant (\"ok\") in void context at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; 'ok'; ()"},{"code":"use strict; use warnings; [open my $fh, '<', '']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]"},{"out_mask":"Ã¿","out":"1","err":"\"my\" variable $fh masks earlier declaration in same scope at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; open(my $fh, \">\", \"myfic.txt\");my ($fh) = @_; # because this should give you a warning","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]","code":"use strict; use warnings; [open my $fh, '<', undef]","err_mask":""},{"out":"1","err":"hi","out_mask":"Ã¿","err_mask":"Ã¿Ã¿","code":"use strict; use warnings; open my $out2, q{>&=}, 2 or die qq{open failed: $!}; print $out2 \"hi\";"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; our $x = 1; my $x = 2; $x","err":"\"my\" variable $x masks earlier declaration in same scope at (eval 1) line 1, <STDIN> line 1.\n","out":"2","out_mask":"Ã¿"},{"out_mask":"","out":"","err":"","code":"use strict; use warnings; package foo {} foo->import;","err_mask":""},{"code":"use strict; use warnings; { package Foo; our $bar = 42; } my $pkg = \"Foo\"; my $var = do { no strict 'refs'; \\${\"${pkg}::bar\"} }; $$var","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"42"},{"code":"use strict; use warnings; { package Foo; our $bar = 42; } my $pkg = \"Foo\"; ${ $::{$pkg . '::'}->{bar} }","err_mask":"","out_mask":"Ã¿Ã¿","out":"42","err":""},{"code":"use strict; use warnings; { package Foo; sub bar { 42 } } my $pkg = \"Foo\"; my $fn = \\&{\"${pkg}::bar\"}; $fn->()","err_mask":"","out_mask":"Ã¿Ã¿","out":"42","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use string (\"Foo::bar\") as a subroutine ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; use warnings; { package Foo; sub bar { 42 } } my $pkg = \"Foo\"; \"${pkg}::bar\"->()","err_mask":""},{"err_mask":"","code":"use strict; use warnings; package Obj; sub new { return bless {} , shift; } sub w_state { state $foo; return ++$foo; } ; package main; my @x; my $t = Obj->new; my $r = Obj->new; push @x, $t->w_state; push @x, $r->w_state; [@x]","err":"","out":"[1,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,12,13,15,2,3,31,42]","code":"use strict; use warnings; {package sort::numeric; BEGIN { $INC{'sort/numeric.pm'} = 1 } sub import { no strict 'refs'; *{caller . '::sort'} = sub { GLOBAL::CORE::sort { $a <=> $b } @_ } } } use sort::numeric; [ sort 1,3,2,31,13,12,15,42 ] # pragma","err_mask":""},{"code":"use strict; use warnings; package SubTest; sub DESTROY { print qq{Good bye cruel wor...\\n}; } package main; sub foo { my ( $x, $worker ); $worker = bless sub { $x++; $worker->() unless $x >= 5; }, q{SubTest}; $worker->(); undef $worker; $x; } print foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Good bye cruel wor...\n5"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"5Good bye cruel wor...\n","code":"use strict; use warnings; package SubTest; sub DESTROY { print qq{Good bye cruel wor...\\n}; } package main; sub foo { my ( $x, $worker ); $worker = bless sub { $x++; $worker->() unless $x >= 5; }, q{SubTest}; $worker->(); $x; } print foo;","err_mask":""},{"code":"use strict; use warnings; package SubTest; sub DESTROY { print qq{Good bye cruel wor...\\n}; } package main; sub foo { my ( $x, $worker ); $worker = bless sub { $x++; $worker->() unless $x >= 5; undef $worker; }, q{SubTest}; $worker->(); $x; } foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Good bye cruel wor...\n"},{"code":"use strict; use warnings; package SubTest; sub DESTROY { print qq{Good bye cruel wor...\\n}; } package main; sub foo { my ( $x, $worker ); $worker = bless sub { $x++; $worker->() unless $x >= 5; undef $worker; }, q{SubTest}; $worker->(); $x; } print foo;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Good bye cruel wor...\n5"},{"code":"use strict; use warnings; print $!","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Too many open files"},{"code":"use strict; use warnings; print &$!;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"&$!\"\n","err":""},{"code":"use strict; use warnings; print chr(0xe08)","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Wide character in print at (eval 1) line 1, <STDIN> line 1.\n","out":"Ã Â¸Â"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Foo oneFoo twoFoo three","err":"","code":"use strict; use warnings; print \"Foo $_\" foreach qw(one two three);","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; reduce 1;","err":"Number found where operator expected at (eval 1) line 1, near \"reduce 1\"\n\t(Do you need to predeclare reduce?)\n","out":"ERROR: syntax error at (eval 1) line 1, near \"reduce 1\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::reduce called at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; use warnings; reduce(1)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"\u0001\u0002\u0003\n","err":"","code":"use strict; use warnings; say 1.2.3","err_mask":""},{"err_mask":"","code":"use strict; use warnings; sort { $a <=> $x } 1,2,3; # looks like an error to me","out":"ERROR: Global symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"Useless use of non-destructive substitution (s///r) in void context at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; s/^\\///r for ''; ''","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"Subroutine main::xyz redefined at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; sub abc { } sub xyz { } *xyz = sub { 123 }; { no warnings \"redefine\"; *abc = sub { 4 }; [] } # no warnings '...' is usefully self-documenting, any particular reason to do things manually?","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[3]","err":"","code":"use strict; use warnings; sub ALL_EMPS { return +{ one => 1, two => 2, three => 3}}; my %h = %{ ALL_EMPS() }; [$h{three}]","err_mask":""},{"err":"","out":"20\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; sub a :lvalue { $a } a=10;a=20; print \"$a\\n\"; # <--- see, strict and warnings clean"},{"code":"use strict; use warnings; sub Bar { ++$_ for @_ } my $x; 1 for @{$x}; $x # note that it's not just function calls, you'll get the same with foreach aliasing","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[101,6,102,7]","err":"","code":"use strict; use warnings; sub create_iterator { my ($val) = @_; my $iter = sub { return ++$val; } ; return $iter } my $iter1 = create_iterator(100); my $iter2 = create_iterator(5); [$iter1->(),$iter2->(),$iter1->(),$iter2->()]","err_mask":""},{"out":"[1,2,3,4,5,6]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; sub flatten { return map { ref($_) eq 'ARRAY' ? flatten(@$_) : $_ } @_ } [flatten([1, [2, 3], [4, [5]], 6])]"},{"code":"use strict; use warnings; sub flatten { return map { ref($_) eq 'ARRAY' ? flatten(@$_) : $_ } @_ } [flatten(1, [2, 3], [4, [5]], 6])]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"6]\"\nUnmatched right square bracket at (eval 1) line 1, at end of line\n"},{"out_mask":"Ã¿Ã¿","err":"","out":"42","code":"use strict; use warnings; sub foo { 42 } *bar = \\&foo; bar()","err_mask":""},{"code":"use strict; use warnings; sub foo { 42 } my $name = 'foo'; 'main'->$name","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"42"},{"err_mask":"","code":"use strict; use warnings; sub foo { \"foo\" } foo","err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"use strict; use warnings; sub foo { my ($ch, $name) = @_; } foo(undef, undef); #are you sure?"},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; sub foo { shift } my $name = 'foo'; 'main'->can($name"},{"out_mask":"Ã¿Ã¿","out":"42","err":"","code":"use strict; use warnings; sub foo { shift } my $name = 'foo'; 'main'->can($name)->(42)","err_mask":""},{"code":"use strict; use warnings; sub foo { shift } my $name = 'foo'; 'main'->can($name)(42)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \")(\"\n"},{"code":"use strict; use warnings; sub Foo { undef } sub Bar { } Bar(@{Foo()}) # you're saying this one works, or did you mean the else { } clause?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; use warnings; sub Foo {undef } sub Bar { } my $x; Bar(@{$x = Foo()})","err_mask":""},{"out_mask":"","out":"","err":"","code":"use strict; use warnings; sub func { return undef;} if(1 and defined(func(\"Foo\"))) { print \"Success!\"; }","err_mask":""},{"code":"use strict; use warnings; sub func { return undef;} if(1 and !defined(func(\"Foo\"))) { print \"Success!\\n\"; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Success!\n"},{"out_mask":"","out":"","err":"","code":"use strict; use warnings; sub func { return undef;} if(1 and defined(func(\"Foo\"))) { print \"Success!\\n\"; }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[125]","code":"use strict; use warnings; sub get_closure { my $x = 124; my $returnval = sub { return $x; }; ++$x; return $returnval; } my $foo = get_closure(); [$foo->()]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$retval\" requires explicit package name (did you forget to declare \"my $retval\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; use warnings; sub get_closure { my $x = 124; my $returnval = sub { return $x; }; ++$x; return $retval; } my $foo = get_closure(); [$foo->()]","err_mask":""},{"code":"use strict; use warnings; sub get_closure { my $x = 124; return sub { return $x; } } my $foo = get_closure(); [$foo->()]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[124]","err":""},{"err_mask":"","code":"use strict; use warnings; sub get_closure { my $x = 124; return sub { return $x; }; ++$x; } my $foo = get_closure(); [$foo->()]","err":"","out":"[124]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; sub ls{my ($n, $h)=@_;my $ret;for(0..$#$h){$ret=$_ and last if $n eq $h->[$_]}$ret}; ls (3,[0,1,4,3,2])","err":"","out":"3","out_mask":"Ã¿"},{"out":"","err":"Variable \"$x\" is not available at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; sub { my $x = 42; sub { eval '$x' } }->()->()"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; sub outer { my ($var) = @_; sub inner { print $var||'three' } }   outer(\"one\"); inner(); outer(\"two\"); inner() # as the warning implies, \"don't do this\"","out":"oneone","err":"Variable \"$var\" will not stay shared at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; sub sort { CORE::GLOBAL::sort { $a <=> $b } @_ } [ sort 1,3,2,31,13,12,15,42 ] # huh, maybe","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,12,13,15,2,3,31,42]"},{"code":"use strict; use warnings; sub sort { GLOBAL::CORE::sort { $a <=> $b } @_ } [ sort 1,3,2,31,13,12,15,42 ] # all \u0002*your*\u0002 sorts, sure, but not all sorts everywhere","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,12,13,15,2,3,31,42]"},{"err_mask":"","code":"use strict; use warnings; sub test { return bareword { return 42; } }; test()","out":"42","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; sub what { (my $foo, @_) = @_; \\@_ } what(qw(a b c d));","err":"","out":"[\"b\",\"c\",\"d\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global @_ in \"my\" at (eval 1) line 1, near \", @_\"\n","err":"","code":"use strict; use warnings; sub what { my ($foo, @_) = @_; \\@_ } what(qw(a b c d));","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"use strict;use warnings;sub x { my($x,$y,$z)=@_;print $x } x(1,2);","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Possible unintended interpolation of @xxxxxxxx in string at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: Global symbol \"@xxxxxxxx\" requires explicit package name (did you forget to declare \"my @xxxxxxxx\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; system \"echo 'xxx@xxxxxxxx$' rsync\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; \\&this_sub_doesnt_exist"},{"out":"UTF-32","err":"Use of uninitialized value $1 in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; \"UCS-4\" =~ /^UCS-?4-?(BE|LE)?$/i; eval q@uc(\"UTF-32$1\")@"},{"code":"use strict; use warnings; (undef) = 10;","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; undef = 10;","err_mask":""},{"err_mask":"","code":"use strict; use warnings; undef $f; my $f;","out":"ERROR: Global symbol \"$f\" requires explicit package name (did you forget to declare \"my $f\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[1,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; use 5.016; package Obj; sub new { return bless {} , shift; } sub w_state { state $foo; return ++$foo; } ; package main; my @x; my $t = Obj->new; my $r = Obj->new; push @x, $t->w_state; push @x, $r->w_state; [@x]"},{"code":"use strict; use warnings; use constant TEST2 => TEST1; use constant TEST1 => 1; use constant TEST3 => TEST1; [TEST1, TEST2, TEST3]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Bareword \"TEST1\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\nBEGIN not safe after errors--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"-0400","code":"use strict; use warnings; use DateTime::TimeZone; my $tz = DateTime::TimeZone->new(name => '-0400')->name","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: The timezone 'America/New_York' could not be loaded, or is an invalid name.\n","err":"","code":"use strict; use warnings; use DateTime::TimeZone; my $tz = DateTime::TimeZone->new(name => 'America/New_York')","err_mask":""},{"code":"use strict; use warnings; use experimental qw[signatures]; sub test ($foo) { say $foo } test ('moo')","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"moo\n","err":""},{"err":"","out":"60","out_mask":"Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; use experimental qw(signatures); sub whatever($=) { print $= } whatever(3) # I'm happy enough with the way signatures work at the moment though"},{"code":"use strict; use warnings; use feature qw(say); say for qw(foo -- bar); # what makes you think it throws an error?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo\n--\nbar\n","err":""},{"code":"use strict; use warnings; use feature qw(say); use XML::LibXML; my $t1 = XML::LibXML::Text->new( q{foo} ); my $t2 = XML::LibXML::Text->new( q{bar} ); $t1->appendChild( $t2 ); say $t1;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate XML/LibXML.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; use warnings; use List::MoreUtils qw(any all); my $count = 5; my @nums = (sort { $a <=> $b} qw(10 4 3 4 4 59 39 5 3)); [any { my $x = $_; my $p = $nums[$_]; all { $nums[$x+$_]-$p <= 3 } (0 .. $count-1) } 0 .. (@nums-$count)]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nUnmatched right square bracket at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; use List::MoreUtils qw(any all); my @nums = (sort { $a <=> $b} qw(10 4 3 4 4 59 39 5 3)); [any { my $x = $_; my $p = $nums[$_]; all { $nums[$x+$_]-$p <= 3 } (0 .. 5) } } keys(@nums)]"},{"code":"use strict; use warnings; use List::MoreUtils qw(any all); my @nums = (sort { $a <=> $b} qw(10 4 3 4 4 59 39 5 3)); [any { my $x = $_; my $p = $nums[$_]; all { $nums[$x+$_]-$p <= 3 } (0 .. 5) } keys(@nums)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"code":"use strict; use warnings; use List::MoreUtils qw/uniq/; [ sort(uniq qw/a b c a/) ];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\",\"a\"]","err":"Unquoted string \"uniq\" may clash with future reserved word at (eval 1) line 1, <STDIN> line 1.\nArgument \"b\" isn't numeric in sort at (eval 1) line 1, <STDIN> line 1.\nArgument \"a\" isn't numeric in sort at (eval 1) line 1, <STDIN> line 1.\nArgument \"c\" isn't numeric in sort at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\"]","code":"use strict; use warnings; use List::MoreUtils qw/uniq/; [ sort(uniq(qw/a b c a/)) ];","err_mask":""},{"out_mask":"Ã¿","err":"","out":"1","code":"use strict; use warnings; use List::Util; my $c = [qw(a b c)]; print \"1\" if List::Util::any { $_ eq \"a\" } @{$c}","err_mask":""},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; use List::Util qw(pairmap); $_ = qq{foo}; my @l = /(\\R)/; push @l, undef if @l%2; [ pairmap { [$a, $b] } @l ]"},{"out_mask":"Ã¿Ã¿","err":"Odd number of elements in pairmap at (eval 1) line 1, <STDIN> line 1.\n","out":"[]","code":"use strict; use warnings; use List::Util qw(pairmap); $_ = qq{foo\\n}; [ pairmap { } split /\\R/ ];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"Odd number of elements in pairmap at (eval 1) line 1, <STDIN> line 1.\n","out":"[]","code":"use strict; use warnings; use List::Util qw(pairmap); $_ = qq{foo}; [ pairmap { } split /(\\R)/ ]; # Better test case.","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[6]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; use List::Util qw[sum]; my $var = {  a => {count => 1},  b => {count => 5} }; [sum map { $_->{count} } values %{ $var }]"},{"err_mask":"","code":"use strict; use warnings; use List::Util qw[sum]; my $var = {  a => {count => 1},  b => {count => 5} }; [sum values %{ $var }]","err":"","out":"[106883576]","out_mask":"Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿"},{"code":"use strict; use warnings; use POSIX qw(sysconf); [ sysconf(POSIX::_SC_PAGESIZE()) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[4096]"},{"code":"use strict; use warnings; use POSIX; setlocale(LC_NUMERIC, \"de_DE\") or die $!; sprintf(\"%.2f\", 23.45)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Too many open files at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; use warnings; use POSIX; setlocale(LC_NUMERIC, \"de_DE\"); sprintf(\"%.2f\", 23.45)","out":"23.45","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; use Scalar::Util qw(blessed); [ blessed qr/foo/ ]","out":"[\"Regexp\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use strict; use warnings; use Scalar::Util qw( reftype ); my $foreach = q{}; ref $foreach eq q{CODE}; # No warning."},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; use Scalar::Util qw( reftype ); my $foreach = q{}; reftype $foreach eq q{CODE}; # Why does this warning occur?","out":"","err":"Use of uninitialized value in string eq at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Regexp\",\"REGEXP\"]","code":"use strict; use warnings; use Scalar::Util qw(reftype); my $re = qr/foo/; [ ref $re, reftype $re ];","err_mask":""},{"err_mask":"","code":"use strict; use warnings; use Scalar::Util qw(reftype); my $x = bless \\*STDOUT; [ ref $x, reftype $x ];","out":"[\"main\",\"GLOB\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"ARRAY\",\"ARRAY\"]","code":"use strict; use warnings; use Scalar::Util qw(reftype); my $x = []; [ ref $x, reftype $x ];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"HASH\",\"HASH\"]","err":"","code":"use strict; use warnings; use Scalar::Util qw(reftype); my $x = {}; [ ref $x, reftype $x ];","err_mask":""},{"err_mask":"","code":"use strict; use warnings; use Scalar::Util qw(reftype); my $x = \\*STDOUT; [ ref $x, reftype $x ];","err":"","out":"[\"GLOB\",\"GLOB\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"CODE\",\"CODE\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; use Scalar::Util qw(reftype); my $x = sub{}; [ ref $x, reftype $x ];"},{"out":"ERROR: Bareword \"vA\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; vA.10"},{"err":"","out":"like this","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; $::whatever = 'like this'; $::whatever"},{"out_mask":"","out":"","err":"","code":"use strict; while (my $x = 1) { last } continue { say $x }","err_mask":""},{"err_mask":"","code":"use strict; $x->()","err":"","out":"ERROR: Global symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; @x = (foo => 1, bar => 2); ${{@x}}{\"foo\"}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"@x\" requires explicit package name (did you forget to declare \"my @x\"?) at (eval 1) line 1, <STDIN> line 1.\nGlobal symbol \"@x\" requires explicit package name (did you forget to declare \"my @x\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use strict; $x = inf;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use String::Util qw/trim/; trim(\"pink_mist\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate String/Util.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Can't locate strit.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strit; 404->();"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate subs.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use subs 'defined'; sub defined { 42 } defined","err_mask":""},{"out":"ERROR: Can't locate subs.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use subs 'foo'; sub AUTOLOAD { print 'hi' } foo;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate subs.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use subs print; sub print {CORE::print \"foo: @_\"}; print bar;","err_mask":""},{"err":"","out":"ERROR: Can't locate subs.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use subs qw/print/; sub *print {CORE::print \"foo: @_\"}; print bar;"},{"code":"use subs qw/print/; sub print {CORE::print \"foo: @_\"}; print bar;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate subs.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"use Sub::Util"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Switch/Plain.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Switch::Plain;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Test/more.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","code":"use Test::more","err_mask":""},{"err_mask":"","code":"use Test::More","out":"ERROR: Can't locate Test/More.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Tie/IxHash.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","code":"use Tie::IxHash","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Time::HiRes::usleep(-1): negative time not invented yet at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Time::HiRes 'usleep'; usleep(-1);","err_mask":""},{"err_mask":"","code":"use Time::Moment","err":"","out":"ERROR: Can't locate Time/Moment.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Time::Seconds; say ONE_YEAR","err":"","out":"31556930\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","code":"use Try::Tiny; $a=1; $b=1; LABL: while($a--) {try {die if $b--} catch {redo LABL;} finally {print \"bark \"; print \"hello world\"};","err_mask":""},{"err_mask":"","code":"use Try::Tiny; $a=1; $b=1; LABL: while($a--) {try {die if $b--} catch {redo LABL;} finally {print \"bark \"}; print \"hello world\"};","err":"","out":"bark bark hello world","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Try::Tiny; $a=1; $b=1; LABL: while($a--) {try {die if $b--} catch {redo LABL;}; print \"hello world\"};","err":"","out":"hello world","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hoyl shit that brokeERROR: foo at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Try::Tiny; try {die \"baz\";} catch {die \"foo\"} finally { print \"hoyl shit that broke\"};","err_mask":""},{"err_mask":"","code":"use Unicode::UCD qw(charinfo); charinfo('x')","out":"ERROR: Can't locate Unicode/UCD.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use URI","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"","out":"","err":"","code":"use URI;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"%3Carg%3E","code":"use URI::Encode qw/uri_encode/; uri_encode \"<arg>\", {\"encode_reserved\", 1}; ","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"use URI::Escape;"},{"err_mask":"","code":"use URI::Escape qw( uri_escape ); uri_escape q{foo+bar};","err":"","out":"foo%2Bbar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"http%3A%2F%2Fweb.de%2F","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use URI::Escape; uri_escape_utf8 \"http://web.de/\""},{"err_mask":"","code":"use URI; my $foo = URI->new('http://www.example.com?q=Ãthelo&s=blah'); $foo->as_string;","out":"ERROR: Can't locate URI/http.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use URI; my $u = URI->new( q{http://foo.com/bar?x=1&x=2&y=baz} ); +{ $u->query_form };","err":"","out":"ERROR: Can't locate URI/http.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use URI; my $u = URI->new( q{http://foo} ); do { no overload; print $u; }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate URI/http.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\n"},{"err_mask":"","code":"use URI; $u = URI->new(\"foo\", \"http\"); [ $u->as_string, $u->canonical ]","out":"ERROR: Can't locate URI/http.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Unrecognized character \\x{a7}; marked by <-- HERE after se utf8;  <-- HERE near column 102 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8;  Â§$Â§\")/\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¢ÂÂ","code":"use utf8; \"â\"","err_mask":""},{"err":"","out":"ERROR: Unrecognized character \\x{2603}; marked by <-- HERE after se utf8; $<-- HERE near column 102 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; $â = 1; $â"},{"out":"[\"\\x{662}\\x{660}\\x{661}\\x{666}-\\x{660}\\x{663}-\\x{662}\\x{662}\",\"\\x{661}\\x{668}:\\x{665}\\x{664}:\\x{663}\\x{662}\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; ['Ù¢Ù Ù¡Ù¦-Ù Ù£-Ù¢Ù¢ Ù¡Ù¨:Ù¥Ù¤:Ù£Ù¢' =~ /(\\d{4}-\\d{2}-\\d{2}) (\\d{2}:\\d{2}:\\d{2})/]"},{"code":"use utf8; ['Ù¢Ù Ù¡Ù¦-Ù Ù£-Ù¢Ù¢ Ù¡Ù¨:Ù¥Ù¤:Ù£Ù¢' =~ /(\\d{4}-\\d{2}-\\d{2}) (\\d{2}:\\d{2}\\d{2})/]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"use utf8; ['Ù¢Ù Ù¡Ù¦-Ù Ù£-Ù¢Ù¢ Ù¡Ù¨:Ù¥Ù¤:Ù£Ù¢' =~ /(\\d{4}-\\d{2}-\\d{2}) (\\d{2}:\\d{2}:\\d{2})/a]","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"use utf8; \"Ù¢Å±\" =~ /^\\w+$/ # thomas_d"},{"code":"use utf8; 'Ù£' =~ /\\d/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out":"[1,1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; [ 'Ù£' =~ /\\d/a, 'Ù£' =~ /./a, \"Ù¢\" =~ /[Ù¡-Ù£]/a, 'Ù£' =~ /\\D/a ]"},{"err_mask":"","code":"use utf8; $ð¾ = 42;","out":"ERROR: Unrecognized character \\x{1f5fe}; marked by <-- HERE after se utf8; $<-- HERE near column 102 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use utf8; $â = 5;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x{2706}; marked by <-- HERE after se utf8; $<-- HERE near column 102 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\u00e6\\u00f8\\u00e5","code":"use utf8; $_ = \"Ã¦Ã¸Ã¥\"; s/(.)/sprintf('\\\\u%04x', ord $1)/ger","err_mask":""},{"out":"testÃÂ¦","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; binmode STDOUT, ':utf8'; my $foo = \"test\\x{327}\"; $foo =~ tr/\\x{327}/\\x{326}/; $foo"},{"err_mask":"","code":"use utf8; $bit = \"C\"; print unpack(\"b8\", $bit) . \"\\n\"; $bit | 1 << 6; $bit = unpack(\"b8\", $bit); print $bi","out":"11000010\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"bless( {}, 'skjÃ¦rgÃ¥rdsÃ¸l' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; bless {}, \"skjÃ¦rgÃ¥rdsÃ¸l\";"},{"out_mask":"Ã¿","err":"","out":"1","code":"use utf8; 'ð¢' =~ /\\d/","err_mask":""},{"err_mask":"","code":"use utf8; 'ð¢' =~ /\\d/a","err":"","out":"","out_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use utf8; $_=\"Ã©\"; $_++; $_"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,\"\"]","code":"use utf8; ['Ã©' =~ /[[:alpha:]]/ . '', 'Ã©' =~ /[[:alpha:]]/a . '']","err_mask":""},{"err_mask":"","code":"use utf8; fc \"Ã\"","out":"ss","err":"","out_mask":"Ã¿Ã¿"},{"err":"","out":"[\"\\x{561}\",\"\\x{4e55}\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; [fc(\"Ô±\"), fc(\"ä¹\")]"},{"err_mask":"","code":"use utf8; $ããã«ã¡ã¯ = \"Good afternoon\"; $ããã«ã¡ã¯","err":"","out":"Good afternoon","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"\\0\\0\\0\\0\\0\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; $l = \"fooso\"; [ $l & chr(0x80)x(length $l) ]"},{"out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; $l = \"fooso\"; [ $l =~tr/\\0-\\225//dr   ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"ss\",\"ss\",\"ss\",\"\\x{3c3}\",\"\\x{3c3}\",\"\\x{3c3}\",\"i\",\"i\",\"i\\x{307}\",\"\\x{131}\"]","err":"","code":"use utf8; [ map fc, qw(SS ss Ã Î£ Ï Ï I i Ä° Ä±) ]","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use utf8; [ map lc, qw(SS ss Ã Î£ Ï Ï I i Ä° Ä±) ]","err":"Use of uninitialized value $list in pattern match (m//) at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/utf8_heavy.pl line 599, <STDIN> line 1.\n","out":"[\"ss\",\"ss\",\"\\x{df}\",\"\\x{3a3}\",\"\\x{3c3}\",\"\\x{3c2}\",\"i\",\"i\",\"\\x{130}\",\"\\x{131}\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use utf8; my $Ã¥ = \"buu\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"buu"},{"err_mask":"","code":"use utf8; my %foo = ('â¥' => 'lukelove'); print $foo{'â¥'} . 'fuckit';","err":"","out":"lukelovefuckit","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"lukelove\n","code":"use utf8; my %foo = ('â¥' => 'lukelove'); say $foo{'â¥'};","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"testÃÂ¦","err":"","code":"use utf8; my $foo = \"test\\x{327}\"; $foo =~ tr/\\x{327}/\\x{326}/; $foo","err_mask":""},{"err_mask":"","code":"use utf8; my $input = 'Ù£'; say $input + 42;","out":"42\n","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"use utf8; my $str = \"ÃÃ¶\"; [ $str =~ /([[:upper:]])/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\x{c4}\"]","err":""},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"use utf8;  my $szÃ­n = 1; $szÃ­n + 1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ff21.ff22.ff23","code":"use utf8; my $x = \"ABC\"; $x =~ tr/ABC/ï¼¡ï¼¢ï¼£/; sprintf \"%vx\", $x","err_mask":""},{"code":"use utf8; my $x = \"BiÃ¨re\"; printf \"%vx\", $x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"42.69.e8.72.65"},{"err":"","out":"[1,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; my $x = \"cafÃ©\"; my $y = substr($x, 1); [ utf8::is_utf8($x), utf8::is_utf8($y) ]"},{"out_mask":"","out":"","err":"","code":"use utf8; my $Î±, $Î²; #these are fine, my $a, $b; is not :P","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[265]","err":"","code":"use utf8; [ord \"Ä\"]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"265","code":"use utf8; ord \"Ä\"","err_mask":""},{"out":"[248]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; [ord \"Ã¸\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[369]","err":"","code":"use utf8; [ord \"Å±\"]","err_mask":""},{"err":"","out":"209","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; ord uc \"Ã±\""},{"err":"","out":"Hi\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; package Âµ; sub message { \"Hi\" };  say Âµ->message;"},{"err_mask":"","code":"use utf8; 'pokÃ¨mon' =~ /\\bpok[eÃ¨]mon\\b/","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x{37e}; marked by <-- HERE after  print \"a\"<-- HERE near column 110 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use utf8; print \"a\"Í¾ print \"b\"","err_mask":""},{"err_mask":"","code":"use utf8; print join \"\", (\"?\"..\"?\");","out":"?","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hello","err":"","code":"use utf8; q ÌhelloÌ","err_mask":""},{"code":"use utf8; qÌhelloÌ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"qÃÂhelloÃÂ"},{"err_mask":"","code":"use utf8; quotemeta \"Ç\"","out":"ÃÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use utf8; \"Ç\" =~ s/([^A-Za-z_0-9])/\\\\$1/gr","err":"","out":"\\ÃÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"\",1,1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; [ scalar('Ù£' =~ /^\\d$/a), scalar('Ù£' =~ /^.$/a), scalar(\"Ù¢\" =~ /^[Ù¡-Ù£]$/a), scalar('Ù£' =~ /^\\D$/a) ]"},{"err_mask":"","code":"use utf8; [ scalar('Ù£' =~ /\\d/a), scalar('Ù£' =~ /./a), scalar(\"Ù¢\" =~ /[Ù¡-Ù£]/a), scalar('Ù£' =~ /\\D/a) ]","out":"[\"\",1,1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use utf8; sprintf \"%x\", ord \"Å\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"151","err":""},{"err_mask":"","code":"use utf8; sprintf \"%x\", ord uc \"Ã±\"","err":"","out":"d1","out_mask":"Ã¿Ã¿"},{"err":"","out":"[\"True\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; [ 'Ã' =~ m/^\\Qss\\E\\z/i ? 'True' : 'False' ];"},{"code":"use utf8; sub aâb { \"hi\" } aâb","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal declaration of subroutine main::a at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"whee","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; sub fÃ¥bar { print \"whee\" } fÃ¥bar();"},{"code":"use utf8; sub InGerm { join \"\\n\", map sprintf(\"%x\", ord($_)), qw(Ã¤ Ã¶ Ã¼) } \"Ã¶\" =~ /\\p{InGerm}/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"use utf8; sub Â» { print \"whee\" } Â»()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal declaration of anonymous subroutine at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use utf8; sub t { 1, 2, 3 } tâ¦0â¦","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x{2987}; marked by <-- HERE after , 2, 3 } t<-- HERE near column 120 at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use utf8; sub à² _à²  { \"yay\" } à² _à² ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"yay","err":""},{"code":"use utf8; sub ä¸ª { print \"whee\" } ä¸ª();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"whee"},{"out":"Ã","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"use utf8; uc \"Ã±\""},{"out_mask":"Ã¿Ã¿","err":"","out":"SS","code":"use utf8; uc \"Ã\"","err_mask":""},{"code":"use utf8; unpack \"H2\", \"Å\"","err_mask":"","out_mask":"Ã¿Ã¿","out":"51","err":""},{"out":"ERROR: Can't find Unicode property definition \"Foo\" in regex; marked by <-- HERE in m/\\p{Foo} <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; use constant Foo => join \"\\n\", map sprintf(\"%x\", ord($_)), qw(Ã¤ Ã¶ Ã¼); [ \"Ã¶\" =~ /\\p{Foo}/ ];"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"use utf8; use constant InFoo => join \"\\n\", map sprintf(\"%x\", ord($_)), qw(Ã¤ Ã¶ Ã¼); [ \"Ã¶\" =~ /\\p{InFoo}/ ];","err_mask":""},{"code":"use utf8; use feature fc; [fc(\"Ô±\"), fc(\"ä¹\")]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Feature \"\" is not supported by Perl 5.24.0 at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Mojo/UserAgent.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use utf8; use Mojo::UserAgent; Mojo::UserAgent->new->get('http://maÃ±ana.com')->res->dom->at('title')->text","err_mask":""},{"out":"ERROR: Illegal declaration of subroutine main::Ã¢ÂÂ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; use strict; sub ââ () { \"cool\" } ââ"},{"code":"use utf8; [ \"Ó¦ser BÃ¡nana\" =~ /\\w+/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\x{4e6}ser\",\"B\\x{e1}nana\"]","err":""},{"out":"ÃÂ¯ ÃÂ¾ÃÂÃÂµÃÂ½ÃÂ ÃÂ¿ÃÂ»ÃÂ¾ÃÂÃÂ¾ ÃÂ³ÃÂ¾ÃÂ²ÃÂ¾ÃÂÃÂ ÃÂ¿ÃÂ¾ ÃÂÃÂÃÂÃÂÃÂºÃÂ¸ÃÂ¹","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; \"Ð¯ Ð¾ÑÐµÐ½Ñ Ð¿Ð»Ð¾ÑÐ¾ Ð³Ð¾Ð²Ð¾ÑÑ Ð¿Ð¾ ÑÑÑÑÐºÐ¸Ð¹\""},{"code":"use utf8; $Ô± = 5; $ä¹ = 7; [ $Ô± + $ä¹ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[12]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"no\"]","code":"use utf8; [\"Ô±\" < \"ä¹\"?\"yes\":\"no\"]","err_mask":""},{"code":"use v5.12; $foo = 'bar'; ++$$foo; $bar","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"use v5.12; \"foo\" =~ /(.*)/; say $1; { if (\"bar\" =~ /(.*)/) { say $1; } } say $1;","err":"","out":"foo\nbar\nfoo\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use v5.12; \"foo\" =~ /(.*)/; say $1; if (\"bar\" =~ /(.*)/) { say $1; } say $1;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo\nbar\nbar\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"a, 1, 2\na, 1, 3\nb, 1, 2\nb, 1, 3\n","code":"use v5.12; sub combine { my $f = shift; @_ or return $f->(); my $xs = shift; for my $x (@$xs) { combine(sub { $f->($x, @_) }, @_); } } combine sub { say join(\", \", @_) }, ['a', 'b'], [1], [2, 3];","err_mask":""},{"code":"use v5.12; sub combine { my $f = shift; @_ or return $f->(); my $xs = shift; for my $x (@$xs) { combine(sub { $f->($x, @_) }, @_); } } combine sub { say join(\", \", @_), \" | \"; }, ['a', 'b'], [1], [2, 3];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"a, 1, 2 | \na, 1, 3 | \nb, 1, 2 | \nb, 1, 3 | \n","err":""},{"err_mask":"","code":"use v5.12; ++$x","out":"1","err":"","out_mask":"Ã¿"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"use v5.16; $[ = 0"},{"err_mask":"","code":"use v5.16; $[ = 1","out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use v5.16; $_=1; $0xfc","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$0xfc\n\"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"/home/ryan/bots/perlbuut/lib/eval.pl","code":"use v5.16; $_=1; $0x fc","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","code":"use v5.16; $[ = -5;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"5 4 3 2 1 0 ","code":"use v5.16; my $f = sub { my ($n) = @_; print \"$n \"; $n or return; @_ = $n - 1; goto __SUB__; }; $f->(5);","err_mask":""},{"code":"use v5.16; ++$x","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"use v5.18; 1;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"use v5.18.2;"},{"err_mask":"","code":"use v5.20; my @x; push @x, foo(), foo(); sub foo { state $var = 0; $var++ } push @x, foo(), foo(); \\@x","err":"","out":"[0,1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use v5.20; say hi","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"hi\n","err":"","code":"use v5.20; say \"hi\" for Altreus;","err_mask":""},{"out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use v5.20; sub foo { __SUB__ } foo"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1,2]","err":"","code":"use v5.20; use warnings; { package Hi; sub foo { state $x = 0; $x++ }  sub new { bless {}, $_[0] } }  [ Hi->new->foo, Hi->new->foo, Hi->new->foo ]","err_mask":""},{"code":" use v5.6.1;","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"surprise!\n","err":"","code":"use Variable::Magic qw(cast wizard); cast my $foo = 4, wizard get => sub { ${$_[0]}++ }; unless ($foo == 5) { say 1 } elsif ($foo == 5) { say 2 } else { say \"surprise!\" }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"123","code":"use vars qw( $foo ); $foo = 123; $foo;","err_mask":""},{"err_mask":"","code":"use warnings;","out":"","err":"","out_mask":""},{"err":"Argument \"\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\nArgument \"\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out":"1","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; \"\" == \"\""},{"code":"use warnings; ();","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿","err":"","out":"{}","code":"use warnings; {{}}","err_mask":""},{"out_mask":"","out":"","err":"$# is no longer supported at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; $#","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"Odd number of elements in anonymous hash at (eval 1) line 1, <STDIN> line 1.\n","out":"{\"HASH(0x4cafb88)\" => undef}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; +{{}}"},{"code":"use warnings;  [ !!\"\" == 0 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"err":"Argument \"\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings;  [ \"\" == 0 ]"},{"code":"use warnings; @_[0]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Scalar value @_[0] better written as $_[0] at (eval 1) line 1, <STDIN> line 1.\n","out":"use warnings; @_[0]"},{"err":"Argument \"\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"0","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; 0 + ''"},{"code":"use warnings; 0+''","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"0","err":"Argument \"\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"Argument \"\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"0","code":"use warnings; 0+\"\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err":"","out":"61299592","code":"use warnings; 0+{}","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"use warnings; 0->[0];"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; 00./(?[()])/","err":"The regex_sets feature is experimental in regex; marked by <-- HERE in m/(?[ <-- HERE ()])/ at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: Incomplete expression within '(?[ ])' in regex; marked by <-- HERE in m/(?[() <-- HERE ])/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"0","err":"","code":"use warnings; 0+!1","err_mask":""},{"err_mask":"","code":"use warnings; 0 + !5","err":"","out":"0","out_mask":"Ã¿"},{"out":"9","err":"","out_mask":"Ã¿","err_mask":"","code":"use warnings; 0+'    9'"},{"err_mask":"","code":"use warnings; 0+\"    9e5\";  # boo!","out":"900000","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; 0+\"    9e\";  # yay!","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"Argument \"    9e\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"9"},{"code":"use warnings; 0+(\"a\" eq \"b\")","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"Argument \"\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; [ '' == 0 ] # but you'll get a warning","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; 0 + defined( undef )","out":"0","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"use warnings; 0+'Inf'","err":"","out":"Inf","out_mask":"Ã¿Ã¿Ã¿"},{"code":"use warnings; 0+'nanny'","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿","err":"Argument \"nanny\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"NaN"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; '0' == undef","out":"1","err":"Use of uninitialized value in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿"},{"out":"hello ","err":"Use of uninitialized value $0 in scalar assignment at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; $0 = undef; \"hello $0\""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"Argument \"\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; [ 1 + \"\" ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; !1 == !1","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"use warnings; [ 1 == \"1\" ]","err_mask":""},{"out":"[1]","err":"Argument \"1foo\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ 1 == \"1foo\" ]"},{"out":"7","err":"Useless use of a constant (3) in void context at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; 1+2; 3+4"},{"out":"","err":"Argument \"123abc   \" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; '15.8' == '123abc   '"},{"code":"use warnings; '15.8' == undef","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Use of uninitialized value in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out":""},{"out_mask":"","out":"","err":"Argument \"\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; '15.8' == (undef // '')","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; '15.8' == (undef // ')'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; '15.8' == undef // ''","err":"Use of uninitialized value in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unknown warnings category '1' at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings 1e0;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"NaN\"]","err":"","code":"use warnings; [ 1 + \"NaN\" ]","err_mask":""},{"out":"[\"NaN\"]","err":"Argument \"Nanny may I have another?\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ 1 + \"Nanny may I have another?\" ]"},{"out":"[1]","err":"Argument \"not a number\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ 1 + \"not a number\" ]"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; 2 + '0 but foo'","err":"Argument \"0 but foo\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"2","out_mask":"Ã¿"},{"err_mask":"","code":"use warnings; 2 + '0 but true'","err":"","out":"2","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unmatched right square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, near \"$#a ]\"\n","code":"use warnings; $[ = 2; my @a = 5..9; [ keys @a], $#a ]","err_mask":""},{"code":"use warnings; 3 + undef","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"3","err":"Use of uninitialized value in addition (+) at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ 5 <=> \"infinityandbeyond\", 8 <=> \"nananananananananaBATMAN\" ]","out":"[-1,undef]","err":"Argument \"infinityandbeyond\" isn't numeric in numeric comparison (<=>) at (eval 1) line 1, <STDIN> line 1.\nArgument \"nananananananananaBATMAN\" isn't numeric in numeric comparison (<=>) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"Argument \"cats\" isn't numeric in numeric comparison (<=>) at (eval 1) line 1, <STDIN> line 1.\n","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ 7 <=> \"cats\" ]"},{"code":"use warnings; [ 7 <=> \"nan\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"code":"use warnings; [ 7 <=> \"nand\" ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"Argument \"nand\" isn't numeric in numeric comparison (<=>) at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"Argument \"nandos\" isn't numeric in numeric comparison (<=>) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; [ 7 <=> \"nandos\" ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"Argument \"a\" isn't numeric in numeric lt (<) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; 'a' < 0","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"Scalar value @a[1] better written as $a[1] at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; @a[1]"},{"out":"[1]","err":"Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/a{ <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ \"a{b\" =~ /a{/ ]"},{"out_mask":"Ã¿","out":"1","err":"","code":"use warnings; \"a{b\" =~ m/{/;","err_mask":""},{"out":"1","err":"Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/a{ <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; \"a{b\" =~ m/a{/;"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; @a = (); print 'true' if @a == undef;","out":"true","err":"Use of uninitialized value in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; @array[0]=5","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; $array[99999]=5; 0+ $array[99998]","out":"0","err":"Use of uninitialized value $array[99998] in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿"},{"out_mask":"","err":"Scalar value @array[...] better written as $array[...] at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value $index in array slice at (eval 1) line 1, <STDIN> line 1.\n","out":"","code":"use warnings; @array[$index]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"Use of uninitialized value $1 in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; \"a\" =~ s/./$1/gr"},{"out_mask":"","out":"","err":"Use of uninitialized value $1 in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; \"a\" =~ s/./$1/r","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; \"a\" =~ s/./$dict{1}/r","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Use of uninitialized value $dict{\"1\"} in substitution iterator at (eval 1) line 1, <STDIN> line 1.\n","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"matches","err":"","code":"use warnings; 'bill.gates@microsoft.com' =~ /[\\w.]+\\@microsoft\\.com$/ ? \"matches\" : \"does not\"","err_mask":""},{"code":"use warnings; binmode STDOUT; print \"\\x{1f4a9}\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"ð©","err":"Wide character in print at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"Argument \"bleh\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\nArgument \"blah\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"use warnings; \"blah\" == \"bleh\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; @bucket_store_content{ $_path_dismantled_tmp[-2] }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Use of uninitialized value in hash slice at (eval 1) line 1, <STDIN> line 1.\n","out":""},{"code":"use warnings; @confignew{ \"vm-id\" } = [@listvm];","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"use warnings; die, die, die;","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; dump","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"dump() better written as CORE::dump() at (eval 1) line 1, <STDIN> line 1.\n/home/ryan/workspace/perlblead-ci/runeval.sh: line 5:  2537 Aborted                 /home/ryan/perl5/perlbrew/perls/perlbot-intest/bin/perl /home/ryan/bots/perlbuut/lib/eval.pl\n"},{"err":"","out":"ERROR: Experimental each on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; each []"},{"err_mask":"","code":"use warnings; -e \"foo\\nbar\";","out":"","err":"","out_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ 'endurance' == 'strength' ? 'yes' : 'no' ]","err":"Argument \"strength\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\nArgument \"endurance\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out":"[\"yes\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; eval{print 1; next; print 2}","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"Exiting eval via next at (eval 1) line 1, <STDIN> line 1.\nExiting eval via next at (eval 1) line 1, <STDIN> line 1.\n","out":"1"},{"out":"1","err":"Exiting eval via next at (eval 1) line 1, <STDIN> line 1.\nExiting eval via next at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; eval{print 1; next; print 2}; print 'code: '.$?"},{"code":"use warnings; eval { $x->{a}{b} }","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; exit \"with a string\"","out":"","err":"Argument \"with a string\" isn't numeric in exit at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"1 { \"\n\"my\" variable $x masks earlier declaration in same statement at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"; }\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings FATAL => \"all\"; if (1 { my $x = 42; print $x; }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Unicode/UTF8.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings FATAL => 'utf8'; use Unicode::UTF8 'decode_utf8'; decode_utf8 \"\\x20\\xf8\\x20\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",undef,undef]","err":"Use of uninitialized value in -f at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; [ -f \"/\", -f \"/does-not-exist\", -f undef ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"1","err":"length() used on @foo (did you mean \"scalar(@foo)\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; @foo = (1,2,3); length(@foo)","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; \"foo\" ~~ \"Bar\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/{{ <-- HERE f/ at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"use warnings; \"{{foo\" =~ /{{f/","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; $foo = $foo . \"abc\";","out":"abc","err":"Use of uninitialized value $foo in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; 'foo' =~ s/(.)/\\1/","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","err":"\\1 better written as $1 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"SCALAR(0x34fe490)oo","err":"Can't use \\1 to mean $1 in expression at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; 'foo' =~ s/(.)/\\1/re"},{"out_mask":"Ã¿Ã¿Ã¿","err":"\\1 better written as $1 at (eval 1) line 1, <STDIN> line 1.\n","out":"foo","code":"use warnings; \"foo\"=~s/(foo)/\\1/r","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"Scalar value @hash{...} better written as $hash{...} at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value $key in hash slice at (eval 1) line 1, <STDIN> line 1.\n","out":"","code":"use warnings; @hash{$key}","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; @hash{$key} = [ @list ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"Use of uninitialized value $key in hash slice at (eval 1) line 1, <STDIN> line 1.\n","out":"1"},{"out_mask":"","err":"Useless use of hash element in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"","code":"use warnings; $hash{thing} => $value;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; ${^HELLO_GUYS} . \"\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Use of uninitialized value $^HELLO_GUYS in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n","out":""},{"err":"Odd number of elements in anonymous hash at (eval 1) line 1, <STDIN> line 1.\n","out":"{\"ARRAY(0x3ea2b88)\" => undef}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings;+{[ here => \"are\", my => \"values\" ]}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"3.16059037807746e+20","err":"Integer overflow in hexadecimal number at (eval 1) line 4, <STDIN> line 1.\nHexadecimal number > 0xffffffff non-portable at (eval 1) line 4, <STDIN> line 1.\n","code":"use warnings; hex q{112233445566778899}","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"{\"HASH(0x3791b88)\" => undef}","err":"Reference found where even-sized list expected at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; %h = { stuff => 'sterf' }; \\%h"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; if (1 { my $x = 42; print $x; }","err":"\"my\" variable $x masks earlier declaration in same statement at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: syntax error at (eval 1) line 1, near \"1 { \"\nsyntax error at (eval 1) line 1, near \"; }\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"true","err":"Argument \"b\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\nArgument \"a\" isn't numeric in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; if(\"a\" == \"b\"){print \"true\";}else{print \"false\";}"},{"out_mask":"","err":"","out":"","code":"use warnings; if (my $blah) { my $count = read $fh, my ($chunk), $chunk_size; }","err_mask":""},{"err_mask":"","code":"use warnings; if (my $blah) { my $count = read $fh, my $chunk, ($chunk_size); }","err":"","out":"","out_mask":""},{"code":"use warnings; if (my $blah) { my $count = read $fh, my $chunk, $chunk_size }","err_mask":"","out_mask":"","out":"","err":""},{"out":"","err":"Parentheses missing around \"my\" list at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; if (my $blah) { my $count = read $fh, my $chunk, $chunk_size; }"},{"out_mask":"","out":"","err":"","code":"use warnings; if (my $blah) { my $count = read $fh, my $chunk, +$chunk_size; }","err_mask":""},{"code":"use warnings; if ($_) { sub foo { ... } } else { sub foo { ... } }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Subroutine foo redefined at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"","out_mask":"","err_mask":"","code":"use warnings; if (\"this section commented out\" x 0) { die }"},{"err_mask":"","code":"use warnings; $INC{42}","out":"","err":"","out_mask":""},{"out_mask":"Ã¿","err":"Argument \"\"1\"\" isn't numeric in int at (eval 1) line 1, <STDIN> line 1.\n","out":"0","code":"use warnings; int(q(\"1\"))","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; join \" \", undef, undef, undef;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿","err":"Use of uninitialized value in join or string at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in join or string at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in join or string at (eval 1) line 1, <STDIN> line 1.\n","out":"  "},{"out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; keys +{}"},{"code":"use warnings; keys INC","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Type of arg 1 to keys must be hash (not constant item) at (eval 1) line 1, at EOF\n","err":""},{"code":"use warnings; LABEL: { sub { last LABEL }->(); print \"fail\" }; print \"ok\";","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿","err":"Exiting subroutine via last at (eval 1) line 1, <STDIN> line 1.\n","out":"ok"},{"code":"use warnings; [ map { $_ + 0 } !!0, !!\"\", !!undef ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,0,0]","err":""},{"err":"","out":"[\"False\",\"False\",\"False\",\"False\",\"False\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; [ map { ($_+0) ? 'True' : 'False' } 0, '0', '0 but true', '0e0', '0.0' ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"False\",\"False\",\"True\",\"True\",\"True\"]","err":"","code":"use warnings; [ map { $_ ? 'True' : 'False' } 0, '0', '0 but true', '0e0', '0.0' ]","err_mask":""},{"out":"methods","err":"Unquoted string \"methods\" may clash with future reserved word at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; ''.methods.length"},{"out":"does not","err":"Possible unintended interpolation of @microsoft in string at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; \"@microsoft.com\" =~ /microsoft.com$/ ? \"matches\" : \"does not\""},{"out":"1","err":"Use of uninitialized value $var in regexp compilation at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value $_ in pattern match (m//) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; m/$var/"},{"code":"use warnings; my $_;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_\"\n","err":""},{"out_mask":"Ã¿","out":"3","err":"Odd number of elements in hash assignment at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my @a = 1..3; my %hash = @a;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; my $a=5+3, \"hello\\n\";","out":"hello\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"Useless use of a constant (\"hello\\n\") in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"8","code":"use warnings; my $a=5+3, \"hello\\n\"; print $a","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my @a = 5..9; delete $a[3] [ keys @a ]","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1,2,3,4]","err":"","code":"use warnings; my @a = 5..9; delete $a[3]; [ keys @a ]","err_mask":""},{"err_mask":"","code":"use warnings; my @a = 5..9; delete $a[4]; [ keys @a ]","out":"[0,1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my @a = 5..9; delete $a[4]; [ [keys @a], $#a ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[0,1,2,3],3]","err":""},{"err_mask":"","code":"use warnings; my @a = 5..9; [ keys @a ]","err":"","out":"[0,1,2,3,4]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"2","code":"use warnings; my $aref = [1,2,3]; @{$aref}[1]","err_mask":""},{"err_mask":"","code":"use warnings; my $aref = [1,2,3]; my $two = @{$aref}[1]","err":"","out":"2","out_mask":"Ã¿"},{"out_mask":"Ã¿","out":"1","err":"Reference found where even-sized list expected at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my %args = { foo => 'bar' };","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my @arr = 1 .. 10; length(0 + @arr)","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"out_mask":"Ã¿","err":"","out":"2","code":"use warnings; my @arr = 1 .. 10; length('' . @arr)","err_mask":""},{"code":"use warnings; my @arr = 1 .. 10; length(@arr)","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"length() used on @arr (did you mean \"scalar(@arr)\"?) at (eval 1) line 1, <STDIN> line 1.\n","out":"2"},{"code":"use warnings; my $arr = [1 .. 10]; length('' . @$arr)","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"out_mask":"Ã¿","out":"2","err":"","code":"use warnings; my @arr = 1 .. 10; length(map \"now that's just silly\", @arr)","err_mask":""},{"code":"use warnings; my @arr = (1, 3); @arr[0]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"1","err":"Scalar value @arr[0] better written as $arr[0] at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿","out":"42","err":"Argument \"anything\" isn't numeric in array element at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my @arr; $arr[\"anything\"] = 42;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my @arr; $arr[\"inf\"] = 42; [ @arr ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[42]","err":""},{"out":"42","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"use warnings; my @arr; $arr[\"NaN\"] = 42;"},{"code":"use warnings; my @arr; $arr[\"NaN\"] = 42; [ @arr ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[42]","err":""},{"out_mask":"Ã¿","err":"Use of uninitialized value in print at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"use warnings; my @array; print $array[5];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my $buf = \"\\x{666}\"; open my $fh, '<', \\$buf or die \"open: $!\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: open: Invalid argument at (eval 1) line 1, <STDIN> line 1.\n","err":"Strings with code points over 0xFF may not be mapped into in-memory file handles\n"},{"out":"ERROR: open: Too many open files at (eval 1) line 1, <STDIN> line 1.\n","err":"Unknown PerlIO layer \"encoding\" at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $buf = \"\\x{666}\"; open my $fh, '<:encoding(utf8)', \\$buf or die \"open: $!\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Unknown PerlIO layer \"encoding\" at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: open: Too many open files at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my $buf = \"\\xd9\\xa6\"; open my $fh, '<:encoding(utf8)', \\$buf or die \"open: $!\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"this matches","err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my @foo = 0..10; print \"this matches\" if \"0 but true\" ~~ @foo;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"this matches","err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my @foo = 0..10; print \"this matches\" if \"0 but true\" ~~ @foo; # thanks, pink_mist++","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my @foo = 0..10; print \"this matches\" if \"0 but true\" ~~ @foo; ... too vague for predictable behavior, use the comparison you mean or try Smart::Match for explicit smartmatching","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\nUnquoted string \"mean\" may clash with future reserved word at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: syntax error at (eval 1) line 1, near \"... too vague \"\n\"use\" not allowed in expression at (eval 1) line 1, near \", \"\n"},{"err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\nUnquoted string \"mean\" may clash with future reserved word at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: syntax error at (eval 1) line 1, near \"... too vague \"\n\"use\" not allowed in expression at (eval 1) line 1, near \", \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my @foo = 0..10; print \"this matches\" if \"0 but true\" ~~ @foo; ... too vague for predictable behavior, use the comparison you mean or try Smart::Match for explicit smartmatching | \"Any non-trivial example of smartmatch usually does something other than the author intended.\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\n","out":"this matches","code":"use warnings; my @foo = 0..10; \"this matches\" if \"0 but true\" ~~ @foo;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"2","out_mask":"Ã¿","err_mask":"","code":"use warnings; my $foo = 1,2;"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $foo = 1,2,3; $foo","err":"Useless use of a constant (2) in void context at (eval 1) line 1, <STDIN> line 1.\nUseless use of a constant (3) in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"Useless use of a constant (2) in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"use warnings; my $foo = 1,2; $foo","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my $foo = 1; my $bar = 2; my $name = \"foo\"; print \"ok\" if (defined(${$name}));","err_mask":"","out_mask":"","err":"","out":""},{"code":"use warnings; my $foo = 1; my $foobar = 2; \"$foo\\bar\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"1\bar","err":""},{"out_mask":"Ã¿","out":"\n","err":"Use of uninitialized value $foo in say at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my $foo = 1; undef $foo; say $foo","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my $foo, *bar;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"*main::bar"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use 'defined(@array)' (Maybe you should just omit the defined()?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use warnings; my @foo; defined @foo","err_mask":""},{"code":"use warnings; my $foo; $foo; 1;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"Useless use of private variable in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"1"},{"out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; my $foo = { foo => 42}; [ keys  $foo]"},{"out_mask":"","err":"\"my\" variable $foo masks earlier declaration in same scope at (eval 1) line 1, <STDIN> line 1.\n","out":"","code":"use warnings; { my $foo; my $foo; }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; my $foo; { my $foo; }","err":"","out":"","out_mask":""},{"err_mask":"","code":"use warnings; my $foo = sub { +{ content => 'content' }; }; $foo->()->{content};","out":"content","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"content","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; my $foo = sub { +{ content => 'content' }; }; $foo->(){'content'};"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $foo = sub { +{ content => 'content' }; }; $foo->(){content};","err":"Unquoted string \"content\" may clash with future reserved word at (eval 1) line 1, <STDIN> line 1.\n","out":"content","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my $foo = undef; \"$foo\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Use of uninitialized value $foo in string at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use warnings; my %hash = undef;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"1","err":"Odd number of elements in hash assignment at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in list assignment at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use warnings; my @list = 0 .. 10; [%list[1..2]]","out":"[1,1,2,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; my @list = \"a\" .. \"h\"; [%list[1..3]]","err":"","out":"[1,\"b\",2,\"c\",3,\"d\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ï¼ªustï¼ï½ï½ï½tï½ï½rï¼ï¼µï½ï½ï½ï½ï½ï½ï¼ï½ï½ï½ï½ï½rï¼","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; my ($l, $r) = ('', ''); $l .= chr($_+0x20), $r .= chr($_+0xff00) for 0x00..0x50; binmode STDOUT; eval qq{ 'Just another Unicode hacker,' =~ tr[\\Q$l\\E][\\Q$r\\E]r };"},{"code":"use warnings; my $n=split(/\\|/,\"one|two|three|four\");","err_mask":"","out_mask":"Ã¿","out":"4","err":""},{"err_mask":"","code":"use warnings; my $n = () = split(/\\|/,\"one|two|three|four\");","out":"1","err":"","out_mask":"Ã¿"},{"code":"use warnings; my $ref = []; @$ref[0]","err_mask":"","out_mask":"","err":"","out":""},{"err":"","out":"ERROR: Substitution replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; my $ret = \"foo\" =~ s/Z/; [ $ret.\"\", $ret+0 ]"},{"out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; my $ret = \"foo\" =~ s/Z//; [ $ret.\"\", $ret+0 ]"},{"err":"","out":"[\"\",0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; my $ret = ( my $tmp = \"foo\" ) =~ s/Z//; [ $ret.\"\", $ret+0 ]"},{"err":"Use of uninitialized value $str in scalar chomp at (eval 1) line 1, <STDIN> line 1.\n","out":"0","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $str; chomp($str);"},{"out_mask":"Ã¿","out":"1","err":"Use of uninitialized value $undefined in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value $undefined in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my $undefined; $undefined =~ s///;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $value = undef;  undef == 2","out":"","err":"Use of uninitialized value in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"code":"use warnings; my $value = undef;  $value == 2","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Use of uninitialized value $value in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"[1912]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; my $x = 12; [ \"19\" . $x ]"},{"code":"use warnings; my $x = 12; [ 19 . $x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1912]","err":""},{"out":"1235","err":"Argument \"1234abc\" isn't numeric in preincrement (++) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $x = \"1234abc\"; $x++; $x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"abce","code":"use warnings; my $x = \"abcd\"; $x++; $x","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my $xml = { sessions => [ { session => { status => 42 } } ] }; $xml->{sessions}{session}{status}","err_mask":""},{"out":"","err":"\"my\" variable $x masks earlier declaration in same statement at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $x, my $x;"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my ($x, $x)","out":"","err":"\"my\" variable $x masks earlier declaration in same statement at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"code":"use warnings; my $x; $x += 2;","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"","code":"use warnings; my $x; $x .= \"foo\";","err_mask":""},{"out":"foo","err":"Use of uninitialized value $x in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $x; $x . 'foo'"},{"err_mask":"","code":"use warnings; my $x; $x = $x . 'foo'; # Zoffix","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"max\" via package \"42\" (perhaps you forgot to load \"42\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"Useless use of private variable in void context at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my ($x, $y, $var) = (42, 37, 0); $var += max $x, $y; $var","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my($x, $y, $x)","out":"","err":"\"my\" variable $x masks earlier declaration in same statement at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"out_mask":"Ã¿","err":"","out":"2","code":"use warnings; my ($x, $y) = ($y, $x);","err_mask":""},{"err_mask":"","code":"use warnings; no warnings 'experimental::autoderef'; keys +{}","out":"ERROR: Unknown warnings category 'experimental::autoderef' at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings \"\\N{U+7FFFFFFF}\"","out":"ERROR: Unknown warnings category 'Ã½Â¿Â¿Â¿Â¿Â¿' at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; \"\\N{U+7FFFFFFF}\"","out":"Ã½Â¿Â¿Â¿Â¿Â¿","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use warnings; opendir my $dirh, \".\";"},{"err":"","out":"lala\n|lulu","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; open $fh, '<', \\\"lala\\nlulu\"; join '|', <$fh>"},{"code":"use warnings; open $fh, \"lala\\nlulu\"; join '|', <$fh>","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"readline() on closed filehandle $fh at (eval 1) line 1.\n","out":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; open $fh, \\ \"lala\\nlulu\"; join '|', <$fh>","out":"","err":"readline() on closed filehandle $fh at (eval 1) line 1.\n","out_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use warnings; open my $fh, '>&=', 2"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Element 0","err":"Argument \"onetwothree\" isn't numeric in array element at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings;  our $NEGATIVE_INDICES = 1; sub M::TIEARRAY { bless {}, shift } sub M::FETCH { print \"Element $_[1]\" }  tie my @arr, \"M\";   $arr[\"onetwothree\"]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Type of arg 1 to pop must be array (not constant item) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; pop INC"},{"out_mask":"","err":"","out":"","code":"use warnings; print 'argh' and exit if $error;","err_mask":""},{"err_mask":"","code":"use warnings; print(\"~/\").\"\\n\"","err":"","out":"~/","out_mask":"Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; print \"\\x{2603}\"","err":"Wide character in print at (eval 1) line 1, <STDIN> line 1.\n","out":"Ã¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Type of arg 1 to push must be array (not constant item) at (eval 1) line 1, at EOF\n","err":"","code":"use warnings; push INC, undef;","err_mask":""},{"code":"use warnings; qr{(?(DEFINE)(?<A>(?&B)|(?&C))}xms;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Switch (?(condition)... not terminated in regex; marked by <-- HERE in m/(?(DEFINE)(?<A>(?&B)|(?&C)) <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"1,2,3","err":"Possible attempt to separate words with commas at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; qw(1,2,3)"},{"out_mask":"","out":"","err":"The lexical_subs feature is experimental at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings qw(experimental); my sub foo { ... }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; readline \"{a,b,c}\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"readline() on unopened filehandle at (eval 1) line 1.\n","out":""},{"code":"use warnings; [ ref undef ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"use warnings; reset"},{"out":"\n","err":"Use of uninitialized value in say at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; say undef"},{"code":"use warnings; scalar( 0, 1, 0, 1 );","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out_mask":"Ã¿","err":"Useless use of a constant (2) in void context at (eval 1) line 1, <STDIN> line 1.\nUseless use of a constant (3) in void context at (eval 1) line 1, <STDIN> line 1.\nUseless use of a constant (4) in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"5","code":"use warnings; scalar( 2, 3, 4, 5 );","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; scalar grep {     $_ == 0 or $_ % 2 == 0 or $_ % 3 == 0 or $_ % 5 == 0 or $_ % 7 == 0 } map eval, glob join '{+,-,}', split //, \"7474810769\";","out":"14804","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"15197","err":"","code":"use warnings; scalar grep {     $_ == 0 or $_ % 2 == 0 or $_ % 3 == 0 or $_ % 5 == 0 or $_ % 7 == 0 } map eval, map s{[^0-9]\\K0([0-9])}{$1}gr, glob join \"{+,-,}\", split //, \"7474810769\";","err_mask":""},{"code":"use warnings; set_status => 'available';","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"available","err":"Useless use of a constant (\"set_status\") in void context at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Unknown regexp modifier \"/I\" at (eval 1) line 1, near \"; \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; s///gI"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,3,7,\"nan\"]","err":"","code":"use warnings; [ sort { $a != $a ? 1 : $b != $b ? -1 : $a <=> $b } 0, 7, \"nan\", 3 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Use of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\n","out":"[1,2,3,4,4,11,11,15,\"NaN\",\"nan\",8]","code":"use warnings; [ sort { $a <=> $b } 4, 15, 11, \"NaN\", 11, 2, 1, 4, 3, \"nan\", 8 ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ sort { $a <=> $b } 7, 0, \"nan\", 3 ]","out":"[0,7,\"nan\",3]","err":"Use of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in sort at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[4,15,11,11,2,1,4,3,8]","code":"use warnings; [ sort { \"NaN\" } 4, 15, 11, 11, 2, 1, 4, 3, 8 ]","err_mask":""},{"out":"[\"foo\",\"bar\"]","err":"splice() offset past end of array at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; splice @a, 2, 2, qw/foo bar/; \\@a"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use warnings; \"string\"->{key}"},{"out_mask":"","out":"","err":"","code":"use warnings; ${\\\"string\"}->{key}","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; sub a { my $x=2; sub b { print $x } } a()","out":"2","err":"Variable \"$x\" will not stay shared at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿"},{"err":"The signatures feature is experimental at (eval 1) line 1, <STDIN> line 1.\n\"my\" variable $x masks earlier declaration in same scope at (eval 1) line 1, <STDIN> line 1.\n","out":"2","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; sub a { my $x=2; sub b ($x) { my $x = $_[0]; print $x; } } a()"},{"err":"","out":"0 01 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; sub f { my $foo .= \"x\" if shift; $foo .= shift; \"$foo \"; } f(0,0).f(0,1);"},{"err":"","out":"x0 1 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; sub f { my $foo .= \"x\" if shift; $foo .= shift; \"$foo \"; } f(1,0).f(0,1);"},{"err_mask":"","code":"use warnings; sub foo {1} $x = foo and 1","err":"","out":"1","out_mask":"Ã¿"},{"err":"The signatures feature is experimental at (eval 1) line 1, <STDIN> line 1.\nAmbiguous use of %{foo} resolved to %foo at (eval 1) line 1, <STDIN> line 1.\n","out":"0","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; sub foo(){{}} %{foo}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\"]","err":"","code":"use warnings; sub foo { @foos = 0; return @foos } @x = 'a' .. 'c'; [@x[foo()], $x[foo()]];","err_mask":""},{"err_mask":"","code":"use warnings; sub foo { @foos = 0 } @x = 'a' .. 'c'; @x[foo()]","out":"a","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"b\",\"b\"]","err":"","code":"use warnings; sub foo { @foos = 1; return @foos } @x = 'a' .. 'c'; [@x[foo()], $x[foo()]];","err_mask":""},{"code":"use warnings; sub foo { @foos = 1 } @x = 'a' .. 'c'; [@x[foo()], $x[foo()]];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"b\",\"b\"]","err":""},{"out_mask":"Ã¿","err":"The signatures feature is experimental at (eval 1) line 1, <STDIN> line 1.\nAmbiguous use of %{foo} resolved to %foo at (eval 1) line 1, <STDIN> line 1.\n","out":"0","code":"use warnings; sub foo(){{}} my %foo; %{foo}","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; sub foo { my $x = 1; sub bar {my $y = 2;}}; foo(); bar();","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"code":"use warnings; sub foo { my $x = 1; sub bar {my $y = $x} }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","err":"Variable \"$x\" will not stay shared at (eval 1) line 1, <STDIN> line 1.\n","out":""},{"code":"use warnings; sub foo { my $x = 1; sub bar {$x++}}; foo(); bar();","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"1","err":"Variable \"$x\" will not stay shared at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&@\"\n","err":"The signatures feature is experimental at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; sub foo (&@) { sub foo; }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; sub format {} format","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings sub get_var { warn \"GET VAR\\n\"; return \\my $var }   ${ get_var } += 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"use warnings sub get_var \"\nsyntax error at (eval 1) line 1, near \"$var }\"\n","err":""},{"out_mask":"Ã¿","err":"Ambiguous use of ${get_var} resolved to $get_var at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"use warnings; sub get_var { warn \"GET VAR\\n\"; return \\my $var }   ${ get_var } += 1","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"Ambiguous call resolved as CORE::index(), qualify as such or use & at (eval 1) line 1, <STDIN> line 1.\n","out":"2","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; sub index { ... } index \"asdf\", \"d\""},{"code":"use warnings; sub index :index { ... } index \"asdf\", \"d\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Invalid CODE attribute: index at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use warnings; sub index :method { ... } index \"asdf\", \"d\"","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"err_mask":"","code":"use warnings; sub index :method { ... } main::index","err":"","out":"ERROR: Unimplemented at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; sub index :method { scalar @_ } main::index qw( A B C D E )","err":"","out":"5","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Element 0","err":"Argument \"onetwothree\" isn't numeric in array element at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings;  sub M::TIEARRAY { bless {}, shift } sub M::FETCH { print \"Element $_[1]\" }  tie my @arr, \"M\";   $arr[\"onetwothree\"]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"@$;\"\n","err":"The signatures feature is experimental at (eval 1) line 1, <STDIN> line 1.\nScalar found where operator expected at (eval 1) line 1, near \"$;$)\"\n\t(Missing operator before $)?)\n","code":"use warnings; sub mynumbs (@$;$);","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; sub push :method { ... }  my @array; push @array, \"value\";","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err":"Ambiguous call resolved as CORE::push(), qualify as such or use & at (eval 1) line 1, <STDIN> line 1.\n","out":"1","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; sub push { ... }  my @array; push @array, \"value\";"},{"code":"use warnings; sub test { $_[0] < 0 and return } test('a')","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Argument \"a\" isn't numeric in numeric lt (<) at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"Possible unintended interpolation of @things in string at (eval 1) line 1, <STDIN> line 1.\n","out":"","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; \"@things\""},{"out_mask":"","err":"","out":"","code":"use warnings; !!undef","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [ undef == 0 ]","out":"[1]","err":"Use of uninitialized value in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use warnings; undef @foo;"},{"out_mask":"Ã¿","out":"1","err":"Use of uninitialized value $undefined in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value $undefined in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; $undefined =~ s//bar/;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; undef =~ s//foo/r;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"Use of uninitialized value in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in substitution (s///) at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; [undef, ''.undef]","err":"Use of uninitialized value in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n","out":"[undef,\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"Useless use of a constant (15) in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use constant cat => 15; cat while $x++<1"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use warnings; use constant cat => 1; cat while $x++<1"},{"code":"use warnings; use constant cat => 1; cat() while $x++<1","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"use warnings; use Encode; my $buf = encode('UTF-8', \"\\x{666}\"); open my $fh, '<', \\$buf or die \"open: $!\"; printf \"%vx\", <$fh>;","out":"d9.a6","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; use Encode; my $buf = encode('UTF-8', \"\\x{666}\"); open my $fh, '<:encoding(UTF-8)', \\$buf or die \"open: $!\" #fine, Grinnz_","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Unknown PerlIO layer \"encoding\" at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: open: Too many open files at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"c480\"]","err":"","code":"use warnings; use Encode; my $x = qq<\\x{100}>; [ unpack q{H*}, Encode::encode_utf8 $x ]","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use Encode; my $x = qq<\\x{100}>; [ unpack q{H*}, $x ]","out":"[\"00\"]","err":"Character in 'H' format wrapped in unpack at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use warnings; use experimental 'smartmatch'; \"foo\" ~~ \"Bar\""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use Function::Parameters qw(:strict); fun mynumbs :(@$;$) {}","out":"","err":"prototype after '@' for fun mynumbs: $;$ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"out":"ERROR: Can't locate List/Uil.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use List::Uil 'max'; my ($x, $y, $var) = (42, 37, 0); $var += max $x, $y; $var"},{"out":"42","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"use warnings; use List::Util 'max'; my ($x, $y, $var) = (42, 37, 0); $var += max $x, $y; $var"},{"code":"use warnings; use Moose; has foo => (isa => 'rw); $x = $main->new; $x->foo(undef)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"outer1: A foo; ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use strict; \"foo bar\" =~ /(?<A>\\w+)/ or die; print \"outer1: @{[%+]}; \"; { \"baz\" =~ /(?<B>failed match)/ or die; print \"inner: @{[%+]}; \"; } print \"outer2: @{[%+]}; \";"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"outer1: A foo; inner: A foo; outer2: A foo; ","err":"","code":"use warnings; use strict; \"foo bar\" =~ /(?<A>\\w+)/ or die; print \"outer1: @{[%+]}; \"; { \"baz\" =~ /(?<B>failed match)/; print \"inner: @{[%+]}; \"; } print \"outer2: @{[%+]}; \";","err_mask":""},{"err":"","out":"outer1: A foo; inner: B baz; outer2: A foo; ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use strict; \"foo bar\" =~ /(?<A>\\w+)/ or die; print \"outer1: @{[%+]}; \"; { \"baz\" =~ /(?<B>\\w+)/ or die; print \"inner: @{[%+]}; \"; } print \"outer2: @{[%+]}; \";"},{"code":"use warnings; use strict; \"foo bar\" =~ /(?<A>\\w+)/ or die; print \"outer1: ${\\\\%+} @{[%+]}; \"; { \"baz\" =~ /(?<B>\\w+)/ or die; print \"inner: ${\\\\%+} @{[%+]}; \"; } print \"outer2: ${\\\\%+} @{[%+]}; \";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"outer1: HASH(0x2ba79e0) A foo; inner: HASH(0x2ba79e0) B baz; outer2: HASH(0x2ba79e0) A foo; "},{"code":"use warnings; use strict; my @arr; $arr[-1] = 'foo';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of non-creatable array value attempted, subscript -1 at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use warnings; use strict; my $bar; if (my $foo = $bar) { 1 }","err":"","out":"","out_mask":""},{"err_mask":"","code":"use warnings; use strict; my $fh; print $fh 42","err":"","out":"ERROR: Can't use an undefined value as a symbol reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't redeclare \"our\" in \"my\" at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use strict; my (our $x) = 42; [$x, $::x]"},{"err":"","out":"afsfasdfsdafasf","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use strict; my $str = 'afgasfasdf{afsfasdfsdafasf}asdfasfasdf'; my ($blah) = $str =~ m#^.*?{(.*?)}#; $blah"},{"err_mask":"","code":"use warnings; use strict; my $str = 'afgasfasdf{afsfasdfsdafasfasdfasfasdf'; my ($blah) = $str =~ m#^.*?{(.*)#; $blah","err":"","out":"afsfasdfsdafasfasdfasfasdf","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"use warnings; use strict; my $x = UNIVERSAL->can('can'); ''->$x('can')","err_mask":""},{"err_mask":"","code":"use warnings; use strict; my %x; $x{1}++;","out":"0","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"use warnings; use strict; my $x; $x++; $x","out":"1","err":"","out_mask":"Ã¿"},{"out":"ERROR: Can't redeclare \"my\" in \"our\" at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use strict; our (my $x) = 42; [$x, $::x]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"cats","err":"","code":"use warnings; use strict; package Don; sub t { 'cats' } package main; Don't;","err_mask":""},{"out":"/foo/bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use strict; { package Foo; sub TIESCALAR { '/foo/bar' } } tie my $var, Foo::"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use strict; { package Foo; sub TIESCALAR { '/foo/bar' } } tie my $var, Foo::; \"$var\"","err":"Use of uninitialized value $var in string at (eval 1) line 1, <STDIN> line 1.\n","out":"","out_mask":""},{"err":"Ambiguous use of %{foo} resolved to %foo at (eval 1) line 1, <STDIN> line 1.\nVariable \"%foo\" is not imported at (eval 1) line 1, <STDIN> line 1.\n\t(Did you mean &foo instead?)\n","out":"ERROR: Global symbol \"%foo\" requires explicit package name (did you forget to declare \"my %foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use strict; sub foo{{}} %{foo}"},{"err":"Variable \"$x\" will not stay shared at (eval 1) line 1, <STDIN> line 1.\n","out":"[42,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use strict; sub foo { my $x; BEGIN { $x = 42; } $x++ } [ foo, foo ]"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use strict; sub test($hr) { print Dumper(%$hr); }","out":"","err":"The signatures feature is experimental at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"err":"","out":"ERROR: Can't use string (\"blue\") as a subroutine ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use strict; { test => sub { print shift }, color => 'blue' }->{color}->(\"bar\")"},{"err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; use strict; { test => sub { print shift } }->{test}->(\"bar\")"},{"err_mask":"","code":"use warnings; use strict; use experimental 'postderef'; my $x; my @z = @{ $x || [] }; $x->@*","err":"","out":"ERROR: Can't use an undefined value as an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"1","err":"Argument \"^F\\0^A\" isn't numeric in numeric lt (<) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; v6.0.1 < 4"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; ${^WIBBLE}{wat} = 42; [ keys %{^wibble} ]","out":"ERROR: syntax error at (eval 1) line 1, near \"{^\"\n","err":"Unquoted string \"wibble\" may clash with future reserved word at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"wat\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; ${^WIBBLE}{wat} = 42; [ keys %{^WIBBLE} ]"},{"code":"use warnings; $worldlen > 20","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Use of uninitialized value $worldlen in numeric gt (>) at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; \"$x\"","out":"","err":"Use of uninitialized value $x in string at (eval 1) line 1, <STDIN> line 1.\n","out_mask":""},{"code":"use warnings; $x","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"","out":"","err":"Useless use of a constant (121321) in void context at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; $x=0;121321 while $x++<1","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; $x = !0 + 1; $y = !0 . ''","err":"","out":"1","out_mask":"Ã¿"},{"code":"use warnings; $x = [ 0 ]; $x->[0][2]","err_mask":"","out_mask":"","out":"","err":""},{"out":"0000000000000000","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; $_=\"\\x19\"; $_=\"$_\\x00\"; print unpack \"B*\", $_&\"\\x80\\x00\""},{"code":"use warnings; $x = 1 and 1","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"1","err":"Found = in conditional, should be == at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; $x = 1; @bucket_store_content{ $x }","err":"Scalar value @bucket_store_content{...} better written as $bucket_store_content{...} at (eval 1) line 1, <STDIN> line 1.\n","out":"","out_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; $x = \"32 string\"; $y = 43; $x + $y","out":"75","err":"Argument \"32 string\" isn't numeric in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿"},{"err":"","out":"[\"\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; $x[3] = 9; [exists $x[0], exists $x[4]];"},{"err":"","out":"4","out_mask":"Ã¿","err_mask":"","code":"use warnings; $x=[4,5,6]; @$x[0]"},{"err":"print() on unopened filehandle 43 at (eval 1) line 1, <STDIN> line 1.\n","out":"7","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; $x = \"4\"; $y = \"3\"; $l = $x . $y; $s = $x + $y; print $l print $s"},{"err_mask":"","code":"use warnings; $x .= \"hallo\";","out":"hallo","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; $xml->{sessions}{session}{'status'}","out":"","err":"","out_mask":""},{"code":"use warnings; @x = qw(a b); splice @x, 2, 0, 'c'; \\ @x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\"]","err":""},{"code":"use warnings; $x = @x[0]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Scalar value @x[0] better written as $x[0] at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"","err":"Use of uninitialized value $x in repeat (x) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; $x x101"},{"code":"use warnings; $x == $y","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"Use of uninitialized value $y in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value $x in numeric eq (==) at (eval 1) line 1, <STDIN> line 1.\n","out":"1"},{"out":"[42,[]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; @y = (42); $x = delete $y[0]; [ $x, \\@y ]"},{"code":"use x $^W++;join(($x)x101)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate x.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"\"U+\" . sprintf \"%*v04X\", \" U+\", \"hello\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"U+0068 U+0065 U+006C U+006C U+006F","err":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"#!/usr/bin/perl -w                                      # camel code"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"openerp-server\"]","code":"[ '/usr/local/bin/openerp-server' =~ m{([^/]+)$} ]","err_mask":""},{"code":"utf8::downgrade(my $o = \"\\x{f4}\"); $o","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"Ã´"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$VAR1 = 'Ã´';\n","code":"utf8::downgrade(my $o = \"\\x{f4}\"); use Data::Dumper; Dumper($o)","err_mask":""},{"out_mask":"","err":"","out":"","code":"utf8::encode(chr(2<<15))","err_mask":""},{"err_mask":"","code":"utf8::encode(my $s = chr(2<<15)); $s","out":"Ã°ÂÂÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"utf8::is_utf8 chr 255","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"utf8::is_utf8 chr 321"},{"code":"utf8::upgrade(my $o = \"\\x{f4}\"); $o","err_mask":"","out_mask":"Ã¿Ã¿","out":"Ã´","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$VAR1 = \"\\x{f4}\";\n","code":"utf8::upgrade(my $o = \"\\x{f4}\"); use Data::Dumper; Dumper($o)","err_mask":""},{"err_mask":"","code":"'Ã¼' =~ /\\w/","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"'Ã¼' =~ /\\w/a","out":"","err":"","out_mask":""},{"code":"\"Ã¼\" xor \"Ã¼\"","err_mask":"","out_mask":"","err":"","out":""},{"code":"[\"Ã¼\" xor \"Ã¼\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"out_mask":"","out":"","err":"","code":"$V","err_mask":""},{"code":"$v = 0x100202020; $v =( ($v << 1) & 0xFFFFFFFF) | (($v >> 31) & 0x1); sprintf \"%08X\", $v","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"00404040"},{"err_mask":"","code":"$v = 0x100202020; $v =( ($v << 4) & 0xF) | (($v >> (32-4)) & 0x7); sprintf \"%08X\", $v","err":"","out":"00000000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"20404040","err":"","code":"$v = 0x10202020; $v =( ($v << 1) & 0xFFFFFFFF) | (($v >> 31) & 0x1); sprintf \"%08X\", $v","err_mask":""},{"err_mask":"","code":"$v = 0x10202020; $v =( ($v << 4) & 0xFFFFFFFF) | (($v >> (32-4)) & 0x7); sprintf \"%08X\", $v","out":"02020201","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"pan","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"v112.97.110"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"thx pink_mist","code":"v116.104.120.32.112.105.110.107.95.109.105.115.116","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[v1.2.3]","err":"","code":"[v1.2.3]","err_mask":""},{"out":"\u0001\u0002\u0003","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"v1.2.3"},{"out":"ERROR: Can't modify constant item in scalar assignment at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"echo \"${v//[^0-9]/}\"\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"v=\"123 abc\"; echo \"${v//[^0-9]/}\";"},{"code":"[ v127.0.0.1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[v127.0.0.1]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ÂPNG\r\n\u001a\n","err":"","code":"v137.80.78.71.13.10.26.10","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"\u0005\u000e\u0000","err":"","code":"v5.14.0","err_mask":""},{"code":"v5.22.0","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"\u0005\u0016\u0000"},{"err_mask":"","code":"v84.114.97.99.107.105.110.103.45.78.117.109.46.46.46.32","out":"Tracking-Num... ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"0","err":"","code":"vA.10 <=> vB.9","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"vA.10 < vB.9"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\"]","code":"$val = 'a'; [map $val++, 1 .. 3]","err_mask":""},{"code":"$_ = '\"Validation25\",,,,,1,1,1,1,,'; s/,(?=,)/,\\\\N/g; $_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\"Validation25\",\\N,\\N,\\N,\\N,1,1,1,1,\\N,","err":""},{"out_mask":"Ã¿Ã¿","err":"","out":"11","code":"@values = (1, 0, 1, 1); $n = 0; $idx = $#values; $n += $_ * (2 ** ($#values - $idx)), --$idx foreach reverse @values; $n;","err_mask":""},{"code":"@values = (1, 0, 1, 1);  $n = 0; ($n *= 2) += $_ for reverse @values; $n;","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"13"},{"code":"$var = 0; $var = ! $var;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"$var1 = ''; $var2 = 0; $var3 = undef; [ defined $var1, defined $var2, defined $var3 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,1,\"\"]","err":""},{"code":"$variable = sprintf \"%04o\\n\",0777;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0777\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"raddtiz lol","code":"$varname=\"raddtiz\"; print \"$varname lol\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"original replacement original ","err":"","code":"$var = 'original '; print $var; { local $var = 'replacement '; print $var }; print $var;","err_mask":""},{"code":"$var =[]; ref \\$var","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"REF"},{"out":"[\"ARRAY\",\"REF\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$var = []; [ref $var, ref \\$var]"},{"code":"$var = *STDOUT; ref \\$var","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"GLOB"},{"code":"$var = *STDOUT; [ref $var, ref \\$var]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",\"GLOB\"]"},{"out":"[\"GLOB\",\"REF\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$var = \\*STDOUT; [ref $var, ref \\$var]"},{"out":"LVALUE","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"*var = \\substr $_, 0, 1; ref \\$var"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"vec($_,7,1)=1; [unpack \"s>\", $_]"},{"code":"vec($_,8,1)=1; [unpack \"s>\", $_]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"out_mask":"Ã¿Ã¿","out":"\u0000\u0002","err":"","code":"vec($_,9,1)=1; print $_","err_mask":""},{"out":"01","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"vec($_,9,1)=1; print ord $_"},{"code":"vec( my $x, 4, 4 ) = 1; printf '%*08b', ' ', $x;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"%*08b","err":""},{"err_mask":"","code":"vec( my $x, 4, 4 ) = 1; printf '%*v08b', ' ', $x;","err":"","out":"00000000 00000000 00000001","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"00000000 00000000 00001000","err":"","code":"vec( my $x, 4, 4 ) = 8; printf '%*v08b', ' ', $x;","err_mask":""},{"code":"'<' =~ /[[:vowel:]]/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: POSIX class [:vowel:] unknown in regex; marked by <-- HERE in m/[[:vowel:] <-- HERE ]/ at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"255","code":"$v = unpack('C', pack('B8', '11111111')); $v","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,0,0,0,0,0,0,0,0,0,0,0]","err":"","code":"$w = 3; $h = 4; @out = ( (0) x $w ) x $h; \\@out","err_mask":""},{"err":"","out":"[[0,0,0],$VAR1->[0],$VAR1->[0],$VAR1->[0]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$w = 3; $h = 4; @out = ([ (0) x $w ]) x $h; \\@out"},{"err":"","out":"[\\0,$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0],$VAR1->[0]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$w = 3; $h = 4; @out = (\\( (0) x $w )) x $h; \\@out"},{"code":"$w = 3; $h = 4; @out = map [ (0) x $w ] 1..$h; \\@out","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"] 1\"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]","code":"$w = 3; $h = 4; @out = map [ (0) x $w ], 1..$h; \\@out","err_mask":""},{"err_mask":"","code":"wantarray","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"scalar context","err":"","code":"wantarray ? \"list context\" : defined wantarray ? \"scalar context\" : \"void context\" # there, made it more clearer","err_mask":""},{"err_mask":"","code":"\"${\\( wantarray() ? 'list' : 'scalar' )}->()}\"","err":"","out":"scalar->()}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"${\\( wantarray() ? 'list' : 'scalar' )}\"","out":"scalar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"wantarray() ? 'list' : 'scalar'","err":"","out":"scalar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"wantarray ? \"yes\" : defined wantarray ? \"no\" : \"maybe\"","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"no"},{"code":"warn","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","out":"1","err":"Warning: something's wrong at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"hello at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"warn \"hello\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"warn \"hello\\n\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"hello\n","out":"1"},{"out_mask":"Ã¿","err":"Warning: something's wrong at (eval 1) line 1, <STDIN> line 1.\n","out":"1","code":"warn undef","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$^W++;eval \"0\".\".undef\"x101","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"'/**' =~ /^\\/\\*\\*/ # wfm","err":"","out":"1","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in transliteration (tr///) at (eval 1) line 1, at EOF\n","err":"","code":"'wftedskaebjgdpjgidbsmnjgc' =~ tr/a-z/oh, turtleneck Phrase Jar!/;","err_mask":""},{"code":"$_ = \"wftedskaebjgdpjgidbsmnjgc\"; tr/a-z/oh, turtleneck Phrase Jar!/; print;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Just another Perl hacker,"},{"code":"$_ = \"wftedskaebjgdpjgidbsmnjgc\";tr/a-z/oh, turtleneck Phrase Jar!/; print;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Just another Perl hacker,"},{"err_mask":"","code":"'wftedskaebjgdpjgidbsmnjgc' =~ tr/a-z/oh, turtleneck Phrase Jar!/r;","err":"","out":"Just another Perl hacker,","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"@what = ([a,b],[1,2],[3,4]); [ map { s/_//r=~s/_/, /gr } glob join '', map { $\"=',_'; \"{_@$_}\" } @what ]","out":"[\"a, 1, 3\",\"a, 1, 4\",\"a, 2, 3\",\"a, 2, 4\",\"b, 1, 3\",\"b, 1, 4\",\"b, 2, 3\",\"b, 2, 4\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[$whatever++]"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"while ( 1 ) { print \"Don't break\\n\"; }","err":"Out of memory!\n","out":"","out_mask":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"while(@ARGV){@ARVG[1] = \"test\"; print \"true\"; exit()}"},{"err_mask":"","code":"while(@ARGV){print \"true\"; exit()}","err":"","out":"0","out_mask":"Ã¿"},{"err_mask":"","code":"'while cloud dark CLoud fluffy CLOUD ClOuD' =~ s/(cloud)/ (~($1 & ' ' x length $1) ^ ' ' x length $1) & lc 'butt' /egir","out":"while butt dark BUtt fluffy BUTT BuTt","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"while(my $e = glob \"{foo,bar}\") {print $e, \"    \"}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo    bar    "},{"out":"done","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"while((my $pid = -1) > 0) { print $pid } \"done\""},{"err":"","out":"[[\"e\",\"a\"],[\"a\",\"n\"],[\"a\",\"r\"],[\"o\",\"t\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"while ('peas and carrots' =~ /([aeiou])(.)/g) { push @bar, [ $1, $2 ] } \\@bar"},{"code":"while ('peas and carrots' =~ /(?<v>[aeiou])(?<n>.)/g) { push @bar, { %+ } } \\@bar","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{v => \"e\",n => \"a\"},{v => \"a\",n => \"n\"},{v => \"a\",n => \"r\"},{v => \"o\",n => \"t\"}]","err":""},{"err_mask":"","code":"whoami","err":"","out":"whoami","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"`whoami`","err_mask":""},{"code":"\"who knows?\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"who knows?"},{"err_mask":"","code":"\"wibble\" =~ s/wi(b+)/{\"a\".(\"g\"x length $1)}re","out":"ERROR: Substitution replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"aggle","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"wibble\" =~ s{wi(b+)}{\"a\".(\"g\"x length $1)}re"},{"out_mask":"","err":"","out":"","code":"$^W++;join(($x)x101)","err_mask":""},{"code":"'word $3' =~ /^\\w+ \\$\\d$/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"'word $3' =~ /^\\w+\\s\\$\\d$/","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"$word = 'hangman'; $sofar = $word =~ s/./_/gr; for $guess (qw(n m z a g h)){ $sofar ^= $word =~ s/[^$guess]/\\0/gr =~ s/$guess/$guess ^ '_'/ger; print \"$sofar  \" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"__n___n  __n_m_n  __n_m_n  _an_man  _angman  hangman  "},{"err":"","out":"[\"words\",\"in\",\"quotes\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"['\"words in quotes\"' =~ /\\b(\\w+)\\b/g ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"worker2\"]","code":"[\"worker1worker2\" =~ /^(worker[0-9],?)+$/]","err_mask":""},{"err":"","out":"[\"worker2\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"worker1worker2\" =~ /(worker[0-9],?)+/]"},{"code":"[\"worker1worker2\" =~ /^(worker[0-9],?)\\1*$/]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"code":"[\"worker1worker2\" =~ /(worker[0-9],?)\\1*/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"worker1\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"worker_1\",\"worker_2\",\"worker_3\",\"worker_4\",\"worker_5\"]","err":"","code":"$_ = ' worker.loadbalancer.balance_workers=  worker_1,worker_2,worker_3,worker_4,worker_5'; my (@out, @tmp); m{ \\A \\s* \\Qworker.loadbalancer.balance_workers=\\E \\s* (worker_[0-9]) (?{ push @tmp, $1 }) (?: , (worker_[0-9]) (?{ push @tmp, $2 }) )* \\z (?{ @out = @tmp }) }x; [ @out ]","err_mask":""},{"err_mask":"","code":"... works too","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"... works too\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$worldlen > 20","out":"","err":"","out_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"write($sock, $request, length($request));"},{"out":"{\"HASH(0x35deb88)\" => undef}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%wrong = +{}; \\%wrong"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,1,2]","err":"","code":"[$^W, $^S, $^F]","err_mask":""},{"err_mask":"","code":"$w=\"specific\"; $len=length $w; for my $i (0..$len-1) { for my $j (1..$len-$i) { push @parts,substr $w,$i,$j}} \\@parts","out":"[\"s\",\"sp\",\"spe\",\"spec\",\"speci\",\"specif\",\"specifi\",\"specific\",\"p\",\"pe\",\"pec\",\"peci\",\"pecif\",\"pecifi\",\"pecific\",\"e\",\"ec\",\"eci\",\"ecif\",\"ecifi\",\"ecific\",\"c\",\"ci\",\"cif\",\"cifi\",\"cific\",\"i\",\"if\",\"ifi\",\"ific\",\"f\",\"fi\",\"fic\",\"i\",\"ic\",\"c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::wft called at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$::{wtf} = \\*hi; wft();","err_mask":""},{"out":"ERROR: Undefined subroutine &main::wtf called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$::{wtf} = \\\"hi\"; wtf()"},{"err_mask":"","code":"\"$x\"","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿","out":"\u0000<","err":"","code":"\"\\x<\"","err_mask":""},{"out":"\u0000","err":"","out_mask":"Ã¿","err_mask":"","code":"\"\\x\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿Ã¿","out":"[\"x\",75821768]","err":"","code":"[x=>~~[]]","err_mask":""},{"out_mask":"","err":"","out":"","code":"$x","err_mask":""},{"code":"$x->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"\\$x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\undef"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"++$x"},{"code":"$x**0","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"/x{00}/","out":"ERROR: Invalid quantifier in {,} in regex; marked by <-- HERE in m/x{ <-- HERE 00}/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"/x{01}/","err":"","out":"ERROR: Invalid quantifier in {,} in regex; marked by <-- HERE in m/x{ <-- HERE 01}/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"$x = '0.101010101110011'; hex(\"0b$x\")/2**(length($x) - 2)","out":"0.00537109375","err":"Illegal hexadecimal digit '.' ignored at (eval 1) line 4, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ÃÂ¥ÃÂÃÂ","err":"","code":"\"\\x{0265}\\x{01DD}\\x{028E}\"","err_mask":""},{"err":"","out":"[\"042\",\"042\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = '042'; [ $x, \"$x\" ]"},{"err_mask":"","code":"@x = (0 .. 5); [\\@x, $#x, scalar @x]","out":"[[0,1,2,3,4,5],5,6]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"${\"\\x{06}\"} = 1; ++${\"\\x{06}\"};","err":"","out":"2","out_mask":"Ã¿"},{"err_mask":"","code":"@x = (0 .. 9); pop @x;","out":"9","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"@x = (0 .. 9); shift @x;","out":"0","err":"","out_mask":"Ã¿"},{"out":"[\"\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"\\x0a\"]"},{"code":"$x = 0b00001000; $x >>= 1; sprintf '%08b', $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"00000100"},{"err_mask":"","code":"$x = 0; for (1..1000) {$x += 0.01;}; for (1..1000) {$x -= 0.01}; $x","err":"","out":"1.35308431126191e-16","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"9.99999999999983","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = 0; for (1 .. 1000) { $x += 0.01; } $x"},{"code":"$x = 0; [ map {; $x += 1/(2**$_); $x } 1..64 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"0.5\",\"0.75\",\"0.875\",\"0.9375\",\"0.96875\",\"0.984375\",\"0.9921875\",\"0.99609375\",\"0.998046875\",\"0.9990234375\",\"0.99951171875\",\"0.999755859375\",\"0.9998779296875\",\"0.99993896484375\",\"0.999969482421875\",\"0.999984741210938\",\"0.999992370605469\",\"0.999996185302734\",\"0.999998092651367\",\"0.999999046325684\",\"0.999999523162842\",\"0.999999761581421\",\"0.99999988079071\",\"0.999999940395355\",\"0.999999970197678\",\"0.999999985098839\",\"0.999999992549419\",\"0.99999999627471\",\"0.999999998137355\",\"0.999999999068677\",\"0.999999999534339\",\"0.999999999767169\",\"0.999999999883585\",\"0.999999999941792\",\"0.999999999970896\",\"0.999999999985448\",\"0.999999999992724\",\"0.999999999996362\",\"0.999999999998181\",\"0.999999999999091\",\"0.999999999999545\",\"0.999999999999773\",\"0.999999999999886\",\"0.999999999999943\",\"0.999999999999972\",\"0.999999999999986\",\"0.999999999999993\",\"0.999999999999996\",\"0.999999999999998\",\"0.999999999999999\",1,1,1,1,1,1,1,1,1,1,1,1,1,1]"},{"err_mask":"","code":"$x = 0; [ map {; $x += 1/(2**$_); $x } 1..8 ]","out":"[\"0.5\",\"0.75\",\"0.875\",\"0.9375\",\"0.96875\",\"0.984375\",\"0.9921875\",\"0.99609375\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$x = 0; [ map {; $x += 1/(2**$_); $x =~ /\\.(9*)/ ? length($1) : -1 } 1..64 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,0,0,1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,5,6,6,6,6,7,7,7,8,8,8,9,9,9,9,10,10,10,11,11,11,12,12,12,12,13,13,13,14,14,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]"},{"out":"","err":"","out_mask":"","err_mask":"","code":"$x = [ 0 ]; $x->[0][2]"},{"code":"'x' =~ /./; [$1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"err_mask":"","code":"[ %x{1} ]","out":"[1,undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[x=>~~-1]","out":"[\"x\",'18446744073709551615']","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$x[-1]","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"","err":"","out":"","code":"/x{10}/","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"\"x\"=~/\\{10}/;"},{"out":"ÃÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{100}\""},{"err_mask":"","code":"$x = '10.12'; $x =~ s/\\..+$//; $x","err":"","out":"10","out_mask":"Ã¿Ã¿"},{"code":"\"\\x{10c}\\x{e1}ste\\x{10d}n\\x{11b} schv\\x{e1}leno\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ÃÂÃÂ¡steÃÂnÃÂ schvÃÂ¡leno"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"$x[10e10]++","err":"Out of memory!\n","out":"","out_mask":""},{"out":"[\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ ('?') x 10 ] # magic ()"},{"code":"[ ('?' x 10) ] # the () do nothing","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"??????????\"]"},{"err_mask":"","code":"$x = 10; while ( $x --> 0 ) { push @arr, $x } \\@arr","err":"","out":"[9,8,7,6,5,4,3,2,1,0]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"x = 10 || (x > 20 && x < 30)","err":"","out":"ERROR: Can't modify constant item in scalar assignment at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[[10,9],\"\",10]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = 10; $y = 9; [ [$x, $y], $x <= $y, [$x, $y]->[\"\"] ]"},{"code":"$x = 10; $y = 9; [ [$x, $y], $x <= $y, [$x, $y]->[$x <= $y] ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[10,9],\"\",10]","err":""},{"err":"","out":"[91,92,93]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x=(11,12,13); grep { s/1/9/ } @x; \\@x"},{"code":"$x = '11223344'; join( '+', map {  join('-', map { $_  } split //) } $x =~/../g);","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1-1+2-2+3-3+4-4","err":""},{"code":"$x='${\\1+1}'; eval qq{ \"\\Q$x\\E\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"${\\1+1}"},{"out":"12 13","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x = (12, 13); sprintf '%d %d', @x"},{"out":"[undef,undef,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x = (1, 2, 1); delete @x[@x]; \\@x"},{"err_mask":"","code":"@x = (1, 2, 3,4 ,5 , 6, 7, 8); foreach my $x (@x[0..2]) { print $x; }","err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿"},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"@x = (1, 2, 3,4 ,5 , 6, 7, 8); @x[0..2];"},{"code":"@x=([[1,2],[3,4]],[5]); $x[1][0]","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"out_mask":"","out":"","err":"","code":"@x=([[1,2],[3,4]],[5]); $x[1][1]","err_mask":""},{"code":"@x=([[1,2],[3,4]],[5]); $x[1][2]","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"@x=(1,2,3,4,5); [$x[-20], \\@x]","out":"[undef,[1,2,3,4,5]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"4","out_mask":"Ã¿","err_mask":"","code":"@x=(1,2,3,4); scalar @x"},{"code":"$x = (1, (2, 3), 5);","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"err_mask":"","code":"$x = [1,2,3]; Data::Dumper::Dumper([$x, $x])","err":"","out":"$VAR1 = [\n          [\n            1,\n            2,\n            3\n          ],\n          $VAR1->[0]\n        ];\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,2]","err":"","code":"@x=(1,2,3); delete @x[0,2]; \\@x","err_mask":""},{"code":"@x=(1,2,3); delete $x[1];","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"@x=(1,2,3); delete @x[1,2]; \\@x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,undef,3]","code":"@x=(1,2,3); delete @x[1]; \\@x","err_mask":""},{"code":"@x=(1,2,3); delete $x[1]; \\@x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,undef,3]","err":""},{"err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$x = '1.23'; $x =~ s/\\D+//g; $x"},{"out_mask":"Ã¿","out":"3","err":"","code":"$x = () = (1,2,4); print($x)","err_mask":""},{"err_mask":"","code":"$x = 12; { ++local($x) } $x","err":"","out":"12","out_mask":"Ã¿Ã¿"},{"out":"[{x => 12},{x => 13},{x => 14}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[{x => 12}, {x => 13}, {x => 14}]"},{"code":"$x = \"1   2\"; @y = split(' ', $x); print \"$x[0], $[x1]\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":", 0x1]","err":""},{"err_mask":"","code":"$x = \"1   2\"; @y = split(' ', $x); print \"$y[0], $y[1]\";","out":"1, 2","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"3\n","err":"","code":"@x = (1..547); say length @x","err_mask":""},{"err":"","out":"547\n","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x = (1..547); say scalar @x"},{"out":"6","err":"","out_mask":"Ã¿","err_mask":"","code":"@x = 1 .. 6; scalar @x"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"123","code":"@x = (1 .. 8); print @x[0..2];","err_mask":""},{"err_mask":"","code":"$_=\"\\x19\"; $_=\"$_\\x00\"; print unpack \"B*\", $_&\"\\x80\\x00\"","out":"0000000000000000","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_=\"\\x19\"; $_=\"$_\\x00\"; print \"yes\" if $_&\"\\x80\\x00\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"yes"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ¨","err":"","code":"\"\\x{1f441}\\x{200d}\\x{1f5e8}\"","err_mask":""},{"err_mask":"","code":"\"\\x{1F478}\\x{200D}\\x{2764}\\x{FE0F}\\x{200D}\\x{1F48B}\\x{200D}\\x{1F438}\"","out":"Ã°ÂÂÂ¸Ã¢ÂÂÃ¢ÂÂ¤Ã¯Â¸ÂÃ¢ÂÂÃ°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ¸","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"Ã°ÂÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{1F64C}\""},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"$x = 1; sub { @_[0] = 2; }->($x); print $x"},{"code":"$x =1; $x *= (2**2**$_ + 1) for 1 .. 4; $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1431655765"},{"err_mask":"","code":"$x=1; $x *= $_ for 2..10; $x","out":"3628800","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"$x=1; $x = \\$x; $$x=2; $x"},{"err":"","out":"HASH(0x3773b88)HASH(0x3773b88)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"{} x 2"},{"code":"$x = \"2015-0223\"; substr($x,7,0) = \"-\"; $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2015-02-23"},{"code":"$x = 20; [ ++$x, $x++, $x ] # wheeee","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[22,21,22]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[2]","code":"@x = (2, 1, 2); delete @x[@dup = @x]; \\ @x # this one is right","err_mask":""},{"err_mask":"","code":"@x = (2, 1, 2); delete @x[@x]; \\ @x # right","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"@x = (2, 1, 2); delete @x[@x]; \\ @x # wrong!","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"x21\\x21","code":"'\\x21\\x21' =~ s/(.)/qq(\"$1\")/eer","err_mask":""},{"err":"","out":"!!","out_mask":"Ã¿Ã¿","err_mask":"","code":"'\\x21\\x21' =~ s/(.*)/qq(\"$1\")/eer"},{"out_mask":"Ã¿Ã¿","err":"","out":"\"\"","code":"'\\x22\\x22' =~ s/(.*)/qq(\"$1\")/eer","err_mask":""},{"out":"\"1","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"\"\\x{22}\\x{31}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,undef,[4,5]]","code":"@{ $x->[2] } = (4, 5); $x","err_mask":""},{"err":"","out":"[\"'\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"\\x27\"]"},{"out":"100","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"($x = 2903000)/($y = 2903000)*100"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\\"2+@","code":"$x='\\\"2+@'; eval qq{ \"\\Q$x\\E\" }","err_mask":""},{"code":"'\\x2F\\x76\\x69' =~ s/\\\\x([[:xdigit:]]{1,2})/chr hex $1/ger","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"/vi","err":""},{"err":"","out":"[0,1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x[3] = 123; [keys @x]"},{"err_mask":"","code":"@x = 31 .. 33; scalar @x","err":"","out":"3","out_mask":"Ã¿"},{"err_mask":"","code":"$x = \"32 string\"; $y = 43; $x + $y","out":"75","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"@x = (3, 4); print scalar @x","err":"","out":"2","out_mask":"Ã¿"},{"out":"4","err":"","out_mask":"Ã¿","err_mask":"","code":"@x = (3, 4); print scalar @x[0,1];"},{"out":"$x == 3 is true","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = 3; $cond = '$x == 3'; print \"$cond is true\" if (eval $cond) # still, though -- ugh"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"????","err":"","code":"('?') x 4","err_mask":""},{"code":"[ ('?') x 4 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"?\",\"?\",\"?\",\"?\"]","err":""},{"code":"[ ('?'x4) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"????\"]"},{"out_mask":"Ã¿Ã¿","out":"@@","err":"","code":"'\\x40\\x40' =~ s/(.*)/qq(\"$1\")/eer","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\x41\\x41","code":"'\\x41\\x41'","err_mask":""},{"err":"","out":"AA","out_mask":"Ã¿Ã¿","err_mask":"","code":"'\\x41\\x41' =~ s/(.*)/qq(\"$1\")/eer  # /me ducks"},{"out_mask":"Ã¿Ã¿","out":"AA","err":"","code":"'\\x41\\x41' =~ s/\\\\x([0-9a-fA-F]{2})/pack 'H*', $1/rge;","err_mask":""},{"code":"'\\x41\\x41' =~ s/\\\\x(\\d\\d)/chr hex $1/rge;","err_mask":"","out_mask":"Ã¿Ã¿","out":"AA","err":""},{"err_mask":"","code":"'\\x41\\x41' =~ s/\\\\x(\\d\\d)/hex $1/ge;","err":"","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"AA","err":"","code":"'\\x41\\x41' =~ s/\\\\x(\\d\\d)/pack 'H*', $1/rge;","err_mask":""},{"err":"","out":"@\u0000@\u0000","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'\\x41\\x41' =~ s/\\\\x(\\d\\d)/pack 'HH', $1/rge;"},{"out_mask":"Ã¿Ã¿","err":"","out":"AA","code":"'\\x41\\x41' =~ s/(\\\\x..)/'qq('.$1.')'/rgee;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err":"","out":"SCALAR(0x3569f88)SCALAR(0x3d66980)","code":"'\\x41\\x41' =~ s/(\\\\x..)/qq($1)/rgee;","err_mask":""},{"err":"","out":"AA","out_mask":"Ã¿Ã¿","err_mask":"","code":"'\\x41\\x41' =~ s/(\\\\x..)/qq(qq($1))/rgee;"},{"code":"'\\x41\\x41' =~ s((\\\\x..))(qq(qq($1)))rgee; # lisp-y?","err_mask":"","out_mask":"Ã¿Ã¿","out":"AA","err":""},{"out":"[5,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = 42; $first3 = ($x & 56) >> 3; $last3 = $x & 7; [ $first3, $last3 ]"},{"code":"$x = 42; sub foo { $x += 23 } { local $x; foo() } $x","err_mask":"","out_mask":"Ã¿Ã¿","out":"42","err":""},{"out":"21","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"$x = 42; $x /= 2; $x"},{"err_mask":"","code":"$x = 42; \"x is ${\\$x}, eh\"","out":"x is 42, eh","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[37,\\37]","code":"$x = 42; $x_ref = \\$x; ${$x_ref} = 37; [ $x, $x_ref ]","err_mask":""},{"err":"","out":"[\\42,42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = 42; $x_ref = \\$x; [ $x_ref, ${ $x_ref } ]"},{"err_mask":"","code":"$x=[4,5,6]; @$x[0]","out":"4","err":"","out_mask":"Ã¿"},{"code":"$x=[4,5,6]; $$x[0]","err_mask":"","out_mask":"Ã¿","out":"4","err":""},{"out_mask":"Ã¿","out":"5","err":"","code":"$x = [4, 5, 6]; @$x[0, 1]","err_mask":""},{"err":"","out":"4","out_mask":"Ã¿","err_mask":"","code":"$x = 4; $x //= 3;"},{"code":"(' ') x 5","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"     ","err":""},{"err_mask":"","code":"[ \" \" x 5 ]","out":"[\"     \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ (' ') x 5 ]","out":"[\" \",\" \",\" \",\" \",\" \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\" \",\" \",\" \",\" \",\" \"]","code":"[ (\" \") x 5 ]","err_mask":""},{"code":"[\"_ \" x 5]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"_ _ _ _ _ \"]"},{"err_mask":"","code":"[(\" \") x 5]","err":"","out":"[\" \",\" \",\" \",\" \",\" \"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"_ \",\"_ \",\"_ \",\"_ \",\"_ \"]","err":"","code":"[(\"_ \") x 5]","err_mask":""},{"err_mask":"","code":"[\"#\" x 50 . \"\\n\"]","out":"[\"##################################################\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"50.\"\\n\"\"\n","code":"[\"#\"x50.\"\\n\"]","err_mask":""},{"code":"[(\"_ \") x 5] [16:44] <perlbot> Altreus: [\"_ \",\"_ \",\"_ \",\"_ \",\"_ \"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"] [\"\n","err":""},{"err_mask":"","code":"$x=5; qq'$x'","out":"5","err":"","out_mask":"Ã¿"},{"code":"$x = 6.7233 * 1.22345;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"8.225621385","err":""},{"err":"","out":"[\"8.225621\",\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = 6.7233 * 1.22345; [ sprintf(\"%f\", $x), unpack(\"H*\",$f) ]"},{"err":"","out":"[[9,10],1,10]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = 9; $y = 10; [ [$x, $y], $x <= $y, [$x, $y]->[1] ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in scalar assignment at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"{{\"\n","err":"","code":"$x={'{a}'=2}; $x->{{a}};","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"2/8","err":"","code":"%x = (a => 3, b => 4); print scalar %x","err_mask":""},{"out_mask":"Ã¿","err":"","out":"4","code":"%x = (a => 3, b => 4); print scalar @x{'a','b'}","err_mask":""},{"err":"","out":"d","out_mask":"Ã¿","err_mask":"","code":"%x = ( 'a'=>8, 'b'=>3, 'c'=>9, 'd'=>'2'); my @sortedkeys = sort(keys(%x)); my $highestkey = $sortedkeys[-1]; print $highestkey;"},{"err":"","out":"9","out_mask":"Ã¿","err_mask":"","code":"%x = ( 'a'=>8, 'b'=>3, 'c'=>9, 'd'=>'2'); my @sortedkeys = sort(values(%x)); my $highestkey = $sortedkeys[-1]; print $highestkey;"},{"err":"","out":"abcd","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%x = ( 'a'=>8, 'b'=>3, 'c'=>9, 'd'=>'2'); print sort { $a cmp $b } keys %x;"},{"err":"","out":"HASH(0x3d22b88)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%x = { 'a'=>8, 'b'=>3, 'c'=>9, 'd'=>'2'}; print sort { $a cmp $b } keys %x;"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"%x = { 'a'=>8, 'b'=>3, 'c'=>9, 'd'=>'2'}; print $x{'c'};"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unknown regexp modifier \"/3\" at (eval 1) line 1, near \"=~ \"\n","code":"$x = \"a a a a a a\"; $x =~ s/a/x/3;print $x","err_mask":""},{"out_mask":"Ã¿","out":"2","err":"","code":"$x = () = 'Ã¥' =~ /[Ã¥Ã¤]/g","err_mask":""},{"err_mask":"","code":"$x=\"aa\";++;print ++$x","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$x=\"aa\";++$x;print ++$x","err":"","out":"ac","out_mask":"Ã¿Ã¿"},{"code":"$x = { 'a.b' = 'c' }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in scalar assignment at (eval 1) line 1, at EOF\n","err":""},{"err_mask":"","code":"$x = 'abcdefg'; substr($x, 2) =~ y/a-z/A-Z/; $x","out":"abCDEFG","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"abcdefghi","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = \"abcdfghi\"; substr($x, 4, 0, 'e'); $x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abcdefghi","err":"","code":"$x=\"abcdfghi\"; $x=~s/(abcd).*(fghi)/$1e$2/g; print $x;","err_mask":""},{"err":"","out":"cd\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$x=\"abcd\"; push @{$x{j}}, split(//,$x); print join(\"\", @{$x{j}}[2,3]), \"\\n\""},{"code":"$x=\"abcd\"; push @{$x{j}}, split(//,$x); print join(\"\", @{$x{j}}[2..3]), \"\\n\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"cd\n"},{"code":"$x->{abc} #so it might","err_mask":"","out_mask":"","out":"","err":""},{"code":"$x->{abc}; $x","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"{}"},{"code":"@x = 'a' .. 'c'; sub lala { my ($aref) = @_; \"@$aref\" } lala \\@x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"a b c"},{"code":"%x=(a=>undef); exists $x{a}","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"$x = { a => 'value', b => $x->{a} }; $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{b => undef,a => \"value\"}","err":""},{"err_mask":"","code":"$x->{a}; $x","out":"{}","err":"","out_mask":"Ã¿Ã¿"},{"code":"$x = \"banana\"; \\substr($x, 2)","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"cannot handle ref type 10 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Data/Dumper.pm line 233, <STDIN> line 1.\n"},{"out":"ARRYY(0xDEADBEEF)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = bless [], 'ARRYY(0xDEADBEEF)'; ref $x"},{"out":"[\"Banana=HASH(0x36adb88)\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = bless {}, \"Banana\"; [\"$x\", $x =~ /t/]"},{"code":"$x = bless {}, \"Banana\"; [$x, $x =~ /t/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[bless( {}, 'Banana' )]"},{"code":"$x = []; bless $x, \"$x\"; ref $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ARRAY(0x4c54b88)","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Attempt to bless into a reference at (eval 1) line 1, <STDIN> line 1.\n","code":"$x = []; bless $x, $x; ref $x","err_mask":""},{"code":"\"\\x^C\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"\u0000^C"},{"code":"\"\\xc6\"","err_mask":"","out_mask":"Ã¿Ã¿","out":"Ã","err":""},{"err":"","out":"[\"\\317\",\"\\317\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[\"\\x{cf}\", \"\\xcf\" ]"},{"out":"ÃÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = chr(0xC6); Encode::encode_utf8($x)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"c386","err":"","code":"$x = chr(0xC6); unpack \"H*\", Encode::encode_utf8($x)","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"$x = chr 0xcf; $y = chr 0xcf; Encode::_utf8_on($x); Encode::_utf8_off($y); [$x, $y]","out":"[\"\\x{0}\",\"\\317\"]","err":"Malformed UTF-8 character (1 byte, need 2, after start byte 0xcf) in subroutine entry at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Data/Dumper.pm line 233, <STDIN> line 1.\nMalformed UTF-8 character (1 byte, need 2, after start byte 0xcf) in subroutine entry at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Data/Dumper.pm line 233, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"Ã","out_mask":"Ã¿Ã¿","err_mask":"","code":"\"\\xd1\""},{"code":"$x=\"@\" . \"{[ die 'horribly' ]}\"; eval qq{ \"\\Q$x\\E\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"@{[ die 'horribly' ]}"},{"code":"$x=\"@{[ die 'horribly' ]}\"; eval qq{ \"\\Q$x\\E\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: horribly at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"RASH DEAL","code":"@x=([],{},$\",\\&f,\\0);s/..(..).*/$1/ for@x;$\"=\"\";\"@x\"","err_mask":""},{"err_mask":"","code":"$\"=\"\";@x=([],{},\" \",\\&f,\\0);s/..(..).*/$1/ for@x;\"@x\"","out":"RASH DEAL","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"\\xF0\\x9F\\x99\\x8C\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂ","err":""},{"out_mask":"Ã¿Ã¿","out":"Ã´","err":"","code":"\"\\x{f4}\"","err_mask":""},{"err_mask":"","code":"\"\\xf6\"","err":"","out":"Ã¶","out_mask":"Ã¿Ã¿"},{"out":"Ã¾Â«","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\xFE\\xAB\""},{"err":"","out":"Ã¿","out_mask":"Ã¿Ã¿","err_mask":"","code":"\"\\xff\""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"@x = (foo => 1, bar => 2); print ${{@x}}{\"foo\"}"},{"out_mask":"Ã¿","out":"1","err":"","code":"@x = (foo => 1, bar => 2); ${{@x}}{\"foo\"}","err_mask":""},{"code":"@x = ( {foo => 1} ); $x[0]->{foo}","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"@x = (foo => 3, bar => 4); ${{[a=>2, b=>3]}}{\"foo\"}","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"@x = (foo => 3, bar => 4); ${[foo=>2, bar=>3]}{\"foo\"}","err":"","out":"ERROR: Not a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"@x = (foo => 3, bar => 4); ${{[foo=>2, bar=>3]}}{\"foo\"}","err_mask":""},{"code":"@x = (foo => 3, bar => 4); ${{@x}}{\"foo\"}","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"err_mask":"","code":"$x = \\@Foo::bar; delete $Foo::{bar}; @$x = \"meow\";","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"@x = (foo => \"fooval\", bar => \"barval\"); print +{@x}->{\"foo\"}","out":"fooval","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"$x = \\@{\"Foo::ISA\"}; delete $Foo::{ISA}; @$x = \"Bar\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",1]","code":"$x=\"foo\\n\"; [ $x, chomp $x ];","err_mask":""},{"code":"$x=\"foo\\n\"; [ $x, chomp $x, $x ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\",1,\"foo\"]","err":""},{"code":"$x{foo}++, $x{foo}","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"$x = \"foo\"; [ $x, $x =~ s/foo/bar/r ]","out":"[\"foo\",\"bar\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$x{$_}++ for qw[a b c]; \\%x","err":"","out":"{b => 1,c => 1,a => 1}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"@x = grep /[^\\Wt]/, qw<q w t 6 ! . X>; [@x]","out":"[\"q\",\"w\",6,\"X\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[[\"world\"],[\"hello\",\"world\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x = 'hello'; my @y = $x[@x] = 'world'; [ \\@y, \\@x ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"[ ('?'x@ids) ]","err_mask":""},{"err_mask":"","code":"$x = { key => 'value' }, push @{$x->{foo}}, 'bar'; push @{$x->{foo}}, 'baz'; $x","err":"","out":"{key => \"value\",foo => [\"bar\",\"baz\"]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$x = \"lala\"; *$x = \"cat\"; $lala","err_mask":"","out_mask":"","err":"","out":""},{"code":"$x = \"lala\"; *$x = \\\"cat\"; $lala","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"cat"},{"out_mask":"Ã¿","out":"6","err":"","code":"$x = \"lala\"; *$x = sub {2*3}; lala();","err_mask":""},{"code":"$x = 'loooong'; substr($x, 4, 0) = 'XX'; # substr is an lvalue","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"XX"},{"err_mask":"","code":"$x = 'loooong'; substr($x, 4, 0) = 'XX'; $x ; # substr is an lvalue","out":"loooXXong","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[*::X,*::X,*::X,*::X]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[*::X, *main::X, *::main::X, *main::main::main::main::X]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"64,64,64,5000000000,64,64,64\n","code":"@x = ( map ord, split //, 64.64.64.5000000000.64.64.64 );  $x = join \",\", @x;  print \"$x\\n\"","err_mask":""},{"err_mask":"","code":"$x = \"\\n\"; chomp $x; [$x]","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"x\",\"\",\"y\"]","err":"","code":"[ \"x\\n   \\t \\t   \\n \\n\\n\\n\\n\\n\\n\\ny\" =~ /^(.*)\\s*$/gm ]","err_mask":""},{"code":"[ \"x\\n   \\t \\t   \\n \\n\\n\\n\\n\\n\\n\\ny\" =~ /^\\s*(.*)$/gm ] # like this?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"x\",\"y\"]"},{"code":"[ \"x\\n   \\t \\t   \\n \\n\\n\\n\\n\\n\\n\\ny\" =~ /^\\s*(.*)\\s*$/gm ] # so perhaps you wanted \\h instead of \\s?","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"x\",\"y\"]"},{"code":"$x = \"(??{print 42})\"; \"banana\" =~ /$x/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Eval-group not allowed at runtime, use re 'eval' in regex m/(??{print 42})/ at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"$x = qr/^cats$/","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"qr/^cats$/u","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[qr/lala/u,qr/lala/u]","err":"","code":"$x = qr/lala/; $xx = qr/$x/; [$x, $xx]","err_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"$x = qr/something/; \"that's something\" =~ $x"},{"out_mask":"Ã¿Ã¿","out":"no","err":"","code":"\"X\\\\Q(s)Y\" =~ qr'\\Q(s)' ? [$`, $&, $'] : \"no\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"X\\\\\",\"Qs\",\"Y\"]","err":"","code":"\"X\\\\QsY\" =~ qr'\\Q(s)' ? [$`, $&, $'] : \"no\"","err_mask":""},{"err":"","out":"b c a","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x=qw(a b c); push @x, shift @x; \"@x\""},{"err_mask":"","code":"@x=qw(a b c); push @x, shift @x; @x","err":"","out":"3","out_mask":"Ã¿"},{"out":"[5,\"b\",\"c\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x=qw(a b c); sub z{$_[0]=5;} z(@x); \\@x"},{"err_mask":"","code":"@x=qw(a b c); unshift @x, pop @x; \"@x\"","err":"","out":"c a b","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"@x{qw{a b c}}++; \\%x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{b => undef,c => 1,a => undef}","err":""},{"err":"","out":"[3,\"a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x=qw(a b c); $x=@x;($y)=@x;[$x,$y]"},{"err_mask":"","code":"@x=qw/a b c/; $z=[@x[0,1]]; for(@$z){$_++; print} \\@x","out":"bc","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"b\",\"c\"]","err":"","code":"@x=qw/a b c/; $z=[@x[0,1]]; for(@$z){$_++} \\@x","err_mask":""},{"err_mask":"","code":"@x=qw( a b ); print push @x, 'c'","err":"","out":"3","out_mask":"Ã¿"},{"err_mask":"","code":"@x{qw/foo bar baz/}=(); \\%x","err":"","out":"{baz => undef,bar => undef,foo => undef}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"})\"\n","err":"","code":"@x{qw/foo bar baz/})=(); \\%x","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR(0x4c03378)\",\"SCALAR(0x477e1a8)\"]","code":"$x = ''; $ref = \\$x; [ \"\".$ref, \"\". \\${$$ref} ]","err_mask":""},{"code":"$x = ''; $ref = \\$x; [ \"\".\\$ref, \"\". \\${$$ref} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"REF(0x30fb308)\",\"SCALAR(0x3207a08)\"]","err":""},{"err_mask":"","code":"$x = { site => 'lol' }; $y = \"foo\";  \"lefoobar\" =~ s/$y/$x->{site}/r","err":"","out":"lelolbar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$x = {}; sprintf \"%s %x\", $x, $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿","out":"HASH(0x429ab88) 429ab88","err":""},{"err_mask":"","code":"$x = sub { 3 } $x->() + 1","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} $x\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"4","err":"","code":"$x = sub { 3 }; $x->() + 1","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"here we go","code":"$x = [ sub { 'here ' . shift } ]; $x->[0]->('we go')","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"RA SH   DE AL","code":"@x=([],{},\" \",sub{},\\\"\");map{s/..(..).*/$1/}@x;\"@x\"","err_mask":""},{"code":"$\"=\"\";@x=([],{},\" \",sub{},\\\"\");map{s/..(..).*/$1/}@x;\"@x\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"RASH DEAL"},{"code":"$\"=\"\";@x=([],{},\" \",sub{},\\\"\");s/..(..).*/$1/ for@x;\"@x\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"RASH DEAL","err":""},{"code":"$x = 'text25more text25fdsdf'; $x =~ s/text(\\d+)more text(\\1)fdsdf/'foo' . ($1 * $1)/e; $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo625","err":""},{"out":"T","err":"","out_mask":"Ã¿","err_mask":"","code":"' ' =~ /[ ]/x ? 'T' : 'F';"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{that => {c => \"d\",a => \"b\"},this => {0 => 1,2 => 3}}","code":"%x = (this => {0..3}, that => {'a'..'d'}); \\%x;","err_mask":""},{"code":"@x = \"This\" =~ s/(.)/sprintf \"%b \", ord $1/gre; [@x]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1010100 1101000 1101001 1110011 \"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"] is it \"\n","err":"","code":"@x = \"This\" =~ s/(.)/sprintf \"%b \", ord $1/gre; [@x] is it a command ?","err_mask":""},{"code":"$x = 'three'; $y = \\$x; $x = \\$x; [ $x, $y ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\$VAR1->[0],$VAR1->[0]]"},{"err_mask":"","code":"$x = \\undef; \"$x\"","out":"SCALAR(0x7c0860)","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"$x = undef; $x //= 3;"},{"err":"","out":"","out_mask":"","err_mask":"","code":"@x[$wa = wantarray]; $wa"},{"err_mask":"","code":"[ $x++, $x ]","out":"[0,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$x = {} [ \"$x\", 0+$x ]","out":"ERROR: syntax error at (eval 1) line 1, near \"} [\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$x = {}; [ \"$x\", 0+$x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000Ã¿\u0000\u0000\u0000","out":"[\"HASH(0x407fb88)\",67632008]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[12,13,14]","code":"@x = $x || (12, 13, 14); \\ @x","err_mask":""},{"err_mask":"","code":" @x = \"\\x{2019}\"; push @x, ($x[0] =~ s/\\x{2019}/'/r); [@x]","err":"","out":"[\"\\x{2019}\",\"'\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ 'x' x 5 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"xxxxx\"]","err":""},{"err_mask":"","code":"$x = \"\\x65\\x66\\x67\";","err":"","out":"efg","out_mask":"Ã¿Ã¿Ã¿"},{"code":"$x = \"\\x65\\x66\\x67\"; eval \"qq($x)\" # not recommended","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"efg"},{"out_mask":"Ã¿","out":"C","err":"","code":"@x = \"xAyxByxCy\" =~ /x(.)y/g; $1 # last capture, not first","err_mask":""},{"code":"[ 'XX' =~ /((?i)x)x/ ]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"err":"","out":"[\"xx: \",\"q\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"xx: m:q\" =~ /(^[a-z367]*?: |\\s|^)(?:m|mixer):(\\S+)/; [$1, $2]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"xxS01E64E65yy","err":"","code":"'xxS01E32yy' =~ s/S01E([0-9][0-9])/\"S01E\" . ($1*2) . \"E\" . ($1*2 + 1)/er","err_mask":""},{"err":"","out":"xx1yy","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'xxS01E32yy' =~ s/S01E([0-9][0-9])/\"S01E\" . $1*2 . \"E\" . $1*2 + 1/er"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3]","code":"[ ++$x . '', ++$x . '', ++$x . '' ]","err_mask":""},{"code":"[ ++$x, ++$x, ++$x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[3,3,3]"},{"out":"[0,1,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[$x++, $x++, $x++]"},{"out_mask":"Ã¿","err":"","out":"5","code":"\"xxx\" + 5","err_mask":""},{"code":"\"\\x<\\x-\\xc\\xt\\xr\\xc\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\u0000<\u0000-\f\u0000t\u0000r\f"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"{ \"XXX\" =~ /(.*)/; } print $1"},{"err_mask":"","code":"$_ = \"x!xx!x!x!\"; my $state = 0; s/(\\w)/++$state % 2 ? (uc $1) : (lc $1)/ge; $_","out":"X!xX!x!X!","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"x x xx xxx xxxxx\\n\" =~ /^\\s*(?:((?(1)(?(3)(?(2)\\2|\\3)(\\1)|(\\S))|\\S))\\s+)+$/ ? \"\\\\o/\" : \":-(\"","out":"\\o/","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Missing braces on \\o{} at (eval 1) line 1, within string\n","err":"","code":"\"x x xx xxx xxxxx\\n\" =~ /^\\s*(?:((?(1)(?(3)(?(2)\\2|\\3)(\\1)|(\\S))|\\S))\\s+)+$/ ? \"\\o/\" : \":-(\"","err_mask":""},{"err_mask":"","code":"\"x x xx xxx xxxxx xxxxxxxx\\n\" =~ /^\\s*(?:((?(1)(?(3)(?(2)\\2|\\3)(\\1)|(\\S))|\\S))\\s+)+$/ ? \"a fibonacci sequence\" : \"bzzt\"","err":"","out":"a fibonacci sequence","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$x = 'XYZ XYZ XYZ'; $y =()= $x =~ /XYZ/g; $y","err":"","out":"3","out_mask":"Ã¿"},{"out":"\\undef","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\\$x = \\$y"},{"out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'x' =~ /(y?)/; [$1]"},{"err_mask":"","code":"'x' =~ /(y)?/; [$1]","out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ ($x, $y) = 5 .. 10 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[5,6]","err":""},{"err_mask":"","code":"($x, $y) = 'abc' =~ /(..)(.)/; [$1, $2] # $1, $2 are populated even when storing the values elsewhere","err":"","out":"[\"ab\",\"c\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"4","err":"","code":"($x, $y) = qw(a b c d)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"z\"]","err":"","code":"$x=\"y\"; [ ++$x ]","err_mask":""},{"err":"","out":"5","out_mask":"Ã¿","err_mask":"","code":"%x = { \"y\" => \"z\" }; $x{\"hey\"} += 5; print $x{\"hey\"};"},{"code":"[ 'xyzzy' =~ /(\\w)\\g{1}/ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"z\"]"},{"out_mask":"Ã¿","out":"1","err":"","code":"'xZx' =~ m'Z'","err_mask":""},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"'xZx' =~ m\"Z\""},{"err":"","out":"aa","out_mask":"Ã¿Ã¿","err_mask":"","code":"$x=\"z\"; $x++; $x"},{"err_mask":"","code":"$x = 'zzz'; $x++; $x","out":"aaaa","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"@y = (1, 2, 3); \\ @y","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3]","err":""},{"code":"@y = 1, 2, 3; \\ @y","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"out":"2\n","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"$y=1; *x = (sub { \\@_ })->($y); $x[0] = 2; print \"$y\\n\";"},{"err_mask":"","code":"$_ = \"yes\" ; y/e/Ã©/; $_","err":"","out":"yÃs","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = \"yes\" ; y/e/Ã©//; $_","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"$y=\"one\"; $z = undef; $y = $z || ''; print $z;"},{"code":"$y=\"one\"; $z = undef; $y = $z || undef; print $z;","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"\\\"you\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\\"you\"","err":""},{"err_mask":"","code":"you can use sprintf","out":"ERROR: \"use\" not allowed in expression at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 2, near \"you can use sprintf\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"your\" via package \"code\" (perhaps you forgot to load \"code\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"your code","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$x\" requires explicit package name (did you forget to declare \"my $x\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$y; { use strict; $x }","err_mask":""},{"err":"","out":"IO::Handle=GLOB(0x4c641a8)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$z=new IO::Handle; \"$z\""},{"err_mask":"","code":"[ \"Zoffix doubts that map example works\" =~ /(?=(..))/sg ]","err":"","out":"[\"Zo\",\"of\",\"ff\",\"fi\",\"ix\",\"x \",\" d\",\"do\",\"ou\",\"ub\",\"bt\",\"ts\",\"s \",\" t\",\"th\",\"ha\",\"at\",\"t \",\" m\",\"ma\",\"ap\",\"p \",\" e\",\"ex\",\"xa\",\"am\",\"mp\",\"pl\",\"le\",\"e \",\" w\",\"wo\",\"or\",\"rk\",\"ks\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"'zoom' =~ m moom","err":"","out":"1","out_mask":"Ã¿"},{"err_mask":"","code":"$z=\\$x; \"$z\"","err":"","out":"SCALAR(0x36f3938)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"code":"[ \"ÎRRÎÎ¥\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\316\\221RR\\316\\221\\316\\245\"]"},{"code":"[ 'Î©' cmp 'Î' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"out":"ÃÂ¯ ÃÂ¾ÃÂÃÂµÃÂ½ÃÂ ÃÂ¿ÃÂ»ÃÂ¾ÃÂÃÂ¾ ÃÂ³ÃÂ¾ÃÂ²ÃÂ¾ÃÂÃÂ ÃÂ¿ÃÂ¾ ÃÂÃÂÃÂÃÂÃÂºÃÂ¸ÃÂ¹","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"Ð¯ Ð¾ÑÐµÐ½Ñ Ð¿Ð»Ð¾ÑÐ¾ Ð³Ð¾Ð²Ð¾ÑÑ Ð¿Ð¾ ÑÑÑÑÐºÐ¸Ð¹\""},{"err_mask":"","code":"- -","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"- - ' .'","err":"","out":"0","out_mask":"Ã¿"},{"code":"- - ' '","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"err":"","out":"-","out_mask":"Ã¿","err_mask":"","code":"- - '-'"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"- - '.'"},{"out_mask":"Ã¿","err":"","out":"0","code":"- - '\"'","err_mask":""},{"out_mask":"Ã¿","out":"+","err":"","code":"- - '+'","err_mask":""},{"err_mask":"","code":"- - 'â§'","err":"","out":"0","out_mask":"Ã¿"},{"err_mask":"","code":";;;;;;;;;;;;;;;;;;;","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$stdh_TOP","code":"\"$^\";","err_mask":""},{"code":"()","err_mask":"","out_mask":"","out":"","err":""},{"code":"();","err_mask":"","out_mask":"","err":"","out":""},{"code":"[ :: ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"::\"]"},{"err":"","out":"[\"HASH(0x41f1b88)\",\"HASH(0x3ed8a08)\",\"HASH(0x4224228)\",\"HASH(0x3f3dba0)\",\"HASH(0x3c6d638)\",\"HASH(0x3cff848)\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',]"},{"code":"[{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"HASH(0x515cb88)\",\"HASH(0x4e43a08)\",\"HASH(0x518f228)\",\"HASH(0x4ea8ba0)\",\"HASH(0x4bd8638)\",\"HASH(0x4c6a848)\",\"HASH(0x4ea9ea0)\",\"HASH(0x50fdf70)\",\"HASH(0x45b4130)\",\"HASH(0x4a9c4a0)\",\"HASH(0x5340c58)\",\"HASH(0x4b50cc8)\"]","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"\\]\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',{} . '', {} . '',\\]"},{"out_mask":"Ã¿","out":"1","err":"","code":"@_","err_mask":""},{"code":"$^]","err_mask":"","out_mask":"","err":"","out":""},{"code":"$!","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Too many open files","err":""},{"code":"\\@_","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\\\\\@_\"]","err":""},{"code":"Í¾","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCD; marked by <-- HERE after natures/; <-- HERE near column 91 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"ERROR: Unrecognized character \\xCD; marked by <-- HERE after natures/; <-- HERE near column 91 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"^^\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"0^^0"},{"err_mask":"","code":"0**0","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"'0.00'+0 ? 'y' : 'n'","err":"","out":"n","out_mask":"Ã¿"},{"err":"","out":"00:02:02:05:6D:4C","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'000202056D4C' =~ s/..\\K\\B/:/gr"},{"code":"'000202056D4C' =~ s/..\\K/:/gr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"00:02:02:05:6D:4C:","err":""},{"out":"y","err":"","out_mask":"Ã¿","err_mask":"","code":"'0.00' ? 'y' : 'n'"},{"err_mask":"","code":"'0.0'? 'y' : 'n'","err":"","out":"y","out_mask":"Ã¿"},{"err_mask":"","code":"0%10","out":"0","err":"","out_mask":"Ã¿"},{"code":"[ '010' + 0 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[10]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"!(0 || 1 && (0 || 0)) && !(1 && 1)","code":" \"!(0 || 1 && (0 || 0)) && !(1 && 1)\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"((0.1 + 0.2)","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"0.3","err":"","code":"((0.1 + 0.2))","err_mask":""},{"err_mask":"","code":"[ 0.1 + 0.2, ((0.1 + 0.2) == 0.3) ? 'y' : 'n' ]","out":"[\"0.3\",\"n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"((0.1 + 0.2) == 0.3) ? 'y' : 'n'","err_mask":"","out_mask":"Ã¿","out":"n","err":""},{"err_mask":"","code":"0.1 + 0.2 == 0.3 ? 'y' : 'n'","out":"n","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"0+grep - - chr, 0..255;","out":"64","err":"","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"53","code":"0+grep { length(- - chr) > 1 } 0..255;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":"","code":"[ '0x010' + 0 ]","err_mask":""},{"out":"[95,95]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 0x7f - 0x20, 0xff5f - 0xff00 ];"},{"err":"","out":"128","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"0x80"},{"code":"0xFFF","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"4095"},{"code":"1","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"out_mask":"Ã¿","err":"","out":"1","code":"\"1\"","err_mask":""},{"err_mask":"","code":"$! = 1; \"$!\"","err":"","out":"Operation not permitted","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\",1,1]","code":"[ !1, !0, !0+0]","err_mask":""},{"err_mask":"","code":"[ !1, !0, !1+0]","out":"[\"\",1,0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"10**length q|*******|","err":"","out":"10000000","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[\\1, \\1]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\1,\\1]"},{"err_mask":"","code":"[ 1111111 =~ /^(1+)+$/ ];","out":"[1111111]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[11111,1,1],[1111,11,1],[1111,1,11],[1111,1,1],[111,111,1],[111,11,11],[111,11,1],[111,1,111],[111,1,11],[111,1,1],[11,1111,1],[11,111,11],[11,111,1],[11,11,111],[11,11,11],[11,11,1],[11,1,1111],[11,1,111],[11,1,11],[11,1,1],[1,11111,1],[1,1111,11],[1,1111,1],[1,111,111],[1,111,11],[1,111,1],[1,11,1111],[1,11,111],[1,11,11],[1,11,1],[1,1,11111],[1,1,1111],[1,1,111],[1,1,11],[1,1,1]]","err":"","code":"1111111 =~ /^(1{1,10})(1{1,10})(1{1,10})(?{ push @comb, [$1, $2, $3] })(?!)/; \\@comb","err_mask":""},{"err":"","out":"[[5,1,1],[4,2,1],[4,1,2],[4,1,1],[3,3,1],[3,2,2],[3,2,1],[3,1,3],[3,1,2],[3,1,1],[2,4,1],[2,3,2],[2,3,1],[2,2,3],[2,2,2],[2,2,1],[2,1,4],[2,1,3],[2,1,2],[2,1,1],[1,5,1],[1,4,2],[1,4,1],[1,3,3],[1,3,2],[1,3,1],[1,2,4],[1,2,3],[1,2,2],[1,2,1],[1,1,5],[1,1,4],[1,1,3],[1,1,2],[1,1,1]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"1111111 =~ /^(1{1,10})(1{1,10})(1{1,10})(?{ push @comb, [$1, $2, $3] })(?!)/; [map [map length, @$_], @comb]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[5,1,1],[4,2,1],[4,1,2],[3,3,1],[3,2,2],[3,1,3],[2,4,1],[2,3,2],[2,2,3],[2,1,4],[1,5,1],[1,4,2],[1,3,3],[1,2,4],[1,1,5]]","err":"","code":"1111111 =~ /^(1{1,10})(1{1,10})(1{1,10})$(?{ push @comb, [$1, $2, $3] })(?!)/; [map [map length, @$_], @comb]","err_mask":""},{"err_mask":"","code":"1111111 =~ /^((1+)(?{ local @one = @one, $1 }))+$(?{ push @comb, \\@one })(?!)/; \\@comb;","err":"","out":"[[],[],[],[],[]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[[],[],[],[],[]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"1111111 =~ /^((1+)(?{ local @one = @one, $2 }))+$(?{ push @comb, \\@one })(?!)/; \\@comb;"},{"err_mask":"","code":"1111111 =~ /^((1+)(?{ local @one = @one, $2 })+$(?{ push @comb, \\@one })(?!)/; \\@comb;","err":"","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/^( <-- HERE (1+)(?{ local @one = @one, $2 })+$(?{ push @comb, \\@one })(?!)/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"[ 1111111 =~ /^(<A>1+)+$/ ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1111111]","err":"","code":"[ 1111111 =~ /^(?<A>1+)+$/ ];","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"1111111 =~ /^(<A>1+)*$/;"},{"code":"1111111 =~ /^(<A>1+)*$(?{ print 'yes'; push @comb, [@{$-{A}}] })(?!)/; \\@comb;","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"yesyesyesyesyes","code":"1111111 =~ /^(?<A>1+)*$(?{ print 'yes'; push @comb, [@{$-{A}}] })(?!)/; \\@comb;","err_mask":""},{"err_mask":"","code":"1111111 =~ /^(?<A>1+)*$(?{ push @comb, [@{$-{A}}] })(?!)/; \\@comb;","err":"","out":"[[1111111],[1],[11],[1],[111]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"1111111 =~ /^(<A>1+)*$(?{ push @comb, [@{$-{A}}] })(?!)/ ? [map [map length, @$_], @comb] : ","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"1111111 =~ /^(<A>1+)*$(?{ push @comb, [@{$-{A}}] })(?!)/; [map [map length, @$_], @comb]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"err":"","out":"no","out_mask":"Ã¿Ã¿","err_mask":"","code":"1111111 =~ /^(<A>1+)*$(?{ push @comb, [@{$-{A}}] })(?!)/ ? [map [map length, @$_], @comb] : 'no';"},{"out_mask":"Ã¿","err":"","out":"3","code":"1+2","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"match","code":"'12' =~ /1\\B2/ ? 'match' : 'nope'","err_mask":""},{"err":"","out":"[123,456,789,0,\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ '1234567890' =~ /.{0,3}/g ]"},{"code":"[ '1234567890' =~ /.{1,3}/g ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[123,456,789,0]","err":""},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"[ '1234567890' =~ /.{,3}/g ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","code":"/13","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"21","err":"","code":"1.5 * 14","err_mask":""},{"code":"/1\\b2/ ? 'match' : 'nope'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"nope","err":""},{"code":"/1\\B2/ ? 'match' : 'nope'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"nope"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"Inf","code":"1e1000","err_mask":""},{"err":"","out":"[\"10000000000000\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 1e205 / 1e192 ]"},{"code":"1+print 4","err_mask":"","out_mask":"Ã¿","err":"","out":"4"},{"code":"1+print \"4\"","err_mask":"","out_mask":"Ã¿","err":"","out":"4"},{"out":"ERROR: Assigning non-zero to $[ is no longer possible at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$[ = 1;  [ qw/Foo Bar/[1] ]"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"'-1' =~ s/(.+)/-$1/er"},{"code":"++${\\1}; say 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"$! = 2; \"$!\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"No such file or directory"},{"code":"20%10","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"err_mask":"","code":"2 << 1","out":"4","err":"","out_mask":"Ã¿"},{"code":"[ 2 << 1, 2 >> 1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[4,1]","err":""},{"err":"","out":"[4,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 2 << 1, 4 >> 1 ]"},{"out_mask":"Ã¿","err":"","out":"8","code":"2 << 2","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.46666666666667","err":"","code":"220/10*4/60","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.83333333333333","code":"220/8*4/60","err_mask":""},{"code":"*2=2.5; *2+*2","err_mask":"","out_mask":"Ã¿","err":"","out":"0"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"234567","err":"","code":"- - '234567'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1099511627776","code":"2**40","err_mask":""},{"out":"255.244","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"255.244"},{"err":"","out":"3","out_mask":"Ã¿","err_mask":"","code":"3%10"},{"code":"378/462","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.818181818181818"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[3]","code":"[ 3 + asdfadsf->import ]","err_mask":""},{"err_mask":"","code":"(4095 & 0xFF00) >> 8;","out":"15","err":"","out_mask":"Ã¿Ã¿"},{"code":"417 * 256","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"106752"},{"out_mask":"Ã¿Ã¿","out":"42","err":"","code":"42","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after natures/; <-- HERE near column 91 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"â42â","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"42","code":"('42 bottles of beer' =~ /(\\d+)/)[0]","err_mask":""},{"code":"\\42->can(\"foo\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\undef"},{"code":"42->can(\"foo\");","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"(42 =~ /(\\d+)/)[0]","out":"42","err":"","out_mask":"Ã¿Ã¿"},{"out":"2838","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"473*6"},{"code":"*4 = sub { 'ok' }; main->${ \\4 };","err_mask":"","out_mask":"Ã¿Ã¿","out":"ok","err":""},{"code":"*4 = sub { 'ok' }; main->4;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"->4\"\n"},{"err_mask":"","code":"*4 = sub { print \"yes\" }; 4->()","out":"yes","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out":"6","err":"","out_mask":"Ã¿","err_mask":"","code":"6%10"},{"err_mask":"","code":"71503 + 46697- 999","out":"117201","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[-12,-11,15]","code":"[ 98-110,106-117,118-103]  ","err_mask":""},{"code":"998*999","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"997002","err":""},{"code":"999*999","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"998001","err":""},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"- - ' A'"},{"err_mask":"","code":"- - 'A'","err":"","out":"+A","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"*$a = 1;","out":"ERROR: Can't use an undefined value as a symbol reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"@a=(1..5); $a[-20]","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify constant item in substitution (s///) at (eval 1) line 1, near \"s/\\D+//,\"\n","err":"","code":"[ 'a 42 b' =~ s/\\D+//, 'a 42 b' =~ s/\\D+//g ]","err_mask":""},{"err_mask":"","code":"[ 'a 42 b' =~ s/\\D+//r, 'a 42 b' =~ s/\\D+//gr ]","out":"[\"42 b\",42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"$_ = \"aa\"; /^(.)$1$/"},{"out_mask":"Ã¿","err":"","out":"1","code":"$_ = \"aa\"; /^(.)\\1$/","err_mask":""},{"err":"","out":"012345","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$a = 'a'; my $b = \\*a; for $$b (0..5) { print $a }"},{"out":"\\undef","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\\$a = \\$b"},{"code":"/a\\Ba/ ? 'match' : 'nope'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"nope"},{"err":"","out":"[\\\"abc\",\\\"abc\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \\'abc', \\'abc' ]"},{"code":"[ \\abc::, \\abc:: ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\\\"abc\",\\\"abc\"]"},{"err_mask":"","code":"[ \\('abc' x 2) ]","err":"","out":"[\\\"abcabc\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"abc:: x \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ \\(abc:: x 2) ]"},{"err_mask":"","code":"/a\\b/ ? 'match' : 'nope'","err":"","out":"nope","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"/a\\b#/ ? 'match' : 'nope'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"nope","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify multiplication (*) in scalar assignment at (eval 1) line 1, at EOF\n","code":"$a=\"foo bar\" *$a = 1;","err_mask":""},{"err":"","out":"*main::1","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$a=\"foo bar\"; *$a = 1;"},{"code":"$a=\"foo bar\"; *$a = sub {\"baz\"};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"*main::foo bar","err":""},{"code":"$a=\"foo bar\"; *$a = sub {\"baz\"}; \"foo bar\"->()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"baz"},{"code":"/a/ ? 'match' : 'nope'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"nope","err":""},{"out":"a","err":"","out_mask":"Ã¿","err_mask":"","code":"'A' =~ s/(A)/lcfirst $1/re"},{"out_mask":"Ã¿","out":"a","err":"","code":"'A' =~ s/(A)/'lcfirst $1'/ree","err_mask":""},{"code":"[asdfadsf->can('import')]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"fooo\" via package \"asdfadsf\" (perhaps you forgot to load \"asdfadsf\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"asdfadsf->fooo","err_mask":""},{"code":"[ asdfadsf->import ]","err_mask":"","out_mask":"Ã¿Ã¿","out":"[]","err":""},{"err_mask":"","code":"asdfadsf->import","out":"","err":"","out_mask":""},{"out_mask":"Ã¿","err":"","out":"y","code":"'/asdf//' =~ m{/[^/]*/(?!/)} ? 'y' : 'n'","err_mask":""},{"out":"[\"a\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ ('a' x 30) =~ /(.*a){25,}/ ];"},{"code":"('a' x 30) =~ /([^a]*a){25,}/","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err":"","out":"[\"a\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ ('a' x 30) =~ /([^a]*a){25,}/ ];"},{"err_mask":"","code":"'aXYbXYcXYdeXfYgX' =~ s/.+\\KXY.+$//r;","out":"aXYbXYc","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"'aXYbXYcXYdeXfYgX' =~ s/(.+)XY.+$/$1/r;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"aXYbXYc"},{"err":"","out":"a","out_mask":"Ã¿","err_mask":"","code":"'aXYbXYcXYdeXfYgX' =~ s/XY(.(?!=XY))+//r"},{"out":"a","err":"","out_mask":"Ã¿","err_mask":"","code":"'aXYbXYcXYdeXfYgX' =~ s/XY(.(?!=XY))+$//r"},{"err_mask":"","code":"'aXYbXYcXYdeXfYgX' =~ s/XY(.(?!=XY)+)//r","out":"aXYcXYdeXfYgX","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"aXYbXYcXYdeXfYgX","code":"'aXYbXYcXYdeXfYgX' =~ s/XY(.(?!=XY)+)$//r","err_mask":""},{"out_mask":"Ã¿","out":"a","err":"","code":"'aXYbXYcXYdeXfYgX' =~ s/XY(.(?!=XY)+)+//r","err_mask":""},{"code":"'aXYbXYcXYdeXfYgX' =~ s/XY(.(?!XY))+$//r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"aXYbXYc"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[3]","err":"","code":"[ ('A'..'Z', 0..9)[29] ]","err_mask":""},{"err_mask":"","code":"[(a..z)[24]]","out":"[\"y\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ ('a'..'z')[25] ]","err":"","out":"[\"z\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ ('a'..'z')[26] ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"babg\",\"bag\"]","code":"[ 'babgbag' =~ /.*?b.*?a.*?g.*?/g ]","err_mask":""},{"out":"[\"babgbag\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ 'babgbag' =~ /.*?b.*?a.*?g.*/g ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"babgbag\"]","code":"[ 'babgbag' =~ /.*b.*a.*g.*/g ]","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ () = 'babgbag' =~ /.*?b.*?a.*?g.*?/g ]","err_mask":""},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"[ () = 'babgbag' =~ /.*b.*a.*g.*/g ]"},{"out":"+bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"- - '+bar'"},{"out":"-bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"- 'bar'"},{"code":"--'bar'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify constant item in predecrement (--) at (eval 1) line 1, at EOF\n"},{"err_mask":"","code":"-(-'bar')","out":"+bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"0","out_mask":"Ã¿","err_mask":"","code":"'bar' - 'bar'"},{"out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN { *4 = sub () { 'ok' } }; &{ 4 };"},{"err_mask":"","code":"BEGIN { *4 = sub () { 'ok' } }; &{ 4 }();","out":"ok","err":"","out_mask":"Ã¿Ã¿"},{"code":"BEGIN { $::{ARRAY} = \\[qw(one two three)] }; ARRAY","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"one\",\"two\",\"three\"]"},{"err_mask":"","code":"BEGIN { *consecrate = \\&CORE::bless }  [ consecrate  {}, 'Foo' ]","err":"","out":"[bless( {}, 'Foo' )]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"123","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN{ $^H = 0 }; use strict; use feature 'state';  for( 1..3) { print ++(state $x) }"},{"out":"123","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN{ $^H = 0 }; use strict; use feature 'state';  for( 1..3) { state $x; print ++$x }"},{"code":"BEGIN { &Internals::SvREADONLY(\\1, 0); ++${ \\1 } }; say 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"BEGIN { Internals::SvREADONLY(\\1, 0); ++${ \\1 } }; say 1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Type of arg 1 to Internals::SvREADONLY must be one of [$%@] (not constant item) at (eval 1) line 1, near \"0)\"\nBEGIN not safe after errors--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"BEGIN { &Internals::SvREADONLY(\\undef, 0); ++${ \\undef } }; say undef;","err_mask":""},{"code":"BEGIN { $SIG{__DIE__} = sub { say \"42\"; } } '..'","err_mask":"","out_mask":"Ã¿Ã¿","out":"..","err":""},{"code":"BEGIN { $SIG{__DIE__} = sub { say \"42\"; } }  a ab ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"42\nERROR: Can't locate object method \"a\" via package \"ab\" (perhaps you forgot to load \"ab\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"42\nERROR: Can't locate object method \"a\" via package \"bc\" (perhaps you forgot to load \"bc\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"BEGIN { $SIG{__DIE__} = sub { say 42 };  }  a bc","err_mask":""},{"err_mask":"","code":"BEGIN { $SIG{__DIE__} = sub { say 42; };  }  a bc","err":"","out":"42\nERROR: Can't locate object method \"a\" via package \"bc\" (perhaps you forgot to load \"bc\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"BEGIN { $SIG{__DIE__} = sub { say 42; exit  };  }  a bc","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"42\nERROR: Can't locate object method \"a\" via package \"bc\" (perhaps you forgot to load \"bc\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"BEGIN { $SIG{__DIE__} = sub { say 42; return 0 };  }  a bc","err_mask":""},{"err_mask":"","code":"BEGIN { $SIG{__DIE__} = sub { say 42; return  };  }  a bc","err":"","out":"42\nERROR: Can't locate object method \"a\" via package \"bc\" (perhaps you forgot to load \"bc\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"42\nERROR: Can't locate object method \"a\" via package \"bc\" (perhaps you forgot to load \"bc\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"BEGIN { $SIG{__DIE__} = sub { say 42; return false };  }  a bc"},{"code":"\"BenGoldberg \\N{HEAVY SPARKLE}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"BenGoldberg Ã¢ÂÂ"},{"code":"binmode STDOUT; ($a,$b) = (\"\\x{202d}\", \"\\x{202e}\");","err_mask":"","out_mask":"Ã¿","out":"2","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"â­Jâ®,â­uâ®râ­sâ®eâ­tâ®kâ­ â®câ­aâ®aâ­nâ®Hâ­oâ® â­tâ®Iâ­hâ®Dâ­eâ®Iâ­râ®B","code":"binmode STDOUT; ($a,$b) = (\"\\x{202d}\", \"\\x{202e}\"); $_ = \"Just another BIDI Hacker,\\n\"; print \"$a$1$b$3\" while s/(.)(.*)(.)/$2/;","err_mask":""},{"code":"binmode STDOUT; ($a,$b) = (\"\\x{202d}\", \"\\x{202e}\"); $_ = \"Just another BIDI Hacker, \"; print \"$a$1$b$3\" while s/(.)(.*)(.)/$2/;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"â­Jâ® â­uâ®,â­sâ®râ­tâ®eâ­ â®kâ­aâ®câ­nâ®aâ­oâ®Hâ­tâ® â­hâ®Iâ­eâ®Dâ­râ®Iâ­ â®B"},{"err_mask":"","code":"binmode STDOUT; ($a,$b) = (\"\\x{202d}\", \"\\x{202e}\"); $_ = \"Just another BIDI Hacker\"; print \"$a$1$b$3\" while s/(.)(.*)(.)/$2/;","out":"â­Jâ®râ­uâ®eâ­sâ®kâ­tâ®câ­ â®aâ­aâ®Hâ­nâ® â­oâ®Iâ­tâ®Dâ­hâ®Iâ­eâ®Bâ­râ® ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"binmode STDOUT, 'encoding(utf8)'; my @o = (\"\\x{202d}\", \"\\x{202e}\"); print \"$o[--$|]$_\" for split //, 'J,ursetk cAanHo tIhDeIrB /Pler'","out":"Ã¢ÂÂ­JÃ¢ÂÂ®,Ã¢ÂÂ­uÃ¢ÂÂ®rÃ¢ÂÂ­sÃ¢ÂÂ®eÃ¢ÂÂ­tÃ¢ÂÂ®kÃ¢ÂÂ­ Ã¢ÂÂ®cÃ¢ÂÂ­AÃ¢ÂÂ®aÃ¢ÂÂ­nÃ¢ÂÂ®HÃ¢ÂÂ­oÃ¢ÂÂ® Ã¢ÂÂ­tÃ¢ÂÂ®IÃ¢ÂÂ­hÃ¢ÂÂ®DÃ¢ÂÂ­eÃ¢ÂÂ®IÃ¢ÂÂ­rÃ¢ÂÂ®BÃ¢ÂÂ­ Ã¢ÂÂ®/Ã¢ÂÂ­PÃ¢ÂÂ®lÃ¢ÂÂ­eÃ¢ÂÂ®r","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"binmode STDOUT; $_ = \"Just another BIDI Hacker, \"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"â­Jâ® â­uâ®,â­sâ®râ­tâ®eâ­ â®kâ­aâ®câ­nâ®aâ­oâ®Hâ­tâ® â­hâ®Iâ­eâ®Dâ­râ®Iâ­ â®B","err":""},{"code":"binmode STDOUT; $_ = \"Just another Hexchat Hacker,  \"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"â­Jâ® â­uâ® â­sâ®,â­tâ®râ­ â®eâ­aâ®kâ­nâ®câ­oâ®aâ­tâ®Hâ­hâ® â­eâ®tâ­râ®aâ­ â®hâ­Hâ®câ­eâ®x"},{"err_mask":"","code":"binmode STDOUT; $_ = \"Just another Hexchat Hacker, \"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err":"","out":"â­Jâ® â­uâ®,â­sâ®râ­tâ®eâ­ â®kâ­aâ®câ­nâ®aâ­oâ®Hâ­tâ® â­hâ®tâ­eâ®aâ­râ®hâ­ â®câ­Hâ®x","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"â­Jâ®,â­uâ®râ­sâ®eâ­tâ®kâ­ â®câ­aâ®aâ­nâ®Hâ­oâ® â­tâ®tâ­hâ®aâ­eâ®hâ­râ®câ­ â®xâ­Hâ®e","err":"","code":"binmode STDOUT; $_ = \"Just another Hexchat Hacker,\"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err_mask":""},{"code":"binmode STDOUT; $_ = \"Just another Perl/BIDI Hacker,\"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"â­Jâ®,â­uâ®râ­sâ®eâ­tâ®kâ­ â®câ­aâ®aâ­nâ®Hâ­oâ® â­tâ®Iâ­hâ®Dâ­eâ®Iâ­râ®Bâ­ â®/â­Pâ®lâ­eâ®r"},{"code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x10-\\x7f][\\xff00-\\xff5f]r;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hï¿½ï¿½ï¿½>ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½>sï¿½ï¿½ï¿½ï¿½ï¿½ï¿½>ï¿½ï¿½ï¿½ï¿½ï¿½J"},{"err_mask":"","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\x{2000}\\x{ff01}-\\x{ff5f}]r;","out":"ï¼ªï½ï½ï½âï½ï½ï½ï½ï½ï½ï½âï¼µï½ï½ï½ï½ï½ï½âï½ï½ï½ï½ï½ï½ï¼","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ï¼ªï½ï½ï½âï½ï½ï½ï½ï½ï½ï½âï¼µï½ï½ï½ï½ï½ï½âï½ï½ï½ï½ï½ï½ï¼","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\x{2001}\\x{ff01}-\\x{ff5f}]r;"},{"code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\x{2003}\\x{ff01}-\\x{ff5f}]r;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ï¼ªï½ï½ï½âï½ï½ï½ï½ï½ï½ï½âï¼µï½ï½ï½ï½ï½ï½âï½ï½ï½ï½ï½ï½ï¼","err":""},{"err_mask":"","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\x{ff00}-\\x{ff5f}]r;","err":"","out":"ï¼ªï½ï½ï½ï¼ï½ï½ï½ï½ï½ï½ï½ï¼ï¼µï½ï½ï½ï½ï½ï½ï¼ï½ï½ï½ï½ï½ï½ï¼","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"Xï¿½ï¿½ï¿½ï¿½o|}ï¿½vsï¿½ï¿½c|wq}rsï¿½voqysï¿½:","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\xff00-\\xff5f]r;"},{"err_mask":"","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][ \\x{ff01}-\\x{ff5f}]r;","out":"ï¼ªï½ï½ï½ ï½ï½ï½ï½ï½ï½ï½ ï¼µï½ï½ï½ï½ï½ï½ ï½ï½ï½ï½ï½ï½ï¼","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Xï¿½ï¿½ï¿½ï¿½o|}ï¿½vsï¿½ï¿½c|wq}rsï¿½voqysï¿½:","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\xff10-\\xff5f]r;","err_mask":""},{"code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\xff20-\\xff5f]r;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Xï¿½ï¿½ï¿½ï¿½o|}ï¿½vsï¿½ï¿½c|wq}rsï¿½voqysï¿½:"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Xï¿½ï¿½ï¿½ï¿½o|}ï¿½vsï¿½ï¿½c|wq}rsï¿½voqysï¿½:","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\xff30-\\xff5f]r;","err_mask":""},{"out":"Xï¿½ï¿½ï¿½ï¿½o|}ï¿½vsï¿½ï¿½c|wq}rsï¿½voqysï¿½:","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\xff40-\\xff5f]r;"},{"err_mask":"","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x20-\\x7f][\\xff50-\\xff5f]r;","err":"","out":"Xï¿½ï¿½ï¿½ï¿½o|}ï¿½vsï¿½ï¿½c|wq}rsï¿½voqysï¿½:","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x30-\\x7f][\\xff00-\\xff5f]r;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Hsqr _lmrfcp Slgambc f_aicp,"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"8cab O\\]bVS` C\\WQ]RS VOQYS`,","code":"binmode STDOUT; 'Just another Unicode hacker,' =~ tr[\\x40-\\x7f][\\xff00-\\xff5f]r;","err_mask":""},{"code":"binmode STDOUT; my @o = (\"\\x{202d}\", \"\\x{202e}\"); print \"$o[--$|]$_\" for split //, 'J,ursetk cAanHo tIhDeIrB /Pler'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"â­Jâ®,â­uâ®râ­sâ®eâ­tâ®kâ­ â®câ­Aâ®aâ­nâ®Hâ­oâ® â­tâ®Iâ­hâ®Dâ­eâ®Iâ­râ®Bâ­ â®/â­Pâ®lâ­eâ®r"},{"out_mask":"Ã¿Ã¿Ã¿","out":"â","err":"","code":"binmode STDOUT; print 'â' .. 'â'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ââââââââ â¡â¢â£â¤â¥â¦â§â¨â©âªâ«â¬â­â®â¯â°â±â²â³â´âµâ¶â·â¸â¹âºâ»â¼â½â¾â¿ââââââââââ","err":"","code":"binmode STDOUT; print chr($_) for 0x2719 .. 0x2749;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"â","err":"","code":"binmode STDOUT; print for 'â' .. 'â'","err_mask":""},{"err_mask":"","code":"binmode STDOUT; print \"\\x{1f4a9}\"","err":"","out":"ð©","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"Ã¢ÂÂ­JÃ¢ÂÂ®,Ã¢ÂÂ­uÃ¢ÂÂ®rÃ¢ÂÂ­sÃ¢ÂÂ®eÃ¢ÂÂ­tÃ¢ÂÂ®kÃ¢ÂÂ­ Ã¢ÂÂ®cÃ¢ÂÂ­AÃ¢ÂÂ®aÃ¢ÂÂ­nÃ¢ÂÂ®HÃ¢ÂÂ­oÃ¢ÂÂ® Ã¢ÂÂ­tÃ¢ÂÂ®IÃ¢ÂÂ­hÃ¢ÂÂ®DÃ¢ÂÂ­eÃ¢ÂÂ®IÃ¢ÂÂ­rÃ¢ÂÂ®BÃ¢ÂÂ­ Ã¢ÂÂ®/Ã¢ÂÂ­PÃ¢ÂÂ®lÃ¢ÂÂ­eÃ¢ÂÂ®r","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode STDOUT, 'utf8'; my @o = (\"\\x{202d}\", \"\\x{202e}\"); print \"$o[--$|]$_\" for split //, 'J,ursetk cAanHo tIhDeIrB /Pler'"},{"err_mask":"","code":"blahblah q|0.000.000_YYMMDDhhmm|","out":"ERROR: syntax error at (eval 1) line 1, near \"blahblah q|0.000.000_YYMMDDhhmm|\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"bless bless(), \"Bar\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not enough arguments for bless at (eval 1) line 1, near \"bless()\"\n","err":""},{"code":"bless bless({}, \"Foo\"), \"Bar\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bless( {}, 'Bar' )"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"bless( {}, 'Foo' )","err":"","code":"*::bless = sub { print \"foo\" }; bless {}, 'Foo';","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"bless( {}, 'Foo' )","code":"*bless = sub { print \"foo\" }; bless {}, 'Foo';","err_mask":""},{"code":"$_ = 'CamelCaseXMLParser'; join('_', map {lc} grep {length} split /([A-Z]+[^A-Z]*)/)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"camel_case_xmlparser"},{"err_mask":"","code":"$_ = 'CamelCaseXMLParser'; join '', map { ucfirst lc } split '_', join('_', map {lc} grep {length} split /([A-Z]+[^A-Z]*)/)","err":"","out":"CamelCaseXmlparser","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'CamelCaseXMLParser'; join('', map { ucfirst lc } split '_', join('_', map {lc} grep {length} split /([A-Z]+[^A-Z]*)/)"},{"out":"CamelCaseXmlparser","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'CamelCaseXMLParser' =~ s/([A-Z]+[^A-Z]*)/\\u\\L$1/gr;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"can\" without a package or object reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"\"\"->can(\"foo\");","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]","code":"$cat_line = 'Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 3 ? 1 : 0; [ $is_deep ]","err_mask":""},{"code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur*::*Brooze'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my @cat_bits = split /\\Q*::*\\E/, $cat_line; splice @cat_bits, -2; my $unwanted_cat = join '*::*', @cat_bits; [ \\@cat_bits, $unwanted_cat  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"Foo\",\"Bar\",\"Ber\",\"Bez\"],\"Foo*::*Bar*::*Ber*::*Bez\"]"},{"err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (=() = $cat_line =~ /\\Q*::*\\E/) > 3 ? 1 : 0; [ $is_deep ]","out":"ERROR: syntax error at (eval 1) line 1, near \"(=\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/) > 3 ? 1 : 0; [ $is_deep ]","err":"","out":"[0]","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my @cat_bits = split /\\Q*::*\\E/, $cat_line; [ \\@cat_bits ]","err":"","out":"[[\"Foo\",\"Bar\",\"Ber\",\"Bez\",\"Bur\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[\"Foo\",\"Bar\"],\"Ber*::*Bez*::*Bur\"]","err":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my @cat_bits = split /\\Q*::*\\E/, $cat_line; $cat_line = join '*::*', splice @cat_bits, 2; [ \\@cat_bits, $cat_line ]","err_mask":""},{"err":"","out":"[[],\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my @cat_bits = split /\\Q*::*\\E/, $cat_line = join '*::*', splice @cat_bits, 2; [ \\@cat_bits, $cat_line ]"},{"out":"[[],\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my @cat_bits = split /\\Q*::*\\E/, $cat_line = join '*::*', splice @cat_bits, 3; [ \\@cat_bits, $cat_line ]"},{"out":"[[\"Foo\",\"Bar\",\"Ber\"],\"Foo*::*Bar*::*Ber\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my @cat_bits = split /\\Q*::*\\E/, $cat_line; splice @cat_bits, -2; my $unwanted_cat = join '*::*', @cat_bits; [ \\@cat_bits, $unwanted_cat  ]"},{"err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my @cat_bits = split /\\Q*::*\\E/, $cat_line; splice @cat_bits, 2; my $unwanted_cat = join '*::*', @cat_bits; [ \\@cat_bits, $unwanted_cat  ]","out":"[[\"Foo\",\"Bar\"],\"Foo*::*Bar\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my $prefix = splice 0, 3, @{[split /\\Q*::*\\E/, $cat_line]; [ $prefix ]"},{"out":"ERROR: Type of arg 1 to splice must be array (not constant item) at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my $prefix = splice 0, 3, @{[split /\\Q*::*\\E/, $cat_line]}; [ $prefix ]"},{"code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 1 ? 1 : 0; my $prefix = splice 0, 3, split /\\Q*::*\\E/, $cat_line; [ $prefix ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Type of arg 1 to splice must be array (not constant item) at (eval 1) line 1, at EOF\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = (() = $cat_line =~ /\\Q*::*\\E/g) > 3 ? 1 : 0; [ $is_deep ]","err_mask":""},{"code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = () = $cat_line =~ /\\Q*::*\\E/g;  [ $is_deep ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[4]","err":""},{"code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = () = $cat_line =~ /\\Q*::*\\E/;  [ $is_deep ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; my $is_deep = () = $cat_line =~ /\\Q*::*\\E/);  [ $is_deep ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"/\\Q*::*\\E/)\"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Ber*::*Bur]\"]","err":"","code":"$cat_line = '[Foo*::*Bar*::*Ber*::*Bez*::*Bur]'; $wanted_cat = join '*::*', (split /\\Q*::*\\E/, $cat_line)[-3,-1]; [ $wanted_cat ]","err_mask":""},{"err":"","out":"[\"Ber*::*Bur\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$cat_line = 'Foo*::*Bar*::*Ber*::*Bez*::*Bur'; $wanted_cat = join '*::*', (split /\\Q*::*\\E/, $cat_line)[-3,-1]; [ $wanted_cat ]"},{"err":"","out":"[\"av\",\"ap\",\"ar\",\"va\",\"vp\",\"vr\",\"pa\",\"pv\",\"pr\",\"ra\",\"rv\",\"rp\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$c=\"{a,v,p,r}\"; [grep {$_ !~ /(.)\\1/} glob $c.$c]"},{"err":"","out":"[0]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'C########C_##'; /(#*)C/; [ length $1 ]"},{"out":"[8]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = '########C_##'; /(#+)C/; [ length $1 ]"},{"err_mask":"","code":"$_ = '########C_##'; /C/; [ pos ]","out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use an array as a reference at (eval 1) line 1, <STDIN> line 1.\n","code":"@charmap = qw/Botje!!!/; @charmap->[qw/Botje/]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an array as a reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"@charmap = qw/Botje/; @charmap->[qw/Botje!/]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¢ÂÂ","code":"charnames::string_vianame(\"SNOWMAN\")","err_mask":""},{"code":"charnames::viacode(1234)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"CYRILLIC CAPITAL LETTER A WITH DIAERESIS","err":""},{"err":"","out":"Ã­Â Â","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"chr 0xd800"},{"out":"\u0000","err":"","out_mask":"Ã¿","err_mask":"","code":"chr 'Î§'"},{"code":"$_ = '########_##'; /(#*)C/; [ length $1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"code":"*code = sub { print 'ok' }; say '[', code, ']';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[code]\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[code]\n","err":"","code":"\\&code = sub { print 'ok' }; say '[', code, ']';","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"*CORE::bless","code":"*CORE::bless = sub { print \"foo\" }","err_mask":""},{"code":"\\*$CORE::bless = sub { print \"foo\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify reference to ref-to-glob cast in scalar assignment at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify reference to ref-to-glob cast in scalar assignment at (eval 1) line 1, at EOF\n","err":"","code":"\\*CORE::bless = sub { print \"foo\" }","err_mask":""},{"code":"*CORE::bless = sub { print \"foo\" }; bless","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not enough arguments for bless at (eval 1) line 1, at EOF\n"},{"out":"bless( {}, 'Foo' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"*CORE::bless = sub { print \"foo\" }; bless {}, 'Foo';"},{"err_mask":"","code":"*CORE::die = sub { say \"42\"; } die  ","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"} die\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"*CORE::die = sub { say \"42\"; }; die  "},{"err_mask":"","code":"$CORE::GLOBAL::print = sub { print 42 }; print \"foo\"","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"*CORE::GLOBAL::print = sub { print 42 }; print \"foo\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: CORE::GLOBAL is not a keyword at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"CORE::GLOBAL{print} = sub { print 42 }; print \"foo\"","err_mask":""},{"code":"*CORE::print","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"*CORE::print"},{"err":"","out":"\\*CORE::print","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\\*CORE::print"},{"code":"@d","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\sub {    no warnings;    use feature 'current_sub', 'evalbytes', 'fc', 'lexical_subs', 'postderef', 'postderef_qq', 'refaliasing', 'say', 'signatures', 'state', 'switch', 'unicode_strings', 'unicode_eval';    no feature 'array_base';    BEGIN {        $^H{'charnames'} = 'CODE(0x2dd0668)';        $^H{'charnames_full'} = '1';        $^H{'charnames_inverse_ords'} = 'HASH(0x2e12f90)';        $^H{'charnames_loose'} = '0';        $^H{'charnames_name_aliases'} = 'HASH(0x2d9af98)';        $^H{'charnames_ord_aliases'} = 'HASH(0x2dc14d8)';        $^H{'charnames_scripts'} = '';        $^H{'charnames_short'} = '0';        $^H{'charnames_stringified_inverse_ords'} = '';        $^H{'charnames_stringified_names'} = '';        $^H{'charnames_stringified_ords'} = '';    }    say 'Goodbye Mars';}","err":"","code":"$Data::Dumper::Deparse = 1; my $a = sub { say \"Hello World\" }; my $b = $a; \\(sub {say \"Goodbye Mars\"});","err_mask":""},{"code":"Data::Dumper::Deparse = 1; my $a = sub { say \"Hello World\" }; my $b = $a; \\(sub {say \"Goodbye Mars\"});","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify non-lvalue subroutine call of &Data::Dumper::Deparse in scalar assignment at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[1,2,3,{ber => \"bez\",foo => \"bar\"}],[42,2,3,$VAR1->[0][3]]]","code":"$Data::Dumper::Terse = 1; $r = [ 1, 2, 3, { foo => bar }, ]; @a = @$r; $r->[0] = 42; $r->[3]{ber} = 'bez'; [ \\@a, $r ]","err_mask":""},{"out":"decode_json","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"decode_json"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, at EOF\n","err":"","code":"deparse: sub foo (;$) { say \"[@_]\"; }; my %h = ( bar => foo(42), meow => 'moo' ); \\%h","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[42]\n","err":"","code":"deparse: sub foo ($) { say \"[@_]\"; }; my %h = ( bar => foo(42), meow => 'moo' ); \\%h","err_mask":""},{"err_mask":"","code":"()?(): die 'Denied.';","err":"","out":"ERROR: Denied. at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"","code":"do {my $print = \\&CORE::GLOBAL::print; *CORE::GLOBAL::print = sub { $print->(\"wut wut: \", @_)}}; CORE::print \"foo\"","err_mask":""},{"code":"do { my @tmp = 1, 2, 3; \\@tmp }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"[ $!{EINSUFFICIENT_POO} ]","err_mask":""},{"out_mask":"","err":"","out":"","code":"$!{EINSUFFICIENT_POO}","err_mask":""},{"err":"","out":"[52]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ Errno::EBADE ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Errno::EBADY\"]","err":"","code":"[ Errno::EBADY ]","err_mask":""},{"out":"[16]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ Errno::EBUSY ]"},{"err_mask":"","code":"[ Errno::EPERM ]","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ Errno::ETOOMANYREFS ]","out":"[109]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"eval \"!(0 || 1 && (0 || 0)) && !(1 && 1)\"","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"yes\",\"yes\",\"yes\",\"yes\"]","code":"[ eval \"qw(yes yes),\\n#no\\nqw(yes yes)\" ]","err_mask":""},{"out":"No such file or directory","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"exec '/bin/cwd'; $!;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"No such file or directory","err":"","code":"exec '/bin/ls'; $!;","err_mask":""},{"err_mask":"","code":"exec '/usr/bin/ls'; $!;","err":"","out":"No such file or directory","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = '@f@f@f'; s'@f'$b'gr; ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"$b$b$b","err":""},{"err_mask":"","code":"++($foo++)","err":"","out":"ERROR: Can't modify postincrement (++) in preincrement (++) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"++${($foo++)","out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"* \"foo\" = 1;"},{"code":"*'foo' = 1;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"$foo = 1; $bar = *foo; [ $$bar ]"},{"err_mask":"","code":"$foo1 = $foo2 = '4 a 2'; ( $foo1 ) = $foo1 =~ /(\\d+)/; $foo2 =~ s/\\D+//g; [ $foo1, $foo2 ]","err":"","out":"[4,42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$foo = 42; $bar = *foo; [ *$bar = sub { 53 } ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[*::foo]"},{"out_mask":"Ã¿Ã¿","err":"","out":"42","code":"$foo = 42; $bar = *foo; *$bar = sub { 53 }; $$bar;","err_mask":""},{"out":"53","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"$foo = 42; $bar = *foo; *$bar = sub { 53 }; $bar->();"},{"err_mask":"","code":"'foo   ' ^. '   bar'","out":"ERROR: syntax error at (eval 1) line 1, near \"^.\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{ber => undef,foo => \"bar\"}","err":"","code":"+{ foo => bar => 'ber' }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"$foo = 'bar'; $qux = \\$foo; for $$qux (1..3) { print $foo }","err_mask":""},{"err_mask":"","code":"$foo = 'bar'; $qux = \\*foo; for $$qux (1..3) { print $foo }","out":"123","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'foo' =~ /(?<foo>foo)/; 'bar' =~ /(ba)/; [ $+{foo} "},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'foo' =~ /(?<foo>foo)/; 'bar' =~ /(ba)/; [ $+{foo} ]"},{"err":"","out":"","out_mask":"","err_mask":"","code":"'foo' =~ /(?<foo>foo)/; 'bar' =~ /(ba)/; $+{foo}"},{"out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"foo\" =~ /(?<foo>foo)/; \"bar\" =~ /(ba)/; [ $+{foo} ]"},{"err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"'foo' =~ /(?<foo>foo)/; $+{foo}"},{"err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"'foo' =~ /.+/; 'foo' =~ s//bar/r;"},{"err":"","out":"ERROR: Can't locate object method \"meta\" via package \"Foo\" (perhaps you forgot to load \"Foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"Foo->meta"},{"out":"n","err":"","out_mask":"Ã¿","err_mask":"","code":"'foo\\n' =~ /foo$/m ? 'y' : 'n'"},{"out":"n","err":"","out_mask":"Ã¿","err_mask":"","code":"'foo\\n' =~ /foo$/ ? 'y' : 'n'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"bar\",\"fxx\"]","err":"","code":"[ 'foo' =~ s/foo/bar/r, 'foo' =~ tr/o/x/r ]","err_mask":""},{"code":"* \"foo\"* = sub {\"bar\"};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"*\"foo\" = sub {\"bar\"};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"*\"foo*\" = sub {\"bar\"};","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"*\"foo*\"* = sub {\"bar\"};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"'foo' =~ /x.+/; 'foo' =~ s//bar/r;","err":"","out":"foobar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"for (\"a\"..\"z\", \" \") { say ($_ eq \" \" ? \"SPACE\" : $_) if (/(c|a)/i && /[^MCI]/i && /[ai]/i && /[^ki\\sp]/i) }","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"a\n"},{"err":"","out":"","out_mask":"","err_mask":"","code":"for (\"a\"..\"z\", \" \") { say ($_ eq \" \" ? \"SPACE\" : $_) if (/(cat|a-t)/i && /[^MCI]/i && /[ai]/i && /[^ki\\sp]/i) }"},{"code":"for (\"a\"..\"z\", \" \") { say if (/[a-gn-z]/i && /[^a-ru-z]/i && /[a-ks-v]/i && /[^a-di-s]/i) }","err_mask":"","out_mask":"Ã¿Ã¿","out":"t\n","err":""},{"code":"for (\"a\"..\"z\", \" \") { say if (/[a-gn-z]/i && /[d-hj-m]/i && /[^f-km-z]/i && /[^a-di-s]/i) }","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"e\n"},{"out_mask":"","err":"","out":"","code":"for (\"a\"..\"z\", \" \") { say \" \" if (/(cat|a-t)/i && /[^MCI]/i && /[ai]/i && /[^ki\\sp]/i) }","err_mask":""},{"code":"for (\"a\"..\"z\", \" \") { say if (/(cat|a-t)/i && /[^MCI]/i && /[ai]/i && /[^ki\\sp]/i) }","err_mask":"","out_mask":"","out":"","err":""},{"code":"for (\"a\"..\"z\") { say if /[HELP\\s]/ }","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"for (\"a\"..\"z\") { say if /[HELP\\s]/i }","out":"e\nh\nl\np\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":" \n","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"for (\"a\"..\"z\", \" \") { say if (/[HELP\\s]/i && /[\\sCOPE]/i && /[^SEAP]/i) }"},{"out_mask":"","err":"","out":"","code":"for (\"a\"..\"z\") { say if (/[HELP\\s]/i && /[\\sCOPE]/i && /[^SEAP]/i) }","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"N\n","err":"","code":"for (\"a\"..\"z\", \" \") { say \"N\" if (/[a-gn-z]/i && /[^a-ru-z]/i && /[a-ks-v]/i && /[^a-di-s]/i) }","err_mask":""},{"code":"for (\"a\"..\"z\", \" \") { say \"N\" if (/[a-gn-z]/i && /[d-hj-m]/i && /[^f-km-z]/i && /[^a-di-s]/i) }","err_mask":"","out_mask":"Ã¿Ã¿","out":"N\n","err":""},{"err":"","out":"N\n","out_mask":"Ã¿Ã¿","err_mask":"","code":"for (\"a\"..\"z\", \" \") { say \"N\" if (/[HELP\\s]/i && /[\\sCOPE]/i && /[^SEAP]/i) }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"for *code\"\n","code":"for *code (sub { print 'ok' }) { code() }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"\\*code\"\n","code":"for \\*code (sub { print 'ok' }) { code() }","err_mask":""},{"code":"for \\&code (sub { print 'ok' }) { code }","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"for \\&code (sub { print 'ok' }) { code() }","out":"ok","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"for \\&code (sub { print 'ok' }) { print \"[[[$asdf]]]\" }","out":"[[[]]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"for \\&code (sub { print 'ok' }) { print code }","err_mask":""},{"code":"for \\&code (sub { print 'ok' }) { say '[', code, ']' }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[code]\n","err":""},{"err_mask":"","code":"for \\&code (sub { print 'ok' }) { say code }","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Missing $ on loop variable at (eval 1) line 1, <STDIN> line 1.\n","code":"for my (\"a\"..\"z\") { say if /[HELP\\s]/ }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foobar","code":"for ( [qw/foo bar/]->@* ) { print}","err_mask":""},{"code":"for ( [qw/foo bar/]->*@ ) { print}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"->*\"\n","err":""},{"err":"","out":"0 \n1 \n1 \n0 \n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"for $x (0..1) {for $y (0..1) {say $x ^ $y, \" \"}}"},{"err_mask":"","code":"@f{qw/sign exponent fraction/} = (unpack \"b*\",(pack \"d\", 0.1)) =~ /^(\\d)(\\d{11,11})(\\d+)$/; \\%f","out":"{sign => 0,fraction => \"1001100110011001100110011001100110011001110111111100\",exponent => \"10110011001\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"@f{qw/sign exponent fraction/} = unpack \"b*\",(pack \"d\", 0.1) =~ /^(\\d)(\\d{11,11})(\\d+)$/; \\%f","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{sign => \"\",fraction => undef,exponent => undef}"},{"err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after Â» n-za-m|Ã¢<-- HERE near column 162 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" 'get http://ignorantdesigner.com/japh.html' =~ y â» a-z:/ â» n-za-m|â»r "},{"out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after Â¢ n-za-m Ã¢<-- HERE near column 162 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z:/ â¢ n-za-m â»â¢r "},{"code":" 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z:/ â¢ n-za-m â¢r ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x80; marked by <-- HERE after Â¢ n-za-m Ã¢<-- HERE near column 162 at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after ÂÂ¢ n-za-mÃ¢<-- HERE near column 161 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z:/ â¢ n-za-mâ â¢r "},{"code":" 'get http://ignorantdesigner.com/japh.html' =~ yâ» a-z:/ â» n-za-m|â»r ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after Â» n-za-m|Ã¢<-- HERE near column 161 at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after ÂÂ»n-za-m|Ã¢<-- HERE near column 158 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" 'get http://ignorantdesigner.com/japh.html' =~ yâ»a-z:/â»n-za-m|â»r "},{"err_mask":"","code":" 'get http://ignorantdesigner.com/japh.html' =~ yâ»a-z:/â»n-za-m.|â»r ","err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after Â»n-za-m.|Ã¢<-- HERE near column 159 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Unrecognized character \\x80; marked by <-- HERE after Â¢ n-za-m Ã¢<-- HERE near column 163 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" [ 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z: â¢ n-za-m â¢r ]"},{"err_mask":"","code":" [ 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z:/ â¢ n-za-mâ â¢r ]","err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after ÂÂ¢ n-za-mÃ¢<-- HERE near column 163 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x80; marked by <-- HERE after Â¢ n-za-m Ã¢<-- HERE near column 163 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"[ 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z: â¢ n-za-m â¢ r ]","err_mask":""},{"code":"[ 'get http://ignorantdesigner.com/japh.html' =~ y/a-z/n-za-m/r ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"trg uggc://vtabenagqrfvtare.pbz/wncu.ugzy\"]"},{"err_mask":"","code":" 'get http://ignorantdesigner.com/japh.html' =~ yâ»a-z:/â»n-za-mX|â»r ","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after Â»n-za-mX|Ã¢<-- HERE near column 159 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"'.gitattributes' eq '.gitattributes'","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"code":"[ glob '{a,b,c}' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\"]"},{"code":"[grep {$_ !~ /(.)\\1/} glob \"{a,v,p,r}{a,v,p,r}\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"av\",\"ap\",\"ar\",\"va\",\"vp\",\"vr\",\"pa\",\"pv\",\"pr\",\"ra\",\"rv\",\"rp\"]"},{"err_mask":"","code":"[ grep { length($_) == 1 and $_ ne 0 } map - - chr, 0..255 ]","err":"","out":"[\"+\",\"-\",1,2,3,4,5,6,7,8,9]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ grep { length(- - chr) == 1 } 0..255 ]","err":"","out":"[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,91,92,93,94,96,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"[ grep { length(- - chr) == 1 } 0..255; ]","err_mask":""},{"err":"","out":"[\"http://40.media.tumblr.com/b3e62ef833996a4ffb544ed37300807d/tumblr_nlf8czGMpJ1s61cido1_500.jpg\",\"http://40.media.tumblr.com/c0e108161497f351e40db139289b3818/tumblr_nldblnzio71s61cido1_500.jpg\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep m|^http://(?!.*avatar)|, qw( http://assets.tumblr.com/images/default_avatar/octahedron_open_48.png http://assets.tumblr.com/images/default_avatar/cube_closed_48.png http://40.media.tumblr.com/b3e62ef833996a4ffb544ed37300807d/tumblr_nlf8czGMpJ1s61cido1_500.jpg http://40.media.tumblr.com/c0e108161497f351e40db139289b3818/tumblr_nldblnzio71s61cido1_500.jpg ) ]"},{"code":"[ grep m|^http://(?=.*avatar)|, qw( http://default_avatar/octa  http://40.media ) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"http://default_avatar/octa\"]"},{"err":"","out":"[\"http://40.media\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ grep m|^http://(?!.*?avatar)|, qw( http://default_avatar/octa  http://40.media ) ]"},{"err_mask":"","code":"[ grep m|^http://(?!.*avatar)|, qw( http://default_avatar/octa  http://40.media ) ]","err":"","out":"[\"http://40.media\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"grep { $_ ne 0 } map - - chr, 0..255","err":"","out":"64","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"$h={a=>1, v=>2}; {av =>{;print 1}, ap=>, ar=>, pv=>, rv=>, pr=>sub{}}","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \";print\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{v => 2,a => 1}","code":"$h={a=>1, v=>2}; sub calc {my %h=@_;my ($a,$v,$p,$r)=@h{qw/a v p r/};  {av =>sub {$r=$v/$a;$p=$v*$a}, ap=>sub{$v=$p/$a;$r=$v/$a}, ar=>sub{$v=$r*$a;$p=$a*$v}, pv=>sub{$a=$p/$v;$r=$v/$a}, rv=>sub{$a=$v*$r}, pr=>sub{$a=sqrt($p/$r);$v=$p/$a}}};","err_mask":""},{"err_mask":"","code":"$h={a=>1, v=>2}; sub calc {my %h=@_;my ($a,$v,$p,$r)=@h{qw/a v p r/};  {av =>sub {$r=$v/$a;$p=$v*$a}, ap=>sub{$v=$p/$a;$r=$v/$a}, ar=>sub{$v=$r*$a;$p=$a*$v}, pv=>sub{$a=$p/$v;$r=$v/$a}, rv=>sub{$a=$v*$r;$p=$v*$a}, pr=>sub{$a=sqrt($p/$r);$v=$p/$a}}};","out":"{v => 2,a => 1}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[1,2,2,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$h={a=>1, v=>2}; sub calc {my %h=@_;my ($a,$v,$p,$r)=@h{qw/a v p r/}; my $c=join '', sort keys %h; {av =>sub {$r=$v/$a;$p=$v*$a}, ap=>sub{$v=$p/$a;$r=$v/$a}, ar=>sub{$v=$r*$a;$p=$a*$v}, pv=>sub{$a=$p/$v;$r=$v/$a}, rv=>sub{$a=$v*$r;$p=$v*$a}, pr=>sub{$a=sqrt($p/$r);$v=$p/$a}}->{$c}->(); [$a, $v, $r, $p]}; calc %$h"},{"out":"{v => 2,a => 1}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$h={a=>1, v=>2}; sub calc {my %h=@_;my ($a,$v,$p,$r)=@h{qw/a v p r/}; my $c=sort keys %h; {av =>sub {$r=$v/$a;$p=$v*$a}, ap=>sub{$v=$p/$a;$r=$v/$a}, ar=>sub{$v=$r*$a;$p=$a*$v}, pv=>sub{$a=$p/$v;$r=$v/$a}, rv=>sub{$a=$v*$r;$p=$v*$a}, pr=>sub{$a=sqrt($p/$r);$v=$p/$a}}->{$c}->(); [$a, $v, $r, $p]}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n","code":"$h={a=>1, v=>2}; sub calc {my %h=@_;my ($a,$v,$p,$r)=@h{qw/a v p r/}; my $c=sort keys %h; {av =>sub {$r=$v/$a;$p=$v*$a}, ap=>sub{$v=$p/$a;$r=$v/$a}, ar=>sub{$v=$r*$a;$p=$a*$v}, pv=>sub{$a=$p/$v;$r=$v/$a}, rv=>sub{$a=$v*$r;$p=$v*$a}, pr=>sub{$a=sqrt($p/$r);$v=$p/$a}}->{$c}->(); [$a, $v, $r, $p]}; calc %$h","err_mask":""},{"err_mask":"","code":"%h = ( -desc => 'created_at' ); ","err":"","out":"2","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{\"-desc\" => \"created_at\"}","err":"","code":"%h = ( -desc => 'created_at' ); \\%h","err_mask":""},{"code":"hex 0x255","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"1431","err":""},{"err_mask":"","code":"hex 0x80","err":"","out":"296","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"256","code":"hex 100","err_mask":""},{"code":"hex 255","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"597","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hi \u0000\u0001","code":"\"hi \".(v0.01)","err_mask":""},{"code":"\"hi \".(v0.1)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hi \u0000\u0001","err":""},{"err_mask":"","code":"$holyshit < 0","err":"","out":"","out_mask":""},{"code":"<- htmleval","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unterminated <> operator at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"[\"1J2KAFHQk_.jpg\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" [ 'http://go2web4free.com:7004/img/users/1/1J2KAFHQk_.jpg' =~ m{[^/]+$}g ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after ÂÂ»n-za-m|Ã¢<-- HERE near column 154 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":" 'http://ignorantdesigner.com/japh.html' =~ yâ»a-z:/â»n-za-m|â»r ","err_mask":""},{"code":" 'http://ignorantdesigner.com/japh.html' =~ yâ»a-z:/â»n-za-m.|â»r ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after Â»n-za-m.|Ã¢<-- HERE near column 155 at (eval 1) line 1, <STDIN> line 1.\n"},{"code":" 'http://ignorantdesigner.com/japh.html' =~ yâ»a-z:/â»n-za-mX|â»r ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after Â»n-za-mX|Ã¢<-- HERE near column 155 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"h->{two}();  sub h { +{ one => sub { 1 }, two => sub { 2 } } } ","err_mask":""},{"out_mask":"Ã¿","err":"","out":"2","code":"h()->{two}();  sub h { +{ one => sub { 1 }, two => sub { 2 } } } ","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Usage: UNIVERSAL::can(object-ref, method) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"huf->can(\"can\")->()","err_mask":""},{"code":"huf->can(\"can\")->can","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"can\" on unblessed reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Usage: UNIVERSAL::can(object-ref, method) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"huf->can(\"can\")->(\"can\")->(\"can\")->(\"can\")->(\"can\")->(\"can\")","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sub { \"DUMMY\" }","code":"huf->can(\"can\")->(huf => \"can\")","err_mask":""},{"err_mask":"","code":"huf->can(\"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")->(huf => \"can\")","err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$^I","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"foo\n","err":"","code":"if ( '0.00' ) { say \"foo\" }","err_mask":""},{"out_mask":"Ã¿","err":"","out":"0","code":"if ( 0.00 ) { say \"foo\" }","err_mask":""},{"code":"if (1 ) { last; print \"lols\"; } print \"lulz\"","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"{ if (1 ) { last; print \"lols\"; } print \"lulz\"; } print \"lelz\"; ","out":"lelz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"matched \"besaid\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"if('besaid' =~ m/(\\w*said)/) {print qq{matched \"$1\"\\n};} "},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"if ( $x = \"\\0\" ) { print 1 }"},{"err_mask":"","code":"if ( $x = \"x\\b\" ) { print \"_${x}_\" }","out":"_x\b_","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"if ( $x = \"x\\b\" ) { print \"_$x_\" }","err_mask":"","out_mask":"Ã¿","out":"_","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"little\" via package \"teapot\" (perhaps you forgot to load \"teapot\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"Im a little teapot","err_mask":""},{"code":"[ $INC{'strict.pm'} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"/home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/strict.pm\"]","err":""},{"err":"","out":"bless( {sign => \"+inf\",value => [0],_p => undef,_a => undef}, 'Math::BigInt' )","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"inf"},{"code":"+Inf","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"Inf"},{"err_mask":"","code":"\\%ISA;","err":"","out":"{}","out_mask":"Ã¿Ã¿"},{"code":"is [fact htmleval [arg]]  ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"is [\"\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"[join '']","err_mask":""},{"out":"freenode.net\u001d#regex\u001dre101","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join \"\\035\", qw/freenode.net #regex re101/"},{"err_mask":"","code":"$_ = join '', 'a'..'y'; tr<acegikmoqsuwybdfhjlnprtvx><Just another Sort hacker,>; print","err":"","out":"JSuosrtt  ahnaoctkheerr, ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[JSuosrtt  ahnaoctkheerr, ]","err":"","code":"$_ = join '', 'a'..'y'; tr<acegikmoqsuwybdfhjlnprtvx><Just another Sort hacker,>; print \"[$_]\"","err_mask":""},{"err_mask":"","code":"$_ = join '', 'a'..'y'; tr/cbvokujpfynsewmtdxlrgqiah/Just another Sort hacker,/; print","err":"","out":"ruJt tc,en hoetokarrasS h","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ (join '', 'a'..'y') =~ tr/sdyckamijgqbhtrfwuelnpovx/Just another :8() hacker,/r ]","err":"","out":"[\"artuh(h ot anceke8J: r),s\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ (join '', 'a'..'y') =~ tr/sdyckamijgqbhtrfwuelnpovx/Just another sort hacker,/ ]","err":"","out":"ERROR: Can't modify join or string in transliteration (tr///) at (eval 1) line 1, near \"tr/sdyckamijgqbhtrfwuelnpovx/Just another sort hacker,/ ]\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ (join '', 'a'..'y') =~ tr/sdyckamijgqbhtrfwuelnpovx/Just another sort hacker,/r ]","out":"[\"artuhrh ot ancekeoJs rt,s\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"J,ursetk cAanHo tIhDeIrB /Pler","err":"","code":"$_ = join '', 'a'..'z', 0..3; tr!acegikmoqsuwy0231zxvtrpnljhfdb!Just Another Perl/BIDI Hacker,!; print","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Search pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","code":"$_ = join '', 'a'..'z', 0..3; tr/acegikmoqsuwy0231zxvtrpnljhfdb/Just Another Perl/BIDI Hacker,/; print","err_mask":""},{"err_mask":"","code":"$_ = join '', 'a'..'z'; $_ =~ tr/434dfddsaaaaa//d; $_","out":"bceghijklmnopqrtuvwxyz","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"abceghijklmnopqrtuvwxyz","err":"","code":"$_ = join '', 'a'..'z'; $_ =~ tr/434dfdds//d; $_","err_mask":""},{"err_mask":"","code":"$_ = join('', 'a'..'z','_'); tr/bcdefghknrtuvx_zywsqpomljifa/Just another Unicode hacker/; [ $_  ]","err":"","out":"[\"rJust anekocath ehder oUcin\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = join '', 'a'..'z'; $_ =~ tr/JwG7IpBbAFr4tyoVbbECZ26HYml 5QdDjLicbhUTdvWIzsnOuRTfE9ahgam2EkDqgVSXpUNGCPID KW exU7M//d; $_","err":"","out":"","out_mask":""},{"code":"[ join \"\", map +{}, 1..10 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"HASH(0x3e7d1a8)HASH(0x4242228)HASH(0x3b4ee70)HASH(0x3f5bba0)HASH(0x3c8b638)HASH(0x3d1d848)HASH(0x3f5cea0)HASH(0x41b0f70)HASH(0x3667130)HASH(0x3b4f4a0)\"]"},{"out":"","err":"","out_mask":"","err_mask":"","code":"join('_', map {lc} grep {length} split /([A-Z]{1}[^A-Z]*)/)"},{"err_mask":"","code":"[ join '', map { pack \"c\", $_ } 72,101,108,108,111,32,87,111,114,108,100,-30,-104,-125,32]","out":"[\"Hello World\\342\\230\\203 \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"GLOB|HASH|ARRAY|Regexp|SCALAR|CODE|LVALUE|REF|SCALAR|REF|VSTRING\"]","err":"","code":"[join '|', map ref, \\*f, +{}, [], qr//,  \\'', sub{}, \\substr(\\$x, 0, 0), \\\\\"\", \\*STDOUT{FORMAT}, \\*STDIN{IO}, \\v5.10.0 ]","err_mask":""},{"code":"join '', map { ucfirst lc } 'CamelCaseXMLParser' =~ /([A-Z]+[^A-Z]*)/g;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"CamelCaseXmlparser","err":""},{"out":"CamelCaseXmlparser","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join '', map { ucfirst lc } split /([A-Z]+[^A-Z]*)/, 'CamelCaseXMLParser';"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Camelcasexmlparser","err":"","code":"join '', map { ucfirst lc } split /([A-Z]+[^A-Z]*)/i, 'CamelCaseXMLParser';","err_mask":""},{"code":"[join '', sort {$|--} a..'y']","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"cbdafeghjiklnmoprqstvuwxy\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"Juts another Perl hacker,\"]","code":"[join '', sort {$|--} split //, \"suJta nohterP er lhakcer,\"]","err_mask":""},{"err_mask":"","code":"[join '', sort {$|--} split //, \"sutJa nohterP er lhakcer,\"]","err":"","out":"[\"tuJs another Perl hacker,\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[join '', sort {$|--} split //, \"tuJsa nohterP er lhakcer,\"]","err":"","out":"[\"Just another Perl hacker,\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ join \":\", split /../, '000202056D4C' ]","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"00:0:2:0:2:0:5:6:D:4:C\"]","code":"[ join \":\", split /(?<=..)/, '000202056D4C' ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0:0:0:2:0:2:0:5:6:D:4C\"]","err":"","code":"[ join \":\", split /(?=..)/, '000202056D4C' ]","err_mask":""},{"err":"","out":"[\":00::02::02::05::6D::4C\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ join \":\", split /(..)/, '000202056D4C' ]"},{"code":"join \":\", split /../, '000202056D4C'","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"000202056D4C\"]","code":"[ join \":\", split /(?=\\w{2])/, '000202056D4C' ]","err_mask":""},{"err":"","out":"[\"0:0:0:2:0:2:0:5:6:D:4C\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ join \":\", split /(?=\\w{2})/, '000202056D4C' ]"},{"code":"[join '', undef]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &main::JSON called at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"[ JSON() ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"encode_json\",\"decode_json\",\"JSON\"]","code":"\\@JSON::MaybeXS::EXPORT","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Experimental keys on scalar is now forbidden at (eval 1) line 1, <STDIN> line 1.\n","code":"keys( {} ) = 42","err_mask":""},{"code":"[keys %DB:: ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"args\",\"sub\"]"},{"out_mask":"Ã¿","out":"1","err":"","code":"'knbZw6mW5RGbCQksNDg64g==' =~ /([\\w=]{12,30})/","err_mask":""},{"code":"length @{[10]}","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"code":"length 'barbarbarbarbarbar'","err_mask":"","out_mask":"Ã¿Ã¿","out":"18","err":""},{"err_mask":"","code":"[ length 'bcdefghknrtuvx_zywsqpomljifa' ]","out":"[28]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"length $holyshit < 0","out":"","err":"","out_mask":""},{"code":"[length \"Just Another Perl/BIDI Hacker,\"];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[30]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[25]","err":"","code":"[length \"Just another perl hacker,\"]","err_mask":""},{"err_mask":"","code":"[ length \"Just another Unicode hacker\" ]","out":"[27]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"length \"Just another Unicode hacker\"","err_mask":"","out_mask":"Ã¿Ã¿","out":"27","err":""},{"err_mask":"","code":"length q|\t|","err":"","out":"1","out_mask":"Ã¿"},{"code":"length q|\"Added note that raw license copy/paste needs modification of copyright owner\"|","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"78"},{"code":"length q|Croatia [Zagreb], Czechia [Brno Prague], Denmark [Aarhus Copenhagen], Equatorial Guinea [Bata Malabo], France [Lyon Marseille Nice Paris Toulouse], Gabon [Libreville Port-Gentil], Germany [Berlin Cologne Essen Frankfurt Hamburg Munich Stuttgart], Gibraltar, Hungary [Budapest Debrecen], Italy [Milan Naples Palermo Rome Turin], Liechtenstein, Luxembourg, Macedonia [Bitola Skopje], Malta [Valletta]|","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"398"},{"out":"407","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"length q|Happy New Year to Albania [DurrÃ«s Tirana], Algeria [Algiers Boumerdas Oran], Andorra, Angola [Luanda N'dalatando], Austria [Graz Vienna], Belgium [Antwerp Brussels], Benin [Abomey-Calavi Porto-Novo], Bosnia and Herzegovina [Sarajevo], Cameroon [Douala YaoundÃ©], Central African Republic [Bangui Bimbo], Chad [Moundou N'Djamena], Congo-Brazzaville [Brazzaville Pointe-Noire], Congo-Kinshasa [Kikwit Kinshas|"},{"out_mask":"Ã¿Ã¿","out":"68","err":"","code":"length q|\tif ( !$ok and $@=~/^SKIP:.+BEGIN failed--compilation aborted/si ) {|","err_mask":""},{"err_mask":"","code":"length q# mojobar.removeClass('animated');","err":"","out":"ERROR: Can't find string terminator \"#\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"84","err":"","code":"length q# mojobar.removeClass('animated').css({'position': 'absolute', 'top': start + 'px'});#","err_mask":""},{"code":"length q|See C<< ->new >> method for mo|","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"30"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\0\\0\\0\\0\\0\"]","err":"","code":"$l = \"foos\" . chr(0x220); [ $l & chr(0x80)x(length $l) ]","err_mask":""},{"err":"","out":"[\"\\0\\0\\0\\0\\200\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$l = \"foos\" . chr(0xFA); [ $l & chr(0x80)x(length $l) ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\0\\0\\0\\0\"]","code":"$l = \"foos\"; [ $l & chr(0x80)x(length $l) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\\0\\0\\0\\0\\0\"]","code":"$l = \"fooso\"; [ $l & chr(0x80)x(length $l) ]","err_mask":""},{"err_mask":"","code":"\\%LoadAllMooseXDeclare::","out":"{}","err":"","out_mask":"Ã¿Ã¿"},{"code":"local $/ = 'd'; print \"abc\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"abc","err":""},{"err_mask":"","code":"local $\\ = 'd'; print \"abc\"","out":"abcd","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"abc","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"local $/ = $\\; print \"abc\""},{"code":"local $\\ = $/; print \"abc\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"abc\n"},{"err":"","out":"[13]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ log(1e205 / 1e192)/log 10 ]"},{"err":"","out":"[\"43.1850652335357\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ log(1e205 / 1e192)/log 2 ]"},{"err":"","out":"12.0411998265592","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"log(2**40)/log(10)"},{"err":"","out":"I'm fucking rich, I got 0!","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$long_var_blah = 42;  $my_pay = $long_var_b1ah * 1000; print \"I'm fucking rich, I got $my_pay!\";"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"main\"]","err":"","code":"[ main:: ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"bless( {}, 'Foo' )","err":"","code":"*main::bless = sub { print \"foo\" }; bless {}, 'Foo';","err_mask":""},{"err":"","out":"ERROR: Can't locate object method \"foo\" via package \"main\" at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"main->foo"},{"out":"ERROR: Can't locate object method \"foo\" via package \"main\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"main->foo;"},{"code":"[ *main::{JSON} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"err_mask":"","code":"*main::{JSON}","out":"","err":"","out_mask":""},{"code":"[ *main::JSON{CODE} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"Scalar::util::dualvar 6\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map [ $_+0, $_ ], Scalar::util::dualvar 6*9, '42 (base 13)' ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[54,\"42 (base 13)\"]]","code":"[ map [ $_+0, $_ ], Scalar::Util::dualvar 6*9, '42 (base 13)' ]","err_mask":""},{"err":"","out":"[\"args\",[],\"sub\",undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map --$| ? *{$_}{ARRAY} : $_, %DB:: ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"H\",\"e\",\"l\",\"l\",\"o\",\" \",\"W\",\"o\",\"r\",\"l\",\"d\",\"\\342\",\"\\230\",\"\\203\",\" \"]","code":"[map chr, 72,101,108,108,111,32,87,111,114,108,100,226,152,131,32]","err_mask":""},{"out":"[\"args\",undef,\"sub\",undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map --$| ? *{$_}{CODE} : $_, %DB:: ]"},{"err_mask":"","code":"[map --$| ? $_ : $$_, %DB:: ]","out":"[undef,*DB::args,undef,*DB::sub]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"args\",undef,\"sub\",undef]","code":"[map --$| ? $$_ : $_, %DB:: ]","err_mask":""},{"err_mask":"","code":"[map --$| ? \\%$_ : $_, %DB:: ]","out":"[\"args\",{},\"sub\",{}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[map { - - $_ } map chr, 0..255]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\"+\",0,\"-\",0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,\"+A\",\"+B\",\"+C\",\"+D\",\"+E\",\"+F\",\"+G\",\"+H\",\"+I\",\"+J\",\"+K\",\"+L\",\"+M\",\"+N\",\"+O\",\"+P\",\"+Q\",\"+R\",\"+S\",\"+T\",\"+U\",\"+V\",\"+W\",\"+X\",\"+Y\",\"+Z\",0,0,0,0,\"+_\",0,\"+a\",\"+b\",\"+c\",\"+d\",\"+e\",\"+f\",\"+g\",\"+h\",\"+i\",\"+j\",\"+k\",\"+l\",\"+m\",\"+n\",\"+o\",\"+p\",\"+q\",\"+r\",\"+s\",\"+t\",\"+u\",\"+v\",\"+w\",\"+x\",\"+y\",\"+z\",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]"},{"err_mask":"","code":"[map { - - $_ }, map chr, 0..255]","out":"ERROR: syntax error at (eval 1) line 1, near \"},\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map ord,  'b' => 'n', 'j' => 'u', 'v' => 'g' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[98,110,106,117,118,103]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32]","code":"[ map ord, split //, '                                                     ' ]","err_mask":""},{"code":"map ord, split //, '                                                     ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"53","out_mask":"Ã¿Ã¿","err_mask":"","code":"map ord, split //, '                                                     '"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[72,101,108,108,111,32,87,111,114,108,100,226,152,131,32]","code":"[map ord, split //, \"Hello Worldâ \"]","err_mask":""},{"err":"","out":"[\"H\",\"e\",\"l\",\"l\",\"o\",\" \",\"W\",\"o\",\"r\",\"l\",\"d\",\"\\342\",\"\\230\",\"\\203\",\" \"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map { pack \"c\", $_ } 72,101,108,108,111,32,87,111,114,108,100,-30,-104,-125,32]"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"[map pack \"c\", 72,101,108,108,111,32,87,111,114,108,100,-30,-104,-125,32]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\"]","code":"[ map ref, \\1, [], {}, sub{}, qr//,  ]","err_mask":""},{"err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"GLOB\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\*CORE::substr ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"CODE\"]","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\&CORE::substr ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"CORE::substr ]\"\n","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\CORE::substr ]","err_mask":""},{"err_mask":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, &CORE::substr ]","err":"","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map ref, \\1, [], {}, sub{}, qr//, \\(pos) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"LVALUE\"]"},{"err_mask":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\(pos),  ]","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"LVALUE\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\pos,  ]","err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"LVALUE\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"LVALUE\",\"VSTRING\"]","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\pos, \\v1.2  ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"CODE\"]","code":"[ map ref, \\1, [], {}, sub{}, qr//, sub :lvalue{} ]","err_mask":""},{"code":"[ map ref, \\1, [], {}, sub{}, qr//, \\&substr ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"CODE\"]"},{"err_mask":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\substr ]","err":"","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"substr ]\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ map ref, \\1, [], {}, sub{}, qr//, substr ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"substr ]\"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"substr() \"\n","err":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, substr() ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"$_) \"\n","err":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, substr($_) ]","err_mask":""},{"code":"[ map ref, \\1, [], {}, sub{}, qr//, \\(substr($_,1) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \") ]\"\n","err":""},{"code":"[ map ref, \\1, [], {}, sub{}, qr//, \\(substr($_,1)) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"LVALUE\"]"},{"err_mask":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, substr($_, 1) ]","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: syntax error at (eval 1) line 1, near \") ]\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, \\(substr($_,1,1) ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: substr outside of string at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"[ map ref, \\1, [], {}, sub{}, qr//, substr($_, 1)=1 ]","err_mask":""},{"err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'',  ]","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, \\\\\"\" ]","err":"","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"REF\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"CODE\"]","err":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, sub:lvalue{}, ]","err_mask":""},{"code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, substr ''  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"''  ]\"\n"},{"err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, substr(), ]","err":"","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"substr()\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"substr()\"\nsyntax error at (eval 1) line 1, near \"\\  ]\"\n","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, substr(),\\  ]","err_mask":""},{"code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, substr(),\\ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not enough arguments for substr at (eval 1) line 1, near \"substr()\"\nsyntax error at (eval 1) line 1, near \"\\ ]\"\n","err":""},{"code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, substr(\\$x, \"\", \"\", \"\"), ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"\"]"},{"out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"LVALUE\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, \\substr(\\$x, 0, 0), ]"},{"err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, \\substr(\\$x, 0, 0), \\\\\"\" ]","err":"","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"LVALUE\",\"REF\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"\"]","err":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, substr(\\$x, 0, 0), ]","err_mask":""},{"err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, substr(\\$x, 0, 0, 0, 0), ]","err":"","out":"ERROR: Too many arguments for substr at (eval 1) line 1, near \"0)\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't modify substr in scalar assignment at (eval 1) line 1, near \"\"foo\")\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, (substr(\\$x, 0, 0, 0) = \"foo\"), ]"},{"out":"ERROR: Can't modify substr in scalar assignment at (eval 1) line 1, near \"\"foo\",\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, substr(\\$x, 0, 0, 0) = \"foo\", ]"},{"err":"","out":"ERROR: Assigned value is not a reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, (substr(\\$x, 0, 0) = \"foo\"), ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"LVALUE\",\"REF\",\"\"]","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, \\substr(\\$x, 0, 0), \\\\\"\", *STDOUT{FORMAT} ]","err_mask":""},{"code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, \\substr(\\$x, 0, 0), \\\\\"\", *STDOUT{FORMAT}, *STDIN{IO} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"LVALUE\",\"REF\",\"\",\"IO::File\"]"},{"err_mask":"","code":"[map ref, \\*f, +{}, [], qr//,  \\'', sub{}, \\substr(\\$x, 0, 0), \\\\\"\", \\*STDOUT{FORMAT}, \\*STDIN{IO}, \\v5.10.0 ]","out":"[\"GLOB\",\"HASH\",\"ARRAY\",\"Regexp\",\"SCALAR\",\"CODE\",\"LVALUE\",\"REF\",\"SCALAR\",\"REF\",\"VSTRING\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[map +ref, \\*, {}, [], qr//,  \\'',  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","code":"[map ref, \\*, {}, [], qr//,  \\'',  ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\",\"ARRAY\",\"Regexp\",\"SCALAR\"]","err":"","code":"[map ref, \\*, +{}, [], qr//,  \\'',  ]","err_mask":""},{"err_mask":"","code":"[ map {scalar caller $_} -1 .. 4 ]","err":"","out":"[undef,\"main\",\"main\",undef,undef,undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[map ~$_, sort map ~$_, 'a'..'z']","out":"[\"z\",\"y\",\"x\",\"w\",\"v\",\"u\",\"t\",\"s\",\"r\",\"q\",\"p\",\"o\",\"n\",\"m\",\"l\",\"k\",\"j\",\"i\",\"h\",\"g\",\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[-2,-2,\"-0\",0,2,2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map { sprintf '%0.0f', $_ } -2.5, -1.5, -0.5, 0.5, 1.5, 2.5]"},{"code":"[map { sprintf '%0f', $_ } -2.5, -1.5, -0.5, 0.5, 1.5, 2.5]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"-2.500000\",\"-1.500000\",\"-0.500000\",\"0.500000\",\"1.500000\",\"2.500000\"]"},{"out":"[6,8,8,12]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map sprintf('%.f', $_), 6.5, 7.5, 8.5, 11.5 ]"},{"out":"[6,8,8,10]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map sprintf('%.f', $_), 6.5, 7.5, 8.5, 9.5 ]"},{"code":"[ map sprintf('%.f', $_), 8.5, 11.5 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[8,12]","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, near \"//'undef'\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map //'undef', 1, '', undef, 42 ]"},{"err":"","out":"[1,\"\",\"undef\",42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ map $_//'undef', 1, '', undef, 42 ]"},{"out":"[undef,undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[map $$_, values %DB:: ]"},{"err_mask":"","code":"methname {'main'} 1;","out":"ERROR: Can't locate object method \"methname\" via package \"main\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"methname {main} 1;","out":"ERROR: Can't locate object method \"methname\" via package \"main\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":" $    money   +    $    money   ==    $ $money","err":"","out":"1","out_mask":"Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$ $    money\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" $    money   +    $    money   ==    $ $    money"},{"err_mask":"","code":" $    money   +    $    money   ==    $$money","out":"1","err":"","out_mask":"Ã¿"},{"code":"my @a = 1..10; [ $a[-20], \\@a ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,[1,2,3,4,5,6,7,8,9,10]]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[3,[1,2,3,4,5,6,7,8,9,10]]","code":"my @a = 1..10; [ $a[20%$#a], \\@a ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,[1,2,3,4,5,6,7,8,9,10]]","code":"my @a = 1..10; [ delete $a[-20], \\@a ]","err_mask":""},{"err_mask":"","code":"my @a = 1..10; [ delete $a[20], \\@a ]","err":"","out":"[undef,[1,2,3,4,5,6,7,8,9,10]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[3,[1,2,undef,4,5,6,7,8,9,10]]","err":"","code":"my @a = 1..10; [ delete $a[20%$#a], \\@a ]","err_mask":""},{"code":"my @a = 1..3; ","err_mask":"","out_mask":"Ã¿","out":"3","err":""},{"err_mask":"","code":"my @a = 1..3; \\@a","err":"","out":"[1,2,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @a = 1..3; each @a; \\@a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3]"},{"code":"my @a = 1..4; [ @a == grep $_ =~ /42/, @a ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = 1..4; [ @a == grep $_ =~ /4/, @a ]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]","code":"my @a = 1..4; [ @a == grep $_, @a ]","err_mask":""},{"err_mask":"","code":"my @a = 1..4; my %h1 = map +( $_ => $_+1 ), @a[0..@a/2]; my %h2 = map +( $_ => $_+1 ), @a[@a/2-1..$#a]; [ \\%h1, \\%h2 ]","err":"","out":"[{1 => 2,3 => 4,2 => 3},{4 => 5,3 => 4,2 => 3}]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{1 => 2,2 => 3},{4 => 5,3 => 4}]","err":"","code":"my @a = 1..4; my %h1 = map +( $_ => $_+1 ), splice @a, 0, @a/2; my %h2 = map +( $_ => $_+1 ), splice @a, @a/2-1; [ \\%h1, \\%h2 ]","err_mask":""},{"code":"my @a = 1..4; my %h1 = map +( $_ => $_+1 ), splice @a, 0, @a/2; my %h2 = map +( $_ => $_+1 ), splice @a, @a/2; [ \\%h1, \\%h2 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{1 => 2,2 => 3},{4 => 5}]","err":""},{"err":"","out":"[2,3,4,5]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @a = 1..5; (shift @a)x3; \\@a"},{"err_mask":"","code":"my @a = 1..5; (shift @a)x5; \\@a","out":"[2,3,4,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $a = 'a'; my $b = \\$a; for $$b (0..5) { print $a }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","code":"my (  @a, @b ) = 1..10; $_%2 and push @b, delete $a[$_","err_mask":""},{"err":"","out":"ERROR: Can't declare repeat (x) in \"my\" at (eval 1) line 1, near \") =\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my ($a, $b, (undef) x 3, $c) = (1..10); [$a, $b, $c]"},{"code":"my $a = {foo => 1}; sub foo {my $b={%{shift()}}; delete $b->{foo}}; foo($a); $a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{foo => 1}","err":""},{"code":"my $a = {foo => 1}; sub foo {my $b=\\%{shift()}; delete $b->{foo}}; foo($a); $a","err_mask":"","out_mask":"Ã¿Ã¿","out":"{}","err":""},{"out":"6","err":"","out_mask":"Ã¿","err_mask":"","code":"my @a = (grep /2/, 1..4 )[0..5];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[2,undef]","code":"my @a = (grep /2/, 1..4 )[0..5]; splice @a, 2; \\@a","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[2,undef,undef,undef]","code":"my @a = (grep /2/, 1..4 )[0..5]; splice @a, 4; \\@a","err_mask":""},{"err":"","out":"[\"m\",2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ ++(my $a = \"l\"), ++(my $b = \"1\") ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify push in local at (eval 1) line 1, at EOF\n","err":"","code":"my @a; { local push @a, 1 }; \\@a;","err_mask":""},{"err_mask":"","code":"my $aÍ¾ print;","err":"","out":"ERROR: Unrecognized character \\xCD; marked by <-- HERE after es/; my $a<-- HERE near column 96 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't localize lexical variable @a at (eval 1) line 1, <STDIN> line 1.\n","code":"my @a; { push (local @a), 42 }; \\@a;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"one\"]","err":"","code":"my @a = qw/one two/; [ $a['forty two'] ];","err_mask":""},{"code":"my $_ = 'asdf \"foo\"'; my $h = 0x20000; my %h; s/(([\"'])(?:[^\"']+|\\\\.|(?!\\2).)*\\2)/$h{chr $h}=$1;chr($h++)/ge; my @words = split ' '; $h = chr($h-1); s/([\\x{20000}-$h])/$h{$1}/g for @words; \\@words;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","code":"my $_ = 'asdf \"foo\"'; my $h = 0x20000; my %h; s/(([\"'])(?:[^\"']+|\\\\.|(?!\\2).)*\\2)/$h{chr $h}=$1;chr($h++)/ge; my @words = split ' ', $str; $h = chr($h-1); s/([\\x{20000}-$h])/$h{$1}/g for @words; \\@words;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","code":"my $_ = 'asdf \"foo\"'; my $h = 0x20000; my %h; $str =~ s/(([\"'])(?:[^\"']+|\\\\.|(?!\\2).)*\\2)/$h{chr $h}=$1;chr($h++)/ge; my @words = split ' ', $str; $h = chr($h-1); s/([\\x{20000}-$h])/$h{$1}/g for @words; \\@words;","err_mask":""},{"err_mask":"","code":"my $a = sub { say \"Hello World\" }; my $b = $a; $a","err":"","out":"sub { \"DUMMY\" }","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Hello World\n","code":"my $a = sub { say \"Hello World\" }; my $b = $a; $a->();","err_mask":""},{"err":"","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $a = sub { say \"Hello World\" }; my $b = $a; \\*$a"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"sub { \"DUMMY\" }","code":"my $a = sub { say \"Hello World\" }; my $b = $a; \\&$a","err_mask":""},{"err_mask":"","code":"my $a = sub { say \"Hello World\" }; my $b = $a; &$a","err":"","out":"Hello World\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $a = sub { say \"Hello World\" }; my $b = $a; *$a = \\(sub {say \"Goodbye Mars\"});","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't modify non-lvalue subroutine call of &main::__ANON__ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $a = sub { say \"Hello World\" }; my $b = $a; &$a = \\(sub {say \"Goodbye Mars\"});"},{"code":"my $a = sub { say \"Hello World\" }; my $b = $a; &$a = \\&{sub {say \"Goodbye Mars\"}};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify non-lvalue subroutine call of &main::__ANON__ at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"my $a = sub { say \"Hello World\" }; my $b = $a; &$a = &{sub {say \"Goodbye Mars\"}};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Goodbye Mars\nERROR: Can't modify non-lvalue subroutine call of &main::__ANON__ at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"my $a = sub { say \"Hello World\" }; my $b = $a; \\(sub {say \"Goodbye Mars\"});","out":"\\sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"42\n","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $bar = 42; my @foo = (12, 24, 42); say grep($_ eq $bar, @foo) ? 42 : 52;"},{"out":"52\n","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $bar = 42; my @foo = (12, 24); say grep($_ eq $bar, @foo) ? 42 : 52;"},{"err_mask":"","code":"my $c = \\&CORE::pop; my @abc = qw,a b c,; [$c->(\\@abc)]","out":"ERROR: &CORE::pop cannot be called directly at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @chars = '$#**\\01000' =~/(.)+?([01]+)$/; \\@chars","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"\\\\\",\"01000\"]","err":""},{"err":"","out":"{}","out_mask":"Ã¿Ã¿","err_mask":"","code":"my $dist = { author => [qw/foo bar/] }; my %z = ( author_id => $dist->{author} // (ref $dist->{authors} ? $dist->{authors}[0] : $dist->{authors}) // 'N/A', url => 'N/A',); \\%h"},{"code":"my $dist = { author => [qw/foo bar/] }; my %z = ( author_id => $dist->{author} // (ref $dist->{authors} ? $dist->{authors}[0] : $dist->{authors}) // 'N/A', url => 'N/A'); \\%z","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{author_id => [\"foo\",\"bar\"],url => \"N/A\"}","err":""},{"out":"\n","err":"","out_mask":"Ã¿","err_mask":"","code":"my $foo = 'BAR!'; BEGIN { say $foo }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal declaration of subroutine BEGIN at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $foo = 'BAR!'; BEGIN say { $foo }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"my $foo = 'bar' =~ /ber/; [ $foo ]","err_mask":""},{"code":"my $foo = 'bar'; -$foo","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"-bar"},{"err_mask":"","code":"my $foo = 'bar'; $foo = -$foo for 1, 2; $foo","out":"+bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"-","err":"","code":"my $foo = '-'; $foo = -$foo for 1, 2; $foo","err_mask":""},{"code":"my $foo = ''; $foo = -$foo for 1, 2; $foo","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"err_mask":"","code":"my $foo = grep $_, 1..5, 'a', 'b'; $foo;","err":"","out":"7","out_mask":"Ã¿"},{"out_mask":"Ã¿","err":"","out":"5","code":"my $foo = grep $_, 1..5; $foo;","err_mask":""},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"my ($foo) if 0;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: No such class foo at (eval 1) line 1, near \"; my foo\"\n","code":"my foo $x = 3; [ $x ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: No such class foo:: at (eval 1) line 1, near \"; my foo::\"\n","err":"","code":"my foo:: $x = 3; [ $x ]","err_mask":""},{"code":"my $h = {1..4};  [$h->@{1, 3}]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[2,4]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"->\"CORE::each\"\"\n","code":"my $hash = {ref => [1, 2, 3]}; while(my $num = $hash->{ref}->\"CORE::each\") {print $num, \" => \";}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"->&\"\n","err":"","code":"my $hash = {ref => [1, 2, 3]}; while(my $num = $hash->{ref}->&CORE::each) {print $num, \" => \";}","err_mask":""},{"code":"my %hash = ( \"Ø£\" => 1, )","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my %hash = ( \"Ø£\" => 1\", )","err_mask":""},{"err_mask":"","code":"my %hash = ( \"Ø£\" => 1\"\", )","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"1\"\"\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my %h = (a..z); ${%h}{\"how strange\"} = \"is this, anyway?\"; \\%{%h};","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{\"how strange\" => \"is this, anyway?\"}"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"my @heterological_scalar; my %autological_hash;"},{"code":"my %h = ( foo => { bar => {ber => [boor] } } } ); my $ar = $h{foo}{bar}{ber}; push @$ar, 'foor';  ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unmatched right curly bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n"},{"err":"","out":"{foo => {bar => {ber => [\"boor\",\"foor\"]}}}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h = ( foo => { bar => {ber => [boor] } } ); my $ar = $h{foo}{bar}{ber}; push @$ar, 'foor';  \\%h"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unmatched right curly bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","err":"","code":"my %h = ( foo => { bar => {ber => [boor] } } } ); my $ar = $h{foo}{bar}{ber}; push @$ar, 'foor';  \\%h","err_mask":""},{"err":"","out":"github.com","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my ($home) = \"git://github.com/labster/p6-IO-Path-More.git\" =~ m[(?:git|https?)://([\\w\\.]+)/]; $home"},{"out":"0","err":"","out_mask":"Ã¿","err_mask":"","code":"my ($home) = \"git://github.com/labster/p6-IO-Path-More.git\" =~ m[(?:git|https?)://([\\w\\.]+)/]; my ($auth, $repo_name) = $url =~ m[(?:git|https?)://$home/([^/]+)/([^/]+)\\.git];"},{"code":"my ($home) = \"http://github.com/labster/p6-IO-Path-More/\" =~ m[(?:git|https?)://([\\w\\.]+)/]; $home","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"github.com"},{"err_mask":"","code":"my %h=qw/q 1 d 2 b 3/; [@h{qw/q d b/}]","out":"[1,2,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $hyphenated = 'foo-bar'; *$hyphenated = sub { 'works' }; main->$hyphenated();","err":"","out":"works","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $i = 0; ++$i until charnames::viacode($i) =~ /music|note/i; chr $i;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"ÃÂ"},{"out":"[\"\\x{749}\",\"SYRIAC MUSIC\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $i = 0; my $n; ++$i until ($n=charnames::viacode($i)) =~ /music|\\bnote/i; [ chr $i, $n ]"},{"err":"","out":"[\"\\x{602}\",\"ARABIC FOOTNOTE MARKER\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $i = 0; my $n; ++$i until ($n=charnames::viacode($i)) =~ /music|note/i; [ chr $i, $n ]"},{"err_mask":"","code":"my $j = 'Foo'; $j =~ tr/\\x20-\\x7f/\\xff00-\\xff5f/; binmode STDOUT; print $j;","out":"T}}","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $j = 'Foo'; $j =~ tr/\\x20-\\x7f/\\xff0x-\\xff5f/; binmode STDOUT; print $j;","out":"ï¿½ï¿½ï¿½","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"T}}","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $j = 'Foo'; $j =~ tr/\\x20-\\x7f/\\xff10-\\xff5f/; binmode STDOUT; print $j;"},{"out_mask":"Ã¿Ã¿Ã¿","out":"T}}","err":"","code":"my $j = 'Foo'; $j =~ tr/\\x20-\\x7f/\\xff20-\\xff5f/; binmode STDOUT; print $j;","err_mask":""},{"err":"","out":"T}}","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $j = 'Foo'; $j =~ tr/\\x20-\\xff/\\xff10-\\xff5f/; binmode STDOUT; print $j;"},{"code":"my $j = 'Foo'; $j =~ tr/\\x20-\\xff/\\xff10-\\xffff/; binmode STDOUT; print $j;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"T}}","err":""},{"err_mask":"","code":"my $j = 'Just another Perl/Unicode Hacker,'; $j =~ tr/\\x00-\\xff/\\xff00-\\xffff/; binmode STDOUT;  $j;","err":"","out":"xï¿½ï¿½ï¿½Nï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½N~ï¿½ï¿½ï¿½]ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Nvï¿½ï¿½ï¿½ï¿½ï¿½Z","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $j = 'Just another Perl/Unicode Hacker,'; $j =~ tr/\\x00-\\xff/\\xff00-\\xffff/; binmode STDOUT; print $j;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"xï¿½ï¿½ï¿½Nï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½N~ï¿½ï¿½ï¿½]ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Nvï¿½ï¿½ï¿½ï¿½ï¿½Z"},{"code":"my $j = 'Just another Perl/Unicode Hacker,'; $j =~ tr/\\x00-\\xff/\\xff00-\\xffff/; $j;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"xÂ£Â¡Â¢NÂÂÂÂ¢ÂÂÂ N~ÂÂ Â]ÂÂÂÂÂÂÂNvÂÂÂÂÂ Z","err":""},{"out":"Xï¿½ï¿½ï¿½ï¿½o|}ï¿½vsï¿½ï¿½^sï¿½z=c|wq}rsï¿½Voqysï¿½:","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $j = 'Just another Perl/Unicode Hacker,'; $j =~ tr/\\x20-\\x7f/\\xff00-\\xff5f/; binmode STDOUT; print $j;"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":"","code":"my $l = 0; [ 0 << 2 ]","err_mask":""},{"code":"my $l = 0; [ 1 << 1 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[2]","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"[4]","err":"","code":"my $l = 0; [ 1 << 2 ]","err_mask":""},{"code":"my $l = 0; [ 1 << 2  << 2]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[16]"},{"err_mask":"","code":"my $l = 0; [ 2 << 1 ]","out":"[4]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $l = 0; [ 3 << 1 ]","err":"","out":"[6]","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"[12]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $l = 0; [ 3 << 2 ]"},{"err_mask":"","code":"my $l = 0; [ sprintf('b', 3), sprintf('b', 3 << 1) ]","out":"[\"b\",\"b\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Experimental shift on scalar is now forbidden at (eval 1) line 1, at EOF\n","err":"","code":"my $lambda = sub { shift @_+1 }; @a=1..4; [{map{$_=>$lambda->($_)}@a[0..@a/2-1]},{map{$_=>$lambda->($_)}@a[@a/2..$#a]}]","err_mask":""},{"code":"my $lambda = sub { shift()+1 }; @a=1..4; [{map{$_=>$lambda->($_)}@a[0..@a/2-1]},{map{$_=>$lambda->($_)}@a[@a/2..$#a]}]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{1 => 2,2 => 3},{4 => 5,3 => 4}]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Type of arg 1 to shift must be array (not constant item) at (eval 1) line 1, at EOF\n","code":"my $lambda = sub { shift+1 }; @a=1..4; [{map{$_=>$lambda->($_)}@a[0..@a/2-1]},{map{$_=>$lambda->($_)}@a[@a/2..$#a]}]","err_mask":""},{"err":"","out":"[3]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my main $x = 3; [ $x ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"|1|2a|3abc\"]","code":"my $n = 3; my $str = q(|1|2a|3abc|4abcd|5abcde); [join q(|), (split /\\|/, $str)[0..$n]];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"CORE::GLOBAL::print \"foo\"\"\n","code":"{my $print = \\&CORE::GLOBAL::print; *CORE::GLOBAL::print = sub { $print->(\"wut wut: \", @_)}}; CORE::GLOBAL::print \"foo\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"foo","code":"{my $print = \\&CORE::GLOBAL::print; *CORE::GLOBAL::print = sub { $print->(\"wut wut: \", @_)}}; CORE::print \"foo\"","err_mask":""},{"err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"{my $print = \\&CORE::GLOBAL::print; *CORE::GLOBAL::print = sub { $print->(\"wut wut: \", @_)}}; print \"foo\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &CORE::GLOBAL::print called at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $print = \\&CORE::GLOBAL::print; sub myprint {$print->(\"I don't wanna\");}; *CORE::GLOBAL::print = &myprint; print \"foo\"","err_mask":""},{"err_mask":"","code":"{my $print = \\&CORE::print; *CORE::GLOBAL::print = sub { $print->(\"wut wut: \", @_)}}; print \"foo\"","out":"foo","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"{my $print = \\&CORE::print; \\*CORE::GLOBAL::print = sub { $print->(\"wut wut: \", @_)}}; print \"foo\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify reference to ref-to-glob cast in scalar assignment at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $print = \\*CORE::print; sub myprint {$print->(\"I don't wanna\");}; *CORE::GLOBAL::print = &myprint; print \"foo\"","err_mask":""},{"err":"","out":"ERROR: Undefined subroutine &CORE::print called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $print = \\&CORE::print; sub myprint {$print->(\"I don't wanna\");}; *CORE::GLOBAL::print = &myprint; print \"foo\""},{"code":"{my $print = \\&CORE::print; sub print { $print->(\"wut wut: \", @_)}}; print \"foo\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":"","code":"{my $print = \\&CORE::print; sub print { $print->(\"wut wut: \", @_}}; print \"foo\"","err_mask":""},{"err":"","out":"ERROR: Can't use global $_ in \"my\" at (eval 1) line 1, near \"my $_ \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $_ = q,asdf \"foo\"='bar baz',; my $h = 0x20000; my %h; s/(([\"'])(?:[^\"']+|\\\\.|(?!\\2).)*\\2)/$h{chr $h}=$1;chr($h++)/ge; my @words = split ' '; $h = chr($h-1); s/([\\x{20000}-$h])/$h{$1}/g for @words; \\@words;"},{"err_mask":"","code":"my $rule = qr/!!(.+?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; my @s; { my @bits = split /$rule/, $s, 2; push @s, @bits == 1 ? { t => $bits[0] } : ( { t => $bits[0]}, { t => $bits[1], shiny => 1 }, { t => $bits[2] } );  last if @bits == 1; $s =~ s/$rule//; } \\@s","err":"","out":"[{t => \"Foo bar \"},{t => \"meow\",shiny => 1},{t => \" lulz  !!mooo!!\"}]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"my $rule = qr/!!(.+?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; my @s; { my @bits = split /$rule/, $s, 2; push @s, @bits == 1 ? { t => $bits[0] } : ( { t => $bits[0]}, { t => $bits[1], shiny => 1 }, { t => $bits[2] } );  redo unless @bits == 1} \\@s","err":"Out of memory!\n","out":"","out_mask":""},{"code":"my $rule = qr/!!(.+?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; my @s; { my @bits = split /$rule/, $s, 2; push @s, @bits == 1 ? { t => $bits[0] } : ( { t => $bits[0]}, { t => $bits[1], shiny => 1 }, { t => $bits[2] } ); } \\@s","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{t => \"Foo bar \"},{t => \"meow\",shiny => 1},{t => \" lulz  !!mooo!!\"}]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{t => \"Foo bar \"},{t => \"meow\"},{t => \" lulz  !!mooo!!\"}]","code":"my $rule = qr/!!(.+?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; my @s; { my @bits = split /$rule/, $s, 2; push @s, @bits == 1 ? { t => $bits[0] } : ( { t => $bits[0]}, { t => $bits[1] }, { t => $bits[2] } ); } \\@s","err_mask":""},{"code":"my $rule = qr/!!(.+?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; my @s; { my @bits = split /$rule/, $s, 2; push @s, @bits == 1 ? { t => $bits[0] } : ( { t => $bits[0]}, { t => $bits[1] }, { t => $bits[2] } ); \\@s","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Foo bar !!meow!! lulz  !!mooo!!\"]","err":"","code":"my $rule = qr/!!(.?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; [  split /$rule/, $s ]","err_mask":""},{"err_mask":"","code":"my $rule = qr/!!(.?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; [  split $rule, $s ]","err":"","out":"[\"Foo bar !!meow!! lulz  !!mooo!!\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"Foo bar \",\"meow\",\" lulz  \",\"mooo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $rule = qr/!!(.+?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; [  split /$rule/, $s ]"},{"out":"[\"Foo bar !!meow!! lulz  !!mooo!!\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $rule = qr/!!(.+?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; [  split /$rule/, $s, 1 ]"},{"code":"my $rule = qr/!!(.+?)!!/; my $s = \"Foo bar !!meow!! lulz  !!mooo!!\"; [  split /$rule/, $s, 2 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Foo bar \",\"meow\",\" lulz  !!mooo!!\"]","err":""},{"code":"my %seen; $seen{foo}; $seen{bar}; \\%seen","err_mask":"","out_mask":"Ã¿Ã¿","out":"{}","err":""},{"code":"my %seen; $seen{''} //= keys(%seen); print $seen{''}.\"\\n\";","err_mask":"","out_mask":"Ã¿Ã¿","out":"1\n","err":""},{"err_mask":"","code":"my %seen; $test=\"one\"; $seen{$test} //= [keys(%seen)]; \\%seen","err":"","out":"{one => [\"one\"]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",2,3]","code":"my $self; $self->{messages} = [1,2,3]; $self->{messages}->[0] = \"a\"; $self->{messages}","err_mask":""},{"err_mask":"","code":"my $stash = \\%{ __PACKAGE__ . \"::\" } ; sub foo { 42 }; [ $main->{foo} ]","err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $stash = \\%{ __PACKAGE__ . \"::\" } ; sub foo { 42 }; [ $stash->{foo} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[sub { \"DUMMY\" }]"},{"err_mask":"","code":"my sub stat;","out":"","err":"","out_mask":""},{"code":"my sub stat { 1.3 }; [ stat ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"1.3\"]","err":""},{"out":"ï¼¹ï¼¯ï¼µ  ï¼¨ï¼¡ï¼¶ï¼¥","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $t = 'ï¼¹ï¼¯ï¼µ  ï¼¨ï¼¡ï¼¶ï¼¥'; binmode STDOUT;  $t;"},{"out":"[\"gi|300707803|ref|XP_002996096.1|hypothetical protein NCER_100860 \",\"Nosema ceranae BRL01] >gi|239605364|gb|EEQ82425.1| hypothetical protein NCER_100860 \"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @tmp; $tmp[3] = \"gi|300707803|ref|XP_002996096.1|hypothetical protein NCER_100860 [Nosema ceranae BRL01] >gi|239605364|gb|EEQ82425.1| hypothetical protein NCER_100860 [Nosema ceranae BRL01]\"; my($ia,$ib) = split(/\\[/,$tmp[3]); [ $ia, $ib]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã¯Â¼Â¹Ã¯Â¼Â¯Ã¯Â¼Âµ  Ã¯Â¼Â¨Ã¯Â¼Â¡Ã¯Â¼Â¶Ã¯Â¼Â¥","err":"","code":"my $t = 'ï¼¹ï¼¯ï¼µ  ï¼¨ï¼¡ï¼¶ï¼¥'; $t;","err_mask":""},{"err_mask":"","code":"my $u = 'ABC'; say $u =~ /./pos $u/ger;","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"/./pos $u\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $u = 'ABC'; say $u =~ s/./pos $u/ger;","err_mask":"","out_mask":"Ã¿","err":"","out":"\n"},{"code":"my $url = \"http://github.com/labster/p6-IO-Path-More/\"; my ($auth, $repo_name) = $url =~ m[(?:git|https?)://$home/([^/]+)/([^/]+)\\.git]; [ $auth, $repo_name ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,undef]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,undef]","code":"my $url = \"http://github.com/labster/p6-IO-Path-More/\"; my ($home) = $url =~ m[(?:git|https?)://([\\w\\.]+)/]; my ($auth, $repo_name) = $url =~ m[(?:git|https?)://$home/([^/]+)/([^/]+)\\.git]; [ $auth, $repo_name ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"github.com\",undef,undef]","err":"","code":"my $url = \"http://github.com/labster/p6-IO-Path-More/\"; my ($home) = $url =~ m[(?:git|https?)://([\\w\\.]+)/]; my ($auth, $repo_name) = $url =~ m[(?:git|https?)://$home/([^/]+)/([^/]+)\\.git]; [ $home, $auth, $repo_name ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"pwned\n","code":"my ( $user, $nick ) = ( 'root', 'ro.+' ); if($user =~ /^$nick$/){ say 'pwned' }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"pwned\n","code":"my ( $user, $nick ) = ( 'root', 'ro.+' ); if($user =~ /^$nick$/){ say 'pwned' } else { say 'you are not root' }","err_mask":""},{"err_mask":"","code":"my utf8 $x = 3; [ $x ]","err":"","out":"[3]","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @vals = (0); [pack(\"C*\", @vals)];","out":"[\"\\0\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[\"0.3\",\"y\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0.1 + 0.2; [ $x,  (\"$x\" == \"0.3\") ? 'y' : 'n' ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"0.3\",\"n\"]","err":"","code":"my $x = 0.1 + 0.2; [ $x,  ($x == 0.3) ? 'y' : 'n' ]","err_mask":""},{"code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 123456; [ exp $x, $y ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"Inf\",\"Inf\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"1323904.4924838\",\"Inf\",\"Inf\"]","code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 123456; [ $x, exp $x, $y ];","err_mask":""},{"err_mask":"","code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 12345; [ exp $x, $y ];","err":"","out":"[\"Inf\",\"Inf\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 12345; [ $x, exp $x, $y ];","err":"","out":"[\"103962.95347845\",\"Inf\",\"Inf\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 1234; [ $x, exp $x, $y, (exp $x) - $y ];","out":"[\"7554.11001047673\",\"Inf\",\"Inf\",\"NaN\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"7554.11001047673\",\"Inf\",\"Inf\",0]","err":"","code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 1234; [ $x, exp $x, $y, exp $x - $y ];","err_mask":""},{"code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 123; [ $x, exp $x, $y ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"472.224383926981\",\"1.21463043670265e+205\",\"1.21463043670253e+205\"]","err":""},{"code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 123; [ $x, exp $x, $y, (exp $x) - $y ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"472.224383926981\",\"1.21463043670265e+205\",\"1.21463043670253e+205\",\"1.17625422173072e+192\"]"},{"out":"[\"472.224383926981\",\"1.21463043670265e+205\",\"1.21463043670253e+205\",\"-1.17625422173072e+192\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 123; [ $x, exp $x, $y, $y - exp $x ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"19.9872144956619\",\"479001600.000001\",479001600,\"-1.01327896118164e-06\"]","err":"","code":"my $x = 0; my $y = 1; $x += log, $y *= $_ for 1 .. 12; [ $x, exp $x, $y, $y - exp $x ];","err_mask":""},{"code":"my $x = 0; $x += log for 1 .. 123456; \"123456! is a \" . int($x / log 10 + .99999) . \" digit number\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"123456! is a 552111 digit number"},{"err":"","out":"123456! is a 574964 digit number","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0; $x += log for 1 .. 123456; \"123456! is a \" . int($x / log 10) . \" digit number\";"},{"out":"123456! is a 574964.415652639 digit number","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0; $x += log for 1 .. 123456; \"123456! is a \" . ($x / log 10) . \" digit number\";"},{"code":"my $x = 0; $x += log for 1 .. 123456; \"123456! is a \" . $x / log 10 . \" digit number\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"123456! is a 574964.415652639"},{"err":"","out":"[\"1323904.4924838\",\"574964.415652639\",\"1909990.445917\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0; $x += log for 1 .. 123456; [ $x, $x / log 10, $x / log 2 ];"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"logfor 1\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 0; $x += logfor 1 .. 123456; [ $x, $x / log 10, $x / log 2 ];"},{"code":"my $x = 10.01; $x -= 10.00; print $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.00999999999999979"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"0.00999999999999979","code":"my $x = 10.01; $x -= 10; print $x","err_mask":""},{"err_mask":"","code":"my $x = [1..10]; say $x->@[2,4]","err":"","out":"35\n","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"[1,{x => \"z\"},2]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @x = (1, { x => z }, 2); sub foo {my @t = @_; undef @t } foo(@x); \\@x"},{"out_mask":"","out":"","err":"","code":"my $x = [3, 4, 5]; for my $y (map @$_, $x) { ++$y }","err_mask":""},{"err_mask":"","code":"my $x = [3, 4, 5]; for my $y (map @$_, $x) { ++$y }; $x;","out":"[3,4,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"61475723","err":"","out_mask":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err_mask":"","code":"my $x = [3, 4, 5]; for my $y (map @$_, $x) { ++$y, ++$x }; $x;"},{"out":"[3,4,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = [3, 4, 5]; for my $y (map @$_, $x) { ++$y, ++$y }; $x;"},{"err":"","out":"[5,6,7]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = [3, 4, 5]; for my $y (@$x) { ++$y, ++$y }; $x;"},{"out":"45 45 45","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 42; join ' ', ++$x, ++$x, ++$x;"},{"err":"","out":"599","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = '$5.99'; $x =~ tr/0-9//cd; $x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foos foos foos foos foos ","code":"my $x = 5; until ( $x-- == 0 ) { print \"foos \" }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"GLOB\"]","code":"my $x = *a; [ ref \\$x ]","err_mask":""},{"err_mask":"","code":"my $x = bless [], 'foo'; [ ref($x)->isa( 'main' ) ]","err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"sutJa nohterP er lhakcer,\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \"cbdafeghjiklnmoprqstvuwxy\"; $x =~ tr/a-y/Just another Perl hacker,/; [$x];"},{"code":"my $x; [ defined &$x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"code":"my $x = 'foo bar baz'; say 's-' . ($x =~ s/\\s.+//r) . '42'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"s-foo42\n"},{"err":"","out":"s-foo42\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 'foo bar baz'; say 's-' . $x =~ s/\\s.+//r . '42'"},{"out":"s-42\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 'foo bar baz'; say 's-' . ($x =~ s/\\S.+//r) . '42'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $x = 'foo bar baz'; say 's-' . $x =~ s/\\S.+//r . '42","err_mask":""},{"code":"my $x = 'foo bar baz'; say 's-' . $x =~ s/\\S.+//r . '42'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"s-42\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\*::foo","code":"my $x = \\*foo; $x","err_mask":""},{"code":"my $x = \\*foo; *$x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"*main::foo","err":""},{"err":"","out":"42\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = '+foo'; $x =~ s/^\\+// and say \"42\";"},{"out_mask":"","err":"","out":"","code":"my $x = 'foo'; $x =~ s/^\\+// and say \"42\";","err_mask":""},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my @x; local $x[0] = 1; \\@x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[[]]","err":"","code":"my $x; local $x->[0] = 1; [ $x ]","err_mask":""},{"code":"my @x; local $x[0] = 42; \"@x\";","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"42"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"my @x; local $x[0] = 42; \\@x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't localize through a reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"my $x; local $$x = 1; [ $x ]","err_mask":""},{"code":"my $x = \"main::a\"; [ ref \\$x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"SCALAR\"]"},{"err_mask":"","code":"my $x = 'nowhere'; eval { goto $x }; [ 'got', $@ ]","out":"[\"got\",\"Can't find label nowhere at (eval 1) line 1, <STDIN> line 1.\\n\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]","code":"my $x = []; [ ref($x)->isa( 'main' ) ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]","code":"my $x = []; [ ref($x)->SUPER::isa( 'main' ) ]","err_mask":""},{"out":"[\"\\r\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \"\\r\\n\"; chomp $x; [ $x ]"},{"out":"\r","err":"","out_mask":"Ã¿","err_mask":"","code":"my $x = \"\\r\\n\"; chomp $x; $x"},{"code":"my $x = (sub { [1..3], [a..c] })->();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\"]"},{"code":"my $x = []; $x->@*","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"err_mask":"","code":"my $x; $x += 4;","out":"4","err":"","out_mask":"Ã¿"},{"out":"{bar => \"bar\",foo => \"foo\"}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = {}; $x->@{qw/foo bar/} = (\"foo\", \"bar\"); $x"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"@*{\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = {}; $x->@*{qw/foo bar/} = (\"foo\", \"bar\"); $x"},{"code":"my $x = []; [ $x->SUPER::isa( 'main' ) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"isa\" on unblessed reference at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"Zoooooofix","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = 'Zoffix'; substr($x, 2, 1) = 'ooooo'; $x"},{"err_mask":"","code":"my $x = \"z\\r\\n\"; chomp $x; [ $x ]","err":"","out":"[\"z\\r\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my @Z = 'a'..'z'; my @Z2; for ( @Z ) { push @Z2, $_, uc $_; } \\@Z2;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"A\",\"b\",\"B\",\"c\",\"C\",\"d\",\"D\",\"e\",\"E\",\"f\",\"F\",\"g\",\"G\",\"h\",\"H\",\"i\",\"I\",\"j\",\"J\",\"k\",\"K\",\"l\",\"L\",\"m\",\"M\",\"n\",\"N\",\"o\",\"O\",\"p\",\"P\",\"q\",\"Q\",\"r\",\"R\",\"s\",\"S\",\"t\",\"T\",\"u\",\"U\",\"v\",\"V\",\"w\",\"W\",\"x\",\"X\",\"y\",\"Y\",\"z\",\"Z\"]"},{"out_mask":"Ã¿","err":"","out":"1","code":"$n == 0 + reverse $n","err_mask":""},{"code":"$! = 'NaN'; $!","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"No such file or directory"},{"err_mask":"","code":"$! = 'NaN'; $1","out":"","err":"","out_mask":""},{"err_mask":"","code":"\"\\N{DONG SIGN}\"","err":"","out":"Ã¢ÂÂ«","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"no feature ':all'; sub foo (;\\[$@]) { [@_] }; my %h = ( bar => foo 42, bar => meow => 'moo' );  \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Type of arg 1 to main::foo must be one of [$@] (not constant item) at (eval 1) line 1, near \"42,\"\n"},{"code":"no feature ':all'; sub foo (+) { [@_] }; my %h = ( bar => foo 42, bar => meow => 'moo' );  \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{moo => undef,bar => \"meow\"}"},{"code":"no feature ':all'; sub foo (+$) { [@_] }; my %h = ( bar => foo 42, bar => meow => 'moo' );  \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Too many arguments for main::foo at (eval 1) line 1, near \"'moo' )\"\n","err":""},{"code":"no feature ':all'; sub foo (;$) { [@_] }; my %h = ( bar => foo 42, meow => 'moo' );  \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{meow => \"moo\",bar => [42]}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{bar => [42,\"meow\",\"moo\"]}","code":"no feature ':all'; sub foo (;%$) { [@_] }; my %h = ( bar => foo 42, meow => 'moo' );  \\%h","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{bar => [42,\"x\",\"meow\",\"moo\"]}","code":"no feature ':all'; sub foo ($;@) { [@_] }; my %h = ( bar => foo 42, x => meow => 'moo' );  \\%h","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"{bar => [42,\"x\",\"meow\",\"moo\"]}","code":"no feature ':all'; sub foo ($@) { [@_] }; my %h = ( bar => foo 42, x => meow => 'moo' );  \\%h","err_mask":""},{"err":"","out":"{moo => undef,x => \"meow\",bar => [42]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no feature ':all'; sub foo (+) { [@_] }; my %h = ( bar => foo 42, x => meow => 'moo' );  \\%h"},{"err":"","out":"ERROR: Too many arguments for main::foo at (eval 1) line 1, near \"'moo' )\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"no feature ':all'; sub foo (++) { [@_] }; my %h = ( bar => foo 42, x => meow => 'moo' );  \\%h"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[42]","code":"no feature ':all'; sub foo ($) { print  \"[@_]\"; }; my %h = ( bar => foo(42), meow => 'moo' ); \\%h","err_mask":""},{"code":"no feature ':all'; sub foo (;$) { print \"[@_]\"; }; my %h = ( bar => foo 42, meow => 'moo' ); print Dumper \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[42]$VAR1 = {\n          'meow' => 'moo',\n          'bar' => 1\n        };\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"say \"[@_]\"\"\n","code":"no feature ':all'; sub foo ($) { say \"[@_]\"; }; my %h = ( bar => foo(42), meow => 'moo' ); \\%h","err_mask":""},{"code":"no feature 'signatures'; sub foo (\\@) { say @_ };","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"no feature 'signatures'; sub foo (\\@) { say @_ };  foo +(split //, \"foobar\")","err":"","out":"ERROR: Type of arg 1 to main::foo must be array (not split) at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Indirect call of method \"catch\" on a block at (eval 1) line 1.\nIndirect call of method \"try\" on a block at (eval 1) line 1.\n","out":"hwERROR: hello at (eval 1) line 1, <STDIN> line 1.\n","code":"no indirect; try {print \"hw\"} catch {die \"hello\"};","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"","out":"","code":"'nonexist'->import();","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂ©","err":"","code":"\"\\N{PILE OF POO}\"","err_mask":""},{"out":"Ã¢ÂÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\N{SNOWMAN}\""},{"err":"","out":"Ã¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\N{SPARKLE}\""},{"err":"","out":"\u0002Ã¢ÂÂ\u0002Ã¢ÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\u0002\\N{SPARKLE}\u0002\\N{SPARKLE}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\u0002Ã¢ÂÂ\u0002\u001dÃ¢ÂÂ\u001d","code":"\"\u0002\\N{SPARKLE}\u0002\u001d\\N{SPARKLE}\u001d\"","err_mask":""},{"code":"\"\u0002\\N{SPARKLE}\u0002\u001d\u0002\\N{SPARKLE}\u001d\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\u0002Ã¢ÂÂ\u0002\u001d\u0002Ã¢ÂÂ\u001d","err":""},{"err":"","out":"n","out_mask":"Ã¿","err_mask":"","code":"'\\n' =~ /^$/ ? 'y' : 'n'"},{"code":"\"\\n\" =~ /^$/ ? 'y' : 'n'","err_mask":"","out_mask":"Ã¿","out":"y","err":""},{"out_mask":"Ã¿","out":"n","err":"","code":"\"\\n\" =~ /^\\z/ ? 'y' : 'n'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]","code":"[ 'o010' + 0 ]","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"    $     OMG     =     8_0         ;$_;"},{"err_mask":"","code":"    $     OMG     =     8_0         ;$_$;","out":"ERROR: syntax error at (eval 1) line 1, near \"$_$;\n\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"80","code":"    $     OMG     =     8_0      ;$    OMG","err_mask":""},{"err_mask":"","code":"    $     OMG     =     8_0      ;$    OMG!","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$    OMG!\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"    $     OMG     =     8_0      ;$    OMG\\","out":"ERROR: syntax error at (eval 1) line 1, near \"$    OMG\\\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"80","code":"    $     OMG     =     8_0;                 $    OMG","err_mask":""},{"code":"    $     OMG     =     8_0;    $                 OMG","err_mask":"","out_mask":"Ã¿Ã¿","out":"80","err":""},{"err_mask":"","code":"open my $fh, '<', $z; [ map ref, \\1, [], {}, sub{}, qr//, \\pos, \\v1.2, $fh ]","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"LVALUE\",\"VSTRING\",\"GLOB\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"open my $fh, '<', $z; [ map ref, \\1, [], {}, sub{}, qr//, \\pos, \\v1.2, \\$fh ]","out":"[\"SCALAR\",\"ARRAY\",\"HASH\",\"CODE\",\"Regexp\",\"LVALUE\",\"VSTRING\",\"REF\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"ord 'a'","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"97"},{"out":"88","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"ord 'X'"},{"code":"ord 'Î§'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"206"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"our @a; { push (local @a), 42 }; \\@a;"},{"out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our %temp = (1,2); [ *main::{ temp } ]"},{"out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our %temp = (1,2); [ $main::{ 'temp' }{ HASH } ]"},{"code":"our %temp = (1,2); [ *main::{ 'temp' }{ HASH } ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"ERROR: syntax error at (eval 1) line 1, at EOF\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our %temp; [ $main::{ 'temp' }"},{"code":"our %temp; [ $main::{ 'temp' } ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[*::temp]"},{"err_mask":"","code":"our %temp; [ $main::{ 'temp' }{ 'HASH' ]","out":"ERROR: syntax error at (eval 1) line 1, near \"'HASH' ]\"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"our %temp; [ $main::{ 'temp' }{ 'HASH' } ]"},{"err_mask":"","code":"our %temp; [ $main::{ 'temp' }{ HASH } ]","out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Invalid version format (non-numeric data) at (eval 1) line 1, <STDIN> line 1.\n","code":"our $VERSION = 'blah';  __PACKAGE__->VERSION","err_mask":""},{"out":"{1 => 3}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%p = (1, 2); ++$$_ for \\(%p); \\%p"},{"err_mask":"","code":"%p = (1, 2); [ (()=%p) ]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out":"[\\1,\\2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%p = (1, 2); [ \\(%p) ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[{1 => 2}]","code":"%p = (1, 2); [ \\%p, map s/\\d/3/, (()=%p) ]","err_mask":""},{"err_mask":"","code":"%p = (1, 2); [ \\%p, map s/\\d/3/, %p ]","err":"","out":"[{1 => 3},1,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"%p = (1, 2); [ \\%p, map s/\\d/3/r, %p ]","err":"","out":"[{1 => 2},3,3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"%p = 1, 2; [ \\%p, map s/\\d/3/r, %p ]","out":"[{1 => undef},3,undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"2","code":"%p = 1, 2; \\%p, map s/\\d/3/r, %p","err_mask":""},{"err":"","out":"__PACAKAGE__","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"__PACAKAGE__"},{"code":"pacakge Foo; sub foo { bar() }; BEGIN { print join \",\", keys %Foo:: }; ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"pacakge\" via package \"Foo\" at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"main","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"__PACKAGE__"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Later: CHECK,quux,BEGIN","code":"package Bar; CHECK { my @early; BEGIN { @early = keys %Bar:: }; print \"CHECK: @early\" }; sub quux { 42 }; print \"Later: \", join(\",\", keys %Bar:: )","err_mask":""},{"out":"Later: CHECK,quux,BEGIN","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Bar; CHECK { my @early; BEGIN { @early = keys %Bar:: }; print \"@early\" }; sub quux { 42 }; print \"Later: \", join(\",\", keys %Bar:: )"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"package Bar; [ keys %Bar:: ]"},{"code":"package Bar; [ keys %Foo:: ]","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"[]"},{"err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; $::{'DB::Sandie::'} = $::{'Charlie::'};","out":"*main::Charlie::","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package Charlie; sub talk { 'blah' }; package main; $::{'DB::Sandie::'} = $::{'Charlie::'}; DB::Sandie->talk","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate object method \"talk\" via package \"DB::Sandie\" (perhaps you forgot to load \"DB::Sandie\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; *::{'DB::Sandie::'} = $::{'Charlie::'}; DB::Sandie->talk","out":"ERROR: Can't modify glob elem in scalar assignment at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; *::{'DB::Sandie::'} = *::{'Charlie::'}; DB::Sandie->talk","out":"ERROR: Can't modify glob elem in scalar assignment at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify glob elem in scalar assignment at (eval 1) line 1, at EOF\n","err":"","code":"package Charlie; sub talk { 'blah' }; package main; *::{'DB::Sandie::'} = \\%$::{'Charlie::'}; DB::Sandie->talk","err_mask":""},{"code":"package Charlie; sub talk { 'blah' }; package main; *{$::{'DB::Sandie::'}} = \\%{$::{'Charlie::'}}; DB::Sandie->talk","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as a symbol reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; *{$::{'DB::Sandie::'}} = \\%{*::{'Charlie::'}}; DB::Sandie->talk","out":"ERROR: Can't use an undefined value as a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; *DB::Sandie:: = *Charlie:: ; DB::Sandie->talk;","err":"","out":"blah","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"blah","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; local *DB::Sandie:: = *Charlie:: ; DB::Sandie->talk;"},{"out":"ERROR: Can't locate object method \"talk\" via package \"DB::Sandy\" (perhaps you forgot to load \"DB::Sandy\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; local $::{'DB::Sandy::'} = $::{'Charlie::'}; DB::Sandy->talk;"},{"out":"ERROR: Can't modify glob elem in local at (eval 1) line 1, near \"} =\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; local *::{'DB::Sandy::'} = *::{'Charlie::'}; DB::Sandy->talk;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package Charlie; sub talk { 'blah' }; package main; local *::{'DB::Sandy::} = *::{'Charlie::'}; DB::Sandy->talk;","err_mask":""},{"code":"package Charlie; sub talk { 'blah' }; package main; local %$::{'DB::Sandy::'} = %$::{'Charlie::'}; DB::Sandy->talk;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't modify key/value hash slice in local at (eval 1) line 1, near \"} =\"\n","err":""},{"code":"package Charlie; sub talk { 'blah' }; package main; my $g = $::{'Charlie::'}; $::{'DB::Sandie::'} = $g; Charlie->talk;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"blah","err":""},{"out":"ERROR: Can't locate object method \"talk\" via package \"DB::Sandie\" (perhaps you forgot to load \"DB::Sandie\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; my $g = $::{'Charlie::'}; $::{'DB::Sandie::'} = $g; DB::Sandie->talk;"},{"out_mask":"","out":"","err":"","code":"package Charlie; sub talk { 'blah' }; package main; my $g = $::{'Charlie::'}; $::{'DB::Sandie::'} = $g; $g = $Charlie::{'::'} [ map *{$g}{$_}, qw,HASH SCALAR ARRAY GLOB, ]","err_mask":""},{"out":"[{talk => *Charlie::talk},\\undef,undef,\\*{'::Charlie::'}]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; my $g = $::{'Charlie::'}; $::{'DB::Sandie::'} = $g; $g = *Charlie:: ; [ map *{$g}{$_}, qw,HASH SCALAR ARRAY GLOB, ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"*Charlie:: [\"\n","code":"package Charlie; sub talk { 'blah' }; package main; my $g = $::{'Charlie::'}; $::{'DB::Sandie::'} = $g; $g = *Charlie:: [ map *{$g}{$_}, qw,HASH SCALAR ARRAY GLOB, ]","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; my $g = $::{'Charlie::'}; $::{'DB::Sandie::'} = $g; $g = $DB::Sandie::{'::'} [ map *{$g}{$_}, qw,HASH SCALAR ARRAY GLOB, ]"},{"err":"","out":"[{talk => *Charlie::talk},\\undef,undef,\\*{'::Charlie::'}]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; my $g = $::{'Charlie::'}; $::{'DB::Sandie::'} = $g; [ map *{$g}{$_}, qw,HASH SCALAR ARRAY GLOB, ]"},{"code":"package Charlie; sub talk { 'blah' }; package main; my $g = $::{'Charlie::'}; [ map *{$g}{$_}, qw,HASH SCALAR ARRAY GLOB, ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{talk => *Charlie::talk},\\undef,undef,\\*{'::Charlie::'}]","err":""},{"code":"package Charlie; sub talk { 'blah' }; package main; my $g = \\*::{'Charlie::'}; [ map *{$g}{$_}, qw,HASH SCALAR ARRAY GLOB, ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"*main::Charlie::","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Charlie; sub talk { 'blah' }; package main; print $::{'Charlie::'}"},{"out_mask":"Ã¿","err":"","out":"1","code":"package Charlie; sub talk { 'blah' }; package main; print *::{'Charlie::'}","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"package Foo; [ keys %Foo:: ]","err_mask":""},{"out":"[undef,\"main\",\"main\",undef,undef,undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; [ map {scalar caller $_} -1 .. 4 ]"},{"code":"package Foo; our $foo = 42; package main; \\%{\\Foo}::","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}::\n\"\n"},{"err_mask":"","code":"package Foo; our $foo = 42; package main; \\%Foo::","out":"{foo => *Foo::foo}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package Foo; our $foo = 42; package main; \\%{Foo}::foo","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"%{Foo}::foo\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"{}","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"package Foo; our $foo = 42; package main; \\%Foo::foo"},{"err_mask":"","code":"package Foo; our $foo = 42; package main; my $z = 'Foo';  \\%\"$x\"::","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package Foo; our $foo = 42; package main; my $z = 'Foo';  \\%{{$x}::","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"}::\n\"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","err":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}::\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; our $foo = 42; package main; my $z = 'Foo';  \\%{$x}::"},{"err":"","out":"{}","out_mask":"Ã¿Ã¿","err_mask":"","code":"package Foo; our $foo = 42; package main; my $z = 'Foo';  \\%$x::"},{"err_mask":"","code":"package Foo; our $VERSION = 'blah'; package main; say Foo->VERSION","err":"","out":"ERROR: Invalid version format (non-numeric data) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"","code":"package Foo; package main; [ Foo->can('import') ]","err_mask":""},{"code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' );","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"out_mask":"Ã¿Ã¿","out":"42","err":"","code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' );  $x->can($foo{bar})->()","err_mask":""},{"err_mask":"","code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' );  $x->\"$foo{bar}\"","out":"ERROR: syntax error at (eval 1) line 1, near \"->\"$foo{bar}\"\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' );  $x->(\"$foo{bar}\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"->\\\"\n","err":"","code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' );  $x->\\\"$foo{bar}\"","err_mask":""},{"err_mask":"","code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' ); $x->($foo{bar})","err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' ); $x->(\\\"$foo{bar}\")","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","code":"package Foo; sub bar { 42 }; package main; my $x = bless {}, 'Foo'; my %foo = ( bar => 'bar' ); $x->(\\$foo{bar})","err_mask":""},{"err_mask":"","code":"package foo; sub bar {\"baz\"}; sub boo {\"boobs\"}; $a = \"bar\"; *{\"foo::\".$a}->()","err":"","out":"baz","out_mask":"Ã¿Ã¿Ã¿"},{"err":"","out":"\\*foo::bar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package foo; sub bar {\"baz\"}; sub boo {\"boobs\"}; $a = \"bar\"; \\*{\"foo::\".$a}"},{"err":"","out":"\\\"baz\"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package foo; sub bar {\"baz\"}; sub boo {\"boobs\"}; $a = \"bar\"; \\*{\"foo::\".$a}->()"},{"code":"package foo; sub bar {\"baz\"}; sub boo {\"boobs\"}; $a = \"bar\"; \\*{foo::$a}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Bad name after foo:: at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"package Foo; sub bar; [ grep defined &$_, keys %Foo:: ]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"bar\"]","code":"package Foo; sub bar; [ keys %Foo:: ]","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"package Foo; sub bar; use strict; [ grep defined &$_, keys %Foo:: ]","err_mask":""},{"err":"","out":"BEGIN,foo,bar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; sub foo { bar() }; BEGIN { print join \",\", keys %Foo:: }; "},{"code":"package Foo; sub import {} package main; [ Foo->can('import') ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[sub { \"DUMMY\" }]","err":""},{"err_mask":"","code":"package FOO; sub new { return bless [42], __PACKAGE__ };  package main; use constant BAR => 'FOO';  BAR->new","err":"","out":"bless( [42], 'FOO' )","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package FOO; sub new { return bless [42], __PACKAGE__;  use constant BAR => 'FOO';  BAR->new"},{"err":"Out of memory!\n","out":"","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"package foo; tie *STDOUT, 'foo'; sub TIEHANDLE { return bless {}, 'foo' } sub PRINT { CORE::print \"TEST\" } print \"hello\""},{"out":"","err":"Out of memory!\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"package foo; tie *STDOUT, 'foo'; sub TIEHANDLE { return bless {}, 'foo' } sub PRINT { print \"TEST\" } print \"hello\""},{"out":"ERROR: Can't locate object method \"42\" via package \"foo\" (perhaps you forgot to load \"foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless {}, 'Foo'; 'foo'->$x"},{"err":"","out":"[45,42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless sub{ 45 }, 'Foo'; [ 'foo'->$x // 'z', \"$x\" //'z' ]"},{"code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless sub{}, 'Foo'; 'foo'->$x","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless sub{}, 'Foo'; [ 'foo'->$x, \"$x\" ]","out":"[42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless sub{}, 'Foo'; [ 'foo'->$x, \"$x\"]","out":"[42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"z\",42]","code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless sub{}, 'Foo'; [ 'foo'->$x // 'z', \"$x\" //'z' ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",42]","code":"package Foo; use overload q{\"\"} => sub {42 }; package main; my $x = bless sub{ shift }, 'Foo'; [ 'foo'->$x // 'z', \"$x\" //'z' ]","err_mask":""},{"err_mask":"","code":"package Foo; use strict; use warnings; 'blah'->VERSION;","err":"","out":"","out_mask":""},{"out":"blah","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Foo; use strict; use warnings; our $VERSION = 'blah';"},{"code":"package Foo; use strict; use warnings; our $VERSION = 'blah'; package main; say Foo->VERSION","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Invalid version format (non-numeric data) at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"package Foo; use warnings; sub foo { undef()+0 }; package main; foo();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"package Foo; use warnings; sub foo { undef+0 }; package main; foo();","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Warning: Use of \"undef\" without parentheses is ambiguous at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: Can't modify constant item in undef operator at (eval 1) line 1, at EOF\n"},{"out_mask":"Ã¿","err":"Use of uninitialized value in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"0","code":"package Foo; use warnings; sub foo { undef()+0 }; package main; Foo::foo();","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"0","err":"Use of uninitialized value in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","code":"package Foo; use warnings; sub foo { undef()+0 }; package main; $Foo::{'^WARNING_BITS'}=0; Foo::foo();","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"package Foo; use warnings; sub foo { undef()+0 }; package main; $Foo::{'^WARNING_BITS'}=0; Foo::foo(); [1]","out":"[1]","err":"Use of uninitialized value in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿"},{"code":"package Foo; use warnings; sub foo { undef()+0 }; package main; no warnings; Foo::foo();","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿","err":"Use of uninitialized value in addition (+) at (eval 1) line 1, <STDIN> line 1.\n","out":"0"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unknown warnings category 'Foo::uninitialized' at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package Foo; use warnings; sub foo { undef()+0 }; package main; no warnings 'Foo::uninitialized'; Foo::foo();","err_mask":""},{"err":"","out":"compare","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package OOBLA; sub _compare {\"compare\"}; $self = bless {}; my $method = $self->can(\"_compare_\".ref $comp) || $self->can(\"_compare\"); &$method($self, \"foo\");"},{"out":"compare","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package OOBLA; sub _compare {\"compare\"}; $self = bless {}; my $method = $self->can(\"_compare_\".ref $comp) || $self->can(\"_compare\"); &$method($self, \\\"foo\");"},{"err":"","out":"compare","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package OOBLA; sub _compare {\"compare\"}; sub _compare_SCALAR {\"compare_scalar\"}; my $self = bless {}; my $comp = \"foo\"; my $method = $self->can(\"_compare_\".ref $comp) || $self->can(\"_compare\"); &$method($self, $comp);"},{"err_mask":"","code":"package OOBLA; sub _compare {\"compare\"}; sub _compare_SCALAR {\"compare_scalar\"}; my $self = bless {}; my $comp = \\\"foo\"; my $method = $self->can(\"_compare_\".ref $comp) || $self->can(\"_compare\"); &$method($self, $comp);","out":"compare_scalar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"compare","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package OOBLA; sub _compare {\"compare\"}; sub _compare_SCALAR {\"compare_scalar\"}; $self = bless {}; my $method = $self->can(\"_compare_\".ref $comp) || $self->can(\"_compare\"); &$method($self, \\\"foo\");"},{"err_mask":"","code":"package OOBLA; sub _compare_OOBLA {\"compare_OOBLA\"; \\@_}; sub _compare {\"compare\"}; sub _compare_SCALAR {\"compare_scalar\"}; my $self = bless {}; my $comp = $self; my $method = $self->can(\"_compare_\".ref $comp) || $self->can(\"_compare\"); $method->($self, $comp);","out":"[bless( {}, 'OOBLA' ),$VAR1->[0]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package OOBLA; sub _compare_OOBLA {\"compare_OOBLA\"}; sub _compare {\"compare\"}; sub _compare_SCALAR {\"compare_scalar\"}; my $self = bless {}; my $comp = $self; my $method = $self->can(\"_compare_\".ref $comp) || $self->can(\"_compare\"); $method->($self, $comp);","err":"","out":"compare_OOBLA","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package OOBLA; sub _compare_OOBLA {\"compare_OOBLA\"}; sub _compare {\"compare\"}; sub _compare_SCALAR {\"compare_scalar\"}; my $self = bless {}; my $comp = $self; my $method = $self->can(\"_compare_\".ref $comp) || $self->can(\"_compare\"); &$method($self, $comp);","err":"","out":"compare_OOBLA","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"package OOBLA; sub _compare_OOBLA {\"compare_OOBLA\"; \\@_}; sub _compare {\"compare\"}; sub _compare_SCALAR {\"compare_scalar\"}; my $self = bless {}; my $comp = $self; $self->${[\"_compare\"]}","out":"ERROR: Not a SCALAR reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"compare","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package OOBLA; sub _compare_OOBLA {\"compare_OOBLA\"; \\@_}; sub _compare {\"compare\"}; sub _compare_SCALAR {\"compare_scalar\"}; my $self = bless {}; my $comp = $self; $self->${\\(\"_compare\")}"},{"code":"package _; use constant test => 1; [ _->test ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"code":"package Ï; package main; require Ï;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package Ï; sub 2 {atan2(1,1) * 2}; Ï::2","err_mask":""},{"code":"package Ï; sub new { bless {}, shift } package main;   my $x = Ï->new; say $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package Ï; use overload fallback => 1, '+' => sub () {atan2(0,-1)}; 0+bless []","err_mask":""},{"code":"package Ï; use overload fallback => 1, '+' => sub {atan2(0,-1)}; 0+bless []","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"package Ï; use overload fallback => 1, '+' => sub () {atan2(0,-1)}; ''.bless []","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package Ï; use overload '+' => sub () {atan2(0,-1)}; ''.bless []","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","code":"package Ï; use Ï;","err_mask":""},{"err_mask":"","code":"package Ï; \\*{\"Ï::2\"}","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Ï; *{\"Ï::2\"} = sub {atan2(0,-1)}; Ï->${\\2}"},{"out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Ï; *{\"Ï::2\"} = sub {atan2(1,1) * 2}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package Ï; *{\"Ï::2\"} = sub {atan2(1,-1) * 2}; Ï->${\\2}","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"package Ï; *{\"Ï::2\"} = sub {atan2(1,1) * 2}; Ï->2","err_mask":""},{"err_mask":"","code":"package Ï; *{\"Ï::2\"} = sub {atan2(1,1) * 2}; Ï->${\\2}","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Ï; *{\"Ï::2\"} = sub {atan2(1,1) * 2}; Ï::2"},{"err_mask":"","code":"package Ï; *{\"Ï::2\"} = sub {atan2(1,-1)}; Ï->${\\2}","err":"","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"package Ï; *{\"Ï::(+\"} = sub () {atan2(0,-1)}; ''.bless []"},{"code":"package Ï; *{\"Ï::+)\"} = sub () {atan2(0,-1)}; ''.bless []","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xCF; marked by <-- HERE after ; package <-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"[pack(\"C*\", 0)];","err":"","out":"[\"\\0\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"pack(\"C*\", 0);","err":"","out":"\u0000","out_mask":"Ã¿"},{"code":"pack \"d\", 0.1","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ÂÂÂÂÂÂÂ¹?","err":""},{"err":"","out":"[\"\\20\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ pack 'H', 1 ]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"@Â","code":"pack(\"H*\", 4095);","err_mask":""},{"code":"pack \"H*\", \"547275746820\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Truth ","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Truth was the only da","err":"","code":"pack \"H*\", \"54727574682077617320746865206f6e6c79206461\"","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Truth was the only daughter of Time.","err":"","code":"pack \"H*\", \"54727574682077617320746865206f6e6c79206461756768746572206f662054696d652e\"","err_mask":""},{"out":"Ã¢ÂÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print 'â' .. 'â'"},{"err_mask":"","code":"print 1","err":"","out":"1","out_mask":"Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"print 1; 1"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"print 1; 2"},{"out_mask":"Ã¿","err":"","out":"1","code":"print 123 =~ /[[digit]]/;","err_mask":""},{"out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after s/; print <-- HERE near column 97 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print â42â"},{"code":"print 4; 2","err_mask":"","out_mask":"Ã¿","out":"4","err":""},{"out":"\u0007","err":"","out_mask":"Ã¿","err_mask":"","code":"print \"\\a\""},{"code":"printf '[%5s]', 'x'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[    x]"},{"err_mask":"","code":"print \"I'm a Perl \", 5 + !!\"0\", \" program.\"","out":"I'm a Perl 5 program.","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Unrecognized character \\xBE; marked by <-- HERE after  q ÃÂ¾ $a Ã<-- HERE near column 106 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print q Í¾ $a Í¾ "},{"err":"","out":"ERROR: Unrecognized character \\xBE; marked by <-- HERE after nt qÃÂ¾ $aÃ<-- HERE near column 104 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print qÍ¾ $aÍ¾ "},{"err_mask":"","code":"print q\u001dfoo/bar\u001d","err":"","out":"foo/bar","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"print sort { $|-- or -1 } 'a'..'y'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"cbvokujpfynsewmtdxlrgqiah"},{"out":"ruJt tc,en hoetokarrasS h","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"print sort { $|-- or -1 } 'ruJt tc,en hoetokarrasS h'"},{"code":"print sort { $|-- or -1 } 'ruJt tc,en hoetokarrasS h' =~ /./g","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Just another Sort hacker,","err":""},{"code":"print \"\\x{1f4a9}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂ©","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Experimental push on scalar is now forbidden at (eval 1) line 1, near \"$campaign)\"\n","code":"push(@$campaigns_by_type->{$$campaign{'campaign_type'}}, $campaign);  [ $campaigns_by_type ]","err_mask":""},{"err_mask":"","code":"push @ISA, 'main'; [ main::->can('foo') ]","err":"","out":"ERROR: Recursive inheritance detected in package 'main' at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"qÍ¾Í¾","out":"ERROR: Unrecognized character \\xBE; marked by <-- HERE after res/; qÃÂ¾Ã<-- HERE near column 95 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xBE; marked by <-- HERE after res/; qÃÂ¾Ã<-- HERE near column 95 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"qÍ¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾Í¾","err_mask":""},{"out":";$a;","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"q=;$a;=;"},{"code":"q=;$a; =;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":";$a; ","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"; $a; ","code":"q =; $a; =;","err_mask":""},{"code":"q =; $a; =; 5; ","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"err_mask":"","code":"q= $a = 5; print q Í¾ $a Í¾ ","err":"","out":"ERROR: Unrecognized character \\xBE; marked by <-- HERE after  q ÃÂ¾ $a Ã<-- HERE near column 117 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"q =; $a; =; 5; print q Í¾ $a Í¾ ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xBE; marked by <-- HERE after  q ÃÂ¾ $a Ã<-- HERE near column 121 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Js nte othce,utaohrSr akr","err":"","code":"$_ = q<acegikmoqsuwybdfhjlnprtvx>; tr/a-y/Just another Sort hacker,/; print","err_mask":""},{"code":"$_ = qÂ«acegikmoqsuwybdfhjlnprtvxÂ»; tr/a-y/Just another Sort hacker,/; print","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xBB; marked by <-- HERE after hjlnprtvxÃ<-- HERE near column 125 at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","err":"","out":"1","code":"q|{:amount($[4.95e0, 4.85e0, 2.4e0]), :description($[\"Hot beef burrito\", \"Mild fish taco\", \"Medium size orange juice\"]), :name($[\"BUBH\", \"TAFM\", \"BEOM\"]), :price($[4.95e0, 4.85e0, 1.2e0]), :quantity($[1, 1, 2])}| eq q|{:amount($[4.95e0, 4.85e0, 2.4e0]), :description($[\"Hot beef burrito\", \"Mild fish taco\", \"Medium size orange juice\"]), :name($[\"BUBH\", \"TAFM\", \"BEOM\"]), :price($[4.95e0, 4.85e0, 1.2e0]), :quantity($[1, 1, 2])}|","err_mask":""},{"err_mask":"","code":"q= $a; print q Í¾ $a Í¾ ","out":"ERROR: Can't find string terminator \"=\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"q = $a; print q Í¾ $a Í¾ ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"=\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"q=;$a;==~s/;//gr","err_mask":"","out_mask":"Ã¿Ã¿","out":"$a","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"q=;$a;=~\"\n","err":"","code":"q=;$a;=~s/;//r","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"$a;","err":"","code":"q=;$a;==~s/;//r","err_mask":""},{"code":"q=;$a;=;=~s/;//r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \";=~\"\n"},{"err":"","out":"[\"\\\\d\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ q(\\d) ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"echo\",\"foo\",\"bar=baz\",\"hmm=\\\"1 2 3\\\"\",\"nn='aa bb'\"]","code":"$_ = q,echo foo bar=baz hmm=\"1 2 3\" nn='aa bb',; my @h; s/(([\"'])(?:[^\"']+|\\\\.|(?!\\2).)*\\2)/push @h, $1;\"\\xFFFD\"/ge; my @words = split ' '; s/\\xFFFD/shift @h/ge for @words; \\@words;","err_mask":""},{"err_mask":"","code":"[  q{\"foo bar \\\"something\\\"\"} =~ s/(?!<=\\\\)\"//gr ]","err":"","out":"[\"foo bar \\\\something\\\\\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Unrecognized character \\x80; marked by <-- HERE after s/; q Ã¢ÂÂ¤Ã¢<-- HERE near column 97 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"q â¤â Happy Valentine's Day, #perl â¤â  s â¤ â¤ â¤âr"},{"code":"q â¤â Happy Valentine's Day, #perl â¤â  s â¤ â¤âr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x80; marked by <-- HERE after s/; q Ã¢ÂÂ¤Ã¢<-- HERE near column 97 at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"q{Number::RGB->new_from_guess() couldn't guess type} =~ /new_from_guess() couldn't guess/ ? 'y' : 'n'","err":"","out":"n","out_mask":"Ã¿"},{"code":"q ð âº Perl \\o/ âº  ð","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x9F; marked by <-- HERE after \\o/ Ã¢ÂÂº  Ã°<-- HERE near column 117 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"[ quotemeta \"~!@#$%^&*()_\\\\+?\" ]","out":"[\"\\\\~\\\\!\\\\\\@\\\\#0\\\\^\\\\&\\\\*\\\\(\\\\)_\\\\\\\\\\\\+\\\\?\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"quotemeta '~!@#$%^&*()_\\\\{}.,+?'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)_\\\\\\{\\}\\.\\,\\+\\?","err":""},{"code":"quotemeta '~!@#$%^&*()_\\\\+?'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)_\\\\\\+\\?"},{"out":"\\~\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)_\\+\\?","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"quotemeta '~!@#$%^&*()_+?'"},{"err":"","out":"ERROR: Can't find string terminator '\"' anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"quotemeta \"Ç"},{"code":"quotemeta \"\\x{D000}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã­ÂÂ"},{"code":"({qw/ a 1 b 2/})->{b}","err_mask":"","out_mask":"Ã¿","err":"","out":"2"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"}->\"\n","err":"","code":"{qw/ a 1 b 2/}->{b}","err_mask":""},{"err_mask":"","code":"qw[foo bar]","err":"","out":"bar","out_mask":"Ã¿Ã¿Ã¿"},{"out":"[[1,2,3,{ber => \"bez\",foo => \"bar\"}],[42,2,3,$VAR1->[0][3]]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$r = [ 1, 2, 3, { foo => bar }, ]; @a = @$r; $r->[0] = 42; $r->[3]{ber} = 'bez'; [ \\@a, $r ]"},{"err":"","out":"","out_mask":"","err_mask":"","code":"readpipe q(echo foo)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\"]","err":"","code":"[ref bless [], 'foo' ]","err_mask":""},{"code":"ref &CORE::GLOBAL::print","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Undefined subroutine &CORE::GLOBAL::print called at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"ref *CORE::print","err_mask":"","out_mask":"","err":"","out":""},{"code":"ref \\*CORE::print","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"GLOB"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &CORE::print called at (eval 1) line 1, <STDIN> line 1.\n","code":"ref &CORE::print","err_mask":""},{"err_mask":"","code":"ref &print","err":"","out":"ERROR: Undefined subroutine &main::print called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Regexp","code":"ref qr//","err_mask":""},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ require File::Spec ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"Foo::bar \"baz\"\"\n","code":"require Foo; [ Foo::bar \"baz\" ]","err_mask":""},{"err_mask":"","code":"require Foo; [ Foo::bar( \"baz\" ) ]","err":"","out":"ERROR: Can't locate Foo.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"s/(A)/'lcfirst $1'/ee"},{"code":"s/(A)/'lcfirst $1'/ee; $_","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after res/; say <-- HERE near column 95 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"say â","err_mask":""},{"code":"say \"\\002\"","err_mask":"","out_mask":"Ã¿Ã¿","out":"\u0002\n","err":""},{"code":"say \\002","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"SCALAR(0x4c6bb40)\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"!(0 || 1 && (0 || 0)) && !(1 && 1)\n","err":"","code":"say \"!(0 || 1 && (0 || 0)) && !(1 && 1)\"","err_mask":""},{"err_mask":"","code":"say '4c6567f85f0980f30987b69b78767647c2165a26' =~ /^[[:hexdigit:]]{40}$/ ? 'y' : 'n'","err":"","out":"ERROR: POSIX class [:hexdigit:] unknown in regex; marked by <-- HERE in m/^[[:hexdigit:] <-- HERE ]{40}$/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"y\n","code":"say '4c6567f85f0980f30987b69b78767647c2165a26' =~ /^[[:xdigit:]]{40}$/ ? 'y' : 'n'","err_mask":""},{"err":"","out":"y\n","out_mask":"Ã¿Ã¿","err_mask":"","code":"say '4c6567f85f0980f30987b69b78767647c2165a26' ? 'y' : 'n'"},{"code":"say blahblah ","err_mask":"","out_mask":"","err":"","out":""},{"out":"Ã¯ÂºÂ\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"say chr 0xFE86"},{"err_mask":"","code":"say chr 10689","out":"Ã¢Â§Â\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"say for 0.. 0xFF","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"66\n","err":"","code":"say hex 42","err_mask":""},{"code":"say hex 'FA'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"250\n","err":""},{"err_mask":"","code":"say length chr 0xFE86","out":"1\n","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"say length chr 10689","out":"1\n","err":"","out_mask":"Ã¿Ã¿"},{"err":"","out":"16\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"say length q|0.99999999999992|"},{"out_mask":"Ã¿Ã¿","err":"","out":"1\n","code":"say length quotemeta chr 0xFE86","err_mask":""},{"code":"say length quotemeta chr 10689","err_mask":"","out_mask":"Ã¿Ã¿","out":"2\n","err":""},{"out":"3\n","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"say length \"ïº\""},{"err_mask":"","code":"say \"\\N{COMBINING ACCUTE ACCENT}y\"","out":"ERROR: Unknown charname 'COMBINING ACCUTE ACCENT' at (eval 1) line 1, within string\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"say ord \"\\n\"","out":"10\n","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"say q|{:amount($[4.95e0, 4.85e0, 2.4e0]), :description($[\"Hot beef burrito\", \"Mild fish taco\", \"Medium size orange juice\"]), :name($[\"BUBH\", \"TAFM\", \"BEOM\"]), :price($[4.95e0, 4.85e0, 1.2e0]), :quantity($[1, 1, 2])}| eq q|{:amount($[4.95e0, 4.85e0, 2.4e0]), :description($[\"Hot beef burrito\", \"Mild fish taco\", \"Medium size orange juice\"]), :name($[\"BUBH\", \"TAFM\", \"BEOM\"]), :price($[4.95e0, 4.85e0, 1.2e0]), :quantity($[1, 1, 2])}|","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"1\n"},{"code":"say q|{:amount($[4.95e0, 4.85e0, 2.4e0]), :description($[\"Hot beef burrito\", \"Mild fish taco\", \"Medium size orange juice\"]), :name($[\"BUBH\", \"TAFM\", \"BEOM\"]), :price($[4.95e0, 4.85e0, 1.2e0]), :quantity($[1, 1, 2])}| eq q|{:amount($[4.95e0, 4.85e0, 2.4e0]), :description($[\"Hot beef burrito\", \"Mild fish taco\", \"Medium size orange juice\"]), :name($[\"BUBH\", \"TAFM\", \"BEOM\"]), :price($[4.95e0, 4.85e0, 1.2e0]), :quantity($[1, 1, 2])}| ? 's","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't find string terminator \"'\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"say sort { $|-- or -1 } 'ruJt tc,en hoetokarrasS h' =~ /./g","out":"Just another Sort hacker,\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"say sprintf '%x', 100","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"64\n"},{"err_mask":"","code":"say sprintf '%x', 15","err":"","out":"f\n","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"say sprintf '%x', 16","out":"10\n","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"say sprintf '%x', 96","err":"","out":"60\n","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"say â * Ï","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after res/; say <-- HERE near column 95 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ scalar asdfadsf->import ]"},{"err":"","out":"5","out_mask":"Ã¿","err_mask":"","code":"scalar grep $_, 1..5"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",2,3]","code":"$self->{messages} = [1,2,3]; $self->{messages}->[0] = \"a\"; $self->{messages}","err_mask":""},{"code":"$_ = '@@@'; s'@'$'gr; ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"$$$","err":""},{"code":"\"\\\\\" =~ s'\\'\\\\'gsr;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Substitution replacement not terminated at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿","out":"\\","err":"","code":"\"\\\\\" =~ s'\\\\'\\\\'gsr;","err_mask":""},{"err":"","out":"ERROR: Unrecognized character \\x9D; marked by <-- HERE after y, #perl Ã¢<-- HERE near column 130 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"s â¤â Happy Valentine's Day, #perl â¤â â¤â â¤âr"},{"err_mask":"","code":"[shift]","err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$SIG{__DIE__} = sub { say \"42\"; } '..'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"} '..'\"\n","err":""},{"out":"42\nERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$SIG{__DIE__} = sub { say 42 };  die  "},{"out_mask":"Ã¿","err":"","out":"0","code":"-sin","err_mask":""},{"out":"[\"-sin\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ -(sin =>)  ]"},{"code":"[ -sin =>  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"-sin\"]"},{"err_mask":"","code":"[ -sin  ]","out":"[0]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"[ sin =>  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"sin\"]","err":""},{"err_mask":"","code":"\"some text [3] some more text [4] even more text\" =~ s/(?=\\[\\d+\\])/\\n/gr","err":"","out":"some text \n[3] some more text \n[4] even more text","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"\"some text [3] some more text [4] even more text\" =~ s/(?=\\[)/â¤/gr","err":"","out":"some text Ã¢ÂÂ¤[3] some more text Ã¢ÂÂ¤[4] even more text","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"\"some text [3] some more text [4] even more text\" =~ s/(?=[)/\\n/gr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unmatched [ in regex; marked by <-- HERE in m/(?=[ <-- HERE )/ at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"some text \n[3] some more text \n[4] even more text","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"some text [3] some more text [4] even more text\" =~ s/(?=\\[)/\\n/gr"},{"out":"[5,3,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[sort { -1 } 5, 2, 3]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"d\",\"c\",\"e\",\"f\",\"h\",\"g\",\"i\",\"j\",\"l\",\"k\",\"m\",\"n\",\"p\",\"o\",\"q\",\"r\",\"t\",\"s\",\"u\",\"v\",\"x\",\"w\",\"y\"]","code":"[sort {--$|} a..'y']","err_mask":""},{"code":"[sort {--$|} a..y]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Transliteration pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"c\",\"b\",\"d\",\"a\",\"f\",\"e\",\"g\",\"h\",\"j\",\"i\",\"k\",\"l\",\"n\",\"m\",\"o\",\"p\",\"r\",\"q\",\"s\",\"t\",\"v\",\"u\",\"w\",\"x\",\"y\"]","err":"","code":"[sort {$|--} a..'y']","err_mask":""},{"err_mask":"","code":"[sort { --$| or -1 } 'a'..'y']","err":"","out":"[\"a\",\"b\",\"u\",\"p\",\"l\",\"v\",\"i\",\"o\",\"e\",\"y\",\"m\",\"t\",\"f\",\"x\",\"n\",\"s\",\"d\",\"w\",\"k\",\"q\",\"h\",\"r\",\"j\",\"c\",\"g\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"c\",\"b\",\"v\",\"o\",\"k\",\"u\",\"j\",\"p\",\"f\",\"y\",\"n\",\"s\",\"e\",\"w\",\"m\",\"t\",\"d\",\"x\",\"l\",\"r\",\"g\",\"q\",\"i\",\"a\",\"h\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[sort { $|-- or -1 } 'a'..'y']"},{"out":"","err":"","out_mask":"","err_mask":"","code":"sort { --$| or -1 } 'a'..'y'"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"foo\",\"\",\"\",\"\",\"\",\"bar\"]","err":"","code":"[ split / /, \"foo     bar\" ]","err_mask":""},{"code":"[[ split / /, \"foo     bar\" ], [ split ' ', \"foo     bar\" ]]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[\"foo\",\"\",\"\",\"\",\"\",\"bar\"],[\"foo\",\"bar\"]]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"foo\",\"bar\",\"mer\"]","code":"[ split ' ', \"foo  \\n  bar\\nmer\\n  \"]","err_mask":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"bin sprintf\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ sprintf('%020b', 4), bin sprintf('%b', 4 << 1) ]"},{"code":"[ sprintf('%020b', 4), oct '0b' .  sprintf('%b', 4 << 1) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"00000000000000000100\",8]","err":""},{"code":"[ sprintf('%020b', 4), sprintf('%b', 4 << 1) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"00000000000000000100\",1000]"},{"out":"[\".0f%\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ sprintf '.0f%', 8.5 ]"},{"code":"[ sprintf '%.0f', 8.5 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[8]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foo foo","err":"","code":"sprintf '%1$s %1$s', 'foo'","err_mask":""},{"err_mask":"","code":"[ sprintf('%20b', 4), sprintf('%b', 4 << 1) ]","err":"","out":"[\"                 100\",1000]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ sprintf('%2b', 4), sprintf('%b', 4 << 1) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[100,1000]"},{"err_mask":"","code":"[ sprintf('%b', 3), sprintf('%b', 3 << 1) ]","out":"[11,110]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ sprintf('b', 3), sprintf('b', 3 << 1) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"b\",\"b\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[100,1000]","err":"","code":"[ sprintf('%b', 4), sprintf('%b', 4 << 1) ]","err_mask":""},{"err":"","out":"[8]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"[ sprintf '%.f', 8.5 ]"},{"err_mask":"","code":"[ sprintf '%.f', 8.5, 11.5 ]","err":"","out":"[8]","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = '@@@'; s'@'$'r; ","err":"","out":"$@@","out_mask":"Ã¿Ã¿Ã¿"},{"code":"$_ = \"stackoverflow\"; reverse 'catsoverflow'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"wolfrevostac"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"catsoverflow","code":"$_ = \"stackoverflow\"; reverse 'wolfrevostac'","err_mask":""},{"out_mask":"","err":"","out":"","code":"state $x;","err_mask":""},{"err_mask":"","code":"state $x; ++$x","err":"","out":"1","out_mask":"Ã¿"},{"code":"$_ = \"STDERR output success\\nSTDERR output fsuccess\\n\";  /^STDERR output success(?=.(?!STDERR output success))/ ? 'y' : 'n'","err_mask":"","out_mask":"Ã¿","err":"","out":"n"},{"out_mask":"Ã¿","err":"","out":"n","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STD42ERR output success(?!STDERR output success)/ ? 'y' : 'n'","err_mask":""},{"err":"","out":"y","out_mask":"Ã¿","err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?=\\nSTDERR output success)/ ? 'y' : 'n'"},{"err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?!\\nSTDERR output success)/ ? 'y' : 'n'","err":"","out":"n","out_mask":"Ã¿"},{"code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?!.*STDERR output success)/s ? 'y' : 'n'","err_mask":"","out_mask":"Ã¿","out":"n","err":""},{"err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success.*?(?!STDERR output success)/ ? 'y' : 'n'","out":"y","err":"","out_mask":"Ã¿"},{"code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success.*(?!STDERR output success)/ ? 'y' : 'n'","err_mask":"","out_mask":"Ã¿","out":"y","err":""},{"err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?=.(?!STDERR output success))/ ? 'y' : 'n'","out":"n","err":"","out_mask":"Ã¿"},{"out":"y","err":"","out_mask":"Ã¿","err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?=.*(?!STDERR output success))/ ? 'y' : 'n'"},{"err":"","out":"n","out_mask":"Ã¿","err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?=STDERR output success)/ ? 'y' : 'n'"},{"err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?!.*STDERR output success)/ ? 'y' : 'n'","err":"","out":"y","out_mask":"Ã¿"},{"err":"","out":"y","out_mask":"Ã¿","err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?!.+STDERR output success)/ ? 'y' : 'n'"},{"code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?!.+STDERR output success))/ ? 'y' : 'n'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unmatched ) in regex; marked by <-- HERE in m/^STDERR output success(?!.+STDERR output success)) <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?!STDERR output success)/ ? 'y' : 'n'","err_mask":"","out_mask":"Ã¿","out":"y","err":""},{"err_mask":"","code":"$_ = \"STDERR output success\\nSTDERR output success\\n\";  /^STDERR output success(?.*(?!STDERR output success))/ ? 'y' : 'n'","err":"","out":"ERROR: Sequence (?....) not recognized in regex; marked by <-- HERE in m/^STDERR output success(?. <-- HERE *(?!STDERR output success))/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub add ( $x = return 0, $y = return $x ) { return $x + $y }   [ add(), add(2), add(2,3), add(2,3,4) ]","err":"","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/ }; fizz(), buzz();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"fizzbuzz","err":""},{"out":"fizz 2 fizz buzz 4 fizz 6 fizz buzz 8 fizz 10 fizz buzz 12 fizz 14 fizz buzz 16 fizz 18 fizz buzz 20 fizz 22 fizz buzz 24 fizz 26 fizz buzz 28 fizz 30 fizz buzz 32 fizz 34 fizz buzz 36 fizz 38 fizz buzz 40 fizz 42 fizz buzz 44 fizz 46 fizz buzz 48 fizz 50 fizz buzz 52 fizz 54 fizz buzz 56 fizz 58 fizz buzz 60 fizz 62 fizz buzz 64 fizz 66 fizz buzz 68 fizz 70 fizz buzz 72 fizz 74 fizz buzz 76 fizz 78 fizz buzz 80 fizz 82 fizz buzz 84 fizz 86 fizz buzz 88 fizz 90 fizz buzz 92 fizz 94 fizz buzz 96 fizz 98 fizz buzz 100 ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/, \" \" }; for(1..100) { undef($f), fizz() if 2 == ++$f; undef($b), buzz() if 4 == ++$b; $f && $b || &{$_}() }"},{"out":"nope 1 fizz 2 nope 3 fizz buzz 4 nope 5 fizz 6 nope 7 fizz buzz 8 nope 9 fizz 10 nope 11 fizz buzz 12 nope 13 fizz 14 nope 15 fizz buzz 16 nope 17 fizz 18 nope 19 fizz buzz 20 nope 21 fizz 22 nope 23 fizz buzz 24 nope 25 fizz 26 nope 27 fizz buzz 28 nope 29 fizz 30 nope 31 fizz buzz 32 nope 33 fizz 34 nope 35 fizz buzz 36 nope 37 fizz 38 nope 39 fizz buzz 40 nope 41 fizz 42 nope 43 fizz buzz 44 nope 45 fizz 46 nope 47 fizz buzz 48 nope 49 fizz 50 nope 51 fizz buzz 52 nope 53 fizz 54 nope 55 fizz buzz 56 nope 57 fizz 58 nope 59 fizz buzz 60 nope 61 fizz 62 nope 63 fizz buzz 64 nope 65 fizz 66 nope 67 fizz buzz 68 nope 69 fizz 70 nope 71 fizz buzz 72 nope 73 fizz 74 nope 75 fizz buzz 76 nope 77 fizz 78 nope 79 fizz buzz 80 nope 81 fizz 82 nope 83 fizz buzz 84 nope 85 fizz 86 nope 87 fizz buzz 88 nope 89 fizz 90 nope 91 fizz buzz 92 nope 93 fizz 94 nope 95 fizz buzz 96 nope 97 fizz 98 nope 99 fizz buzz 100 ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/, \" \" }; for(1..100) { undef($f), fizz() if 2 == ++$f; undef($b), buzz() if 4 == ++$b; $f && $b && nope(); &{$_}() }"},{"out":"1 fizz nope 2 3 fizz buzz nope 4 5 fizz nope 6 7 fizz buzz nope 8 9 fizz nope 10 11 fizz buzz nope 12 13 fizz nope 14 15 fizz buzz nope 16 17 fizz nope 18 19 fizz buzz nope 20 21 fizz nope 22 23 fizz buzz nope 24 25 fizz nope 26 27 fizz buzz nope 28 29 fizz nope 30 31 fizz buzz nope 32 33 fizz nope 34 35 fizz buzz nope 36 37 fizz nope 38 39 fizz buzz nope 40 41 fizz nope 42 43 fizz buzz nope 44 45 fizz nope 46 47 fizz buzz nope 48 49 fizz nope 50 51 fizz buzz nope 52 53 fizz nope 54 55 fizz buzz nope 56 57 fizz nope 58 59 fizz buzz nope 60 61 fizz nope 62 63 fizz buzz nope 64 65 fizz nope 66 67 fizz buzz nope 68 69 fizz nope 70 71 fizz buzz nope 72 73 fizz nope 74 75 fizz buzz nope 76 77 fizz nope 78 79 fizz buzz nope 80 81 fizz nope 82 83 fizz buzz nope 84 85 fizz nope 86 87 fizz buzz nope 88 89 fizz nope 90 91 fizz buzz nope 92 93 fizz nope 94 95 fizz buzz nope 96 97 fizz nope 98 99 fizz buzz nope 100 ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/, \" \" }; for(1..100) { undef($f), fizz() if 2 == ++$f; undef($b), buzz() if 4 == ++$b; $f && $b or nope(); &{$_}() }"},{"out":"fizz3buzz5fizz6fizz9buzz10fizz12fizzbuzz15fizz18buzz20fizz21fizz24buzz25fizz27fizzbuzz30fizz33buzz35fizz36fizz39buzz40fizz42fizzbuzz45fizz48buzz50fizz51fizz54buzz55fizz57fizzbuzz60fizz63buzz65fizz66fizz69buzz70fizz72fizzbuzz75fizz78buzz80fizz81fizz84buzz85fizz87fizzbuzz90fizz93buzz95fizz96fizz99buzz100","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/ }; for(1..100) { undef($f), fizz() if 3 == ++$f; undef($b), buzz() if 5 == ++$b; $f && $b || &{$_}() }"},{"code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/ }; for(1..100) { undef($f), fizz() if 3 == ++$f; undef($b), buzz() if 5 == ++$b; $f && $b && &{$_}(); &{\" \"}() }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz 16 17 fizz 19 buzz fizz 22 23 fizz buzz 26 fizz 28 29 fizzbuzz 31 32 fizz 34 buzz fizz 37 38 fizz buzz 41 fizz 43 44 fizzbuzz 46 47 fizz 49 buzz fizz 52 53 fizz buzz 56 fizz 58 59 fizzbuzz 61 62 fizz 64 buzz fizz 67 68 fizz buzz 71 fizz 73 74 fizzbuzz 76 77 fizz 79 buzz fizz 82 83 fizz buzz 86 fizz 88 89 fizzbuzz 91 92 fizz 94 buzz fizz 97 98 fizz buzz ","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz 16 17 fizz 19 buzz fizz 22 23 fizz buzz 26 fizz 28 29 fizzbuzz 31 32 fizz 34 buzz fizz 37 38 fizz buzz 41 fizz 43 44 fizzbuzz 46 47 fizz 49 buzz fizz 52 53 fizz buzz 56 fizz 58 59 fizzbuzz 61 62 fizz 64 buzz fizz 67 68 fizz buzz 71 fizz 73 74 fizzbuzz 76 77 fizz 79 buzz fizz 82 83 fizz buzz 86 fizz 88 89 fizzbuzz 91 92 fizz 94 buzz fizz 97 98 fizz buzz ","code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/ }; for(1..100) { undef($f), fizz() if 3 == ++$f; undef($b), buzz() if 5 == ++$b; $f && $b && &$_; &{\" \"} }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"fizz 3 buzz 5 fizz 6 fizz 9 buzz 10 fizz 12 fizz buzz 15 fizz 18 buzz 20 fizz 21 fizz 24 buzz 25 fizz 27 fizz buzz 30 fizz 33 buzz 35 fizz 36 fizz 39 buzz 40 fizz 42 fizz buzz 45 fizz 48 buzz 50 fizz 51 fizz 54 buzz 55 fizz 57 fizz buzz 60 fizz 63 buzz 65 fizz 66 fizz 69 buzz 70 fizz 72 fizz buzz 75 fizz 78 buzz 80 fizz 81 fizz 84 buzz 85 fizz 87 fizz buzz 90 fizz 93 buzz 95 fizz 96 fizz 99 buzz 100 ","err":"","code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/, \" \" }; for(1..100) { undef($f), fizz() if 3 == ++$f; undef($b), buzz() if 5 == ++$b; $f && $b || &{$_}() }","err_mask":""},{"code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/, \" \" }; for(1..100) { undef($f), fizz() if 3 == ++$f; undef($b), buzz() if 5 == ++$b; $f && $b && &{$_}() }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizz buzz 16 17 fizz 19 buzz fizz 22 23 fizz buzz 26 fizz 28 29 fizz buzz 31 32 fizz 34 buzz fizz 37 38 fizz buzz 41 fizz 43 44 fizz buzz 46 47 fizz 49 buzz fizz 52 53 fizz buzz 56 fizz 58 59 fizz buzz 61 62 fizz 64 buzz fizz 67 68 fizz buzz 71 fizz 73 74 fizz buzz 76 77 fizz 79 buzz fizz 82 83 fizz buzz 86 fizz 88 89 fizz buzz 91 92 fizz 94 buzz fizz 97 98 fizz buzz ","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"nope 1 nope 2 fizz 3 nope 4 buzz 5 fizz 6 nope 7 nope 8 fizz 9 buzz 10 nope 11 fizz 12 nope 13 nope 14 fizz buzz 15 nope 16 nope 17 fizz 18 nope 19 buzz 20 fizz 21 nope 22 nope 23 fizz 24 buzz 25 nope 26 fizz 27 nope 28 nope 29 fizz buzz 30 nope 31 nope 32 fizz 33 nope 34 buzz 35 fizz 36 nope 37 nope 38 fizz 39 buzz 40 nope 41 fizz 42 nope 43 nope 44 fizz buzz 45 nope 46 nope 47 fizz 48 nope 49 buzz 50 fizz 51 nope 52 nope 53 fizz 54 buzz 55 nope 56 fizz 57 nope 58 nope 59 fizz buzz 60 nope 61 nope 62 fizz 63 nope 64 buzz 65 fizz 66 nope 67 nope 68 fizz 69 buzz 70 nope 71 fizz 72 nope 73 nope 74 fizz buzz 75 nope 76 nope 77 fizz 78 nope 79 buzz 80 fizz 81 nope 82 nope 83 fizz 84 buzz 85 nope 86 fizz 87 nope 88 nope 89 fizz buzz 90 nope 91 nope 92 fizz 93 nope 94 buzz 95 fizz 96 nope 97 nope 98 fizz 99 buzz 100 ","err":"","code":"sub AUTOLOAD { print $AUTOLOAD =~ /::(.*)/, \" \" }; for(1..100) { undef($f), fizz() if 3 == ++$f; undef($b), buzz() if 5 == ++$b; $f && $b && nope(); &{$_}() }","err_mask":""},{"code":"sub AUTOLOAD { print \"hi\" } 'foo'->();","err_mask":"","out_mask":"Ã¿Ã¿","out":"hi","err":""},{"err_mask":"","code":"sub AUTOLOAD { print \"hi\" } ${*foo}->();","err":"","out":"ERROR: Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","err":"","out":"hi","code":"sub AUTOLOAD { print \"hi\" } foo();","err_mask":""},{"code":"sub AUTOLOAD { print \"hi\" } main->foo();","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"hi"},{"err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print \"hi\" } $x=\\*foo; (&$x)->();"},{"code":"sub AUTOLOAD { print \"hi\" } $x=\\*foo; $x->();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print \"hi\" } $x=\\*foo; &$x->();"},{"out":"hi","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print \"hi\" } $x = *foo; $x->();"},{"code":"sub AUTOLOAD { print \"hi\" } $x = *foo; &{$x}();","err_mask":"","out_mask":"Ã¿Ã¿","out":"hi","err":""},{"err_mask":"","code":"sub AUTOLOAD { print \"hi\" } $x = \\*foo; $x->();","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub AUTOLOAD { print \"hi\" } $x = \\*foo; *{$x}->();","err":"","out":"hi","out_mask":"Ã¿Ã¿"},{"code":"sub AUTOLOAD { print \"hi\" } $x = \\*foo; &{$x}();","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"hi","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print \"hi\" } $x = \\*foo; &{*$x}();"},{"err":"","out":"ERROR: Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub AUTOLOAD { print \"hi\" } $x = *foo; *$x{CODE}->();"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"sub AUTOLOAD { print \"hi\" } $x = \\*foo; *$x{CODE}->();","err_mask":""},{"err":"","out":"[\"\",1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub blah { !!@_ } [ blah, blah(1) ]"},{"err":"","out":"","out_mask":"","err_mask":"","code":"sub bubsort { my $arr = shift; while( my ($i) = grep $arr->[$_-1] > $arr->[$_], 1 .. $#$arr ) { @$arr[$i, $i-1] = @$arr[$i-1, $i] } }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"1 if\"\n","err":"","code":"sub Buffalo(;@) {return 1 if ($_[0] eq 'buffalo')}; sub buffalo {\"buffalo\"}; ","err_mask":""},{"err_mask":"","code":"sub Buffalo(;@) {return 1 if $_[0] eq 'buffalo'}; sub buffalo {\"buffalo\"}; ","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"1 if\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub Buffalo(;@) {return 1;}; sub buffalo {\"buffalo\"}; ","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub Buffalo(@) {return 1;}; sub buffalo {\"buffalo\"}; ","err_mask":"","out_mask":"","err":"","out":""},{"out":"ERROR: Can't modify constant item in chomp at (eval 1) line 1, near \"\"x\\n\" ]\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub chomp { 42 }; [chomp \"x\\n\" ]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[0]","err":"","code":"sub chomp { \"blah\" }; [ chomp ]","err_mask":""},{"out":"ok[1]\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub code; for \\&code (sub { print 'ok' }) { say '[', code, ']' }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal declaration of anonymous subroutine at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"sub *CORE::die { say \"42\"; } die  ","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"sub CORE::die { say \"42\"; } die  ","err_mask":""},{"err_mask":"","code":"sub die { say \"42\"; } die  ","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub { 'FILE' = 42; } say $FILE;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't modify constant item in scalar assignment at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"} say\"\n"},{"err_mask":"","code":"sub foo { [1..3], [a..c] }; my $x = foo;","err":"","out":"[\"a\",\"b\",\"c\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub foo {} \"->${ \\\\&foo }\"","err":"","out":"->CODE(0x3b47378)","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo [main=ARRAY(0x3334b88) 43]","code":"sub foo { \"foo [@_]\" }; my @bar = ((bless []), 43); shift(@bar)->foo(@bar);","err_mask":""},{"code":"sub foo {\" Hello\"}; undef &foo;","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"sub foo {\" Hello\"}; undef &foo; foo()","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo :lvalue { print \"FOO!\" }  undef &foo; foo()"},{"out":"[2,\\1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my $x = 1; use constant FOO => \\$x; 2 }; [ foo, FOO ];"},{"out":"[1,\\1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my $x = 1; use constant FOO => \\$x }; [ foo, FOO ];"},{"code":"sub foo { my @xs = \"a\" .. \"c\"; return (\"X\", \"Y\", @xs); }  my $x = foo; $x","err_mask":"","out_mask":"Ã¿","err":"","out":"3"},{"err_mask":"","code":"sub foo { my $x = shift; use constant FOO => \\$x; 42 }; [ foo(1) ];","err":"","out":"[42]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[42,1]","err":"","code":"sub foo { my $x = shift; use constant FOO => \\$x; 42 }; [ foo(1), ${ FOO() } ];","err_mask":""},{"err_mask":"","code":"sub foo { my $x = shift; use constant FOO => \\$x; 42 }; [ foo(1), ${ FOO() }, foo(2) ];","out":"[42,1,42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Not an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my $x = shift; use constant FOO => \\$x; 42 }; my @a = foo(1), @{FOO()}; my @b = foo(2), @{FOO()}; [ @a, @b ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[42,42]","code":"sub foo { my $x = shift; use constant FOO => \\$x; 42 }; my @a = foo(1), ${FOO()}; my @b = foo(2), ${FOO()}; [ @a, @b ];","err_mask":""},{"err_mask":"","code":"sub foo { my $x = shift; use constant FOO => \\$x; () }; [ foo(1), ${ FOO() }, foo(2), ${ FOO() } ];","out":"[1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[1,1]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { my $x = shift; use constant FOO => \\$x; ${ &{'FOO'}() } }; [ foo(1), foo(2) ];"},{"code":"sub foo { my $x = shift; use constant FOO => \\$x; &{'FOO'}() }; [ foo(1), foo(2) ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\\1,$VAR1->[0]]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"a\",\"b\",\"c\"]","code":"sub foo { my @z = (1, 2, 3); my @y = qw<a b c>; return \\@z, \\@y; } my $x = foo(); $x","err_mask":""},{"code":"sub foo { print \"FOO!\" }  foo()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"FOO!","err":""},{"code":"sub foo { print \"FOO!\" }  undef &foo; foo()","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::foo called at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","code":"sub foo (\\@) { say @_ };","err_mask":""},{"code":"sub foo (\\@\\@;\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@\\@) { say @_ };","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n"},{"code":"sub foo (\\@) { say @_ }; foo +(split //, \"foobar\")","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(\\\"\n","err":""},{"out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo (;$) { say \"[@_]\"; }; my %h = ( bar => foo(42), meow => 'moo' ); \\%h"},{"code":"sub foo { say \"[@_]\"; }; my %h = ( bar => foo(42), meow => 'moo' ); \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[42]\n"},{"code":"sub foo(;$) { say \"[@_]\"; }; my %h = ( bar => foo 42, meow => 'moo' ); \\%h","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, near \"foo 42\"\n","err":""},{"err_mask":"","code":"sub foo(;$) { say \"[@_]\"; }; my %h = ( bar => foo(42), meow => 'moo' ); \\%h","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, at EOF\nsyntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[42]\n","code":"sub foo($) { say \"[@_]\"; }; my %h = ( bar => foo(42), meow => 'moo' ); \\%h","err_mask":""},{"err":"","out":"[\"b\",\"c\",\"d\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo { shift }; @_ = 'a'..'d'; &foo; [ @_ ]"},{"err":"","out":"{foo => \"bar\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub foo {shift} { foo => 'bar' }->${ \\\\&foo }"},{"out_mask":"Ã¿Ã¿","err":"","out":"[]","code":"sub foo { wantarray ? 'foos' : 'bars' }  [ () = foo ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[[1,1],[1,\"\"],[\"\",\"\"],[1,\"\"]]","err":"","code":"sub j { !( $_[0] && $_[1] ) }  sub p { !($_[0] || $_[1]) } [ map [j($_->[0], $_->[1]), p($_->[0], $_->[1])], [0, 0], [1, 0], [1, 1], [0, 1] ]","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"sub List::Util::0sum {\"Hello World\"};"},{"err":"","out":"Hello World","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub List::Util::0sum {\"Hello World\"}; List::Util::0sum()"},{"code":"sub List::Util::0sum {my ($a, $b)=(0,0); $a+=$_, $b-=$_ for @_; ($a, $b)}; [List::Util::0sum(1,2,3,4,5)]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[15,-15]"},{"err":"","out":"[[1,1,1],[1,1,\"\"],[\"\",\"\",\"\"],[1,1,\"\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub o { (!$_[0]) && (!$_[1]) } sub j { !( $_[0] && $_[1] ) }  sub p { !($_[0] || $_[1]) } [ map [j($_->[0], $_->[1]), j($_->[0], $_->[1]), p($_->[0], $_->[1])], [0, 0], [1, 0], [1, 1], [0, 1] ]"},{"err_mask":"","code":"sub o { ((!$_[0]) && (!$_[1])) } sub j { !( ($_[0] && $_[1]) ) }  sub p { !($_[0] || $_[1]) } [ map [j($_->[0], $_->[1]), j($_->[0], $_->[1]), p($_->[0], $_->[1])], [0, 0], [1, 0], [1, 1], [0, 1] ]","err":"","out":"[[1,1,1],[1,1,\"\"],[\"\",\"\",\"\"],[1,1,\"\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz 16 17 fizz 19 buzz fizz 22 23 fizz buzz 26 fizz 28 29 fizzbuzz 31 32 fizz 34 buzz fizz 37 38 fizz buzz 41 fizz 43 44 fizzbuzz 46 47 fizz 49 buzz fizz 52 53 fizz buzz 56 fizz 58 59 fizzbuzz 61 62 fizz 64 buzz fizz 67 68 fizz buzz 71 fizz 73 74 fizzbuzz 76 77 fizz 79 buzz fizz 82 83 fizz buzz 86 fizz 88 89 fizzbuzz 91 92 fizz 94 buzz fizz 97 98 fizz buzz ","code":"sub _ { print /::(.*)/ }; *AUTOLOAD = *_; for(1..100) { $f=0, fizz() if 3 == ++$f; $b=0, buzz() if 5 == ++$b; $f && $b && &$_; &{\" \"} }","err_mask":""},{"err_mask":"","code":"sub _ { print /::(.*)/ }; *_ = *AUTOLOAD; for(1..100) { undef($f), fizz() if 3 == ++$f; undef($b), buzz() if 5 == ++$b; $f && $b && &$_; &{\" \"} }","err":"","out":"ERROR: Undefined subroutine &main::1 called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz 16 17 fizz 19 buzz fizz 22 23 fizz buzz 26 fizz 28 29 fizzbuzz 31 32 fizz 34 buzz fizz 37 38 fizz buzz 41 fizz 43 44 fizzbuzz 46 47 fizz 49 buzz fizz 52 53 fizz buzz 56 fizz 58 59 fizzbuzz 61 62 fizz 64 buzz fizz 67 68 fizz buzz 71 fizz 73 74 fizzbuzz 76 77 fizz 79 buzz fizz 82 83 fizz buzz 86 fizz 88 89 fizzbuzz 91 92 fizz 94 buzz fizz 97 98 fizz buzz ","err":"","code":"sub _ { print /::(.*)/ }; *AUTOLOAD = *_; for(1..100) { undef($f), fizz() if 3 == ++$f; undef($b), buzz() if 5 == ++$b; $f && $b && &$_; &{\" \"} }","err_mask":""},{"out":"1 2 fizz 4 buzz fizz 7 8 fizz buzz 11 fizz 13 14 fizzbuzz 16 17 fizz 19 buzz fizz 22 23 fizz buzz 26 fizz 28 29 fizzbuzz 31 32 fizz 34 buzz fizz 37 38 fizz buzz 41 fizz 43 44 fizzbuzz 46 47 fizz 49 buzz ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub _ { print /::(.*)/ }; *AUTOLOAD = *_; for(1..50) { $f=0, fizz() if 3 == ++$f; $b=0, buzz() if 5 == ++$b; $f && $b && &$_; &{\" \"} }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Just another Perl hacker, ","code":"sub _ { print /::(.*)/, ' ' }; *AUTOLOAD = *_; Just(), another(), Perl(), &{\"hacker,\"};","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"$ & )\"\nsyntax error at (eval 1) line 1, near \"proc 'foo'\"\n","err":"","code":"sub proc ( $ & ) {}; [ proc 'foo', {; } ]","err_mask":""},{"err_mask":"","code":"sub proc ( $ & ) {}; [ proc 'foo', {;} ]","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"$ & )\"\nsyntax error at (eval 1) line 1, near \"proc 'foo'\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"$ & )\"\nsyntax error at (eval 1) line 1, near \"proc 'foo'\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub proc ( $ & ) {}; [ proc 'foo', {} ]"},{"code":"sub proc ( $ & ) {}; [ proc 'foo', +{} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"$ & )\"\nsyntax error at (eval 1) line 1, near \"proc 'foo'\"\n"},{"code":"sub proc ( $ & ) {}; [ proc 'foo', { 42} ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"$ & )\"\nsyntax error at (eval 1) line 1, near \"proc 'foo'\"\n","err":""},{"err_mask":"","code":"sub proc ( $ & ) {}; [ proc 'foo', {; 42} ]","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"$ & )\"\nsyntax error at (eval 1) line 1, near \"proc 'foo'\"\nsyntax error at (eval 1) line 1, near \"42}\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"$ & )\"\nsyntax error at (eval 1) line 1, near \"proc 'foo'\"\nsyntax error at (eval 1) line 1, near \"; }\"\n","code":"sub proc ( $ & ) {}; [ proc 'foo', { 42; 45; } ]","err_mask":""},{"err_mask":"","code":"sub ps(&@) { my $c = shift; my $p = ''; while(1) { my $i = 0; 1 until ++vec $p, $i++, 8; return if vec $p, @_, 1; $c->(@_[grep vec $p, $_, 1], 0..$#_]) } }","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&@\"\nCan't redeclare \"my\" in \"my\" at (eval 1) line 1, near \"; \"\nsyntax error at (eval 1) line 1, near \"$#_]\"\nUnmatched right curly bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, near \"} }\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub ps(&@) { my $c = shift; my $p = ''; while(1) { my $i = 0; 1 until ++vec $p, $i++, 8; return if vec $p, @_, 1; $c->(@_[grep vec($p, $_, 1), 0..$#_]) } }; my @a;ps { push @a, \"@_\" } 'a'..'c'; \\@a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&@\"\nCan't redeclare \"my\" in \"my\" at (eval 1) line 1, near \"; \"\nsyntax error at (eval 1) line 1, near \"} }\"\n","err":""},{"err_mask":"","code":"sub ps(&@) { my $c = shift; my $p = ''; while(1) { my $i = 0; 1 until ++vec $p, $i++, 8; return if vec $p, @_, 1; $c->(@_[grep vec($p, $_, 1), 0..$#_]) } }; my @a;ps { push @a, \"@_\" } 'a'..'d'; \\@a","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&@\"\nCan't redeclare \"my\" in \"my\" at (eval 1) line 1, near \"; \"\nsyntax error at (eval 1) line 1, near \"} }\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub ps(&@) { my $c = shift; my $p = ''; while(1) { my $i = 0; 1 until ++vec $p, $i++, 8; return if vec $p, @_, 1; $c->(@_[grep vec $p, $_, 1], 0..$#_]) } }; my @a;ps { push @a, \\@_ } 'a'..'e'; \\@a","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&@\"\nCan't redeclare \"my\" in \"my\" at (eval 1) line 1, near \"; \"\nsyntax error at (eval 1) line 1, near \"$#_]\"\nUnmatched right curly bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, near \"} }\"\n","err":""},{"err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&@\"\nCan't redeclare \"my\" in \"my\" at (eval 1) line 1, near \"; \"\nsyntax error at (eval 1) line 1, near \"} }\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub ps(&@) { my $c = shift; my $p = ''; while(1) { my $i = 0; 1 until ++vec $p, $i++, 8; return if vec $p, @_, 1; $c->(@_[grep vec($p, $_, 1), 0..$#_]) } }; my @a;ps { push @a, \"@_\" } 'a'..'e'; \\@a"},{"err_mask":"","code":"sub ps(&@) { my $c = shift; my $p = ''; while(1) { my $i = 0; 1 until ++vec $p, $i++, 8; return if vec $p, @_, 1; $c->(@_[grep vec($p, $_, 1), 0..$#_]) } }; my @a;ps { push @a, \\@_ } 'a'..'e'; \\@a","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(&@\"\nCan't redeclare \"my\" in \"my\" at (eval 1) line 1, near \"; \"\nsyntax error at (eval 1) line 1, near \"} }\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub { @_ = qw/foo bar baz/; } my @z = 1..10; sub @z; \\@z","out":"ERROR: Illegal declaration of anonymous subroutine at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"substr 'foo', 0, -1","out":"fo","err":"","out_mask":"Ã¿Ã¿"},{"err":"","out":"o","out_mask":"Ã¿","err_mask":"","code":"substr 'foo', -1"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"","code":"sub TIEHANDLE { [] }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar <FH> ];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]","code":"sub TIEHANDLE { [] }; sub READLINE { \"asdf\" }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar <FH> ];","err_mask":""},{"out":"[undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub TIEHANDLE { [] }; sub READLINE { \"asdf\" }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar readline FH ];"},{"code":"sub TIEHANDLE { [] }; sub READLINE; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar <FH> ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"err_mask":"","code":"sub TIEHANDLE { [] }; tie *FH, 'main'; [ print FH \"foo\" ];","err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"sub TIEHANDLE { [] }; tie *FH, 'main'; print FH \"foo\";","out":"","err":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"","code":"sub TIEHANDLE { [] }; tie *FH, 'main'; [ scalar <FH> ];","err_mask":""},{"code":"sub use constant foo::bar => 42; foo::bar","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Illegal declaration of subroutine main::use at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"sub x { my $params ||= '0' || '0'; $params } [ x(42), x(43) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[0,0]","err":""},{"out":"[\"b\",\"b\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub x { my $params ||= '0' || 'b'; $params } [ x(42), x(43) ]"},{"err_mask":"","code":"sub x { my $params ||= '0' || undef; $params } [ x(42), x(43) ]","err":"","out":"[undef,undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub x { my $params ||= 'a' || 'b'; $params } [ x(42), x(43) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"a\",\"a\"]","err":""},{"err_mask":"","code":"sub x { my $params ||= shift; $params } [ x(42), x(43) ]","out":"[42,43]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[1,2,3,4,5,6,7,8,9,10]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sub x { @_ = qw/foo bar baz/; } my @z = 1..10; x @z; \\@z"},{"out":"","err":"","out_mask":"","err_mask":"","code":"sub z { }  z('â´')"},{"code":"sub z { }  z(â´)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after  z { }  z(<-- HERE near column 104 at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"sub Ï { atan2(1,1) * 4; } say Ï","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Illegal declaration of anonymous subroutine at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"'\t' =~ /\\t/","out":"1","err":"","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"test","code":"\"test\"","err_mask":""},{"out":"3","err":"","out_mask":"Ã¿","err_mask":"","code":"\"test123Wow\" =~ /^.*(\\d+).*$/g; $1"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"*{'$::test'} = sub { 1 }; [ '$'->test ]","err_mask":""},{"out":"the real life","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"(\"the real life\", \"just fantasy\")[\"is this\"]"},{"out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after |Ã¢ÂÂ»a-z:/Ã¢<-- HERE near column 158 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" 'trg uggc|||vtabenagqrfvtare.pbz|wncu.ugzy' =~ yâ»n-za-m|â»a-z:/â»r "},{"code":" 'trg uggc.||vtabenagqrfvtare.pbz|wncu.ugzy' =~ yâ»n-za-m.|â»a-z:/â»r ","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after |Ã¢ÂÂ»a-z:/Ã¢<-- HERE near column 159 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after |Ã¢ÂÂ»a-z:/Ã¢<-- HERE near column 166 at (eval 1) line 1, <STDIN> line 1.\n","code":"'trg uggcX||vtabenagqrfvtare.pbz|wncu.ugzy //obql' =~ yâ»n-za-mX|â»a-z:/â»r","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"try\" via package \"foo\" (perhaps you forgot to load \"foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"try {foo}","err_mask":""},{"err_mask":"","code":"try {print \"hw\"","out":"ERROR: Missing right curly or square bracket at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, at EOF\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"try {print \"hw\"}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"hwERROR: Can't locate object method \"try\" via package \"1\" (perhaps you forgot to load \"1\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"hwERROR: foo at (eval 1) line 1, <STDIN> line 1.\n","code":"try {print \"hw\"} catch {die \"foo\"}","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"($two4s, $delta, $secs)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after |Ã¢ÂÂ»a-z:/Ã¢<-- HERE near column 155 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":" 'uggc|||vtabenagqrfvtare.pbz|wncu.ugzy' =~ yâ»n-za-m.|â»a-z:/â»r ","err_mask":""},{"err_mask":"","code":" 'uggc.||vtabenagqrfvtare.pbz|wncu.ugzy' =~ yâ»n-za-m.|â»a-z:/â»r ","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after |Ã¢ÂÂ»a-z:/Ã¢<-- HERE near column 155 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after |Ã¢ÂÂ»a-z:/Ã¢<-- HERE near column 155 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" 'uggcX||vtabenagqrfvtare.pbz|wncu.ugzy' =~ yâ»n-za-mX|â»a-z:/â»r "},{"err_mask":"","code":"undef < 0","err":"","out":"ERROR: Unterminated <> operator at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"[\\undef, \\undef]","err":"","out":"[\\undef,$VAR1->[0]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"UNITCHECK { print 'ok' }; 42;","err":"","out":"ok","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"[UNIVERSAL->can('import')]","err":"","out":"[undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"unless( $a or $b ){}","err":"","out":"","out_mask":""},{"err_mask":"","code":"unless( a or b ){}","err":"","out":"a","out_mask":"Ã¿"},{"err":"","out":"[\"abc\",\"def\",\"ghi\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[ unpack '(A3)*', 'abcdefghi' ]"},{"err_mask":"","code":"[unpack \"a*\", \"Hello World\"]","out":"[\"Hello World\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"0101100110011001100110011001100110011001100110011001110111111100","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"b*\",(pack \"d\", 0.1)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[97,98,99]","err":"","code":"[ unpack 'C3', 'abcdefghi' ]","err_mask":""},{"code":"[unpack \"c*\", \"Hello World\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[72,101,108,108,111,32,87,111,114,108,100]"},{"err_mask":"","code":"[unpack \"c*\", \"Hello Worldâ \"]","out":"[72,101,108,108,111,32,87,111,114,108,100,-30,-104,-125,32]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[72,101,108,108,111,32,87,111,114,108,100,226,152,131,32]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"[unpack \"C*\", \"Hello Worldâ \"]"},{"out_mask":"","err":"","out":"","code":"unpack \"d\", \"0.1\"","err_mask":""},{"err_mask":"","code":"unpack \"d\", 0.1","err":"","out":"","out_mask":""},{"err_mask":"","code":"unpack \"D\", \"0.1\"","err":"","out":"ERROR: Invalid type 'D' in unpack at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"3135","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack(\"H*\", (4095 & 0xFF00) >> 8);"},{"code":"unpack(\"H*\", chr 4095);","err_mask":"","out_mask":"Ã¿Ã¿","out":"ff","err":""},{"err_mask":"","code":"unpack(\"H*\", pack(\"C*\", 0xFA, 15, 255))","out":"fa0fff","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"fa0cff","err":"","code":"unpack(\"H*\", pack(\"C*\", 0xFA, (3192 & 0x0F00) >> 8, 255))","err_mask":""},{"err_mask":"","code":"unpack \"h*\", pack \"d\", 0.1","err":"","out":"a999999999999bf3","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"a999999999999bf3","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"unpack \"h*\",(pack \"d\", 0.1)"},{"code":"URI->new('/product/IDHEREFUCKER');","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate URI/_generic.pm:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/site_perl/5.24.0/URI.pm line 104, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Perl v10.0.0 required--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use 10;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","code":"use 5.008; You know what I like about perl? It's the fact that this English sentence is perfectly parsable!","err_mask":""},{"err":"","out":"ERROR: Can't locate object method \"Some\" via package \"may\" (perhaps you forgot to load \"may\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.008; You know what I like about perl? It's the fact that this English sentence is perfectly parsable! Some may say: \"no way\", but I got deparse to prove it"},{"err":"","out":"567856785678","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.010; for( 1..3 ) { my $x = sub { state $x = 5; print $x++ }; $x->() for 1..4 }"},{"err_mask":"","code":"use 5.010; for( 1..3 ) { sub { state $x = 5; print $x++ }->() }","out":"555","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3]","err":"","code":"use 5.010; my $x; sub foo { ++$foo }; [ foo, foo, foo ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[3,3,3]","code":"use 5.010; my $x; sub foo :lvalue { ++$foo }; [ foo, foo, foo ]","err_mask":""},{"code":"use 5.010; my $x; [ ++$x,++$x,++$x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[3,3,3]","err":""},{"out_mask":"Ã¿","err":"","out":"\n","code":"use 5.010; say `ls -a`;","err_mask":""},{"code":"use 5.010; say sort { $|-- or -1 } 'ruJt tc,en hoetokarrasS h' =~ /./g","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Just another Sort hacker,\n","err":""},{"code":"use 5.010; sub foo :lvalue { state $foo = shift; @_ and $foo = shift;$foo }; [ foo(41), foo , foo(1), foo, foo, foo, foo(75), foo, foo(\"zof!\"), foo, foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"zof!\",\"zof!\",\"zof!\",\"zof!\",\"zof!\",\"zof!\",\"zof!\",\"zof!\",\"zof!\",\"zof!\",\"zof!\"]","err":""},{"out":"TEST","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.010; sub foo { state $foo = do { print \"TEST\" }; @_ and $foo = shift; $foo }; [ foo, foo(41), foo , foo(1), foo, foo, foo, foo(75), foo, foo(\"zof!\"), foo, foo]"},{"code":"use 5.010; sub foo { ++state $foo }; [ foo, foo, foo ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3]","err":""},{"err":"","out":"[41,42,42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.010; sub foo { state $foo = shift; @_ and $foo = 42;$foo }; [ foo(41), , foo(1), foo]"},{"out":"[41,41,41]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.010; sub foo { state $foo = shift; @_ and $foo = 42;$foo }; [ foo(41), foo, foo]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[41,41,42,42]","err":"","code":"use 5.010; sub foo { state $foo = shift; @_ and $foo = 42;$foo }; [ foo(41), foo , foo(1), foo]","err_mask":""},{"err_mask":"","code":"use 5.010; sub foo { state $foo = shift; @_ and $foo = 42;$foo }; [ foo, foo, foo]","err":"","out":"[undef,undef,undef]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use 5.010; sub foo { state $foo = shift; @_ and $foo = shift;$foo }; [ foo(41), foo , foo(1), foo]","err":"","out":"[41,41,1,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use 5.010; sub foo { state $foo = shift; @_ and $foo = shift;$foo }; [ foo(41), foo , foo(1), foo, foo, foo, foo(75), foo, foo(\"zof!\"), foo, foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[41,41,1,1,1,1,75,75,\"zof!\",\"zof!\",\"zof!\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef,undef,1,undef,undef,undef,75,undef,\"zof!\",undef,undef]","err":"","code":"use 5.010; sub foo { state $foo = shift; $foo = shift;$foo }; [ foo(41), foo , foo(1), foo, foo, foo, foo(75), foo, foo(\"zof!\"), foo, foo]","err_mask":""},{"err_mask":"","code":"use 5.020; for ( [qw/foo bar/]->@* ) { print}","out":"foobar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use 5.020; for ( [qw/foo bar/]->*@ ) { print}","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"->*\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use 5.020; my $x = \\42; $x->$*","err_mask":"","out_mask":"Ã¿Ã¿","out":"42","err":""},{"out":"ERROR: Malformed prototype for main::add: $x = return 0, $y = return $x at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.020; sub add ($x = return 0, $y = return $x) { return $x + $y }   [ add(), add(2), add(2,3)  ]"},{"err":"","out":"ERROR: Malformed prototype for main::add:  $x = return 0, $y = return $x  at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 5.020; sub add ( $x = return 0, $y = return $x ) { return $x + $y }   [ add(), add(2), add(2,3), add(2,3,4) ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Malformed prototype for main::add: $x = return 0, $y = return $x at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use 5.020; sub add ($x = return 0, $y = return $x) { return $x + $y }   [ add(), add(2), add(2,3), add(2,3,4) ]","err_mask":""},{"code":"use 5.020; use feature 'postderef'; no warnings 'experimental::postderef'; for ( [qw/foo bar/]->@* ) { print}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"foobar","err":""},{"code":"use 5.08; You know what I like about perl? It's the fact that this English sentence is perfectly parsable! Some may say: \"no way\", but I got deparse to prove it","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Perl v5.80.0 required--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use 5.20; my $x = \\42; $x->$*","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Perl v5.200.0 required (did you mean v5.20.0?)--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"ERROR: Perl v6.0.0 required--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 6;"},{"out":"ERROR: Perl v999.0.0 required--this is only v5.24.0, stopped at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use 999;"},{"out":"bless( {sign => \"+\",value => [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10]}, 'Math::BigInt' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use bigint; 1e1000"},{"code":"use charnames (); [ charnames::viacode 0x92 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"PRIVATE USE TWO\"]"},{"err_mask":"","code":"use constant ARRAY => [qw(one two three)]; [ $::{ARRAY} ]","out":"[\\[\"one\",\"two\",\"three\"]]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use constant ARRAY => [qw(one two three)]; $::{ARRAY}","out":"\\[\"one\",\"two\",\"three\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"one\",\"two\",\"three\"]","err":"","code":"use constant ARRAY => [qw(one two three)]; ${$::{ARRAY}}","err_mask":""},{"err_mask":"","code":"use constant foo::bar => 42; foo::bar","out":"42","err":"","out_mask":"Ã¿Ã¿"},{"err":"","out":"BAR!\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant FOO => 'BAR!'; BEGIN { say FOO }"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Illegal declaration of subroutine BEGIN at (eval 1) line 1, <STDIN> line 1.\n","code":"use constant FOO => 'BAR!'; BEGIN say { FOO }","err_mask":""},{"err_mask":"","code":"use constant FOO => 'BAR!'; our $dir = FOO; BEGIN { say FOO } say $dir","out":"BAR!\nBAR!\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"BAR!\nMoar BAR!!\n","err":"","code":"use constant FOO => 'BAR!'; our $dir = FOO; BEGIN { say FOO } say \"Moar $dir!\"","err_mask":""},{"err_mask":"","code":"use constant foo => bar; package bar; sub baz { 'quux' }; package main; [ baz { foo } ];","err":"","out":"[\"quux\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[\"quux\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant foo => bar; package bar; sub baz { 'quux' }; package main; [ baz { foo() } ];"},{"out":"ERROR: syntax error at (eval 1) line 1, near \"baz foo \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant foo => bar; package bar; sub baz { 'quux' }; package main; [ baz foo ];"},{"err":"","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use constant foo => bar; package bar; sub baz() { 'quux' }; package main; [ baz { foo } ];"},{"code":"use constant foo => bar; package bar; sub baz() { 'quux' }; package main; [ baz { foo() } ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n"},{"code":"use constant foo => bar; package bar; sub baz() { 'quux' }; package main; [ baz foo ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"baz foo \"\n"},{"err":"","out":"","out_mask":"","err_mask":"","code":"use constant foo => 'ok'; *main::{foo};"},{"err_mask":"","code":"use constant list => qw(a b c); [list[2]]","out":"ERROR: syntax error at (eval 1) line 1, near \"list[\"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use an array as a reference at (eval 1) line 1, <STDIN> line 1.\n","code":"use constant list => qw(a b c); list->[2]","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"2\n","err":"","code":"use constant one => 1; BEGIN { &Internals::SvREADONLY(\\one, 0); ++${ \\one } }; say one;","err_mask":""},{"err_mask":"","code":"use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); for my \\%hash (@a) {print Dumper(%hash);}","out":"ERROR: Missing $ on loop variable at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't locate Devel/Peek.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Devel::Peek qw,SvREFCNT,;"},{"code":"use Encode;","err_mask":"","out_mask":"","err":"","out":""},{"out":"[\"ascii\",\"ascii-ctrl\",\"cp1252\",\"iso-8859-1\",\"null\",\"utf-8-strict\",\"utf8\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Encode; [Encode->encodings()];"},{"err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after ÂÂ¢ n-za-mÃ¢<-- HERE near column 194 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Encode; print encode 'utf8', 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z:/ â¢ n-za-mâ â¢r "},{"code":"use experimental 'postderef'; my $x; $x->$@","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"","out":"","err":"","code":"use experimental 'postderef'; my $x;  @{ $x || [] }; $x->@*","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","code":"use experimental 'postderef'; my $x;  @{ $x || [] }; $x->$@","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't call method \"\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","code":"use experimental 'postderef'; my @z = 1..10; $z->$#","err_mask":""},{"code":"use experimental 'postderef'; my $z =[ 1..10]; $z->$*#","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Not a SCALAR reference at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"ERROR: Can't call method \"\" on unblessed reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use experimental 'postderef'; my $z =[ 1..10]; $z->$#"},{"out_mask":"Ã¿","out":"9","err":"","code":"use experimental 'postderef'; my $z =[ 1..10]; $z->$#*","err_mask":""},{"code":"use experimental 'postderef'; undef->$@","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't call method \"\" on an undefined value at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use feature ':all'; sub add (@) { __CODE__->(1,2) }   [ add(), add(2), add(2,3)  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined subroutine &main::__CODE__ called at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(__CODE__\"\n","code":"use feature ':all'; sub add (__CODE__->(2,2)) { }   [ add(), add(2), add(2,3)  ]","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use feature ':all'; sub add (@) { __SUB__->(1,2) }   [ add(), add(2), add(2,3)  ]","out":"","err":"Out of memory!\n","out_mask":""},{"err_mask":"","code":"use feature ':all'; sub add (__SUB__->(2,2)) { }   [ add(), add(2), add(2,3)  ]","err":"","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(__SUB__\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use feature ':all'; sub add ($x = return 0, $y = return $x) { return $x + $y }   [ add(), add(2), add(2,3)  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n"},{"err_mask":"","code":"use feature 'postderef'; \\(42)->$*","out":"\\undef","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use feature 'postderef'; \\42->$*","out":"\\undef","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"Out of memory!\n","out":"","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use feature 'postderef'; for my $i (1..10) {push @a, [(1) x (1024*1024)]}; [scalar(@a), scalar($a[0]->@*)]"},{"code":"use feature 'postderef'; for my $i (1..10) {push @a, [(1) x (1024*1024)]}; sleep 15; [scalar(@a), scalar($a[0]->@*)]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Out of memory!\n"},{"out_mask":"","err":"Out of memory!\n","out":"","code":"use feature 'postderef'; for my $i (1..15) {push @a, [(1) x (1024*1024)]}; [scalar(@a), scalar($a[0]->@*)]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"Out of memory!\n","out":"","code":"use feature 'postderef'; for my $i (1..30) {push @a, [(1) x (1024*1024)]}; [scalar(@a), scalar($a[0]->@*)]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","err":"Out of memory!\n","out":"","code":"use feature 'postderef'; for my $i (1..5) {push @a, [(1) x (1024*1024)]}; [scalar(@a), scalar($a[0]->@*)]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use feature 'postderef'; my $a; ++$a->$ ;[ $a ]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$ ;[\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use feature 'postderef'; my $aref = \\['x']; $$aref->[0]","err_mask":"","out_mask":"Ã¿","out":"x","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\\42,$VAR1->[0]]","err":"","code":"use feature q,postderef,; my $x = 42; my $y = \\$x; [ \\$x, \\$y->$* ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\\43,$VAR1->[0]]","err":"","code":"use feature q,postderef,; my $x = 42; my $y = \\$x; [ \\$x, \\++$y->$* ]","err_mask":""},{"code":"use feature 'say'; say \"!(0 || 1 && (0 || 0)) && !(1 && 1)\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"!(0 || 1 && (0 || 0)) && !(1 && 1)\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Parse error at (eval 1) line 1, <STDIN> line 1.\nsyntax error at (eval 1) line 1, near \"(__SUB__\"\n","err":"","code":"use feature 'signatures'; sub add (__SUB__->(2,2)) { }   [ add(), add(2), add(2,3)  ]","err_mask":""},{"out":"[0,2,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'signatures'; sub add ($x = 0, $y = 0) { return $x + $y }   [ add(), add(2), add(2,3)  ]"},{"code":"use feature 'signatures'; sub add ($x = return 0, $y = return $x) { return $x + $y }   [ add(), add(2), add(2,3)  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Too many arguments for subroutine at (eval 1) line 1.\n","err":""},{"out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename;"},{"err_mask":"","code":"use File::Basename; [map +(fileparse $_)[1], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use File::Basename; [map +(fileparse $_)[2], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use File::Basename; [map +(fileparse $_, qr/(?<=.)[^.]+/)[1], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","err_mask":""},{"out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename; [map +(fileparse $_, qr/(?<=\\.)[^.]+/)[1], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]"},{"out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename; [map +(fileparse $_, qr/[^.]+/)[1], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]"},{"err_mask":"","code":"use File::Basename; [map +(fileparse $_, qr/(?<=\\.)[^.]+/)[2], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use File::Basename; [map +(fileparse $_, qr/[^.]+/)[2], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","err_mask":""},{"code":"use File::Basename qw/fileparse/; [map +(basename $_)[2], \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Can't locate File/Basename.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use File::Basename qw/fileparse/; [map +(basename$_)[2] \"foo.jpg\", \"foo\\nbar.pdf\",\"foo.png.\", \".vimrc\",\"x.js.pl\",\"README\"]"},{"code":"use File::Spec; ","err_mask":"","out_mask":"","out":"","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate CGI.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":"","code":"use File::Spec; use CGI","err_mask":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"use JSON;"},{"code":"use JSON::MaybeXS;","err_mask":"","out_mask":"","err":"","out":""},{"out":"Cpanel::JSON::XS","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use JSON::MaybeXS; JSON"},{"err_mask":"","code":"use JSON::MaybeXS; [ JSON() ]","err":"","out":"[\"Cpanel::JSON::XS\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use JSON::MaybeXS; JSON()","err":"","out":"Cpanel::JSON::XS","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[sub { \"DUMMY\" }]","err":"","code":"use JSON::MaybeXS; [ *main::JSON{CODE} ]","err_mask":""},{"err_mask":"","code":"use JSON::PP; no JSON::XS; no Cpanel::JSON::XS; use JSON::MaybeXS; JSON(); # Don't think this will work","out":"ERROR: Can't locate JSON/PP.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use JSON::XS;","out":"","err":"","out_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use  JSON::XS; no Cpanel::JSON::XS; use JSON::MaybeXS; JSON(); # Don't think this will work","err":"Prototype mismatch: sub main::decode_json ($) vs ($;$) at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/Exporter.pm line 66, <STDIN> line 1.\n at (eval 1) line 1.\n","out":"Cpanel::JSON::XS","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use List::Util;","err":"","out":"","out_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[55,210,120,136,171,153]","code":"use List::Util qw/reduce/; [ map { reduce {$a + $b} 1..$_ } 10, 20, 15, 16, 18, 17 ]","err_mask":""},{"code":"use List::Util qw/reduce/; [ map { reduce {$a + $b} 1..$_ } sort 10, 20, 15..18 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[55,120,136,153,171,210]"},{"out_mask":"Ã¿Ã¿","err":"","out":"55","code":"use List::Util qw/reduce/; reduce {$a + $b} 1..10","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"120","err":"","code":"use List::Util qw/reduce/; reduce {$a + $b} 1..15","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"136","err":"","code":"use List::Util qw/reduce/; reduce {$a + $b} 1..16","err_mask":""},{"code":"use List::Util qw/reduce/; reduce {$a + $b} 1..17","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"153","err":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"171","err":"","code":"use List::Util qw/reduce/; reduce {$a + $b} 1..18","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"210","err":"","code":"use List::Util qw/reduce/; reduce {$a + $b} 1..20","err_mask":""},{"err_mask":"","code":"use List::Util qw(shufffle); [ shuffle 1..20 ]","out":"ERROR: \"shufffle\" is not exported by the List::Util module\nCan't continue after import errors at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"[10,3,2,4,9,14,7,12,18,17,5,11,19,13,20,1,15,8,16,6]","err":"","out_mask":"Ã¿Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ã¿\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","err_mask":"","code":"use List::Util qw(shuffle); [ shuffle 1..20 ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","err":"","code":"use List::Util qw(shuffle); sub bubsort { my $arr = shift; while( my ($i) = grep $arr->[$_-1] > $arr->[$_], 1 .. $#$arr ) { @$arr[$i, $i-1] = @$arr[$i-1, $i] }; $arr }; bubsort [ shuffle 1..20 ]","err_mask":""},{"err":"","out":"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util qw(shuffle); sub bubsort { my $arr = shift; while( my ($i) = grep $arr->[$_-1] > $arr->[$_], 1 .. $#$arr ) { @$arr[$i, $i-1] = @$arr[$i-1, $i]; &bubsort }; $arr }; bubsort [ shuffle 1..20 ]"},{"code":"use List::Util qw(shuffle); sub bubsort { my ($arr) = @_; while( my ($i) = grep $arr->[$_-1] > $arr->[$_], 1 .. $#$arr ) { @$arr[$i, $i-1] = @$arr[$i-1, $i]; &bubsort }; $arr }; bubsort [ shuffle 1..100 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]"},{"err":"","out":"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Util qw(shuffle); sub bubsort { my ($arr) = @_; while( my ($i) = grep $arr->[$_-1] > $arr->[$_], 1 .. $#$arr ) { @$arr[$i, $i-1] = @$arr[$i-1, $i]; &bubsort }; $arr }; bubsort [ shuffle 1..20 ]"},{"out":"ERROR: Can't locate Math/Complex.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Math::Complex; "},{"err_mask":"","code":"use MIME::Base64;","out":"ERROR: Can't locate MIME/Base64.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate MIME/Base64.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use MIME::Base64; decode_base64 'aHR0cDovL3NhZnIua2luZ2ZlYXR1cmVzLmNvbS9CZWV0bGVCYWlsZXkvMjAwNC8wNS9CZWV0bGVfQmFpbGV5LjIwMDQwNTIyXzkwMC5naWY='","err_mask":""},{"err_mask":"","code":"use MIME::Base64; use warnings; sub z { substr shift, 1, 1 }  z('â´')","out":"ERROR: Can't locate MIME/Base64.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"use overload"},{"err_mask":"","code":"use overload;","err":"","out":"","out_mask":""},{"err":"","out":"ERROR: Can't bless non-reference value at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use overload q|\"\"| => sub { 42 }; my @a; $a[42] = 'forty two'; [ $a[bless 'main'] ]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"forty two\"]","err":"","code":"use overload q|\"\"| => sub { 42 }; my @a; $a[42] = 'forty two'; [ $a[bless {}, 'main'] ]","err_mask":""},{"code":"use overload qw,\"\",=> sub { die }; bless {}, bless []; 42;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿","out":"42","err":"","code":"use overload qw,\"\",=> sub { die }; my $x = bless []; 42;","err_mask":""},{"code":"use overload qw,\"\",=> sub { die }; my $x = bless []; bless {}, $x; 42;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Died at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use overload '\"\"' => sub { 'abcdef' }; '' . bless [];","err":"","out":"abcdef","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"abcdef","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use overload '\"\"' => sub { 'abcdef' }; ref bless [], bless [];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: abcdef at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use overload '\"\"' => sub { die 'abcdef' }; ref bless [], bless [];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"2.2 ]\"\n","code":"use POSIX qw/ceil/; [ ceil(-2.20, int -2.2 ]","err_mask":""},{"code":"use POSIX qw/ceil/; [ ceil -2.2, int(-2.2) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Usage: POSIX::ceil(x) at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[-2,-2]","code":"use POSIX qw/ceil/; [ ceil(-2.2), int -2.2 ]","err_mask":""},{"err_mask":"","code":"use Safe;","err":"","out":"ERROR: Can't locate Safe.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Scalar::Util qw/dualvar/; my $i = dualvar 1, 'forty two'; my @a = qw/one two/; [ $a[ $i ] ];","out":"[\"two\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"two\",\"one\"]","err":"","code":"use Scalar::Util qw/dualvar/; my $i = dualvar 1, 'forty two'; my @a = qw/one two/; [ $a[ $i ], $a[ \"$i\" ] ];","err_mask":""},{"err":"","out":"[\"two\",\"two\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Scalar::Util qw/dualvar/; my $i = dualvar 1, 'forty two'; my @a = qw/one two/; [ $a[ $i ], $a[ $i+0 ] ];"},{"code":"use Scalar::Util qw/dualvar/; my $x = dualvar(42,'foo'); [ $x+0, \"$x\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[42,\"foo\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[55,55]","err":"","code":"use Scalar::Util qw/dualvar/; my $x = dualvar('42','foo'); $x = 55; [ $x+0, \"$x\" ]","err_mask":""},{"err_mask":"","code":"use Scalar::Util qw/dualvar/; my $x = dualvar 42, 'forty two'; [$x+0, \"$x\"]","out":"[42,\"forty two\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Scalar::Util qw/dualvar/; my $x = dualvar 42, 'forty two'; [$x, \"$x\"]","out":"[\"forty two\",\"forty two\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Scalar::Util qw/dualvar/; my $x = dualvar('NaN','foo'); [ $x+0, \"$x\" ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"NaN\",\"foo\"]"},{"err_mask":"","code":"use Scalar::Util qw/dualvar/; $x = dualvar 42, 'foo'; [ $x.'', $x+0 ]","err":"","out":"[\"foo\",42]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: \"looks_like_a_number\" is not exported by the Scalar::Util module\nCan't continue after import errors at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use Scalar::Util qw/looks_like_a_number/; looks_like_a_number 'NaN'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]","code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'iNan' ]","err_mask":""},{"err_mask":"","code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'Nan' ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'NaN' ]","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"use Scalar::Util qw/looks_like_number/; looks_like_number 'NaN'","err_mask":""},{"err_mask":"","code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'sdss' ]","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'sNan' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"err_mask":"","code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'sNaN' ]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'wtfNan' ]","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'xsNan' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]","code":"use Scalar::Util qw/looks_like_number/; [ looks_like_number 'zNan' ]","err_mask":""},{"code":"use Scalar::Utils qw/dualvar/; my $x = dualvar 42, 'forty two'; [$x, \"$x\"]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Scalar/Utils.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; *4 = sub { 'ok' }; *{ \\4 };","err":"","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"*main::4","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; *4 = sub { 'ok' }; *{ 4 };"},{"err":"","out":"ERROR: Not a CODE reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; *4 = sub { 'ok' }; &{ \\4 };"},{"err_mask":"","code":"use strict; *4 = sub { 'ok' }; &{4};","err":"","out":"ok","out_mask":"Ã¿Ã¿"},{"code":"use strict; *4 = sub { 'ok' }; main->${ \\4 };","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"ok"},{"out":"ERROR: Can't use string (\"foo bar\") as a symbol ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; $a=\"foo bar\"; *$a = sub {\"baz\"}; \"foo bar\"->()"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict;  BEGIN { *::foo = \\$::foo; } $foo = 42;","err_mask":""},{"err_mask":"","code":"use strict; BEGIN { package Zomg; use strict; *::foo = \\$::foo; }  $foo = 42;","err":"","out":"42","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict;  *::foo = \\$::foo;  $foo = 42;","err_mask":""},{"out":"bless( {sign => \"+inf\",value => [0],_p => undef,_a => undef}, 'Math::BigInt' )","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; inf"},{"out_mask":"Ã¿","out":"1","err":"","code":"use strict; \"-inf\"<0","err_mask":""},{"err":"","out":"","out_mask":"","err_mask":"","code":"use strict; \"inf\"<0"},{"code":"use strict; \"inf\">0","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"out":"Inf","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; \"inf\"+0"},{"err_mask":"","code":"use strict; my $x; if ( $x = \"x\\b\" ) { print \"_$x_\" }","out":"ERROR: Global symbol \"$x_\" requires explicit package name (did you forget to declare \"my $x_\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use v5.21; use feature qw(refaliasing);use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); foreach \\%hash (@a) {print Dumper(%hash);}","err":"","out":"ERROR: Can't use single ref constructor for loop variable at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Missing $ on loop variable at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use v5.21; use feature qw(refaliasing);use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); foreach my \\%hash (@a) {print Dumper(%hash);}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$VAR1 = 'bar';\n$VAR2 = 2;\n$VAR3 = 'foo';\n$VAR4 = 1;\n$VAR1 = 'problems';\n$VAR2 = 99;\n$VAR3 = 'bitches';\n$VAR4 = 0;\n","code":"use strict; use v5.21; use feature qw(refaliasing);use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); my %hash; foreach \\%hash (@a) {print Dumper(%hash);}","err_mask":""},{"err_mask":"","code":"use strict; use warnings; blasdsdasdsa->import","err":"","out":"","out_mask":""},{"err_mask":"","code":"use strict; use warnings; $_ = '@f@f@f'; s'@f'$b'gr; ","err":"","out":"$b$b$b","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; [ grep defined, @{+{a => \"b\", c => \"d\", e => \"f\"}}{qw/a b c/} ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"b\",\"d\"]"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: \"use\" not allowed in expression at (eval 1) line 1, at end of line\nsyntax error at (eval 1) line 1, near \"use strict use warnings\"\n","code":"use strict use warnings; h->{two}();  sub h { +{ one => sub { 1 }, two => sub { 2 } } }","err_mask":""},{"err":"","out":"ERROR: Can't use bareword (\"h\") as a HASH ref while \"strict refs\" in use at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; h->{two}();  sub h { +{ one => sub { 1 }, two => sub { 2 } } }"},{"out_mask":"Ã¿","out":"2","err":"","code":"use strict; use warnings; h()->{two}();  sub h { +{ one => sub { 1 }, two => sub { 2 } } }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Bareword \"Inf\" not allowed while \"strict subs\" in use at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use strict; use warnings; +Inf","err_mask":""},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; [ \"+inf\" > 0 ]"},{"out":"Inf","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; \"+Inf\"+0"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"use strict; use warnings; [ \"-Inf\" > 0 ]","err_mask":""},{"err_mask":"","code":"use strict; use warnings; [ \"+Inf\" > 0 ]","err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; [ \"+Inx\" > 0 ]","out":"[\"\"]","err":"Argument \"+Inx\" isn't numeric in numeric gt (>) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out":"[42]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $a = 42; my $z = 42; [ sort { $z <=> $b } 42 ]"},{"err_mask":"","code":"use strict; use warnings; my $a = 42; [ sort ]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out_mask":"","out":"","err":"Useless use of sort in scalar context at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $a = 42; sort ","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[42]","err":"\"my $a\" used in sort comparison at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $a = 42; [ sort { $a <=> $b } 42 ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; my $a = 42; [ sort { $z <=> $b } 42 ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$z\" requires explicit package name (did you forget to declare \"my $z\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"","err":"Use of uninitialized value in array element at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; my @a; $a[undef]"},{"err":"","out":"ERROR: Can't use an undefined value as a HASH reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $foo; if ( %$foo ) { 1; }"},{"err_mask":"","code":"use strict; use warnings; my $foo; if ( $foo and %$foo ) { 1; }","out":"","err":"","out_mask":""},{"err_mask":"","code":"use strict; use warnings; my $h = {a => \"b\", c => \"d\", e => \"f\"}; my $str = join \",\", grep defined, @$h{qw/a b c/}; print $str;","err":"","out":"b,d","out_mask":"Ã¿Ã¿Ã¿"},{"code":"use strict; use warnings; my $str = join \",\", grep defined, @{+{a => \"b\", c => \"d\", e => \"f\"}}{qw/a b c/}; print $str;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"b,d"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"use strict; use warnings; my $x = 42; [ defined &$x ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"Use of uninitialized value $x in subroutine dereference at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $x; [ defined &$x ]","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; my $x; [ &$x ]","out":"ERROR: Can't use an undefined value as a subroutine reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use strict; use warnings; [ \"nan\" > 0 ]","err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":"","code":"use strict; use warnings; [ \"Nan\" > 0 ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"\"]","code":"use strict; use warnings; [ \"NaN\" > 0 ]","err_mask":""},{"out":"[\"\"]","err":"Argument \"nann\" isn't numeric in numeric gt (>) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; [ \"nann\" > 0 ]"},{"code":"use strict; use warnings; [ 'NaN' + 'sNaN' ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"NaN\"]"},{"code":"use strict; use warnings; [ 'NaN' + 'sNaN' + 55]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"NaN\"]","err":""},{"out":"[\"asdf\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; open( my($fh), \"<\", \\\"asdf\" ); [ <$fh> ];"},{"code":"use strict; use warnings; open( my($fh), \"<\", \\\"asdf\" ); [ <$fh>, scalar <$fh> ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"asdf\",undef]","err":""},{"out":"[\"asdf\",undef,undef]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; open( my($fh), \"<\", \\\"asdf\" ); [ <$fh>, scalar <$fh>, scalar <$fh> ];"},{"err":"","out":"[10,9,8,7,6,5,4,3,2,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; our $a = -1; [ sort {  $b <=> $a } 1..10 ]"},{"err_mask":"","code":"use strict; use warnings; our $a = 42; [ sort {  $b <=> $a } 1..10 ]","err":"","out":"[10,9,8,7,6,5,4,3,2,1]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"blah","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; our $VERSION = 'blah';"},{"code":"use strict;  use warnings; sub bar { 42 } print \"Return $foo\" if my $foo = bar;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$foo\" requires explicit package name (did you forget to declare \"my $foo\"?) at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use strict; use warnings; sub h { +{ one => sub { 1 }, two => sub { 2 } } }  h->{two}();  ","out":"2","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"use strict; use warnings; sub TIEHANDLE { bless [] }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ print FH 'adfasdf' ];","out":"In autoload!In autoload!","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"In autoload!In autoload!","err":"","code":"use strict; use warnings; sub TIEHANDLE { bless [] }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar readline FH ];","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$AUTOLOAD\" requires explicit package name (did you forget to declare \"my $AUTOLOAD\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; sub TIEHANDLE { bless [] }; sub AUTOLOAD { print \"In autoload! $AUTOLOAD\"; 42 }; tie *FH, 'main'; [ print FH 'adfasdf' ];","err_mask":""},{"code":"use strict; use warnings; sub TIEHANDLE { bless [] }; sub READLINE { \"asdf\" }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar readline FH ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"asdf\"]In autoload!","err":""},{"code":"use strict; use warnings; use autodie; open( my($fh), \"<\", \\\"asdf\" ); [ <$fh> ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate autodie.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use strict; use warnings; $VERSION = 'blah';","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Global symbol \"$VERSION\" requires explicit package name (did you forget to declare \"my $VERSION\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"ERROR: Can't locate Test/More.pm:   (null): Too many open files at (eval 1) line 2, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 2, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Test::More"},{"err_mask":"","code":"use Text::Soundex;","out":"ERROR: Can't locate Text/Soundex.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use Text::SoundEx;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate Text/SoundEx.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate Tie/Handle.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use Tie::Handle; tie *FH, 'Tie::Handle'; ","err_mask":""},{"code":"use Try::Tiny; try {die \"baz\";} catch {die \"foo\"}; die \"bar\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: foo at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"ERROR: foo at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Try::Tiny; try {die \"baz\";} catch {die \"foo\"} finally { \"bar\"};"},{"err":"Execution of finally() block CODE(0x36d79c8) resulted in an exception, which *CAN NOT BE PROPAGATED* due to fundamental limitations of Perl. Your program will continue as if this event never took place. Original exception text follows:\n\nbar at (eval 1) line 1, <STDIN> line 1.\n\n","out":"ERROR: foo at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use Try::Tiny; try {die \"baz\";} catch {die \"foo\"} finally { die \"bar\"};"},{"out":"hoyl shit that brokeERROR: foo at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use Try::Tiny; try {die \"baz\";} catch {die \"foo\"} finally { print \"hoyl shit that broke\"};"},{"out_mask":"","err":"","out":"","code":"use URI::Encode qw/uri_encode/;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"%3Carg%3E","code":"use URI::Encode qw/uri_encode/; uri_encode \"<arg>\", {\"encode_reserved\", 1}; ","err_mask":""},{"out":"LWP::Authen::Digest","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use URI::Encode qw/uri_encode/; uri_encode \"LWP::Authen::Digest\""},{"err_mask":"","code":"use URI::Encode; [ URI::Encode::uri_encode \"test\", {encode_reserved=>1} ];","out":"[\"test\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use URI; URI->new('/product/IDHEREFUCKER');","out":"ERROR: Can't locate URI/_generic.pm:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/site_perl/5.24.0/URI.pm line 104, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use URI; URI->new(\"www.ebay.com\");","out":"ERROR: Can't locate URI/_generic.pm:   (null): Too many open files at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/site_perl/5.24.0/URI.pm line 104, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","out":"0","err":"","code":"use utf8; - - 'â§'","err_mask":""},{"out":"ERROR: Can't modify constant item in transliteration (tr///) at (eval 1) line 1, near \"y Ã¢ÂÂ¢ a-z: Ã¢ÂÂ¢ n-za-m Ã¢ÂÂ¢ r \"\nsyntax error at (eval 1) line 1, near \"y Ã¢ÂÂ¢ a-z: Ã¢ÂÂ¢ n-za-m Ã¢ÂÂ¢ r \"\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; [ 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z: â¢ n-za-m â¢ r ]"},{"out":"[\"trg uggc //vtabenagqrfvtare.pbz/wncu.ugzy\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; [ 'get http://ignorantdesigner.com/japh.html' =~ y â¢ a-z: â¢ n-za-m â¢r ]"},{"out":"[\"\\0\\0\\0\\0\\0\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; $l = \"fooso\"; [ $l & chr(0x80)x(length $l) ]"},{"err":"","out":"[\"\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; $l = \"fooso\"; [ $l =~tr/[\\0-\\127]//cdr  ]"},{"err":"","out":"[\"fooso\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; $l = \"fooso\"; [ $l =~tr/[\\0-\\127]//dr  ]"},{"err_mask":"","code":"use utf8; $l = \"fooso\"; [ $l =~tr/\\0-\\127//dr  ]","err":"","out":"[\"fooso\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"fooso\"]","code":"use utf8; $l = \"fooso\"; [ $l =~tr/[\\0-\\127]//r  ]","err_mask":""},{"out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; $l = \"fooso\"; [ $l =~tr/\\0-\\225//dr  ]"},{"code":"use utf8; $l = \"fooso\"; [ $l =~tr/\\0-\\250//dr  ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"err_mask":"","code":"use utf8; my $ aÍ¾ print;","err":"","out":"ERROR: Unrecognized character \\x{37e}; marked by <-- HERE after f8; my $ a<-- HERE near column 107 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use utf8; my $aÍ¾ print;","out":"ERROR: Unrecognized character \\x{37e}; marked by <-- HERE after tf8; my $a<-- HERE near column 106 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"ERROR: Unrecognized character \\x{2019}; marked by <-- HERE after f8; print <-- HERE near column 107 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; print â42â"},{"err_mask":"","code":"use utf8; q â¤â Happy Valentine's Day, #perl â¤â ","err":"","out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after y, #perl Ã¢ÂÂ¤<-- HERE near column 136 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use utf8; q â¤â Happy Valentine's Day, #perl â¤â â¤âr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after y, #perl Ã¢ÂÂ¤<-- HERE near column 136 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after y, #perl Ã¢ÂÂ¤<-- HERE near column 136 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; q â¤â Happy Valentine's Day, #perl â¤â  s â¤ â¤âr"},{"out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after y, #perl Ã¢ÂÂ¤<-- HERE near column 136 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; q â¤â Happy Valentine's Day, #perl â¤â  s â¤ â¤â â¤r"},{"code":"use utf8; q â¤â Happy Valentine's Day, perl â¤ ;â  s â¤ â¤â â¤r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after , perl Ã¢ÂÂ¤ ;<-- HERE near column 137 at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"use utf8; q â¤â Happy Valentine's Day, perl â¤;â  s â¤ â¤â â¤r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after y, perl Ã¢ÂÂ¤;<-- HERE near column 136 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"code":"use utf8; q â¤â Happy Valentine's Day, perl â¤â  s â¤ â¤â â¤r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after ay, perl Ã¢ÂÂ¤<-- HERE near column 135 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use utf8; q ð âº Perl \\o/ âº  ð","out":" Ã¢ÂÂº Perl \\o/ Ã¢ÂÂº  ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use utf8; quotemeta 'Ã·'","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"\\Ã·","err":""},{"out":"ÃÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; quotemeta \"Ç\""},{"err_mask":"","code":"use utf8; say length \"ïº\"","err":"","out":"1\n","out_mask":"Ã¿Ã¿"},{"code":"use utf8; \"Ç\" =~ s/([^A-Za-z_0-9])/\\\\$1/gr","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"\\ÃÂ","err":""},{"out":"\\ÃÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; \"Ç\" =~ s/([^A-Za-z_0-9])/\\\\$1/r"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x{2764}; marked by <-- HERE after perl Ã¢ÂÂ¤Ã¢ÂÂ Ã¢ÂÂ¤ <-- HERE near column 140 at (eval 1) line 1, <STDIN> line 1.\n","code":"use utf8; s â¤â Happy Valentine's Day, #perl â¤â â¤ â¤âr","err_mask":""},{"err_mask":"","code":"use utf8; s â¤â Happy Valentine's Day, #perl â¤â â¤âr","out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after #perl Ã¢ÂÂ¤Ã¢ÂÂ Ã¢ÂÂ¤<-- HERE near column 139 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x{200e}; marked by <-- HERE after #perl Ã¢ÂÂ¤Ã¢ÂÂ Ã¢ÂÂ¤<-- HERE near column 139 at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use utf8; s â¤â Happy Valentine's Day, #perl â¤â â¤â â¤âr","err_mask":""},{"err_mask":"","code":"use utf8; use Encode; my $z = 'â';  [ length($z), length(encode 'utf8', $z) ]","out":"[1,3]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use utf8; use warnings; sub z { print shift }  z('â´')","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã¢ÂÂ´","err":"Wide character in print at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"use utf8; use warnings; sub z { substr shift, 1, 1 }  z('â´')","err":"","out":"","out_mask":""},{"err_mask":"","code":"use v5.21; 0.deadbeefp2","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"0.deadbeefp2\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"0.deadbeefp2\n\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use v5.21; $a = 0.deadbeefp2"},{"err_mask":"","code":"use v5.21; ($a, $b, (undef) x 3, $c) = (1..10); [$a, $b, $c]","err":"","out":"[1,2,6]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Can't declare repeat (x) in \"my\" at (eval 1) line 1, near \") =\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use v5.21; my ($a, $b, (undef) x 3, $c) = (1..10); [$a, $b, $c]"},{"err_mask":"","code":"use v5.21; use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); for my \\%hash (@a) {print Dumper(%hash);}","err":"","out":"ERROR: Missing $ on loop variable at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use v5.21; use feature qw(refaliasing);use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); foreach my \\%hash (@a) {print Dumper(%hash);}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Missing $ on loop variable at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"use v5.21; use feature qw(refaliasing);use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); for \\%hash (@a) {print Dumper(%hash);}","out":"$VAR1 = 'bar';\n$VAR2 = 2;\n$VAR3 = 'foo';\n$VAR4 = 1;\n$VAR1 = 'problems';\n$VAR2 = 99;\n$VAR3 = 'bitches';\n$VAR4 = 0;\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Missing $ on loop variable at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use v5.21; use feature qw(refaliasing);use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); for my \\%hash (@a) {print Dumper(%hash);}"},{"code":"use v5.22; use Data::Dumper; my @a = ({foo => 1, bar => 2}, {problems => 99, bitches => 0}); for my \\%hash (@a) {print Dumper(%hash);}","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Missing $ on loop variable at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"$b$b$b","code":"use warnings; $_ = '@f@f@f'; s'@f'$b'gr; ","err_mask":""},{"err":"The signatures feature is experimental at (eval 1) line 1, <STDIN> line 1.\n","out":"3","out_mask":"Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; foo(3); sub foo(@) { print @_ }"},{"out_mask":"Ã¿","out":"3","err":"The signatures feature is experimental at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; foo(3); sub foo($) { print @_ }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; \"foo\" ~~ \"Bar\"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"\"Bar\":\"\n","err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; \"foo\" ~~ \"Bar\":","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; +{ foo => bar => 'ber' }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"Odd number of elements in anonymous hash at (eval 1) line 1, <STDIN> line 1.\n","out":"{ber => undef,foo => \"bar\"}"},{"out_mask":"Ã¿","out":"1","err":"Use of uninitialized value $key in hash slice at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; @hash{$key} = [ @list ];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; my $foo = 1; my $foo_bar = 2; \"$foo\\_bar\"","out":"1_bar","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnings; my $foo = 1; my $foobar = 2; \"$foo\\bar\"","err":"","out":"1\bar","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my ($foo) if 0;","err":"Deprecated use of my() in false conditional at (eval 1) line 1, <STDIN> line 1.\n","out":"0","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"T}}","err":"","code":"use warnings; my $j = 'Foo'; $j =~ tr/\\x20-\\xff/\\xff10-\\xffff/; binmode STDOUT; print $j;","err_mask":""},{"code":"use warnings; my $j = 'Foo'; $j =~ tr/\\x20-\\xff/\\xff30-\\xffff/; binmode STDOUT; print $j;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"T}}"},{"out":"[]","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"use warnings; my ($l, $r) = ('', ''); $l .= chr($_+0x20), $r .= chr($_+0xff00) for 0x00..0x50; binmode STDOUT; [ eval qq{ 'Just another Unicode hacker,' =~ tr[$l][$r]r } ];"},{"out_mask":"","err":"","out":"","code":"use warnings; my ($l, $r) = ('', ''); $l .= chr($_+0x20), $r .= chr($_+0xff00) for 0x00..0x50; binmode STDOUT; eval qq{ 'Just another Unicode hacker,' =~ tr[$l][$r]r };","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Transliteration pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my ($l, $r) = ('', ''); $l .= chr($_+0x20), $r .= chr($_+0xff00) for 0x00..0x50; binmode STDOUT; eval qq{ 'Just another Unicode hacker,' =~ tr[$l][$r]r }; $@","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ï¼ªustï¼ï½ï½ï½tï½ï½rï¼ï¼µï½ï½ï½ï½ï½ï½ï¼ï½ï½ï½ï½ï½rï¼","code":"use warnings; my ($l, $r) = ('', ''); $l .= chr($_+0x20), $r .= chr($_+0xff00) for 0x00..0x50; binmode STDOUT; eval qq{ 'Just another Unicode hacker,' =~ tr[\\Q$l\\E][\\Q$r\\E]r };","err_mask":""},{"err_mask":"","code":"use warnings; my ($l, $r) = ('', ''); $l .= chr($_+0x20), $r .= chr($_+0xff00) for 0x00..0x50; binmode STDOUT; eval qq{ 'Just another Unicode hacker,' =~ tr[\\Q$l\\E][\\Q$r\\E]r }; $@","out":"","err":"","out_mask":""},{"err":"","out":" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnop","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; my ($l, $r) = ('', ''); $l .= chr($_+0x20), $r .= chr($_+0xff00) for 0x00..0x50; binmode STDOUT; $l"},{"err_mask":"","code":"use warnings; my ($l, $r) = ('', ''); $l .= chr($_+0x20), $r .= chr($_+0xff00) for 0x00..0x50; binmode STDOUT; $r","out":"ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ï¼ ï¼¡ï¼¢ï¼£ï¼¤ï¼¥ï¼¦ï¼§ï¼¨ï¼©ï¼ªï¼«ï¼¬ï¼­ï¼®ï¼¯ï¼°ï¼±ï¼²ï¼³ï¼´ï¼µï¼¶ï¼·ï¼¸ï¼¹ï¼ºï¼»ï¼¼ï¼½ï¼¾ï¼¿ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½ï½","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my $u = 'ABC'; say $u =~ s/./pos $u/ger;","err":"Use of uninitialized value in substitution iterator at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in substitution iterator at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value in substitution iterator at (eval 1) line 1, <STDIN> line 1.\n","out":"\n","out_mask":"Ã¿"},{"code":"use warnings; my @x = (1...4); undef @x;","err_mask":"","out_mask":"","err":"","out":""},{"out_mask":"Ã¿","err":"","out":"0","code":"use warnings; my $x; $x++;","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"use warnings; my $x; ++$x;","err_mask":""},{"code":"use warnings; my $x; $x -= 4;","err_mask":"","out_mask":"Ã¿Ã¿","out":"-4","err":""},{"out_mask":"Ã¿","err":"","out":"4","code":"use warnings; my $x; $x .= 4;","err_mask":""},{"code":"use warnings; my $x; $x += 4;","err_mask":"","out_mask":"Ã¿","err":"","out":"4"},{"out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"Use of uninitialized value $x in concatenation (.) or string at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; my $x; $x . 'foo'","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; my $x; $x = $x - 4;","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿","err":"Use of uninitialized value $x in subtraction (-) at (eval 1) line 1, <STDIN> line 1.\n","out":"-4"},{"code":"use warnings; our $foo; sub foo { my $x = shift; BEGIN { $foo = \\$x }; $$foo }; [ foo(1), foo(2) ];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,1]","err":"Variable \"$x\" will not stay shared at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; our $foo; sub foo { my $x = shift; BEGIN { $foo = \\$x }; ${ &{'FOO'}() } }; [ foo(1), foo(2) ];","err":"Variable \"$x\" will not stay shared at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: Undefined subroutine &main::FOO called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; sub chomp { \"blah\" }; [ chomp ]","err":"Ambiguous call resolved as CORE::chomp(), qualify as such or use & at (eval 1) line 1, <STDIN> line 1.\nUse of uninitialized value $_ in scalar chomp at (eval 1) line 1, <STDIN> line 1.\n","out":"[0]","out_mask":"Ã¿Ã¿Ã¿"},{"code":"use warnings; sub foo { my $x = shift; use constant FOO => \\$x; ${ &{'FOO'}() } }; [ foo(1), foo(2) ];","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,1]","err":"Variable \"$x\" will not stay shared at (eval 1) line 1, <STDIN> line 1.\n"},{"err":"","out":"In autoload! main::PRINTIn autoload! main::DESTROY","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use warnings; sub TIEHANDLE { bless [] }; sub AUTOLOAD { print \"In autoload! $AUTOLOAD\"; 42 }; tie *FH, 'main'; [ print FH 'adfasdf' ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã¢ÂÂ´","code":"use warnings; sub z { print shift }  z('â´')","err_mask":""},{"err_mask":"","code":"use warnings; sub z { }  z('â´')","err":"","out":"","out_mask":""},{"out_mask":"","out":"","err":"","code":"use warnings; use experimental 'smartmatch'; \"foo\" ~~ \"Bar\"","err_mask":""},{"out_mask":"","err":"","out":"","code":"use warnings; use experimental 'smartmatch'; \"foo\" ~~ \"Bar\";","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use experimental 'smartmatch'; \"foo\" ~~ \"Bar\"; \"All ok\"","out":"All ok","err":"Useless use of smart match in void context at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't use an undefined value as an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; use strict; use experimental 'postderef'; my $x; my @z = @{ $x || [] }; $x->@*","err_mask":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; use strict; use experimental 'postderef'; my $x;  @{ $x || [] }; $x->@*","err":"Useless use of a variable in void context at (eval 1) line 1, <STDIN> line 1.\n","out":"ERROR: Can't use an undefined value as an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"use warnngs; my $foo = 1; my $foo_bar = 2; \"$foo\\_bar\"","err":"","out":"ERROR: Can't locate warnngs.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"; ;;;;;;;;;;;;;;;;;;v","err_mask":"","out_mask":"Ã¿","err":"","out":"v"},{"out_mask":"","err":"","out":"","code":"$V","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"\u0000\u0001","err":"","code":"\"\".(v0.01)","err_mask":""},{"err":"","out":"\u0000\u0001","out_mask":"Ã¿Ã¿","err_mask":"","code":"v0.01"},{"err":"","out":"\u0000\u0001","out_mask":"Ã¿Ã¿","err_mask":"","code":"v0.1"},{"err_mask":"","code":"v.255","out":"v255","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"v3232.95.3232","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã Â²Â _Ã Â²Â ","err":""},{"code":"v5","err_mask":"","out_mask":"Ã¿","err":"","out":"\u0005"},{"err_mask":"","code":"v5 ^ 2","err":"","out":"2","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[*DB::args,*DB::sub]","code":"[values %DB:: ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"blah","code":"$VERSION = 'blah';","err_mask":""},{"err_mask":"","code":"$w = 3; $h = 4; @out = ( (0) x $w ) x $h; ","err":"","out":"12","out_mask":"Ã¿Ã¿"},{"out":"[0,0,0,0,0,0,0,0,0,0,0,0]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$w = 3; $h = 4; @out = ( (0) x $w ) x $h; \\@out"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"WÃ¢ÂÂÃÂ¢ÃÂÃÂ","code":"\"W\\x{200d}â\"","err_mask":""},{"out_mask":"Ã¿Ã¿","out":"+x","err":"","code":"- - 'x'","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"-3.32222097054746e-13","err":"","code":"$x = 0; for (1..1000) {$x += 0.01;}; for (1..2000) {$x -= 0.005}; $x","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,undef,1]","code":"@x = (1, 1, 1); delete @x[@x]; \\@x","err_mask":""},{"code":"$x = (1, (2, 3), 5); ","err_mask":"","out_mask":"Ã¿","err":"","out":"5"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef,undef,3]","code":"@x = (1, 2, 3); delete @x[@x]; \\@x","err_mask":""},{"out":"Ã°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{1f31b}\\x{200D}\\x{1f31c}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂÃ¢ÂÂÃ°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ","err":"","code":"\"\\x{1f31b}\\x{200D}\\x{1f51c}\\x{200D}\\x{1f31c}\"","err_mask":""},{"out":"Ã°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{1f31c}\\x{200D}\\x{1f31b}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂ¦Ã¢ÂÂÃ¢ÂÂ¤Ã¯Â¸ÂÃ¢ÂÂÃ°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ¨","err":"","code":"\"\\x{1F466}\\x{200D}\\x{2764}\\x{FE0F}\\x{200D}\\x{1F48B}\\x{200D}\\x{1F468}\"","err_mask":""},{"out":"Ã°ÂÂÂ¨Ã¢ÂÂÃ¢ÂÂ¤Ã¯Â¸ÂÃ¢ÂÂÃ°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ©","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{1F468}\\x{200D}\\x{2764}\\x{FE0F}\\x{200D}\\x{1F48B}\\x{200D}\\x{1F469}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂ©Ã¢ÂÂÃ¢ÂÂ¤Ã¯Â¸ÂÃ¢ÂÂÃ°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ¨","err":"","code":"\"\\x{1F469}\\x{200D}\\x{2764}\\x{FE0F}\\x{200D}\\x{1F48B}\\x{200D}\\x{1F468}\"","err_mask":""},{"code":"\"\\x{1F469}\\x{200D}\\x{2764}\\x{FE0F}\\x{200D}\\x{1F48B}\\x{200D}\\x{1F469}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂ©Ã¢ÂÂÃ¢ÂÂ¤Ã¯Â¸ÂÃ¢ÂÂÃ°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ©","err":""},{"err":"","out":"Ã°ÂÂÂ¸Ã¢ÂÂÃ°ÂÂÂ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{1F478}\\x{200D}\\x{1f31b}\""},{"out":"Ã°ÂÂÂ¸Ã¢ÂÂÃ¢ÂÂ¤Ã¯Â¸ÂÃ¢ÂÂÃ°ÂÂÂÃ¢ÂÂÃ°ÂÂÂ¸","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{1F478}\\x{200D}\\x{2764}\\x{FE0F}\\x{200D}\\x{1F48B}\\x{200D}\\x{1F438}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã°ÂÂÂ©","err":"","code":"\"\\x{1f4a9}\"","err_mask":""},{"err_mask":"","code":"[\"\\x{1f4a9}\"]","err":"","out":"[\"\\x{1f4a9}\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"Ã°ÂÂÂ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{1f51c}\""},{"out_mask":"","out":"","err":"","code":"@x = (2, 1, 2); delete @x[2, 1, 2]; ","err_mask":""},{"err_mask":"","code":"@x = (2, 1, 2); delete @x[2, 1, 2]; \\@a","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"code":"@x = (2, 1, 2); delete @x[2, 1, 2]; \\@x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[2]","err":""},{"err":"","out":"[2]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"@x = (2, 1, 2); delete @x[2, 2, 1]; \\@x"},{"out_mask":"","out":"","err":"","code":"@x = (2, 1, 2); delete @x[@x];","err_mask":""},{"out":"[2,1,2]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x = (2, 1, 2); delete @x[~~@x]; \\@x"},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"@x = (2, 1, 2); delete @x[@x]; \\@x"},{"err":"","out":"[4,5,6]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"@x = (4, 5, 6); delete @x[@x]; \\@x"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"ÃÂ","err":"","code":"\"\\x{749}\"","err_mask":""},{"code":"$x = []; bless $x, []; ref $x","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Attempt to bless into a reference at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"\"\\x{D000}\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã­ÂÂ"},{"code":"[ 'X' =~ /(?i)x/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[1]"},{"err_mask":"","code":"$_ = 'XMLParser'; join('_', map {lc} grep {length} split /([A-Z]{1}(?![A-Z])/)","err":"","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/( <-- HERE [A-Z]{1}(?![A-Z])/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"$_ = 'XMLParser'; join('_', map {lc} grep {length} split /([A-Z]{1}(?![A-Z]))/)","out":"xml_p_arser","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"xmlparser","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'XMLParser'; join('_', map {lc} grep {length} split /([A-Z]{1}(?![A-Z]*))/)"},{"err":"","out":"x_m_l_parser","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'XMLParser'; join('_', map {lc} grep {length} split /([A-Z]{1}[^A-Z]*)/)"},{"err":"","out":"ERROR: Unmatched ( in regex; marked by <-- HERE in m/( <-- HERE [A-Z]+(?=[^A-Z]*)/ at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_ = 'XMLParser'; join('_', map {lc} grep {length} split /([A-Z]+(?=[^A-Z]*)/)"},{"err_mask":"","code":"$_ = 'XMLParser'; join('_', map {lc} grep {length} split /([A-Z]+(?=[^A-Z]*))/)","err":"","out":"xmlp_arser","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"$_ = 'XMLParser'; join('_', map {lc} grep {length} split /([A-Z]+[^A-Z]*)/)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"xmlparser","err":""},{"err_mask":"","code":"$_ = 'XMLParser'; [split /([A-Z]{1}(?![A-Z]))/)]","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"/([A-Z]{1}(?![A-Z]))/)\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"XML\",\"P\",\"arser\"]","code":"$_ = 'XMLParser'; [split /([A-Z]{1}(?![A-Z]))/]","err_mask":""},{"err_mask":"","code":"$_ = 'XMLParser'; [split /([A-Z]*[^A-Z]*)/]","err":"","out":"[\"\",\"XMLParser\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[ 'XX' =~ /(?i)xx/]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":""},{"out_mask":"Ã¿Ã¿","out":"[]","err":"","code":"[ 'XX' =~ /((?i)x)x/]","err_mask":""},{"code":"'XYXYXYXY foos' =~ s/(XY)*.+","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Substitution pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿","out":"XY","err":"","code":"'XYXYXYXY foos' =~ s/(XY)+?\\1.+/$1/r","err_mask":""},{"err_mask":"","code":"'XYXYXYXY foos' =~ s/(XY)+\\1.+/$1/r","err":"","out":"XY","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"'XYXYXYXY foos' =~ s/(XY)+?\\1.+//r","out":"","err":"","out_mask":""},{"code":"'XYXYXYXY foos' =~ s/(XY)+\\1.+//r","err_mask":"","out_mask":"","err":"","out":""},{"code":"'XYXYXYXY foos' =~ s/(XY)+\\K\\1.+/$1/r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"XYXYXYXY"},{"out":"ERROR: Reference to nonexistent group in regex; marked by <-- HERE in m/(?:XY)+\\K\\1 <-- HERE .+/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"'XYXYXYXY foos' =~ s/(?:XY)+\\K\\1.+//r"},{"code":"'XYXYXYXY foos' =~ s/((?:XY))+\\K\\1.+//r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"XYXYXY"},{"code":"'XYXYXYXY foos' =~ s/((?:XY)+)\\K\\1.+//r","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"XYXY"},{"err_mask":"","code":"'XYXYXYXY foos' =~ s/(XY)*XY.+","out":"ERROR: Substitution pattern not terminated at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"0","code":"$x * $y // $z","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"\nERROR: Can't locate object method \"Some\" via package \"may\" (perhaps you forgot to load \"may\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"You know what I like about perl? It's the fact that this English sentence is perfectly parsable! Some may say: \"no way\", but I got deparse to prove it","err_mask":""},{"code":"$Ï = 42; say $Ï","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Unrecognized character \\x80; marked by <-- HERE after tures/; $Ã<-- HERE near column 93 at (eval 1) line 1, <STDIN> line 1.\n"},{"out":"ERROR: Incomplete expression within '(?[ ])' in regex; marked by <-- HERE in m/(?[()-! <-- HERE ])/ at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"/(?[()-!])/"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[8]","code":"[0b1010 & 0b1000]","err_mask":""},{"err_mask":"","code":"[0b11111100000]","err":"","out":"[2016]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"42.5833333333333","err":"","code":"1022/24","err_mask":""},{"err_mask":"","code":"(188982-183984)/1024","out":"4.880859375","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[20+4]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"[24]"},{"err_mask":"","code":"[5+6]","err":"","out":"[11]","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"","out":"","err":"","code":"BEGIN(){i or$[}","err_mask":""},{"code":"eval 'BEGIN(){i or$[}'","err_mask":"","out_mask":"","err":"","out":""},{"err_mask":"","code":"eval 'BEGIN(){i or$[}'; [5+6]","out":"[11]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"code":"($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9)); use List::Util qw/max/; max(1.0, $nan)","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","err":"","out":"NaN"},{"code":"($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9)); use List::Util qw/max/; max($nan, 1.0)","err_mask":"","out_mask":"Ã¿","err":"","out":"1"},{"err_mask":"","code":"[map {$_->[1] * 2 ** (32-$_->[0])} ([11, 1], [21, 2], [22, 4], [23, 127], [24, 479])]","err":"","out":"[2097152,4096,4096,65024,122624]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $line = \"This is my line.\"; $line;","out":"This is my line.","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $string = 'I<Literature|^hardcover^>'; if ($string ~= /I\\<(.+)\\|(.+)\\>/) { \"<i $2>$1</i>\"} else { \"fail\" }","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$string ~\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"<i ^hardcover^>Literature</i>","err":"","code":"my $string = 'I<Literature|^hardcover^>'; if ($string =~ /I\\<(.+)\\|(.+)\\>/) { \"<i $2>$1</i>\"} else { \"fail\" }","err_mask":""},{"code":"my $string = 'I<Literature|^hardcover^> Other text'; $string =~ /I\\<(.+)\\|(.+)\\>/<i $2>$1<\\/i>/; $string;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"$2>\"\n"},{"code":"my $string = 'I<Literature|^hardcover^> Other text'; $string =~ /I\\<(.+)\\|(.+)\\>/<i $2\\>$1<\\/i>/; $string;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, near \"\\>\"\n","err":""},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"}]\"\nMissing right curly or square bracket at (eval 1) line 1, at end of line\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = [{z => \\{foo=>1}]; $x;"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[{z => \\{foo => 1}}]","err":"","code":"my $x = [{z => \\{foo=>1}}]; $x;","err_mask":""},{"out":"{foo => 1}","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = [{z => \\{foo=>1}}]; $x->[0]{z}->$*;"},{"code":"pack('V' . 99999990);","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out_mask":"","out":"","err":"Out of memory!\npanic: fold_constants JMPENV_PUSH returned 2, <STDIN> line 1.\n"},{"code":"say \"Hello libreman.\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hello libreman.\n","err":""},{"code":"tan(0)","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"code":"use experimental 'signatures'; sub rindolf($message) {print \"There's a message for you sire: \", $message}; rindolf(\"HI!\");","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"There's a message for you sire: HI!","err":""},{"code":"use List::Util qw/reduce/; reduce {$a + $b} map {$_->[1] * 2 ** (32-$_->[0])} ([11, 1], [21, 2], [22, 4], [23, 127], [24, 479])","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2292992"},{"err":"","out":"ERROR: Can't locate List/Utils.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Utils qw/reduce/; reduce {$a + $b} map {$_->[1] * 2 ** (32-$_->[0])} ([11, 1], [21, 2], [22, 4], [23, 127], [24, 479])"},{"err":"","out":"ERROR: cot is not a valid POSIX macro at (eval 1) line 1\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use POSIX; [POSIX::cot(0)]"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"[0]","code":"use POSIX; [POSIX::tan(0)]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Hello world\n","err":"","code":"use strict; use warnings; my $sub = sub { print \"Hello world\\n\" }; &$sub;","err_mask":""},{"out":"sub { \"DUMMY\" }","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use strict; use warnings; my $sub = sub { print 'Hello world'; }; $sub;"},{"code":"$x[()[()]]","err_mask":"","out_mask":"","err":"","out":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"$."},{"err_mask":"","code":"$$","err":"","out":"18861","out_mask":"Ã¿Ã¿Ã¿Ã¿\u0000"},{"code":"0 && 1","err_mask":"","out_mask":"Ã¿","out":"0","err":""},{"err_mask":"","code":"$_ = '02 Maria';  my ( $n, $name ) = split ' '; my %h; push @{ $h{ $n } }, $name; \\%h","err":"","out":"{\"02\" => [\"Maria\"]}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"[0b00, 0b11, 0b01, 0b10]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[0,3,1,2]"},{"out_mask":"Ã¿","out":"0","err":"","code":"0 && print \"foo\"","err_mask":""},{"err_mask":"","code":"[1]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1e+20","code":"10**20","err_mask":""},{"out":"2","err":"","out_mask":"Ã¿","err_mask":"","code":"1 + 1"},{"out_mask":"Ã¿Ã¿","out":"27","err":"","code":"11+16","err_mask":""},{"code":"12*473","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"5676"},{"code":"1995 * .75","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1496.25"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[1,\"\"]","err":"","code":"@_=(1); [ defined(1), defined(shift) ]","err_mask":""},{"out":"NaN","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"1+nan"},{"err":"","out":"YES","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"@_ = (1); print 'YES' if( shift == undef )"},{"code":" 2 * @","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: syntax error at (eval 1) line 1, at EOF\n","err":""},{"err_mask":"","code":" 2 * 2","out":"4","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"220/8*4/60","err":"","out":"1.83333333333333","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"2 ** 3","err_mask":"","out_mask":"Ã¿","err":"","out":"8"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"46340.9000237371","code":"(2**32)/92682","err_mask":""},{"code":"[ 2.5 * 6 ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[15]","err":""},{"err_mask":"","code":"2 == ('a','b')","out":"","err":"","out_mask":""},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"2 == @{['a','b']}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.41421508789062","code":"(3/2)*(3/2)*(19/16)*(271/512)","err_mask":""},{"code":"34/26.81","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"1.26818351361432"},{"code":"473*12*.04","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"227.04"},{"code":"473*16","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"7568","err":""},{"code":"499/80","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"6.2375"},{"err_mask":"","code":"6/16","out":"0.375","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":" $_ = \"a[b]\"; [ \"a[b]\" =~ /$_/ ]","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":" $_ = \"a[b]\"; [ \"a[b]\" =~ /\\Q$_\\E/ ]"},{"code":"@ARGV = \"hello\"; [ shift ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"hello\"]","err":""},{"out":"","err":"","out_mask":"","err_mask":"","code":"a..z"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"â­Jâ®,â­uâ®râ­sâ®eâ­tâ®kâ­ â®câ­aâ®aâ­nâ®Hâ­oâ® â­tâ®Iâ­hâ®Dâ­eâ®Iâ­râ®Bâ­ â®/â­Pâ®lâ­eâ®r","code":"binmode STDOUT; $_ = \"Just another Perl/BIDI Hacker,\"; print \"\\x{202d}$1\\x{202e}$3\" while s/(.)(.*)(.)/$2/; # does this show up right for everyone?","err_mask":""},{"err_mask":"","code":"binmode STDOUT; 'Unicode can be confusing,' =~ tr[\\x20-\\x7f][\\x{3000}\\x{ff01}-\\x{ff5f}]r; # tr is better","err":"","out":"ï¼µï½ï½ï½ï½ï½ï½ãï½ï½ï½ãï½ï½ãï½ï½ï½ï½ï½ï½ï½ï½ï½ï¼","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"binmode \\*STDOUT, ':utf8'; print v3232.95.3232","out":"Ã Â²Â _Ã Â²Â ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"binmode STDOUT ':utf8'; print v3232.95.3232","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Missing comma after first argument to binmode function at (eval 1) line 1, at EOF\n","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã Â²Â _Ã Â²Â ","err":"","code":"binmode(STDOUT, ':utf8'); print v3232.95.3232","err_mask":""},{"out":"Ã Â²Â _Ã Â²Â \n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"binmode \\*STDOUT, ':utf8'; say v3232.95.3232"},{"err_mask":"","code":"binmode \\&STDOUT, ':utf8'; say v3232.95.3232","out":"ERROR: Not a GLOB reference at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"binmode STDOUT; v3232.95.3232","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"à² _à² "},{"out_mask":"Ã¿","err":"","out":"0","code":"do{...;\"abc\"} if 0;","err_mask":""},{"err":"","out":"ERROR: Unimplemented at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"do{...;\"abc\"} if 1;"},{"err_mask":"","code":"'$equation'","err":"","out":"$equation","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"'example@gmail.com' =~ m/[a-z0-9A-Z-_]+\\@[a-z0-9A-Z-_]+\\./","err_mask":""},{"err_mask":"","code":"\"fmekmftestdwadwad\" =~ m/test/i","out":"1","err":"","out_mask":"Ã¿"},{"code":"\"fmekmftestdwadwad\" =~ m/tesT/i","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"\"fmekmftestdwadwad\" =~ /tesT/i # \"m\" is optional with standard / / delimiters","out":"1","err":"","out_mask":"Ã¿"},{"err_mask":"","code":"'fnnny' =~ s/nn(?!n)/tt/r","err":"","out":"fntty","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"foo","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"'foo'"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"'foo&amp;bar' =~ /&amp;/;"},{"err_mask":"","code":"'foo bar' =~ s/(foo) bar/$1 $1/r","err":"","out":"foo foo","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"'&foo' =~ /\\b&foo/;"},{"err":"","out":"1","out_mask":"Ã¿","err_mask":"","code":"'&foo' =~ /&\\bfoo/;"},{"err":"","out":"","out_mask":"","err_mask":"","code":"$_++ for map $_, qw(hobbs mst)"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"x is wrongx is wrong","code":"for \\my @foo (['foo', 'foo'], ['foo', 'bar'], ['bar', 'foo'], ['bar', 'bar']) { my $correct = ($foo[0] ne 'foo' && $foo[1] ne 'foo');  my $x = !($foo[0] eq 'foo' && $foo[1] eq 'foo'); my $y = !($foo[0] eq 'foo' || $foo[1] eq 'foo');  print $correct == $x ? '' : 'x is wrong'; print $correct == $y ? '' : 'y is wrong'; }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]","code":"@_ = \"hello\"; [ shift ]","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"argleHASH(0x3b8be70)barARRAY(0x424cb88)foobar","err":"","code":"%h = (   foo => \"bar\",  bar => [ \"baz\" ],  argle => { \"blargle\" => \"blop\" } ); print %h","err_mask":""},{"out":"$VAR1 = {\n          'argle' => {\n                       'blargle' => 'blop'\n                     },\n          'bar' => [\n                     'baz'\n                   ],\n          'foo' => 'bar'\n        };\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%h = (   foo => \"bar\",  bar => [ \"baz\" ],  argle => { \"blargle\" => \"blop\" } ); use Data::Dumper; print Dumper \\%h"},{"err":"","out":"$VAR1 = 'argle';\n$VAR2 = {\n          'blargle' => 'blop'\n        };\n$VAR3 = 'bar';\n$VAR4 = [\n          'baz'\n        ];\n$VAR5 = 'foo';\n$VAR6 = 'bar';\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"%h = (   foo => \"bar\",  bar => [ \"baz\" ],  argle => { \"blargle\" => \"blop\" } ); use Data::Dumper; print Dumper %h"},{"err_mask":"","code":"index \"banana\", \"na\", -2","err":"","out":"2","out_mask":"Ã¿"},{"out":"BCDEFGHIJKLMNOPQRSTUVWXYZ[","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"join('','A'..'Z') =~ s/(.)/chr(ord($1)+1)/ger"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"STFU","code":"join\"\",map uc,map$_ eq\"i\"?\"u\":$_,(\"fist\"=~/./sg)[2,3,0,1] or \"Show Them Fury Unleashed\" or St. Thomas Franciscan University or shut the fuck up or subsiste sermonem statim","err_mask":""},{"err_mask":"","code":"kill 19, getppid","out":"0","err":"","out_mask":"Ã¿"},{"code":"length sprintf \"%b\", ~0","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"64"},{"out_mask":"","out":"","err":"","code":"`ls`","err_mask":""},{"code":"[ map prototype(\"CORE::$_\"), qw(sysopen truncate) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"*\\$\\$;\\$\",\"\\$\\$\"]","err":""},{"code":"$memper = '60.1'; if ( int $memper > 90 ) { print \"int($memper) is more than 90\"  }","err_mask":"","out_mask":"","out":"","err":""},{"err_mask":"","code":"$memper = 60.1; if ( int $memper > 90 ) { print \"int($memper) is more than 90\"  }","out":"","err":"","out_mask":""},{"err":"","out":"[\"1234567890abcdefghij1234567890\",\"1234567890bcdefghijk1234567890\",\"1234567890klmnopqrst1234567890\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my @array = (\"1234567890abcdefghij1234567890\", \"1234567890klmnopqrst1234567890\", \"1234567890bcdefghijk1234567890\");    my @sorted = sort { substr($a, 9, 10) cmp substr($b, 9, 10) } @array;  [ @sorted ] # seems to work for me"},{"out_mask":"","out":"","err":"","code":"my $a = sub{ shift == undef }; print \"YES\" if $a->( 1 );","err_mask":""},{"err_mask":"","code":"my $a = sub{ shift == undef }; print \"YES\" if $a->( 'AF' );","err":"","out":"YES","out_mask":"Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $copy; for my $foo (1) { $copy = $foo } [$copy]","out":"[1]","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"my $foo = 42; my $bar = \\$foo; local $$bar = 53;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't localize through a reference at (eval 1) line 1, <STDIN> line 1.\n"},{"code":"my $foo; for  $foo (1) { $copy = $foo } [$foo]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":"","code":"my $foo; for $foo (1) { ''; } [$foo]","err_mask":""},{"err":"","out":"[]","out_mask":"Ã¿Ã¿","err_mask":"","code":"my @foo; local $foo[0] = 1; \\@foo;"},{"err":"","out":"qr/wi\\(bb\\)le/u","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $foo = \"wi(bb)le\"; qr/\\Q$foo\\E/"},{"code":"my $hack_int = 42; [ !!( $hack_int ^ $hack_int ) ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","out":"[\"\"]","err":""},{"err_mask":"","code":"my $hack_int = 42; \"$hack_int\"; [ !!( $hack_int ^ $hack_int ) ]","out":"[\"\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"[1]","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"my $hack_str = \"42\"; [ !!( $hack_str ^ $hack_str ) ]"},{"out":"[\"Gwgh\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h = ( A => q(W), a => q(w), B => q(G), b => q(g), y => q(h) ); [join q(), map { $h{$_} } split //, q(Baby)]"},{"err":"","out":"26","out_mask":"Ã¿Ã¿","err_mask":"","code":"my %h = (a..z)"},{"err_mask":"","code":"my %h = a..z","err":"","out":"26","out_mask":"Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"my %h = (a..z); ${%h}"},{"err":"","out":"{\"how strange\" => \"is this, anyway?\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %h = ('a'..'z'); ${%h}{\"how strange\"} = \"is this, anyway?\"; \\%{%h};"},{"err_mask":"","code":"my %h = (a..z); ${%h}{\"how strange\"} = \"is this, anyway?\"; \\%{%h};","err":"","out":"{\"how strange\" => \"is this, anyway?\"}","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\"baz\",\"foo\",\"bar\"]","err":"","code":" my $h = {\"foo\" => 5, \"bar\" => 6, \"baz\" => 2}; [ sort { $h->{$a} <=> $h->{$b} } keys %$h ]","err_mask":""},{"err":"","out":"[\"bar\",\"baz\",\"foo\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":" my $h = {\"foo\" => 5, \"bar\" => 6, \"baz\" => 2}; [ sort keys %$h ]"},{"out_mask":"Ã¿","out":"1","err":"HASH(0x4ebab88) at (eval 1) line 1, <STDIN> line 1.\n","code":"my $h = {}; undef( %$h ); warn $h","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my %map = map +( $_ => chr(ord()+1) ), 'A'..'Z', 'a'..'z'; @map{qw/A a Z z/} = qw/Z z A a/; my $encoded = 'Aneehw hr zvdrnld!'; $encoded =~ s#(.)#$map{$1} // $1#ge; $encoded","err":"","out":"Zoffix is awesome!","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @names=[\"Bill\", \"Smith\", \"John\", \"Jane\"]; [$names[0][0]]","err":"","out":"[\"Bill\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my @nums = 1..10; [\\@nums]","err":"","out":"[[1,2,3,4,5,6,7,8,9,10]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"[1]","err":"","code":"my @nums = 1..10; [$nums[0]]","err_mask":""},{"err_mask":"","code":"my $s = sub{wantarray?'YES':'NO'}; $z='a'; my( $fh ) =  $s->()  ||  $s->(); print $fh;","err":"","out":"NO","out_mask":"Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","out":"YES","err":"","code":"my $s = sub{wantarray?'YES':'NO'}; $z='a'; my( $fh ) =  $z =~/^(\\d+)$/  ||  $s->(); print $fh;","err_mask":""},{"err":"","out":"[\"asdf\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"asdf\"; open(my $fh, \"+<\", \\$str) or die \"open: $!\"; [ <$fh> ]"},{"out_mask":"Ã¿Ã¿Ã¿","out":"foo","err":"","code":"my $str = \"foo\"; open my $fh, '<', \\$str; <$fh>","err_mask":""},{"out":"[\"\\x{2603}\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $str = \"\\x{2603}\"; $fh = IO::String->new($str) or die \"new: $!\"; [ <$fh> ]"},{"err_mask":"","code":"my $str = \"\\x{2603}\"; open(my $fh, \"+<\", \\$str) or die \"open: $!\"; [ <$fh> ]","out":"ERROR: open: Invalid argument at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"1 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"my $test_link = \"http://zombo.com/\"; my $re = q`(?^:[a-zA-Z][a-zA-Z0-9\\+]*):[\\;\\/\\?\\\\@\\&\\=\\+\\$\\,\\[\\]\\p{isAlpha}A-Za-z0-9\\-_\\.\\!\\~\\*\\'\\(\\)%][\\|\\;\\/\\?\\:\\@\\&\\=\\+\\$\\,\\[\\]\\p{isAlpha}A-Za-z0-9\\-_\\.\\!\\~\\*\\'\\(\\)%#]*`; $test_link =~ /$re/g && warn 1; $test_link =~ /$re/g && warn 2; "},{"code":"my $test = sub { say 'ran it' }; my $foo = \\&$test;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"sub { \"DUMMY\" }","err":""},{"err":"","out":"ran it\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $test = sub { say 'ran it' }; my $foo = &$test;"},{"err_mask":"","code":"my $t = v3232.95.3232;  [map ord, split //, $t]","err":"","out":"[3232,95,3232]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"my $t = v3232.95.3232; utf8::decode($t); $t","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã Â²Â _Ã Â²Â "},{"code":"my $t = v3232.95.3232; utf8::downgrade($t); [map ord, split // 4t]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"// 4\"\n"},{"code":"my $t = v3232.95.3232; utf8::downgrade($t); [map ord, split //, $t]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Wide character in subroutine entry at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err_mask":"","code":"my $t = v3232.95.3232; utf8::downgrade($t); $t","out":"ERROR: Wide character in subroutine entry at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"à² _à² ","err":"","code":"my $t = v3232.95.3232;  utf8::encode($t); binmode STDOUT; $t","err_mask":""},{"err_mask":"","code":"my $t = v3232.95.3232;  utf8::encode($t); binmode STDOUT, \":utf8\"; $t","err":"","out":"Ã Â²Â _Ã Â²Â ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $t = v3232.95.3232;  utf8::encode($t); [map ord, split //, $t]","out":"[224,178,160,95,224,178,160]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã Â²Â _Ã Â²Â ","err":"","code":"my $t = v3232.95.3232; utf8::encode($t); $t","err_mask":""},{"err_mask":"","code":"my $t = v3232.95.3232; utf::downgrade($t); $t","out":"ERROR: Undefined subroutine &utf::downgrade called at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err_mask":"","code":"my $t = v3232.95.3232; utf::encode($t); $t","err":"","out":"ERROR: Undefined subroutine &utf::encode called at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":" camel snake hummingbird hamster  1 2 3 4 ","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my %unstricthash = ( a => [ qw / 1 2 3 4 /] , b => [ qw/ camel snake  hummingbird hamster/ ]) ; for ( %unstricthash ) {  print  \" @{ $_ } \"  if (@{ $_ } )  }  ;"},{"code":"my $w = 'The'; my @r = \"The\\nend\" =~ /$w$end/msg; @r;","err_mask":"","out_mask":"Ã¿","out":"1","err":""},{"err_mask":"","code":"my $w = 'The'; my @r = \"The\\nend\" =~ /$w$end/msg; \\@r","out":"[\"The\"]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"1","err":"","out_mask":"Ã¿","err_mask":"","code":"my $w = 'The'; \"The\\nend\" =~ /$w$end/msg;"},{"err_mask":"","code":"my $w = 'The'; (\"The\\nend\" =~ /$w$end/msg);","out":"1","err":"","out_mask":"Ã¿"},{"code":"my $x = [1..10]; say $x->@[2,4]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿","out":"35\n","err":""},{"err":"","out":"lex\n","out_mask":"Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"my $x = \"lex\"; eval 'say $x'"},{"out":"80","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"    $     OMG     =     8_0;    $                 OMG"},{"out":"4","err":"","out_mask":"Ã¿","err_mask":"","code":"package Foo { sub index { ... } index('aaaao', 'o'); }"},{"err_mask":"","code":"package Foo; use strict; use warnings; our $VERSION = 'blah'; package main; say Foo->VERSION","err":"","out":"ERROR: Invalid version format (non-numeric data) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"","out_mask":"","err_mask":"","code":"package loose; sub import { shift; strict->unimport(@_) }; sub unimport { shift; strict->import(@_) }"},{"err_mask":"","code":"[pack 'NI', 12345, 12345]","err":"","out":"[\"\\0\\0000990\\0\\0\"]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"perl -e \"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"perl -e 'warn hey { \"wtf\" }'"},{"out_mask":"Ã¿","err":"","out":"1","code":"'Please identify via /msg NickServ identify <password>.' =~ /^(?:If this is your nickname, type|Please identify via|Type) \\/msg NickServ identify/","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"12F4bF78Fb11F1314Fb1617F19bF2223Fb26F2829Fb3132","code":"print\"F\"x!($_%3).b x!($_%5)||$_ for 1..32","err_mask":""},{"out":"hi","err":"","out_mask":"Ã¿Ã¿","err_mask":"","code":"print \"hi\""},{"code":"print \"I'm a Perl \", 5 + !!\"0\", \" program.\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"I'm a Perl 5 program."},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Just another Sort hacker,","err":"","code":"print sort { $|-- or -1 } 'ruJt tc,en hoetokarrasS h' =~ /./g","err_mask":""},{"err_mask":"","code":"print v3232.95.3232","out":"Ã Â²Â _Ã Â²Â ","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"","err":"","out_mask":"","err_mask":"","code":"print 'YES'  if( 1 == undef ) "},{"err_mask":"","code":"({qw/ a 1 b 2/})->{b} # kes","err":"","out":"2","out_mask":"Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"bar","code":"qw (foo bar);","err_mask":""},{"err":"","out":"ERROR: Unrecognized character \\x81; marked by <-- HERE after ; qw ÃÂyoÃ<-- HERE near column 99 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"qw ÌyoÌ"},{"err":"","out":"4","out_mask":"Ã¿","err_mask":"","code":"rindex \"banana\", \"na\""},{"err_mask":"","code":"say $$","err":"","out":"19904\n","out_mask":"Ã¿Ã¿Ã¿Ã¿\u0000Ã¿"},{"code":"say 0xFFFFFFFFFFFFFFFFF","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"2.95147905179353e+20\n"},{"code":"say 1 + 1","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"2\n"},{"err_mask":"","code":"say à¼¡ + à¼¢","err":"","out":"ERROR: Unrecognized character \\xE0; marked by <-- HERE after res/; say <-- HERE near column 95 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: Unrecognized character \\xE2; marked by <-- HERE after res/; say <-- HERE near column 95 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"say âÂ²"},{"out":"\n","err":"","out_mask":"Ã¿","err_mask":"","code":"say `ps ax`"},{"code":"say qâ42â;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Unrecognized character \\x80; marked by <-- HERE after ay qÃ¢ÂÂ42Ã¢<-- HERE near column 102 at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"b","out_mask":"Ã¿","err_mask":"","code":"scalar ('a','b')"},{"err":"","out":"00110110","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sprintf \"%08b\", 0x36"},{"code":"sprintf '%.18f', .025 + .05","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.075000000000000011","err":""},{"code":"sprintf '%.18f', .075","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"0.074999999999999997","err":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"110110","err":"","code":"sprintf \"%b\", 0x36","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"1.4142135623731","err":"","code":"sqrt(2)","err_mask":""},{"err":"","out":"92681.9000236832","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"sqrt(2)*(2 ** 16)"},{"err":"cannot handle ref type 15 at /home/ryan/perl5/perlbrew/perls/perlbot-5.24.0/lib/5.24.0/x86_64-linux/Data/Dumper.pm line 233, <STDIN> line 1.\n","out":"bless( , 'IO::File' )","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"*STDOUT{IO}"},{"err_mask":"","code":"$str = '2 floor'; $str =~ s/([0-9]*)\\bFlo*r/${1}00/i; say $str","err":"","out":"2 00\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"200 floor\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$str = '2 floor'; $str =~ s/([0-9]*)( +Flo*r)/${1}00$2/i; say $str"},{"err_mask":"","code":"$str = '2 floor'; $str =~ s/([0-9]*) +Flo*r/${1}00/i; say $str","out":"200\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":" ","out_mask":"Ã¿","err_mask":"","code":"s TT$ Donald Trump"},{"err_mask":"","code":"sub foo { \"bar\" }; goto +foo; print \"foo\"; bar: print \"bar\"","out":"bar","err":"","out_mask":"Ã¿Ã¿Ã¿"},{"code":"sub foo { \"bar\" }; goto +foo; say \"foo\"; bar: say \"bar\"","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿","err":"","out":"bar\n"},{"code":"sub foo :lvalue { print \"foo called\"; $tmp }; tie &foo, \"main\";","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"foo calledERROR: Can't locate object method \"TIESCALAR\" via package \"main\" at (eval 1) line 1, <STDIN> line 1.\n"},{"out_mask":"Ã¿Ã¿Ã¿","out":"abc","err":"","code":"sub foo { my $bar = \\@_; $bar->[0] = 'abc'; 'def' }; my $quux = 42; foo($quux); $quux;","err_mask":""},{"err":"","out":"42","out_mask":"Ã¿Ã¿","err_mask":"","code":"sub foo { my $bar = \\@_; local $_[0] = 'abc'; 'def' }; my $quux = 42; foo($quux); $quux;"},{"err_mask":"","code":"sub foo { my $bar = \\@_; local $bar->[0] = 'abc'; 'def' }; my $quux = 42; foo($quux); $quux;","err":"","out":"42","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"sub foo { my @x = (0,0,0); @x } [ [foo()], scalar foo() ]","err":"","out":"[[0,0,0],3]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Just another Perl hacker, ","err":"","code":"sub hacker'Perl{\"Perl @_,\"}sub another'Just{\"Just @_ \"}     Just another Perl hacker, ","err_mask":""},{"err_mask":"","code":"sub o { (!$_[0]) && (!$_[1]) } sub j { !( $_[0] && $_[1] ) }  sub p { !($_[0] || $_[1]) } [ map [o($_->[0], $_->[1]), j($_->[0], $_->[1]), p($_->[0], $_->[1])], [0, 0], [1, 0], [1, 1], [0, 1] ]","err":"","out":"[[1,1,1],[\"\",1,\"\"],[\"\",\"\",\"\"],[\"\",1,\"\"]]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿","err":"","out":"1","code":"substr(\"banana\", -2) =~ /na/","err_mask":""},{"code":"sub test { say 'ran it' }; my $test = *test; my $foo = \\&$test;","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"sub { \"DUMMY\" }","err":""},{"err_mask":"","code":"sub test { say 'ran it' }; my $test = *test; ( \\&$test ) -> ();","err":"","out":"ran it\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"sub TIEHANDLE { [] }; sub READLINE { \"asdf\" }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar readline FH ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[undef]"},{"err_mask":"","code":"use bigint; my ($k, $c) = (\"3\", \"37\"); say ((($k+0)**($c+0))-1);","err":"","out":"450283905890997362\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"450283905890996999\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use bigint; my ($k, $c) = (\"3\", \"37\"); say (($k**$c)-1);"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"450283905890997362\n","code":"use bigint; my ($k, $c) = (3, 37); say (($k**$c)-1);","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"672749994932560009201","err":"","code":"use bigint; print 11**20;","err_mask":""},{"code":"use experimental 'postderef'; my $z =[ 1..10]; $z->$#* # or this","err_mask":"","out_mask":"Ã¿","out":"9","err":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use experimental 'switch'; use warnings; given (1) { when (1) { print \"ok\"; } }","err":"given is experimental at (eval 1) line 1, <STDIN> line 1.\nwhen is experimental at (eval 1) line 1, <STDIN> line 1.\n","out":"ok","out_mask":"Ã¿Ã¿"},{"code":"use feature 'refaliasing'; my @a = (1, 2, 3); \\my (@b) = \\(@a); @b[2] = 5; [@a];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[1,2,5]"},{"out":"[1,2,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'refaliasing'; my @a = (1, 2, 3); \\my (@b) = \\(@a); @b[2] = 5; shift @b; [@a];"},{"out":"[2,5]","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'refaliasing'; my @a = (1, 2, 3); \\my @b = \\@a; @b[2] = 5; shift @b; [@a];"},{"err_mask":"","code":"use feature 'refaliasing'; my @a = (1, 2, 3); \\my (@b) = \\(@a); @b[2] = 5; shift @b; [@b];","err":"","out":"[2,5]","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[[1,2,3]]","code":"use feature 'refaliasing'; my $zoit = [1 .. 3]; \\my $narf = \\$zoit; [ $narf ]","err_mask":""},{"err_mask":"","code":"use feature 'refaliasing'; my $zoit = [1 .. 3]; my $narf = \\$zoit; say $narf;","err":"","out":"REF(0x3f85378)\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"ERROR: syntax error at (eval 1) line 1, near \"my \\\"\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use feature 'refaliasing'; my $zoit = [1 .. 3]; my \\$narf = \\$zoit; say $narf;"},{"err_mask":"","code":"use integer; my $x; for $x (1 .. 10 ) { say $x; }","err":"","out":"1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"{abz => [\"baz\",\"bza\"],abr => [\"bar\"],foo => [\"foo\",\"oof\"]}","err":"","code":"use List::Util qw(reduce); reduce { my $key = join '', sort split '', $b; +{ %$a, $key => [ @{$a->{$key}||[]}, $b ] } } {}, qw(foo oof bar baz bza)","err_mask":""},{"err":"","out":"ERROR: Can't locate List/Utils.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use List::Utils qw(reduce); reduce { my $key = join '', sort split '', $b; +{ %$a, $key => [ @{$a->{$key}||[]}, $b ] } } {}, qw(foo oof bar baz bza)"},{"err_mask":"","code":"use open qw(:std utf8); say v3232.95.3232","out":"ERROR: Can't locate open.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿","out":"42","err":"","code":"use overload '&{}' => sub { sub { 42 } }; (bless [])->();","err_mask":""},{"err_mask":"","code":"use overload '&{}' => sub { sub { 42 } }; my $foo = bless []; my $bar = bless [], 'baz'; [ $bar->$foo ]","err":"","out":"ERROR: Operation \"\"\"\": no method found, argument in overloaded package main at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿\u0000\u0000\u0000\u0000Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"main=ARRAY(0x3d29b88)\" via package \"baz\" at (eval 1) line 1, <STDIN> line 1.\n","err":"","code":"use overload '&{}' => sub { sub { 42 } }; my $foo = bless []; my $bar = bless [], 'baz'; no overloading; [ $bar->$foo ]","err_mask":""},{"err_mask":"","code":"use strict; my $foo  = () = 3; say $foo;","out":"1\n","err":"","out_mask":"Ã¿Ã¿"},{"code":"use strict; my( $foo ) = () = 3; say $foo;","err_mask":"","out_mask":"Ã¿","err":"","out":"\n"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$bar\" requires explicit package name (did you forget to declare \"my $bar\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; my $foo = $bar = 3;","err_mask":""},{"out_mask":"Ã¿Ã¿","err":"","out":"3\n","code":"use strict; my $foo = my $bar = 3; say $bar;","err_mask":""},{"err":"","out":"3\n","out_mask":"Ã¿Ã¿","err_mask":"","code":"use strict; my $foo = my $bar = 3; say $foo;"},{"err_mask":"","code":"use strict; my $foo  = my( $bar ) = 3; say $foo;","out":"1\n","err":"","out_mask":"Ã¿Ã¿"},{"code":"use strict; my( $foo  ) = my( $bar ) = 3; say $foo;","err_mask":"","out_mask":"Ã¿Ã¿","err":"","out":"3\n"},{"err_mask":"","code":"use strict; my $w = 'The'; my @r = \"The\\nend\" =~ /$w$(?:)end/msg; \\@r","err":"","out":"[]","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"use strict; my $w = 'The'; my @r = \"The\\nend\" =~ /$w$end/msg; \\@r","err":"","out":"ERROR: Global symbol \"$end\" requires explicit package name (did you forget to declare \"my $end\"?) at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Global symbol \"$fh\" requires explicit package name (did you forget to declare \"my $fh\"?) at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; my $z=7; my ( $fh ) =  $z =~/^(\\d+)$/  ||  $fh; print $fh;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Not an ARRAY reference at (eval 1) line 1, <STDIN> line 1.\n","code":"use strict; use warnings; my $h = {\"foo\" => 5, \"bar\" => 6, \"baz\" => 2}; print Dumper(@{$h}->{qw/foo bar baz/});","err_mask":""},{"code":"use strict; use warnings; sub TIEHANDLE { bless [] }; sub READLINE { \"asdf\" }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar readline FH ];","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"asdf\"]In autoload!"},{"out":"[undef]","err":"readline() on unopened filehandle FH at (eval 1) line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use strict; use warnings; sub TIEHANDLE { [] }; sub READLINE { \"asdf\" }; sub AUTOLOAD { print \"In autoload!\"; 42 }; tie *FH, 'main'; [ scalar readline FH ];"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Can't locate ut8.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n","code":"use ut8; sub æ¨å¥½ { say \"æ¨å¥½\" }; æ¨å¥½","err_mask":""},{"err":"","out":"â¥","out_mask":"Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; ${\"âº\"} = \"â¤\"; binmode STDOUT; chr 1 + ord ${\"âº\"}"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã£ÂÂ¢Ã£ÂÂ¼\n","err":"","code":"use utf8; package ãã¹ã; sub new { bless {}, shift} sub ã¢ã¼ { say \"ã¢ã¼\" }; package main; ãã¹ã->new->ã¢ã¼","err_mask":""},{"err":"","out":"ERROR: Can't locate object method \"new\" via package \"Ã£ÂÂÃ£ÂÂ¹Ã£ÂÂ\" at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"use utf8; package ãã¹ã; sub ã¢ã¼ { say \"ã¢ã¼\" }; package main; ãã¹ã->new->ã¢ã¼"},{"out_mask":"Ã¿Ã¿","out":"yo","err":"","code":"use utf8; qw ÌyoÌ","err_mask":""},{"err_mask":"","code":"use utf8; say à¼¡ + à¼¢","out":"ERROR: Unrecognized character \\x{f21}; marked by <-- HERE after utf8; say <-- HERE near column 105 at (eval 1) line 1, <STDIN> line 1.\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"Ã¦ÂÂ¨Ã¥Â¥Â½\n","err":"","code":"use utf8; sub æ¨å¥½ { say \"æ¨å¥½\" }; æ¨å¥½","err_mask":""},{"err_mask":"","code":"use v5.20; say \"hi\"; state $your_business;","err":"","out":"hi\n","out_mask":"Ã¿Ã¿Ã¿"},{"code":"use warnings; $^I = 42; [ \\$^I, 0, eval(\"\\$\\t;\"), $@ ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[\\42,0,\"\\34\",\"\"]","err":""},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my @foo = 0..10; print \"this matches\" if \"0 but true\" ~~ @foo; # thanks, pink_mist++  ","err":"Smartmatch is experimental at (eval 1) line 1, <STDIN> line 1.\n","out":"this matches","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"bar","err":"Scalar value @foo[0] better written as $foo[0] at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; my @foo = qw/bar/; print @foo[0] # Perl911 yours will warn I expect"},{"err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","code":"use warnings; package Foo; sub index { ... }  index('aaaao', 'o');","err":"Ambiguous call resolved as CORE::index(), qualify as such or use & at (eval 1) line 1, <STDIN> line 1.\n","out":"4","out_mask":"Ã¿"},{"code":"use warnings; package Foo; sub index :method { ... }  index('aaaao', 'o');","err_mask":"","out_mask":"Ã¿","err":"","out":"4"},{"err":"","out":"ok","out_mask":"Ã¿Ã¿","err_mask":"","code":"use warnings; use experimental 'switch'; given (1) { when (1) { print \"ok\"; } }"},{"out_mask":"Ã¿Ã¿","out":"ok","err":"given is experimental at (eval 1) line 1, <STDIN> line 1.\nwhen is experimental at (eval 1) line 1, <STDIN> line 1.\n","code":"use warnings; use feature 'switch'; given (1) { when (1) { print \"ok\"; } }","err_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"code":"use warnings; use strict; my $x; for $x (1 .. 10) { last if $x % 2 == 0; } [ $x ]","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"[undef]","err":""},{"code":"v3232.95.3232","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã Â²Â _Ã Â²Â "},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"Ã Â²Â _Ã Â²Â ","code":"v3232.95.3232;  # This looks like Ã  Â² _ Ã  Â² ","err_mask":""},{"code":"warn hey { \"wtf\" }","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","out":"ERROR: Can't locate object method \"hey\" via package \"wtf\" (perhaps you forgot to load \"wtf\"?) at (eval 1) line 1, <STDIN> line 1.\n","err":""},{"err":"","out":"21","out_mask":"Ã¿Ã¿","err_mask":"","code":"$_=\"Whfg nabgure crey unpxre\"; tr/A-Za-z/N-ZA-Mn-za-m/;"},{"err_mask":"","code":"$_=\"Whfg nabgure crey unpxre\"; tr/A-Za-z/N-ZA-Mn-za-m/ * 2; ","out":"42","err":"","out_mask":"Ã¿Ã¿"},{"err_mask":"","code":"$_=\"Whfg nabgure crey unpxre\"; tr/A-Za-z/N-ZA-Mn-za-m/r; ","err":"","out":"Just another perl hacker","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"err":"","out":"Just another perl hacker","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$_=\"Whfg nabgure crey unpxre\"; tr/A-Zn-za-m/N-ZA-Ma-z/r;"},{"code":"write select","err_mask":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"ERROR: Undefined format \"$stdh\" called at (eval 1) line 1, <STDIN> line 1.\n"},{"err_mask":"","code":"\"\\x{02}\" =~ /\\s/","out":"","err":"","out_mask":""},{"out_mask":"Ã¿","out":"a","err":"","code":"%x = ( 1 => \"a\", b => 3 ); $str = \"ab\"; print $x{ $str =~ /(.)$/ }","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","out":"yes","err":"","code":"\"\\x7f\" =~ /[[:cntrl:]]/ ? \"yes\" : \"no\"","err_mask":""},{"err_mask":"","code":"$x = 99; $x =~ s/([0-9])/${1}00/g; say $x","err":"","out":"900900\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿"},{"out":"9009\n","err":"","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"$x = 99; $x =~ s/([0-9])/${1}00/; say $x"},{"err":"","out":"ÃÂ©Ã¢ÂÂºÃ¢ÂÂ¥","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"\\x{a9}\\x{263a}\\x{2665}\""},{"out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err":"","out":"[\"+\",\"-\",\"+\",\"+\",\"-\"]","code":"[ '+-++-X' =~ /([+\\-](?=[+\\-]*X))/g ]","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"$z=0; ( $fh ) =  $z =~/^(\\d+)$/  ||  $fh; print $fh;","err_mask":""},{"out_mask":"Ã¿","out":"1","err":"","code":"$z=7; ( $fh ) =  $z =~/^(\\d+)$/  ||  $fh; print $fh;","err_mask":""},{"out_mask":"Ã¿Ã¿Ã¿","err":"","out":"YES","code":"$z='a'; my( $fh ) =  $z =~/^(\\d+)$/  ||  sub {wantarray?'YES':'NO'}->(); print $fh;","err_mask":""},{"err":"","out":"NO","out_mask":"Ã¿Ã¿","err_mask":"","code":"$z='a'; my( $fh ) =  $z =~/^(\\d+)$/  ||  (wantarray?'YES':'NO'); print $fh;"},{"err":"","out":"ERROR: Unrecognized character \\x98; marked by <-- HERE after  m Ã¢ÂÂzofÃ¢<-- HERE near column 112 at (eval 1) line 1, <STDIN> line 1.\n","out_mask":"Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿Ã¿","err_mask":"","code":"\"Zoffix\" =~ m âzofâi ? 'yes' : 'nope'"}]}