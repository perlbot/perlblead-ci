{
   "tests" : [
      {
         "out" : "0",
         "err_mask" : "",
         "code" : "\"0.0\"+0 ? 1 : 0",
         "out_mask" : "ff",
         "err" : ""
      },
      {
         "code" : "\"0.0\" ? 1 : 0",
         "out_mask" : "ff",
         "err" : "",
         "out" : "1",
         "err_mask" : ""
      },
      {
         "err_mask" : "",
         "out" : "0",
         "err" : "",
         "out_mask" : "ff",
         "code" : "0.0 ? 1 : 0"
      },
      {
         "out" : "0",
         "err_mask" : "",
         "code" : "\"0e0\"+\"0e0\" ? 1 : 0",
         "err" : "",
         "out_mask" : "ff"
      },
      {
         "err_mask" : "",
         "out" : "1",
         "err" : "",
         "out_mask" : "ff",
         "code" : "\"0e0\" ? 1 : 0"
      },
      {
         "code" : "0e0 ? 1 : 0",
         "out_mask" : "ff",
         "err" : "",
         "out" : "0",
         "err_mask" : ""
      },
      {
         "code" : "0xffff == 0b1111111111111111",
         "err" : "",
         "out_mask" : "ff",
         "out" : "1",
         "err_mask" : ""
      },
      {
         "err_mask" : "",
         "out" : "1",
         "out_mask" : "ff",
         "err" : "",
         "code" : "1"
      },
      {
         "out" : "1",
         "err_mask" : "",
         "code" : "\"1\"",
         "err" : "",
         "out_mask" : "ff"
      },
      {
         "err_mask" : "",
         "out" : "ERROR: Illegal division by zero at (eval 1) line 1, <STDIN> line 1.\n",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "1/0"
      },
      {
         "code" : "1.0 == 3.0/2.999999999999999999999999999999999999999999999",
         "err" : "",
         "out_mask" : "ff",
         "out" : "1",
         "err_mask" : ""
      },
      {
         "err" : "",
         "out_mask" : "ff",
         "code" : "1.0 == 3.0/3.0",
         "err_mask" : "",
         "out" : "1"
      },
      {
         "err_mask" : "",
         "out" : "[24]",
         "err" : "",
         "out_mask" : "ffffffff",
         "code" : "[20+4]"
      },
      {
         "code" : "BEGIN { package v5::Please; $INC{'v5/Please.pm'} = 1; sub import { print q[OK] } }; use v5::Please;",
         "err" : "",
         "out_mask" : "ffff",
         "out" : "OK",
         "err_mask" : ""
      },
      {
         "out" : "",
         "err_mask" : "",
         "code" : "BEGIN { package v5::Please; $INC{'v5/Please.pm'} = 1; sub import { q[OK] } }; use v5::Please;",
         "out_mask" : "",
         "err" : ""
      },
      {
         "out_mask" : "ffffffffffffffffffff",
         "err" : "",
         "code" : "{foo => 1, foo => 2}",
         "err_mask" : "",
         "out" : "{foo => 2}"
      },
      {
         "err_mask" : "",
         "out" : "3",
         "out_mask" : "ff",
         "err" : "",
         "code" : "($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9))"
      },
      {
         "err_mask" : "",
         "out" : "NaN",
         "err" : "",
         "out_mask" : "ffffff",
         "code" : "($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9)); $nan"
      },
      {
         "err_mask" : "",
         "out" : "NaN",
         "err" : "",
         "out_mask" : "ffffff",
         "code" : "($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9)); use List::Util qw/max/; max(1.0, $nan)"
      },
      {
         "code" : "($inf, $neginf, $nan) = (9**9**9, -9**9**9, -sin(9**9**9)); use List::Util qw/max/; max($nan, 1.0)",
         "out_mask" : "ff",
         "err" : "",
         "out" : "1",
         "err_mask" : ""
      },
      {
         "code" : "length \"America/Argentina/Buenos_Aires\"",
         "err" : "",
         "out_mask" : "ffff",
         "out" : "30",
         "err_mask" : ""
      },
      {
         "out" : "47",
         "err_mask" : "",
         "code" : "length qq{{\"customer_id\":114631,\"survey_id\":485,\"ttl\":10}};",
         "out_mask" : "ffff",
         "err" : ""
      },
      {
         "err_mask" : "",
         "out" : "46",
         "err" : "",
         "out_mask" : "ffff",
         "code" : "length \"\\t->alloc called: 12345678 12345678 12345 12345\""
      },
      {
         "out" : "\\0",
         "err_mask" : "",
         "code" : "my $a = [0]; sub foo {my $b = shift; return \\$b->[0]}; foo $a",
         "out_mask" : "ffff",
         "err" : ""
      },
      {
         "err_mask" : "",
         "out" : "[1]",
         "err" : "",
         "out_mask" : "ffffff",
         "code" : "my $a = [0]; sub foo {my $b = shift; return \\$b->[0]}; ${foo $a} = 1; $a"
      },
      {
         "code" : "my @a = qw/a 1 b 2 c 3/; ${@a}->{a};",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "out" : "ERROR: Modification of a read-only value attempted at (eval 1) line 1, <STDIN> line 1.\n",
         "err_mask" : ""
      },
      {
         "err_mask" : "",
         "out" : "ERROR: syntax error at (eval 1) line 1, near \"}->\"\n",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "my @a = qw/a 1 b 2 c 3/; {@A}->{a}"
      },
      {
         "code" : "my @a = qw/a 1 b 2 c 3/; {+@A}->{a}",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "out" : "ERROR: syntax error at (eval 1) line 1, near \"}->\"\n",
         "err_mask" : ""
      },
      {
         "err_mask" : "",
         "out" : "",
         "err" : "",
         "out_mask" : "",
         "code" : "my @a = qw/a 1 b 2 c 3/; ${+@A}{a}"
      },
      {
         "code" : "my @a = qw/a 1 b 2 c 3/; my $h = {@a}; $h",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "out" : "{b => 2,c => 3,a => 1}",
         "err_mask" : ""
      },
      {
         "out_mask" : "ffff",
         "err" : "",
         "code" : "my @a = qw/a 1 b 2 c 3/; my $h = {@A}; $h",
         "err_mask" : "",
         "out" : "{}"
      },
      {
         "out" : "[]",
         "err_mask" : "",
         "code" : "my $b = []; $a = \\$b;  $$a = []; $a = $$a; $a = []; $b",
         "err" : "",
         "out_mask" : "ffff"
      },
      {
         "code" : "my($this)=qw(viogel$pviT$vilxsre$xwyN); my(@arr)=split(//,$this);  foreach(reverse(@arr)){ print(chr(ord($_)-(1<<2))); } print \"\\n\";",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffff",
         "out" : "Just another Perl hacker\n",
         "err_mask" : ""
      },
      {
         "out" : "�",
         "err_mask" : "",
         "code" : "\"\\N{NEL}\"",
         "err" : "",
         "out_mask" : "ffffff"
      },
      {
         "err_mask" : "",
         "out" : "💩",
         "out_mask" : "ffffffff",
         "err" : "",
         "code" : "\"\\N{PILE OF POO}\""
      },
      {
         "code" : "\"\\N{SNOWMAN}\"",
         "err" : "",
         "out_mask" : "ffffff",
         "out" : "☃",
         "err_mask" : ""
      },
      {
         "out" : "pi",
         "err_mask" : "",
         "code" : "pi",
         "err" : "",
         "out_mask" : "ffff"
      },
      {
         "err_mask" : "",
         "out" : "foo",
         "out_mask" : "ffffff",
         "err" : "",
         "code" : "print \"foo\" if (+{});"
      },
      {
         "err" : "",
         "out_mask" : "ff",
         "code" : "print \"foo\" if (keys %{+{}});",
         "err_mask" : "",
         "out" : "0"
      },
      {
         "err_mask" : "",
         "out" : "ERROR: Can't find string terminator \"�\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "print q;This is a test;;"
      },
      {
         "out_mask" : "ffffffffffffffff",
         "err" : "",
         "code" : "[quotemeta \"\\n\"]",
         "err_mask" : "",
         "out" : "[\"\\\\\\n\"]"
      },
      {
         "err" : "",
         "out_mask" : "ffff",
         "code" : "quotemeta \"\\n\"",
         "err_mask" : "",
         "out" : "\\\n"
      },
      {
         "out_mask" : "ffffffffffffffff",
         "err" : "",
         "code" : "[quotemeta \"\\n\" =~ s/\\\\\\n/\\n/gr]",
         "err_mask" : "",
         "out" : "[\"\\\\\\n\"]"
      },
      {
         "out" : "00001101",
         "err_mask" : "",
         "code" : "sprintf \"%08b\", 015  # dick",
         "err" : "",
         "out_mask" : "ffffffffffffffff"
      },
      {
         "err_mask" : "",
         "out" : "0xffff",
         "err" : "",
         "out_mask" : "ffffffffffff",
         "code" : "sprintf('0x%x', 0b1111111111111111)"
      },
      {
         "err_mask" : "",
         "out" : "    1101",
         "err" : "",
         "out_mask" : "ffffffffffffffff",
         "code" : "sprintf \"%8b\", 015"
      },
      {
         "err_mask" : "",
         "out" : "$VAR1 = [\n          'main'\n        ];\n$VAR2 = 'main::boo';\n",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD)}; my $foo = \"boo\"; __PACKAGE__->$foo"
      },
      {
         "out" : "ERROR: syntax error at (eval 1) line 1, at EOF\n",
         "err_mask" : "",
         "code" : "sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD}; my $foo = \"boo\"; __PACKAGE__->$foo",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : ""
      },
      {
         "out" : "ERROR: syntax error at (eval 1) line 1, near \"->\"\"\"\n",
         "err_mask" : "",
         "code" : "sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD)}; my $foo = \"\"; __PACKAGE__->\"\"",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      },
      {
         "out" : "$VAR1 = [\n          'foo'\n        ];\n$VAR2 = 'main::main';\n",
         "err_mask" : "",
         "code" : "sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD)}; my $foo = \"\"; __PACKAGE__->(\"foo\")",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : ""
      },
      {
         "out" : "$VAR1 = [\n          'main'\n        ];\n$VAR2 = 'main::';\n",
         "err_mask" : "",
         "code" : "sub AUTOLOAD {Dumper(\\@_, $AUTOLOAD)}; my $foo = \"\"; __PACKAGE__->$foo",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      },
      {
         "err_mask" : "",
         "out" : "$VAR1 = 'main';\n",
         "out_mask" : "ffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "sub AUTOLOAD {Dumper@_}; my $foo = \"boo\"; __PACKAGE__->$foo"
      },
      {
         "code" : "sub AUTOLOAD {Dumper@_}; my $foo = \"\"; __PACKAGE__->$foo",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffff",
         "out" : "$VAR1 = 'main';\n",
         "err_mask" : ""
      },
      {
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "use CGI;",
         "err_mask" : "",
         "out" : "ERROR: Can't locate CGI.pm:   (null): Too many open files at (eval 1) line 1, <STDIN> line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n"
      },
      {
         "out" : "ERROR: Can't enable unknown feature signature at (eval 1) line 1.\nBEGIN failed--compilation aborted at (eval 1) line 1, <STDIN> line 1.\n",
         "err_mask" : "",
         "code" : "use experimental 'signature';",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      },
      {
         "out" : "",
         "err_mask" : "",
         "code" : "use experimental 'signatures';",
         "err" : "",
         "out_mask" : ""
      },
      {
         "code" : "use experimental 'signatures'; sub foo($bar) {print $bar, $bar}; foo(\"hola hoops \");",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffff",
         "out" : "hola hoops hola hoops ",
         "err_mask" : ""
      },
      {
         "err_mask" : "",
         "out" : "ERROR: object is not of type Cpanel::JSON::XS at (eval 1) line 1, <STDIN> line 1.\n",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "use JSON::MaybeXS; JSON->decode(q/{\"foo\": undefined, \"bar\": null}/)"
      },
      {
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "use JSON::MaybeXS; JSON->new()->decode(q/{\"foo\": undefined, \"bar\": null}/)",
         "err_mask" : "",
         "out" : "ERROR: malformed JSON string, neither tag, array, object, number, string or atom, at character offset 8 (before \"undefined, \"bar\": nu...\") at (eval 1) line 1, <STDIN> line 1.\n"
      },
      {
         "code" : "use strict; my @foo; my $x = $foo[1];",
         "err" : "",
         "out_mask" : "",
         "out" : "",
         "err_mask" : ""
      },
      {
         "err_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "out" : "[1]",
         "out_mask" : "ffffff",
         "err" : "Argument \"bar\" isn't numeric in array element at (eval 1) line 1, <STDIN> line 1.\n",
         "code" : "use strict; use warnings; my @x; $x['bar'] = 1; [@x]"
      },
      {
         "err_mask" : "",
         "out" : "ERROR: Unrecognized character \\x{37e}; marked by <-- HERE after e utf8; *\"<-- HERE near column 103 at (eval 1) line 1, <STDIN> line 1.\n",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "use utf8; *\";\" = {\"Hello World\"};"
      },
      {
         "code" : "use utf8; my $😫=\"hi\";",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "out" : "ERROR: Unrecognized character \\x{1f62b}; marked by <-- HERE after utf8; my $<-- HERE near column 105 at (eval 1) line 1, <STDIN> line 1.\n",
         "err_mask" : ""
      },
      {
         "err_mask" : "",
         "out" : "ERROR: Can't find string terminator \"�\" anywhere before EOF at (eval 1) line 1, <STDIN> line 1.\n",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "use utf8; print q;This is a test;;"
      },
      {
         "err_mask" : "",
         "out" : "ERROR: Unrecognized character \\x{37e}; marked by <-- HERE after se utf8; *<-- HERE near column 102 at (eval 1) line 1, <STDIN> line 1.\n",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "use utf8; *; = sub {\"Hello World\"};"
      },
      {
         "err_mask" : "",
         "out" : "ERROR: Illegal declaration of anonymous subroutine at (eval 1) line 1, <STDIN> line 1.\n",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "use utf8; sub ; {\"Hello World\"};"
      },
      {
         "err_mask" : "",
         "out" : "â-̅1 2Â³ âÏ and it was really strange",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "\"√-\\x{0305}1 2³ ∑π and it was really strange\""
      },
      {
         "err_mask" : "",
         "out" : "â-̅1̅ 2Â³ âÏ and it was really strange",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "\"√-\\x{0305}1\\x{0305} 2³ ∑π and it was really strange\""
      },
      {
         "code" : "\"√-\\x{035E}1 2³ ∑π and it was really strange\"",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "out" : "â-͞1 2Â³ âÏ and it was really strange",
         "err_mask" : ""
      },
      {
         "code" : "\"√-\\x035E1 2³ ∑π and it was really strange\"",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "out" : "√-\u00035E1 2³ ∑π and it was really strange",
         "err_mask" : ""
      },
      {
         "out" : "â-‾1 2Â³ âÏ and it was really strange",
         "err_mask" : "",
         "code" : "\"√-\\x{203E}1 2³ ∑π and it was really strange\"",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      },
      {
         "code" : "\"√\\x{2212}\\x{0305}1\\x{0305} 2³ ∑π and it was really strange\"",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "out" : "â−̅1̅ 2Â³ âÏ and it was really strange",
         "err_mask" : ""
      },
      {
         "code" : "\"\\x85\"",
         "err" : "",
         "out_mask" : "ffffff",
         "out" : "�",
         "err_mask" : ""
      },
      {
         "err_mask" : "",
         "out" : "18446744073709551615",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "~-~()"
      },
      {
         "out_mask" : "ffffff",
         "err" : "",
         "code" : " [ \"(\" =~ /[(]/ ]",
         "err_mask" : "",
         "out" : "[1]"
      },
      {
         "code" : " [ \"]\" =~ /[\\]]/ ]",
         "err" : "",
         "out_mask" : "ffffff",
         "out" : "[1]",
         "err_mask" : ""
      },
      {
         "out_mask" : "ffff",
         "err" : "",
         "code" : "- - _",
         "err_mask" : "",
         "out" : "+_"
      },
      {
         "code" : "- '-'",
         "out_mask" : "ff",
         "err" : "",
         "out" : "+",
         "err_mask" : ""
      },
      {
         "out" : "-HASH(0x3662b88)",
         "err_mask" : "",
         "code" : "-(''.{})",
         "err" : "",
         "out_mask" : "ffffffffffffffffff000000ffffffff"
      },
      {
         "err_mask" : "",
         "out" : "-81361800",
         "err" : "",
         "out_mask" : "000000000000000000",
         "code" : "-{}"
      },
      {
         "out_mask" : "",
         "err" : "",
         "code" : ";;",
         "err_mask" : "",
         "out" : ""
      },
      {
         "out" : "ERROR: syntax error at (eval 1) line 1, near \"; :\"\n",
         "err_mask" : "",
         "code" : ":)",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : ""
      },
      {
         "err_mask" : "",
         "out" : "ERROR: syntax error at (eval 1) line 1, near \"; ?\"\n",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "?"
      },
      {
         "code" : "?^?",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "out" : "ERROR: syntax error at (eval 1) line 1, near \"; ?\"\n",
         "err_mask" : ""
      },
      {
         "code" : "/^+/",
         "err" : "",
         "out_mask" : "ff",
         "out" : "1",
         "err_mask" : ""
      },
      {
         "err" : "",
         "out_mask" : "",
         "code" : "/[^]]/",
         "err_mask" : "",
         "out" : ""
      },
      {
         "err_mask" : "",
         "out" : "ERROR: Unmatched [ in regex; marked by <-- HERE in m/[ <-- HERE / at (eval 1) line 1, <STDIN> line 1.\n",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "/[/"
      },
      {
         "err_mask" : "",
         "out" : "1",
         "err" : "",
         "out_mask" : "ff",
         "code" : "/${#}/"
      },
      {
         "code" : "/$#/",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "out" : "ERROR: syntax error at (eval 1) line 1, near \"; /$#/\"\n",
         "err_mask" : ""
      },
      {
         "code" : "/$#//",
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "out" : "ERROR: syntax error at (eval 1) line 1, near \"; /$#/\"\n",
         "err_mask" : ""
      },
      {
         "err_mask" : "",
         "out" : "ERROR: Quantifier follows nothing in regex; marked by <-- HERE in m/* <-- HERE */ at (eval 1) line 1, <STDIN> line 1.\n",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "err" : "",
         "code" : "/**/"
      },
      {
         "err" : "",
         "out_mask" : "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
         "code" : "...",
         "err_mask" : "",
         "out" : "ERROR: Unimplemented at (eval 1) line 1, <STDIN> line 1.\n"
      }
   ]
}
